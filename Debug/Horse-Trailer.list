
Horse-Trailer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  080092f8  080092f8  0000a2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a30  08009a30  0000b314  2**0
                  CONTENTS
  4 .ARM          00000008  08009a30  08009a30  0000aa30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a38  08009a38  0000b314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009a38  08009a38  0000aa38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08009a40  08009a40  0000aa40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009a48  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  08009c1c  0000b1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08009cbc  0000b274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b28  20000314  08009d5c  0000b314  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000e3c  08009d5c  0000be3c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b314  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019635  00000000  00000000  0000b342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003429  00000000  00000000  00024977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001278  00000000  00000000  00027da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e41  00000000  00000000  00029018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002dcd9  00000000  00000000  00029e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000188cd  00000000  00000000  00057b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00105662  00000000  00000000  000703ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00175a61  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005e90  00000000  00000000  00175aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006e  00000000  00000000  0017b934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	080092dc 	.word	0x080092dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	080092dc 	.word	0x080092dc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <_ZN20DFRobot_OxygenSensorC1EP19__I2C_HandleTypeDef>:
 * @date 2022-08-02
 * @url https://github.com/DFRobot/DFRobot_OxygenSensor
 */
#include "DFRobot_OxygenSensor.h"

DFRobot_OxygenSensor::DFRobot_OxygenSensor(I2C_HandleTypeDef *pI2C) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f04f 0200 	mov.w	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	330c      	adds	r3, #12
 80005f6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f006 fe10 	bl	8007222 <memset>
	this->_pI2C = pI2C;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	601a      	str	r2, [r3, #0]
}
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <_ZN20DFRobot_OxygenSensorD1Ev>:

DFRobot_OxygenSensor::~DFRobot_OxygenSensor() {
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
	this->_pI2C = NULL;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
}
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <_ZN20DFRobot_OxygenSensor5beginEh>:

bool DFRobot_OxygenSensor::begin(uint8_t addr) {
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	460b      	mov	r3, r1
 8000638:	70fb      	strb	r3, [r7, #3]
	this->_addr = addr;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	78fa      	ldrb	r2, [r7, #3]
 800063e:	711a      	strb	r2, [r3, #4]
	if (HAL_I2C_IsDeviceReady(_pI2C, _addr << 1, 3, HAL_MAX_DELAY) == HAL_OK) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	b299      	uxth	r1, r3
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	2203      	movs	r2, #3
 8000652:	f002 fec7 	bl	80033e4 <HAL_I2C_IsDeviceReady>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	bf0c      	ite	eq
 800065c:	2301      	moveq	r3, #1
 800065e:	2300      	movne	r3, #0
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <_ZN20DFRobot_OxygenSensor5beginEh+0x3c>
		return true;
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <_ZN20DFRobot_OxygenSensor5beginEh+0x3e>
	}
	return false;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <_ZN20DFRobot_OxygenSensor9readFlashEv>:

void DFRobot_OxygenSensor::readFlash() {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	6078      	str	r0, [r7, #4]
	uint8_t value = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	73fb      	strb	r3, [r7, #15]
	uint8_t reg = GET_KEY_REGISTER;
 8000680:	230a      	movs	r3, #10
 8000682:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(_pI2C, _addr << 1, &reg, 1, HAL_MAX_DELAY);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	b299      	uxth	r1, r3
 8000690:	f107 020e 	add.w	r2, r7, #14
 8000694:	f04f 33ff 	mov.w	r3, #4294967295
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	f002 fc94 	bl	8002fc8 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80006a0:	2032      	movs	r0, #50	@ 0x32
 80006a2:	f001 f9a9 	bl	80019f8 <HAL_Delay>

	HAL_I2C_Master_Receive(_pI2C, _addr << 1, &value, 1, HAL_MAX_DELAY);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	b299      	uxth	r1, r3
 80006b2:	f107 020f 	add.w	r2, r7, #15
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	f002 fd9b 	bl	80031f8 <HAL_I2C_Master_Receive>

	if (value == 0) {
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d103      	bne.n	80006d0 <_ZN20DFRobot_OxygenSensor9readFlashEv+0x5c>
		this->_Key = 20.9 / 120.0;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a09      	ldr	r2, [pc, #36]	@ (80006f0 <_ZN20DFRobot_OxygenSensor9readFlashEv+0x7c>)
 80006cc:	609a      	str	r2, [r3, #8]
	} else {
		this->_Key = (float) value / 1000.0;
	}

}
 80006ce:	e00b      	b.n	80006e8 <_ZN20DFRobot_OxygenSensor9readFlashEv+0x74>
		this->_Key = (float) value / 1000.0;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	ee07 3a90 	vmov	s15, r3
 80006d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006da:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80006f4 <_ZN20DFRobot_OxygenSensor9readFlashEv+0x80>
 80006de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	3e3258bf 	.word	0x3e3258bf
 80006f4:	447a0000 	.word	0x447a0000

080006f8 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh>:
		keyValue = (vol / mv) * 1000;
		i2cWrite(AUTUAL_SET_REGISTER, keyValue);
	}
}

float DFRobot_OxygenSensor::getOxygenData(uint8_t collectNum) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
	uint8_t rxbuf[3] = { 0 };
 8000704:	4b4e      	ldr	r3, [pc, #312]	@ (8000840 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x148>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	81bb      	strh	r3, [r7, #12]
 800070a:	2300      	movs	r3, #0
 800070c:	73bb      	strb	r3, [r7, #14]
	uint8_t reg = OXYGEN_DATA_REGISTER;
 800070e:	2303      	movs	r3, #3
 8000710:	72fb      	strb	r3, [r7, #11]
	static uint8_t i = 0, j = 0;

	readFlash();
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ffae 	bl	8000674 <_ZN20DFRobot_OxygenSensor9readFlashEv>

	if (collectNum > 0) {
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	2b00      	cmp	r3, #0
 800071c:	f000 8084 	beq.w	8000828 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x130>

		for (j = collectNum - 1; j > 0; j--) {
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	3b01      	subs	r3, #1
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b47      	ldr	r3, [pc, #284]	@ (8000844 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x14c>)
 8000728:	701a      	strb	r2, [r3, #0]
 800072a:	e017      	b.n	800075c <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x64>
			oxygenData[j] = oxygenData[j - 1];
 800072c:	4b45      	ldr	r3, [pc, #276]	@ (8000844 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x14c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3b01      	subs	r3, #1
 8000732:	4a44      	ldr	r2, [pc, #272]	@ (8000844 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x14c>)
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	4610      	mov	r0, r2
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	3302      	adds	r3, #2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	3304      	adds	r3, #4
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	1c83      	adds	r3, r0, #2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	440b      	add	r3, r1
 800074c:	3304      	adds	r3, #4
 800074e:	601a      	str	r2, [r3, #0]
		for (j = collectNum - 1; j > 0; j--) {
 8000750:	4b3c      	ldr	r3, [pc, #240]	@ (8000844 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x14c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	3b01      	subs	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b3a      	ldr	r3, [pc, #232]	@ (8000844 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x14c>)
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	4b39      	ldr	r3, [pc, #228]	@ (8000844 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x14c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1e3      	bne.n	800072c <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x34>
		}
		HAL_I2C_Master_Transmit(_pI2C, _addr << 1, &reg, 1, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	b299      	uxth	r1, r3
 8000770:	f107 020b 	add.w	r2, r7, #11
 8000774:	f04f 33ff 	mov.w	r3, #4294967295
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2301      	movs	r3, #1
 800077c:	f002 fc24 	bl	8002fc8 <HAL_I2C_Master_Transmit>
		HAL_Delay(100);
 8000780:	2064      	movs	r0, #100	@ 0x64
 8000782:	f001 f939 	bl	80019f8 <HAL_Delay>
		HAL_I2C_Master_Receive(_pI2C, _addr << 1, rxbuf, 3, HAL_MAX_DELAY);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	b299      	uxth	r1, r3
 8000792:	f107 020c 	add.w	r2, r7, #12
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2303      	movs	r3, #3
 800079e:	f002 fd2b 	bl	80031f8 <HAL_I2C_Master_Receive>

		oxygenData[0] = (_Key)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80007a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
				* (((float) rxbuf[0]) + ((float) rxbuf[1] / 10.0)
 80007ac:	7b3b      	ldrb	r3, [r7, #12]
 80007ae:	ee07 3a90 	vmov	s15, r3
 80007b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80007ba:	7b7b      	ldrb	r3, [r7, #13]
 80007bc:	ee07 3a90 	vmov	s15, r3
 80007c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007c4:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80007c8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80007cc:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80007d0:	ee35 5b07 	vadd.f64	d5, d5, d7
						+ ((float) rxbuf[2] / 100.0));
 80007d4:	7bbb      	ldrb	r3, [r7, #14]
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007de:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80007e2:	ed9f 3b15 	vldr	d3, [pc, #84]	@ 8000838 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x140>
 80007e6:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80007ea:	ee35 7b07 	vadd.f64	d7, d5, d7
				* (((float) rxbuf[0]) + ((float) rxbuf[1] / 10.0)
 80007ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		oxygenData[0] = (_Key)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	edc3 7a03 	vstr	s15, [r3, #12]

		if (i < collectNum)
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x150>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	78fa      	ldrb	r2, [r7, #3]
 8000802:	429a      	cmp	r2, r3
 8000804:	d905      	bls.n	8000812 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x11a>
			i++;
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x150>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x150>)
 8000810:	701a      	strb	r2, [r3, #0]
		return getAverageNum(oxygenData, i);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	330c      	adds	r3, #12
 8000816:	4a0c      	ldr	r2, [pc, #48]	@ (8000848 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x150>)
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f000 f815 	bl	800084c <_ZN20DFRobot_OxygenSensor13getAverageNumEPfh>
 8000822:	eef0 7a40 	vmov.f32	s15, s0
 8000826:	e001      	b.n	800082c <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x134>
	} else {
		return -1.0;
 8000828:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
	}
}
 800082c:	eeb0 0a67 	vmov.f32	s0, s15
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	00000000 	.word	0x00000000
 800083c:	40590000 	.word	0x40590000
 8000840:	080092f8 	.word	0x080092f8
 8000844:	20000331 	.word	0x20000331
 8000848:	20000330 	.word	0x20000330

0800084c <_ZN20DFRobot_OxygenSensor13getAverageNumEPfh>:

float DFRobot_OxygenSensor::getAverageNum(float bArray[], uint8_t len) {
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	@ 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	4613      	mov	r3, r2
 8000858:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	double bTemp = 0;
 800085a:	f04f 0200 	mov.w	r2, #0
 800085e:	f04f 0300 	mov.w	r3, #0
 8000862:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (i = 0; i < len; i++) {
 8000866:	2300      	movs	r3, #0
 8000868:	77fb      	strb	r3, [r7, #31]
 800086a:	e010      	b.n	800088e <_ZN20DFRobot_OxygenSensor13getAverageNumEPfh+0x42>
		bTemp += bArray[i];
 800086c:	7ffb      	ldrb	r3, [r7, #31]
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	68ba      	ldr	r2, [r7, #8]
 8000872:	4413      	add	r3, r2
 8000874:	edd3 7a00 	vldr	s15, [r3]
 8000878:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800087c:	ed97 6b04 	vldr	d6, [r7, #16]
 8000880:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000884:	ed87 7b04 	vstr	d7, [r7, #16]
	for (i = 0; i < len; i++) {
 8000888:	7ffb      	ldrb	r3, [r7, #31]
 800088a:	3301      	adds	r3, #1
 800088c:	77fb      	strb	r3, [r7, #31]
 800088e:	7ffa      	ldrb	r2, [r7, #31]
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	429a      	cmp	r2, r3
 8000894:	d3ea      	bcc.n	800086c <_ZN20DFRobot_OxygenSensor13getAverageNumEPfh+0x20>
	}
	return bTemp / (float) len;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	ee07 3a90 	vmov	s15, r3
 800089c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008a4:	ed97 5b04 	vldr	d5, [r7, #16]
 80008a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80008b0:	eeb0 0a67 	vmov.f32	s0, s15
 80008b4:	3724      	adds	r7, #36	@ 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <_Z10measure_COv>:
extern uint16_t oxygen;
char buffer[16];
const float RL = 9.62;  // Measured value of the pull-up resistor (10 kΩ)
const float R0 = 1.0; // Needs to be calibrated in fresh air

void measure_CO(void){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1);
 80008c6:	4834      	ldr	r0, [pc, #208]	@ (8000998 <_Z10measure_COv+0xd8>)
 80008c8:	f001 f8fe 	bl	8001ac8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80008cc:	2164      	movs	r1, #100	@ 0x64
 80008ce:	4832      	ldr	r0, [pc, #200]	@ (8000998 <_Z10measure_COv+0xd8>)
 80008d0:	f001 f9fc 	bl	8001ccc <HAL_ADC_PollForConversion>
	float COsenosorValue = HAL_ADC_GetValue(&hadc1);
 80008d4:	4830      	ldr	r0, [pc, #192]	@ (8000998 <_Z10measure_COv+0xd8>)
 80008d6:	f001 fa84 	bl	8001de2 <HAL_ADC_GetValue>
 80008da:	ee07 0a90 	vmov	s15, r0
 80008de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008e2:	edc7 7a03 	vstr	s15, [r7, #12]
	HAL_ADC_Stop(&hadc1);
 80008e6:	482c      	ldr	r0, [pc, #176]	@ (8000998 <_Z10measure_COv+0xd8>)
 80008e8:	f001 f9bc 	bl	8001c64 <HAL_ADC_Stop>

	float Rs = ((1023.0 / COsenosorValue) - 1) * RL;
 80008ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80008f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008f4:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 8000980 <_Z10measure_COv+0xc0>
 80008f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008fc:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8000900:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000904:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000988 <_Z10measure_COv+0xc8>
 8000908:	ee27 7b06 	vmul.f64	d7, d7, d6
 800090c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000910:	edc7 7a02 	vstr	s15, [r7, #8]
	float ratio = Rs/R0;
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	607b      	str	r3, [r7, #4]
	float ppm = powf(10, (log10f(ratio) - 1.7) / -1.5);
 8000918:	ed97 0a01 	vldr	s0, [r7, #4]
 800091c:	f005 fc6a 	bl	80061f4 <log10f>
 8000920:	eef0 7a40 	vmov.f32	s15, s0
 8000924:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000928:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8000990 <_Z10measure_COv+0xd0>
 800092c:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000930:	eebf 5b08 	vmov.f64	d5, #248	@ 0xbfc00000 -1.5
 8000934:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000938:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800093c:	eef0 0a67 	vmov.f32	s1, s15
 8000940:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000944:	f005 fca4 	bl	8006290 <powf>
 8000948:	ed87 0a00 	vstr	s0, [r7]

	sprintf(buffer, "000%.4f\r\n", ppm);
 800094c:	edd7 7a00 	vldr	s15, [r7]
 8000950:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000954:	ec53 2b17 	vmov	r2, r3, d7
 8000958:	4910      	ldr	r1, [pc, #64]	@ (800099c <_Z10measure_COv+0xdc>)
 800095a:	4811      	ldr	r0, [pc, #68]	@ (80009a0 <_Z10measure_COv+0xe0>)
 800095c:	f006 fbfe 	bl	800715c <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000960:	480f      	ldr	r0, [pc, #60]	@ (80009a0 <_Z10measure_COv+0xe0>)
 8000962:	f7ff fcbd 	bl	80002e0 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	b29a      	uxth	r2, r3
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	490c      	ldr	r1, [pc, #48]	@ (80009a0 <_Z10measure_COv+0xe0>)
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <_Z10measure_COv+0xe4>)
 8000972:	f004 fc45 	bl	8005200 <HAL_UART_Transmit>
}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	00000000 	.word	0x00000000
 8000984:	408ff800 	.word	0x408ff800
 8000988:	a0000000 	.word	0xa0000000
 800098c:	40233d70 	.word	0x40233d70
 8000990:	33333333 	.word	0x33333333
 8000994:	3ffb3333 	.word	0x3ffb3333
 8000998:	2000037c 	.word	0x2000037c
 800099c:	080092fc 	.word	0x080092fc
 80009a0:	20000334 	.word	0x20000334
 80009a4:	200004c8 	.word	0x200004c8

080009a8 <_Z10measure_O2v>:

void measure_O2(void){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
	float oxygenConcentration = oxygenSensor.getOxygenData(10);
 80009ae:	210a      	movs	r1, #10
 80009b0:	4815      	ldr	r0, [pc, #84]	@ (8000a08 <_Z10measure_O2v+0x60>)
 80009b2:	f7ff fea1 	bl	80006f8 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh>
 80009b6:	ed87 0a01 	vstr	s0, [r7, #4]
	oxygen = oxygenSensor.getOxygenData(10);
 80009ba:	210a      	movs	r1, #10
 80009bc:	4812      	ldr	r0, [pc, #72]	@ (8000a08 <_Z10measure_O2v+0x60>)
 80009be:	f7ff fe9b 	bl	80006f8 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh>
 80009c2:	eef0 7a40 	vmov.f32	s15, s0
 80009c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ca:	ee17 3a90 	vmov	r3, s15
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <_Z10measure_O2v+0x64>)
 80009d2:	801a      	strh	r2, [r3, #0]
	sprintf(buffer, "001%.4f\r\n", oxygenConcentration);
 80009d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80009d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009dc:	ec53 2b17 	vmov	r2, r3, d7
 80009e0:	490b      	ldr	r1, [pc, #44]	@ (8000a10 <_Z10measure_O2v+0x68>)
 80009e2:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <_Z10measure_O2v+0x6c>)
 80009e4:	f006 fbba 	bl	800715c <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 80009e8:	480a      	ldr	r0, [pc, #40]	@ (8000a14 <_Z10measure_O2v+0x6c>)
 80009ea:	f7ff fc79 	bl	80002e0 <strlen>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	4907      	ldr	r1, [pc, #28]	@ (8000a14 <_Z10measure_O2v+0x6c>)
 80009f8:	4807      	ldr	r0, [pc, #28]	@ (8000a18 <_Z10measure_O2v+0x70>)
 80009fa:	f004 fc01 	bl	8005200 <HAL_UART_Transmit>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000b40 	.word	0x20000b40
 8000a0c:	20000cdc 	.word	0x20000cdc
 8000a10:	08009308 	.word	0x08009308
 8000a14:	20000334 	.word	0x20000334
 8000a18:	200004c8 	.word	0x200004c8

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a20:	f000 ff8d 	bl	800193e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a24:	f000 f820 	bl	8000a68 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a28:	f000 fa68 	bl	8000efc <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 8000a2c:	f000 f8f8 	bl	8000c20 <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 8000a30:	f000 f9fe 	bl	8000e30 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000a34:	f000 fa30 	bl	8000e98 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_UART5_Init();
 8000a38:	f000 f992 	bl	8000d60 <_ZL13MX_UART5_Initv>
  MX_ADC1_Init();
 8000a3c:	f000 f894 	bl	8000b68 <_ZL12MX_ADC1_Initv>
  MX_UART7_Init();
 8000a40:	f000 f9c2 	bl	8000dc8 <_ZL13MX_UART7_Initv>
  MX_I2C1_Init();
 8000a44:	f000 f93e 	bl	8000cc4 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  oxygenSensor.begin(0x73);
 8000a48:	2173      	movs	r1, #115	@ 0x73
 8000a4a:	4806      	ldr	r0, [pc, #24]	@ (8000a64 <main+0x48>)
 8000a4c:	f7ff fdef 	bl	800062e <_ZN20DFRobot_OxygenSensor5beginEh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  measure_CO();
 8000a50:	f7ff ff36 	bl	80008c0 <_Z10measure_COv>
	  measure_O2();
 8000a54:	f7ff ffa8 	bl	80009a8 <_Z10measure_O2v>
//	  HAL_UART_Transmit(&huart5, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	  HAL_Delay(1000);
 8000a58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a5c:	f000 ffcc 	bl	80019f8 <HAL_Delay>
	  measure_CO();
 8000a60:	bf00      	nop
 8000a62:	e7f5      	b.n	8000a50 <main+0x34>
 8000a64:	20000b40 	.word	0x20000b40

08000a68 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	@ 0x50
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2234      	movs	r2, #52	@ 0x34
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f006 fbd3 	bl	8007222 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a8c:	f003 fa0e 	bl	8003eac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a90:	4b33      	ldr	r3, [pc, #204]	@ (8000b60 <_Z18SystemClock_Configv+0xf8>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	4a32      	ldr	r2, [pc, #200]	@ (8000b60 <_Z18SystemClock_Configv+0xf8>)
 8000a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9c:	4b30      	ldr	r3, [pc, #192]	@ (8000b60 <_Z18SystemClock_Configv+0xf8>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b64 <_Z18SystemClock_Configv+0xfc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8000b64 <_Z18SystemClock_Configv+0xfc>)
 8000ab2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b64 <_Z18SystemClock_Configv+0xfc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ac8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000acc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000adc:	2360      	movs	r3, #96	@ 0x60
 8000ade:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4618      	mov	r0, r3
 8000af2:	f003 fa3b 	bl	8003f6c <HAL_RCC_OscConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bf14      	ite	ne
 8000afc:	2301      	movne	r3, #1
 8000afe:	2300      	moveq	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000b06:	f000 faa7 	bl	8001058 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b0a:	f003 f9df 	bl	8003ecc <HAL_PWREx_EnableOverDrive>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	bf14      	ite	ne
 8000b14:	2301      	movne	r3, #1
 8000b16:	2300      	moveq	r3, #0
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000b1e:	f000 fa9b 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fcc2 	bl	80044c8 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bf14      	ite	ne
 8000b4a:	2301      	movne	r3, #1
 8000b4c:	2300      	moveq	r3, #0
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <_Z18SystemClock_Configv+0xf0>
  {
    Error_Handler();
 8000b54:	f000 fa80 	bl	8001058 <Error_Handler>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3750      	adds	r7, #80	@ 0x50
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40007000 	.word	0x40007000

08000b68 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b7a:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000b7c:	4a26      	ldr	r2, [pc, #152]	@ (8000c18 <_ZL12MX_ADC1_Initv+0xb0>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b80:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000b82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b88:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b8e:	4b21      	ldr	r3, [pc, #132]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000baa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c1c <_ZL12MX_ADC1_Initv+0xb4>)
 8000bac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000bca:	f000 ff39 	bl	8001a40 <HAL_ADC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf14      	ite	ne
 8000bd4:	2301      	movne	r3, #1
 8000bd6:	2300      	moveq	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8000bde:	f000 fa3b 	bl	8001058 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000be2:	2304      	movs	r3, #4
 8000be4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000bea:	2307      	movs	r3, #7
 8000bec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4808      	ldr	r0, [pc, #32]	@ (8000c14 <_ZL12MX_ADC1_Initv+0xac>)
 8000bf4:	f001 f902 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bf14      	ite	ne
 8000bfe:	2301      	movne	r3, #1
 8000c00:	2300      	moveq	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000c08:	f000 fa26 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000037c 	.word	0x2000037c
 8000c18:	40012000 	.word	0x40012000
 8000c1c:	0f000001 	.word	0x0f000001

08000c20 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <_ZL11MX_ETH_Initv+0x8c>)
 8000c26:	4a22      	ldr	r2, [pc, #136]	@ (8000cb0 <_ZL11MX_ETH_Initv+0x90>)
 8000c28:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <_ZL11MX_ETH_Initv+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c30:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <_ZL11MX_ETH_Initv+0x94>)
 8000c32:	2280      	movs	r2, #128	@ 0x80
 8000c34:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <_ZL11MX_ETH_Initv+0x94>)
 8000c38:	22e1      	movs	r2, #225	@ 0xe1
 8000c3a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <_ZL11MX_ETH_Initv+0x94>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <_ZL11MX_ETH_Initv+0x94>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <_ZL11MX_ETH_Initv+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c4e:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <_ZL11MX_ETH_Initv+0x8c>)
 8000c50:	4a18      	ldr	r2, [pc, #96]	@ (8000cb4 <_ZL11MX_ETH_Initv+0x94>)
 8000c52:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c54:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <_ZL11MX_ETH_Initv+0x8c>)
 8000c56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c5a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c5c:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <_ZL11MX_ETH_Initv+0x8c>)
 8000c5e:	4a16      	ldr	r2, [pc, #88]	@ (8000cb8 <_ZL11MX_ETH_Initv+0x98>)
 8000c60:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <_ZL11MX_ETH_Initv+0x8c>)
 8000c64:	4a15      	ldr	r2, [pc, #84]	@ (8000cbc <_ZL11MX_ETH_Initv+0x9c>)
 8000c66:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c68:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <_ZL11MX_ETH_Initv+0x8c>)
 8000c6a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000c6e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c70:	480e      	ldr	r0, [pc, #56]	@ (8000cac <_ZL11MX_ETH_Initv+0x8c>)
 8000c72:	f001 fbf9 	bl	8002468 <HAL_ETH_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bf14      	ite	ne
 8000c7c:	2301      	movne	r3, #1
 8000c7e:	2300      	moveq	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <_ZL11MX_ETH_Initv+0x6a>
  {
    Error_Handler();
 8000c86:	f000 f9e7 	bl	8001058 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c8a:	2238      	movs	r2, #56	@ 0x38
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	480c      	ldr	r0, [pc, #48]	@ (8000cc0 <_ZL11MX_ETH_Initv+0xa0>)
 8000c90:	f006 fac7 	bl	8007222 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <_ZL11MX_ETH_Initv+0xa0>)
 8000c96:	2221      	movs	r2, #33	@ 0x21
 8000c98:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <_ZL11MX_ETH_Initv+0xa0>)
 8000c9c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000ca0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <_ZL11MX_ETH_Initv+0xa0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200003c4 	.word	0x200003c4
 8000cb0:	40028000 	.word	0x40028000
 8000cb4:	20000ce0 	.word	0x20000ce0
 8000cb8:	20000274 	.word	0x20000274
 8000cbc:	200001d4 	.word	0x200001d4
 8000cc0:	20000344 	.word	0x20000344

08000cc4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <_ZL12MX_I2C1_Initv+0x90>)
 8000cca:	4a23      	ldr	r2, [pc, #140]	@ (8000d58 <_ZL12MX_I2C1_Initv+0x94>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000cce:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <_ZL12MX_I2C1_Initv+0x90>)
 8000cd0:	4a22      	ldr	r2, [pc, #136]	@ (8000d5c <_ZL12MX_I2C1_Initv+0x98>)
 8000cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <_ZL12MX_I2C1_Initv+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cda:	4b1e      	ldr	r3, [pc, #120]	@ (8000d54 <_ZL12MX_I2C1_Initv+0x90>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <_ZL12MX_I2C1_Initv+0x90>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <_ZL12MX_I2C1_Initv+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cec:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <_ZL12MX_I2C1_Initv+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <_ZL12MX_I2C1_Initv+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <_ZL12MX_I2C1_Initv+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfe:	4815      	ldr	r0, [pc, #84]	@ (8000d54 <_ZL12MX_I2C1_Initv+0x90>)
 8000d00:	f002 f8c6 	bl	8002e90 <HAL_I2C_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	bf14      	ite	ne
 8000d0a:	2301      	movne	r3, #1
 8000d0c:	2300      	moveq	r3, #0
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000d14:	f000 f9a0 	bl	8001058 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	480e      	ldr	r0, [pc, #56]	@ (8000d54 <_ZL12MX_I2C1_Initv+0x90>)
 8000d1c:	f002 fef4 	bl	8003b08 <HAL_I2CEx_ConfigAnalogFilter>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	bf14      	ite	ne
 8000d26:	2301      	movne	r3, #1
 8000d28:	2300      	moveq	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000d30:	f000 f992 	bl	8001058 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d34:	2100      	movs	r1, #0
 8000d36:	4807      	ldr	r0, [pc, #28]	@ (8000d54 <_ZL12MX_I2C1_Initv+0x90>)
 8000d38:	f002 ff31 	bl	8003b9e <HAL_I2CEx_ConfigDigitalFilter>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	bf14      	ite	ne
 8000d42:	2301      	movne	r3, #1
 8000d44:	2300      	moveq	r3, #0
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000d4c:	f000 f984 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000474 	.word	0x20000474
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	20303e5d 	.word	0x20303e5d

08000d60 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <_ZL13MX_UART5_Initv+0x60>)
 8000d66:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <_ZL13MX_UART5_Initv+0x64>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <_ZL13MX_UART5_Initv+0x60>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <_ZL13MX_UART5_Initv+0x60>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <_ZL13MX_UART5_Initv+0x60>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <_ZL13MX_UART5_Initv+0x60>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <_ZL13MX_UART5_Initv+0x60>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <_ZL13MX_UART5_Initv+0x60>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <_ZL13MX_UART5_Initv+0x60>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <_ZL13MX_UART5_Initv+0x60>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <_ZL13MX_UART5_Initv+0x60>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000da2:	4807      	ldr	r0, [pc, #28]	@ (8000dc0 <_ZL13MX_UART5_Initv+0x60>)
 8000da4:	f004 f9de 	bl	8005164 <HAL_UART_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bf14      	ite	ne
 8000dae:	2301      	movne	r3, #1
 8000db0:	2300      	moveq	r3, #0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <_ZL13MX_UART5_Initv+0x5c>
  {
    Error_Handler();
 8000db8:	f000 f94e 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200004c8 	.word	0x200004c8
 8000dc4:	40005000 	.word	0x40005000

08000dc8 <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <_ZL13MX_UART7_Initv+0x60>)
 8000dce:	4a17      	ldr	r2, [pc, #92]	@ (8000e2c <_ZL13MX_UART7_Initv+0x64>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <_ZL13MX_UART7_Initv+0x60>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_ZL13MX_UART7_Initv+0x60>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <_ZL13MX_UART7_Initv+0x60>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <_ZL13MX_UART7_Initv+0x60>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <_ZL13MX_UART7_Initv+0x60>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <_ZL13MX_UART7_Initv+0x60>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <_ZL13MX_UART7_Initv+0x60>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <_ZL13MX_UART7_Initv+0x60>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <_ZL13MX_UART7_Initv+0x60>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e0a:	4807      	ldr	r0, [pc, #28]	@ (8000e28 <_ZL13MX_UART7_Initv+0x60>)
 8000e0c:	f004 f9aa 	bl	8005164 <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf14      	ite	ne
 8000e16:	2301      	movne	r3, #1
 8000e18:	2300      	moveq	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <_ZL13MX_UART7_Initv+0x5c>
  {
    Error_Handler();
 8000e20:	f000 f91a 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000550 	.word	0x20000550
 8000e2c:	40007800 	.word	0x40007800

08000e30 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e34:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e36:	4a17      	ldr	r2, [pc, #92]	@ (8000e94 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e72:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e74:	f004 f976 	bl	8005164 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bf14      	ite	ne
 8000e7e:	2301      	movne	r3, #1
 8000e80:	2300      	moveq	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8000e88:	f000 f8e6 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200005d8 	.word	0x200005d8
 8000e94:	40004800 	.word	0x40004800

08000e98 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000e9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ea2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000ea6:	2206      	movs	r2, #6
 8000ea8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000eda:	4807      	ldr	r0, [pc, #28]	@ (8000ef8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000edc:	f002 feab 	bl	8003c36 <HAL_PCD_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	bf14      	ite	ne
 8000ee6:	2301      	movne	r3, #1
 8000ee8:	2300      	moveq	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8000ef0:	f000 f8b2 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000660 	.word	0x20000660

08000efc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	@ 0x30
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	4b4d      	ldr	r3, [pc, #308]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a4c      	ldr	r2, [pc, #304]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2a:	4b47      	ldr	r3, [pc, #284]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a46      	ldr	r2, [pc, #280]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f30:	f043 0320 	orr.w	r3, r3, #32
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b44      	ldr	r3, [pc, #272]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0320 	and.w	r3, r3, #32
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f42:	4b41      	ldr	r3, [pc, #260]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a40      	ldr	r2, [pc, #256]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a3a      	ldr	r2, [pc, #232]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b38      	ldr	r3, [pc, #224]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b35      	ldr	r3, [pc, #212]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a34      	ldr	r2, [pc, #208]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b32      	ldr	r3, [pc, #200]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa2:	4b29      	ldr	r3, [pc, #164]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a28      	ldr	r2, [pc, #160]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <_ZL12MX_GPIO_Initv+0x14c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000fc0:	4822      	ldr	r0, [pc, #136]	@ (800104c <_ZL12MX_GPIO_Initv+0x150>)
 8000fc2:	f001 ff4b 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2140      	movs	r1, #64	@ 0x40
 8000fca:	4821      	ldr	r0, [pc, #132]	@ (8001050 <_ZL12MX_GPIO_Initv+0x154>)
 8000fcc:	f001 ff46 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481b      	ldr	r0, [pc, #108]	@ (8001054 <_ZL12MX_GPIO_Initv+0x158>)
 8000fe8:	f001 fd8c 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fec:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4811      	ldr	r0, [pc, #68]	@ (800104c <_ZL12MX_GPIO_Initv+0x150>)
 8001006:	f001 fd7d 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800100a:	2340      	movs	r3, #64	@ 0x40
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	480b      	ldr	r0, [pc, #44]	@ (8001050 <_ZL12MX_GPIO_Initv+0x154>)
 8001022:	f001 fd6f 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001026:	2380      	movs	r3, #128	@ 0x80
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	@ (8001050 <_ZL12MX_GPIO_Initv+0x154>)
 800103a:	f001 fd63 	bl	8002b04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800103e:	bf00      	nop
 8001040:	3730      	adds	r7, #48	@ 0x30
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40020400 	.word	0x40020400
 8001050:	40021800 	.word	0x40021800
 8001054:	40020800 	.word	0x40020800

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <Error_Handler+0x8>

08001064 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d108      	bne.n	8001086 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800107a:	4293      	cmp	r3, r2
 800107c:	d103      	bne.n	8001086 <_Z41__static_initialization_and_destruction_0ii+0x22>
DFRobot_OxygenSensor oxygenSensor(&hi2c1);
 800107e:	4909      	ldr	r1, [pc, #36]	@ (80010a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001080:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001082:	f7ff faad 	bl	80005e0 <_ZN20DFRobot_OxygenSensorC1EP19__I2C_HandleTypeDef>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d107      	bne.n	800109c <_Z41__static_initialization_and_destruction_0ii+0x38>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001092:	4293      	cmp	r3, r2
 8001094:	d102      	bne.n	800109c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001096:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001098:	f7ff fabb 	bl	8000612 <_ZN20DFRobot_OxygenSensorD1Ev>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000474 	.word	0x20000474
 80010a8:	20000b40 	.word	0x20000b40

080010ac <_GLOBAL__sub_I_DMARxDscrTab>:
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80010b4:	2001      	movs	r0, #1
 80010b6:	f7ff ffd5 	bl	8001064 <_Z41__static_initialization_and_destruction_0ii>
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_GLOBAL__sub_D_DMARxDscrTab>:
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
 80010c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff ffcd 	bl	8001064 <_Z41__static_initialization_and_destruction_0ii>
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <HAL_MspInit+0x44>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001110 <HAL_MspInit+0x44>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <HAL_MspInit+0x44>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <HAL_MspInit+0x44>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <HAL_MspInit+0x44>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_MspInit+0x44>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a15      	ldr	r2, [pc, #84]	@ (8001188 <HAL_ADC_MspInit+0x74>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d123      	bne.n	800117e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_ADC_MspInit+0x78>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a14      	ldr	r2, [pc, #80]	@ (800118c <HAL_ADC_MspInit+0x78>)
 800113c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_ADC_MspInit+0x78>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_ADC_MspInit+0x78>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <HAL_ADC_MspInit+0x78>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <HAL_ADC_MspInit+0x78>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001166:	2310      	movs	r3, #16
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116a:	2303      	movs	r3, #3
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <HAL_ADC_MspInit+0x7c>)
 800117a:	f001 fcc3 	bl	8002b04 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	@ 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40012000 	.word	0x40012000
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000

08001194 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08e      	sub	sp, #56	@ 0x38
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a4e      	ldr	r2, [pc, #312]	@ (80012ec <HAL_ETH_MspInit+0x158>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	f040 8096 	bne.w	80012e4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011b8:	4b4d      	ldr	r3, [pc, #308]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011bc:	4a4c      	ldr	r2, [pc, #304]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 80011be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c4:	4b4a      	ldr	r3, [pc, #296]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011cc:	623b      	str	r3, [r7, #32]
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	4b47      	ldr	r3, [pc, #284]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	4a46      	ldr	r2, [pc, #280]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 80011d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011da:	6313      	str	r3, [r2, #48]	@ 0x30
 80011dc:	4b44      	ldr	r3, [pc, #272]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	4b41      	ldr	r3, [pc, #260]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	4a40      	ldr	r2, [pc, #256]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 80011ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f4:	4b3e      	ldr	r3, [pc, #248]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001200:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001204:	4a3a      	ldr	r2, [pc, #232]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6313      	str	r3, [r2, #48]	@ 0x30
 800120c:	4b38      	ldr	r3, [pc, #224]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b35      	ldr	r3, [pc, #212]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121c:	4a34      	ldr	r2, [pc, #208]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6313      	str	r3, [r2, #48]	@ 0x30
 8001224:	4b32      	ldr	r3, [pc, #200]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001230:	4b2f      	ldr	r3, [pc, #188]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	4a2e      	ldr	r2, [pc, #184]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	6313      	str	r3, [r2, #48]	@ 0x30
 800123c:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001248:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	4a28      	ldr	r2, [pc, #160]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 800124e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001252:	6313      	str	r3, [r2, #48]	@ 0x30
 8001254:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <HAL_ETH_MspInit+0x15c>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001260:	2332      	movs	r3, #50	@ 0x32
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001270:	230b      	movs	r3, #11
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	481e      	ldr	r0, [pc, #120]	@ (80012f4 <HAL_ETH_MspInit+0x160>)
 800127c:	f001 fc42 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001280:	2386      	movs	r3, #134	@ 0x86
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001290:	230b      	movs	r3, #11
 8001292:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	4817      	ldr	r0, [pc, #92]	@ (80012f8 <HAL_ETH_MspInit+0x164>)
 800129c:	f001 fc32 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b2:	230b      	movs	r3, #11
 80012b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	480f      	ldr	r0, [pc, #60]	@ (80012fc <HAL_ETH_MspInit+0x168>)
 80012be:	f001 fc21 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012c2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012d4:	230b      	movs	r3, #11
 80012d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	4808      	ldr	r0, [pc, #32]	@ (8001300 <HAL_ETH_MspInit+0x16c>)
 80012e0:	f001 fc10 	bl	8002b04 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80012e4:	bf00      	nop
 80012e6:	3738      	adds	r7, #56	@ 0x38
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40028000 	.word	0x40028000
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020400 	.word	0x40020400
 8001300:	40021800 	.word	0x40021800

08001304 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0ae      	sub	sp, #184	@ 0xb8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2290      	movs	r2, #144	@ 0x90
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f005 ff7c 	bl	8007222 <memset>
  if(hi2c->Instance==I2C1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a22      	ldr	r2, [pc, #136]	@ (80013b8 <HAL_I2C_MspInit+0xb4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d13c      	bne.n	80013ae <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001334:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001338:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800133a:	2300      	movs	r3, #0
 800133c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4618      	mov	r0, r3
 8001344:	f003 fae6 	bl	8004914 <HAL_RCCEx_PeriphCLKConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800134e:	f7ff fe83 	bl	8001058 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <HAL_I2C_MspInit+0xb8>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a19      	ldr	r2, [pc, #100]	@ (80013bc <HAL_I2C_MspInit+0xb8>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <HAL_I2C_MspInit+0xb8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800136a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800136e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001372:	2312      	movs	r3, #18
 8001374:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001384:	2304      	movs	r3, #4
 8001386:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800138e:	4619      	mov	r1, r3
 8001390:	480b      	ldr	r0, [pc, #44]	@ (80013c0 <HAL_I2C_MspInit+0xbc>)
 8001392:	f001 fbb7 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <HAL_I2C_MspInit+0xb8>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	4a08      	ldr	r2, [pc, #32]	@ (80013bc <HAL_I2C_MspInit+0xb8>)
 800139c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_I2C_MspInit+0xb8>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013ae:	bf00      	nop
 80013b0:	37b8      	adds	r7, #184	@ 0xb8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40005400 	.word	0x40005400
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020400 	.word	0x40020400

080013c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0b2      	sub	sp, #200	@ 0xc8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e0:	2290      	movs	r2, #144	@ 0x90
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f005 ff1c 	bl	8007222 <memset>
  if(huart->Instance==UART5)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a76      	ldr	r2, [pc, #472]	@ (80015c8 <HAL_UART_MspInit+0x204>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d15f      	bne.n	80014b4 <HAL_UART_MspInit+0xf0>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80013f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fa86 	bl	8004914 <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800140e:	f7ff fe23 	bl	8001058 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001412:	4b6e      	ldr	r3, [pc, #440]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a6d      	ldr	r2, [pc, #436]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001418:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b6b      	ldr	r3, [pc, #428]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001426:	623b      	str	r3, [r7, #32]
 8001428:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4b68      	ldr	r3, [pc, #416]	@ (80015cc <HAL_UART_MspInit+0x208>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a67      	ldr	r2, [pc, #412]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b65      	ldr	r3, [pc, #404]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	4b62      	ldr	r3, [pc, #392]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a61      	ldr	r2, [pc, #388]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b5f      	ldr	r3, [pc, #380]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	61bb      	str	r3, [r7, #24]
 8001458:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800145a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001474:	2308      	movs	r3, #8
 8001476:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800147e:	4619      	mov	r1, r3
 8001480:	4853      	ldr	r0, [pc, #332]	@ (80015d0 <HAL_UART_MspInit+0x20c>)
 8001482:	f001 fb3f 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001486:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800148a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014a0:	2308      	movs	r3, #8
 80014a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4849      	ldr	r0, [pc, #292]	@ (80015d4 <HAL_UART_MspInit+0x210>)
 80014ae:	f001 fb29 	bl	8002b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014b2:	e084      	b.n	80015be <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==UART7)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a47      	ldr	r2, [pc, #284]	@ (80015d8 <HAL_UART_MspInit+0x214>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d13d      	bne.n	800153a <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80014be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ce:	4618      	mov	r0, r3
 80014d0:	f003 fa20 	bl	8004914 <HAL_RCCEx_PeriphCLKConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_UART_MspInit+0x11a>
      Error_Handler();
 80014da:	f7ff fdbd 	bl	8001058 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80014de:	4b3b      	ldr	r3, [pc, #236]	@ (80015cc <HAL_UART_MspInit+0x208>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4a3a      	ldr	r2, [pc, #232]	@ (80015cc <HAL_UART_MspInit+0x208>)
 80014e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80014e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ea:	4b38      	ldr	r3, [pc, #224]	@ (80015cc <HAL_UART_MspInit+0x208>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f6:	4b35      	ldr	r3, [pc, #212]	@ (80015cc <HAL_UART_MspInit+0x208>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a34      	ldr	r2, [pc, #208]	@ (80015cc <HAL_UART_MspInit+0x208>)
 80014fc:	f043 0320 	orr.w	r3, r3, #32
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b32      	ldr	r3, [pc, #200]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0320 	and.w	r3, r3, #32
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800150e:	23c0      	movs	r3, #192	@ 0xc0
 8001510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001526:	2308      	movs	r3, #8
 8001528:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800152c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001530:	4619      	mov	r1, r3
 8001532:	482a      	ldr	r0, [pc, #168]	@ (80015dc <HAL_UART_MspInit+0x218>)
 8001534:	f001 fae6 	bl	8002b04 <HAL_GPIO_Init>
}
 8001538:	e041      	b.n	80015be <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a28      	ldr	r2, [pc, #160]	@ (80015e0 <HAL_UART_MspInit+0x21c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d13c      	bne.n	80015be <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001544:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800154a:	2300      	movs	r3, #0
 800154c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001552:	4618      	mov	r0, r3
 8001554:	f003 f9de 	bl	8004914 <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800155e:	f7ff fd7b 	bl	8001058 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	4a19      	ldr	r2, [pc, #100]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800156c:	6413      	str	r3, [r2, #64]	@ 0x40
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800157a:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <HAL_UART_MspInit+0x208>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a13      	ldr	r2, [pc, #76]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_UART_MspInit+0x208>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001592:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ac:	2307      	movs	r3, #7
 80015ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80015b6:	4619      	mov	r1, r3
 80015b8:	480a      	ldr	r0, [pc, #40]	@ (80015e4 <HAL_UART_MspInit+0x220>)
 80015ba:	f001 faa3 	bl	8002b04 <HAL_GPIO_Init>
}
 80015be:	bf00      	nop
 80015c0:	37c8      	adds	r7, #200	@ 0xc8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40005000 	.word	0x40005000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40007800 	.word	0x40007800
 80015dc:	40021400 	.word	0x40021400
 80015e0:	40004800 	.word	0x40004800
 80015e4:	40020c00 	.word	0x40020c00

080015e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b0ae      	sub	sp, #184	@ 0xb8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2290      	movs	r2, #144	@ 0x90
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f005 fe0a 	bl	8007222 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001616:	d159      	bne.n	80016cc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001618:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800161c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4618      	mov	r0, r3
 800162a:	f003 f973 	bl	8004914 <HAL_RCCEx_PeriphCLKConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001634:	f7ff fd10 	bl	8001058 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b26      	ldr	r3, [pc, #152]	@ (80016d4 <HAL_PCD_MspInit+0xec>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163c:	4a25      	ldr	r2, [pc, #148]	@ (80016d4 <HAL_PCD_MspInit+0xec>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6313      	str	r3, [r2, #48]	@ 0x30
 8001644:	4b23      	ldr	r3, [pc, #140]	@ (80016d4 <HAL_PCD_MspInit+0xec>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001650:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001654:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800166a:	230a      	movs	r3, #10
 800166c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001674:	4619      	mov	r1, r3
 8001676:	4818      	ldr	r0, [pc, #96]	@ (80016d8 <HAL_PCD_MspInit+0xf0>)
 8001678:	f001 fa44 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800167c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001680:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001694:	4619      	mov	r1, r3
 8001696:	4810      	ldr	r0, [pc, #64]	@ (80016d8 <HAL_PCD_MspInit+0xf0>)
 8001698:	f001 fa34 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800169c:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <HAL_PCD_MspInit+0xec>)
 800169e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016a0:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <HAL_PCD_MspInit+0xec>)
 80016a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016a6:	6353      	str	r3, [r2, #52]	@ 0x34
 80016a8:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_PCD_MspInit+0xec>)
 80016aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <HAL_PCD_MspInit+0xec>)
 80016b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b8:	4a06      	ldr	r2, [pc, #24]	@ (80016d4 <HAL_PCD_MspInit+0xec>)
 80016ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016be:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <HAL_PCD_MspInit+0xec>)
 80016c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80016cc:	bf00      	nop
 80016ce:	37b8      	adds	r7, #184	@ 0xb8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <NMI_Handler+0x4>

080016e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <MemManage_Handler+0x4>

080016f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <UsageFault_Handler+0x4>

08001704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001732:	f000 f941 	bl	80019b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}

0800173a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  return 1;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_kill>:

int _kill(int pid, int sig)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001754:	f005 fdb8 	bl	80072c8 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	2216      	movs	r2, #22
 800175c:	601a      	str	r2, [r3, #0]
  return -1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_exit>:

void _exit (int status)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001772:	f04f 31ff 	mov.w	r1, #4294967295
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffe7 	bl	800174a <_kill>
  while (1) {}    /* Make sure we hang here */
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <_exit+0x12>

08001780 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e00a      	b.n	80017a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001792:	f3af 8000 	nop.w
 8001796:	4601      	mov	r1, r0
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	60ba      	str	r2, [r7, #8]
 800179e:	b2ca      	uxtb	r2, r1
 80017a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbf0      	blt.n	8001792 <_read+0x12>
  }

  return len;
 80017b0:	687b      	ldr	r3, [r7, #4]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	e009      	b.n	80017e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60ba      	str	r2, [r7, #8]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbf1      	blt.n	80017cc <_write+0x12>
  }
  return len;
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_close>:

int _close(int file)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800181a:	605a      	str	r2, [r3, #4]
  return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_isatty>:

int _isatty(int file)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	@ (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f005 fd1c 	bl	80072c8 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20080000 	.word	0x20080000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	20000ce8 	.word	0x20000ce8
 80018c4:	20000e40 	.word	0x20000e40

080018c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001924 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018f0:	f7ff ffea 	bl	80018c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f4:	480c      	ldr	r0, [pc, #48]	@ (8001928 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f6:	490d      	ldr	r1, [pc, #52]	@ (800192c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018fc:	e002      	b.n	8001904 <LoopCopyDataInit>

080018fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001902:	3304      	adds	r3, #4

08001904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001908:	d3f9      	bcc.n	80018fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800190c:	4c0a      	ldr	r4, [pc, #40]	@ (8001938 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001910:	e001      	b.n	8001916 <LoopFillZerobss>

08001912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001914:	3204      	adds	r2, #4

08001916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001918:	d3fb      	bcc.n	8001912 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800191a:	f005 fcdb 	bl	80072d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191e:	f7ff f87d 	bl	8000a1c <main>
  bx  lr    
 8001922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001924:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001930:	08009a48 	.word	0x08009a48
  ldr r2, =_sbss
 8001934:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8001938:	20000e3c 	.word	0x20000e3c

0800193c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC_IRQHandler>

0800193e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001942:	2003      	movs	r0, #3
 8001944:	f000 fd5c 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001948:	2000      	movs	r0, #0
 800194a:	f000 f805 	bl	8001958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800194e:	f7ff fbbd 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_InitTick+0x54>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_InitTick+0x58>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fd69 	bl	800244e <HAL_SYSTICK_Config>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e00e      	b.n	80019a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0f      	cmp	r3, #15
 800198a:	d80a      	bhi.n	80019a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198c:	2200      	movs	r2, #0
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f000 fd3f 	bl	8002416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001998:	4a06      	ldr	r2, [pc, #24]	@ (80019b4 <HAL_InitTick+0x5c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000cec 	.word	0x20000cec

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000cec 	.word	0x20000cec

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff ffee 	bl	80019e0 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a12:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <HAL_Delay+0x44>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008

08001a40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e031      	b.n	8001aba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fb58 	bl	8001114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <HAL_ADC_Init+0x84>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	f043 0202 	orr.w	r2, r3, #2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fb0a 	bl	80020a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f023 0303 	bic.w	r3, r3, #3
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aaa:	e001      	b.n	8001ab0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	ffffeefd 	.word	0xffffeefd

08001ac8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_Start+0x1a>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e0ad      	b.n	8001c3e <HAL_ADC_Start+0x176>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d018      	beq.n	8001b2a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b08:	4b50      	ldr	r3, [pc, #320]	@ (8001c4c <HAL_ADC_Start+0x184>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a50      	ldr	r2, [pc, #320]	@ (8001c50 <HAL_ADC_Start+0x188>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0c9a      	lsrs	r2, r3, #18
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b1c:	e002      	b.n	8001b24 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f9      	bne.n	8001b1e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d175      	bne.n	8001c24 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b3c:	4b45      	ldr	r3, [pc, #276]	@ (8001c54 <HAL_ADC_Start+0x18c>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b72:	d106      	bne.n	8001b82 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b78:	f023 0206 	bic.w	r2, r3, #6
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c58 <HAL_ADC_Start+0x190>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d143      	bne.n	8001c3c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	e03a      	b.n	8001c3c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a24      	ldr	r2, [pc, #144]	@ (8001c5c <HAL_ADC_Start+0x194>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d10e      	bne.n	8001bee <HAL_ADC_Start+0x126>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d107      	bne.n	8001bee <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bec:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001bee:	4b1a      	ldr	r3, [pc, #104]	@ (8001c58 <HAL_ADC_Start+0x190>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d120      	bne.n	8001c3c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a18      	ldr	r2, [pc, #96]	@ (8001c60 <HAL_ADC_Start+0x198>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d11b      	bne.n	8001c3c <HAL_ADC_Start+0x174>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d114      	bne.n	8001c3c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	e00b      	b.n	8001c3c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	f043 0210 	orr.w	r2, r3, #16
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	431bde83 	.word	0x431bde83
 8001c54:	fffff8fe 	.word	0xfffff8fe
 8001c58:	40012300 	.word	0x40012300
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	40012200 	.word	0x40012200

08001c64 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_Stop+0x16>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e01f      	b.n	8001cba <HAL_ADC_Stop+0x56>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <HAL_ADC_Stop+0x64>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	ffffeefe 	.word	0xffffeefe

08001ccc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ce8:	d113      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cf8:	d10b      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f043 0220 	orr.w	r2, r3, #32
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e063      	b.n	8001dda <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d12:	f7ff fe65 	bl	80019e0 <HAL_GetTick>
 8001d16:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d18:	e021      	b.n	8001d5e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d01d      	beq.n	8001d5e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <HAL_ADC_PollForConversion+0x6c>
 8001d28:	f7ff fe5a 	bl	80019e0 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d212      	bcs.n	8001d5e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d00b      	beq.n	8001d5e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	f043 0204 	orr.w	r2, r3, #4
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e03d      	b.n	8001dda <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d1d6      	bne.n	8001d1a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0212 	mvn.w	r2, #18
 8001d74:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d123      	bne.n	8001dd8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d11f      	bne.n	8001dd8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d111      	bne.n	8001dd8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1c>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e136      	b.n	8002086 <HAL_ADC_ConfigChannel+0x28a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	d93a      	bls.n	8001e9e <HAL_ADC_ConfigChannel+0xa2>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e30:	d035      	beq.n	8001e9e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68d9      	ldr	r1, [r3, #12]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	3b1e      	subs	r3, #30
 8001e48:	2207      	movs	r2, #7
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a8d      	ldr	r2, [pc, #564]	@ (8002094 <HAL_ADC_ConfigChannel+0x298>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10a      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68d9      	ldr	r1, [r3, #12]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	061a      	lsls	r2, r3, #24
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e76:	e035      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68d9      	ldr	r1, [r3, #12]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4403      	add	r3, r0
 8001e90:	3b1e      	subs	r3, #30
 8001e92:	409a      	lsls	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e9c:	e022      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6919      	ldr	r1, [r3, #16]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6919      	ldr	r1, [r3, #16]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4403      	add	r3, r0
 8001eda:	409a      	lsls	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b06      	cmp	r3, #6
 8001eea:	d824      	bhi.n	8001f36 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	3b05      	subs	r3, #5
 8001efe:	221f      	movs	r2, #31
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43da      	mvns	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b05      	subs	r3, #5
 8001f28:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f34:	e04c      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d824      	bhi.n	8001f88 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b23      	subs	r3, #35	@ 0x23
 8001f50:	221f      	movs	r2, #31
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	3b23      	subs	r3, #35	@ 0x23
 8001f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f86:	e023      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	3b41      	subs	r3, #65	@ 0x41
 8001f9a:	221f      	movs	r2, #31
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b41      	subs	r3, #65	@ 0x41
 8001fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a30      	ldr	r2, [pc, #192]	@ (8002098 <HAL_ADC_ConfigChannel+0x29c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d10a      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1f4>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001fe2:	d105      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800209c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800209c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001fee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a28      	ldr	r2, [pc, #160]	@ (8002098 <HAL_ADC_ConfigChannel+0x29c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10f      	bne.n	800201a <HAL_ADC_ConfigChannel+0x21e>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b12      	cmp	r3, #18
 8002000:	d10b      	bne.n	800201a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002002:	4b26      	ldr	r3, [pc, #152]	@ (800209c <HAL_ADC_ConfigChannel+0x2a0>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4a25      	ldr	r2, [pc, #148]	@ (800209c <HAL_ADC_ConfigChannel+0x2a0>)
 8002008:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800200c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800200e:	4b23      	ldr	r3, [pc, #140]	@ (800209c <HAL_ADC_ConfigChannel+0x2a0>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a22      	ldr	r2, [pc, #136]	@ (800209c <HAL_ADC_ConfigChannel+0x2a0>)
 8002014:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002018:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1e      	ldr	r2, [pc, #120]	@ (8002098 <HAL_ADC_ConfigChannel+0x29c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d12b      	bne.n	800207c <HAL_ADC_ConfigChannel+0x280>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1a      	ldr	r2, [pc, #104]	@ (8002094 <HAL_ADC_ConfigChannel+0x298>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d003      	beq.n	8002036 <HAL_ADC_ConfigChannel+0x23a>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b11      	cmp	r3, #17
 8002034:	d122      	bne.n	800207c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002036:	4b19      	ldr	r3, [pc, #100]	@ (800209c <HAL_ADC_ConfigChannel+0x2a0>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4a18      	ldr	r2, [pc, #96]	@ (800209c <HAL_ADC_ConfigChannel+0x2a0>)
 800203c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002040:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002042:	4b16      	ldr	r3, [pc, #88]	@ (800209c <HAL_ADC_ConfigChannel+0x2a0>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a15      	ldr	r2, [pc, #84]	@ (800209c <HAL_ADC_ConfigChannel+0x2a0>)
 8002048:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800204c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a10      	ldr	r2, [pc, #64]	@ (8002094 <HAL_ADC_ConfigChannel+0x298>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d111      	bne.n	800207c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <HAL_ADC_ConfigChannel+0x2a4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a11      	ldr	r2, [pc, #68]	@ (80020a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	0c9a      	lsrs	r2, r3, #18
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800206e:	e002      	b.n	8002076 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3b01      	subs	r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f9      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	10000012 	.word	0x10000012
 8002098:	40012000 	.word	0x40012000
 800209c:	40012300 	.word	0x40012300
 80020a0:	20000000 	.word	0x20000000
 80020a4:	431bde83 	.word	0x431bde83

080020a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020b0:	4b78      	ldr	r3, [pc, #480]	@ (8002294 <ADC_Init+0x1ec>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a77      	ldr	r2, [pc, #476]	@ (8002294 <ADC_Init+0x1ec>)
 80020b6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80020ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020bc:	4b75      	ldr	r3, [pc, #468]	@ (8002294 <ADC_Init+0x1ec>)
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4973      	ldr	r1, [pc, #460]	@ (8002294 <ADC_Init+0x1ec>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	021a      	lsls	r2, r3, #8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800211e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6899      	ldr	r1, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002136:	4a58      	ldr	r2, [pc, #352]	@ (8002298 <ADC_Init+0x1f0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d022      	beq.n	8002182 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800214a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6899      	ldr	r1, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800216c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6899      	ldr	r1, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	e00f      	b.n	80021a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0202 	bic.w	r2, r2, #2
 80021b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6899      	ldr	r1, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	005a      	lsls	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01b      	beq.n	8002208 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6859      	ldr	r1, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	3b01      	subs	r3, #1
 80021fc:	035a      	lsls	r2, r3, #13
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	e007      	b.n	8002218 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002216:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002226:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	3b01      	subs	r3, #1
 8002234:	051a      	lsls	r2, r3, #20
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800224c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6899      	ldr	r1, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800225a:	025a      	lsls	r2, r3, #9
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002272:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6899      	ldr	r1, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	029a      	lsls	r2, r3, #10
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	609a      	str	r2, [r3, #8]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40012300 	.word	0x40012300
 8002298:	0f000001 	.word	0x0f000001

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <__NVIC_SetPriorityGrouping+0x40>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022c4:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ca:	4a04      	ldr	r2, [pc, #16]	@ (80022dc <__NVIC_SetPriorityGrouping+0x40>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00
 80022e0:	05fa0000 	.word	0x05fa0000

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	@ (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	@ 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	@ 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff8e 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	@ (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff47 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff5c 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff8e 	bl	8002354 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5d 	bl	8002300 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffb0 	bl	80023bc <SysTick_Config>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e086      	b.n	8002588 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2223      	movs	r2, #35	@ 0x23
 8002488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7fe fe81 	bl	8001194 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	4b3f      	ldr	r3, [pc, #252]	@ (8002590 <HAL_ETH_Init+0x128>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	4a3e      	ldr	r2, [pc, #248]	@ (8002590 <HAL_ETH_Init+0x128>)
 8002498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800249c:	6453      	str	r3, [r2, #68]	@ 0x44
 800249e:	4b3c      	ldr	r3, [pc, #240]	@ (8002590 <HAL_ETH_Init+0x128>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002594 <HAL_ETH_Init+0x12c>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a39      	ldr	r2, [pc, #228]	@ (8002594 <HAL_ETH_Init+0x12c>)
 80024b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024b4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024b6:	4b37      	ldr	r3, [pc, #220]	@ (8002594 <HAL_ETH_Init+0x12c>)
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	4935      	ldr	r1, [pc, #212]	@ (8002594 <HAL_ETH_Init+0x12c>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024c4:	4b33      	ldr	r3, [pc, #204]	@ (8002594 <HAL_ETH_Init+0x12c>)
 80024c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e0:	f7ff fa7e 	bl	80019e0 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024e6:	e011      	b.n	800250c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80024e8:	f7ff fa7a 	bl	80019e0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80024f6:	d909      	bls.n	800250c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2204      	movs	r2, #4
 80024fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	22e0      	movs	r2, #224	@ 0xe0
 8002504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e03d      	b.n	8002588 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1e4      	bne.n	80024e8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f97a 	bl	8002818 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fa25 	bl	8002974 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fa7b 	bl	8002a26 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	461a      	mov	r2, r3
 8002536:	2100      	movs	r1, #0
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f9e3 	bl	8002904 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800254c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <HAL_ETH_Init+0x130>)
 800255c:	430b      	orrs	r3, r1
 800255e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002572:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2210      	movs	r2, #16
 8002582:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40023800 	.word	0x40023800
 8002594:	40013800 	.word	0x40013800
 8002598:	00020060 	.word	0x00020060

0800259c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4b53      	ldr	r3, [pc, #332]	@ (8002700 <ETH_SetMACConfig+0x164>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	7b9b      	ldrb	r3, [r3, #14]
 80025ba:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	7c12      	ldrb	r2, [r2, #16]
 80025c0:	2a00      	cmp	r2, #0
 80025c2:	d102      	bne.n	80025ca <ETH_SetMACConfig+0x2e>
 80025c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025c8:	e000      	b.n	80025cc <ETH_SetMACConfig+0x30>
 80025ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	7c52      	ldrb	r2, [r2, #17]
 80025d2:	2a00      	cmp	r2, #0
 80025d4:	d102      	bne.n	80025dc <ETH_SetMACConfig+0x40>
 80025d6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80025da:	e000      	b.n	80025de <ETH_SetMACConfig+0x42>
 80025dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	7fdb      	ldrb	r3, [r3, #31]
 80025ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80025ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	7f92      	ldrb	r2, [r2, #30]
 80025f8:	2a00      	cmp	r2, #0
 80025fa:	d102      	bne.n	8002602 <ETH_SetMACConfig+0x66>
 80025fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002600:	e000      	b.n	8002604 <ETH_SetMACConfig+0x68>
 8002602:	2200      	movs	r2, #0
                        macconf->Speed |
 8002604:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	7f1b      	ldrb	r3, [r3, #28]
 800260a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800260c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002612:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	791b      	ldrb	r3, [r3, #4]
 8002618:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800261a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002622:	2a00      	cmp	r2, #0
 8002624:	d102      	bne.n	800262c <ETH_SetMACConfig+0x90>
 8002626:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800262a:	e000      	b.n	800262e <ETH_SetMACConfig+0x92>
 800262c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800262e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	7bdb      	ldrb	r3, [r3, #15]
 8002634:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002636:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800263c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002644:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002646:	4313      	orrs	r3, r2
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800265e:	2001      	movs	r0, #1
 8002660:	f7ff f9ca 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800267a:	4013      	ands	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002682:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800268a:	2a00      	cmp	r2, #0
 800268c:	d101      	bne.n	8002692 <ETH_SetMACConfig+0xf6>
 800268e:	2280      	movs	r2, #128	@ 0x80
 8002690:	e000      	b.n	8002694 <ETH_SetMACConfig+0xf8>
 8002692:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002694:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800269a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80026a2:	2a01      	cmp	r2, #1
 80026a4:	d101      	bne.n	80026aa <ETH_SetMACConfig+0x10e>
 80026a6:	2208      	movs	r2, #8
 80026a8:	e000      	b.n	80026ac <ETH_SetMACConfig+0x110>
 80026aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80026ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80026b4:	2a01      	cmp	r2, #1
 80026b6:	d101      	bne.n	80026bc <ETH_SetMACConfig+0x120>
 80026b8:	2204      	movs	r2, #4
 80026ba:	e000      	b.n	80026be <ETH_SetMACConfig+0x122>
 80026bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80026c6:	2a01      	cmp	r2, #1
 80026c8:	d101      	bne.n	80026ce <ETH_SetMACConfig+0x132>
 80026ca:	2202      	movs	r2, #2
 80026cc:	e000      	b.n	80026d0 <ETH_SetMACConfig+0x134>
 80026ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026d0:	4313      	orrs	r3, r2
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026e8:	2001      	movs	r0, #1
 80026ea:	f7ff f985 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	619a      	str	r2, [r3, #24]
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	fd20810f 	.word	0xfd20810f

08002704 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4b3d      	ldr	r3, [pc, #244]	@ (8002814 <ETH_SetDMAConfig+0x110>)
 800271e:	4013      	ands	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	7b1b      	ldrb	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <ETH_SetDMAConfig+0x2c>
 800272a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800272e:	e000      	b.n	8002732 <ETH_SetDMAConfig+0x2e>
 8002730:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	7b5b      	ldrb	r3, [r3, #13]
 8002736:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002738:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	7f52      	ldrb	r2, [r2, #29]
 800273e:	2a00      	cmp	r2, #0
 8002740:	d102      	bne.n	8002748 <ETH_SetDMAConfig+0x44>
 8002742:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002746:	e000      	b.n	800274a <ETH_SetDMAConfig+0x46>
 8002748:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800274a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	7b9b      	ldrb	r3, [r3, #14]
 8002750:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002752:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002758:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	7f1b      	ldrb	r3, [r3, #28]
 800275e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002760:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	7f9b      	ldrb	r3, [r3, #30]
 8002766:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002768:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800276e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002776:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002778:	4313      	orrs	r3, r2
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002788:	461a      	mov	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800279a:	2001      	movs	r0, #1
 800279c:	f7ff f92c 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	791b      	ldrb	r3, [r3, #4]
 80027b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80027be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027f8:	2001      	movs	r0, #1
 80027fa:	f7ff f8fd 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	f8de3f23 	.word	0xf8de3f23

08002818 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b0a6      	sub	sp, #152	@ 0x98
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002820:	2301      	movs	r3, #1
 8002822:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800282c:	2300      	movs	r3, #0
 800282e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800285a:	2300      	movs	r3, #0
 800285c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800285e:	2300      	movs	r3, #0
 8002860:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002864:	2300      	movs	r3, #0
 8002866:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002880:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002884:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002886:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800288a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002892:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002896:	4619      	mov	r1, r3
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff fe7f 	bl	800259c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800289e:	2301      	movs	r3, #1
 80028a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028d2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028d8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028de:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028ee:	f107 0308 	add.w	r3, r7, #8
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff05 	bl	8002704 <ETH_SetDMAConfig>
}
 80028fa:	bf00      	nop
 80028fc:	3798      	adds	r7, #152	@ 0x98
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3305      	adds	r3, #5
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	3204      	adds	r2, #4
 800291c:	7812      	ldrb	r2, [r2, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4b11      	ldr	r3, [pc, #68]	@ (800296c <ETH_MACAddressConfig+0x68>)
 8002926:	4413      	add	r3, r2
 8002928:	461a      	mov	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3303      	adds	r3, #3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	061a      	lsls	r2, r3, #24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3302      	adds	r3, #2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3301      	adds	r3, #1
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	4313      	orrs	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <ETH_MACAddressConfig+0x6c>)
 8002956:	4413      	add	r3, r2
 8002958:	461a      	mov	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	6013      	str	r3, [r2, #0]
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40028040 	.word	0x40028040
 8002970:	40028044 	.word	0x40028044

08002974 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	e03e      	b.n	8002a00 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68d9      	ldr	r1, [r3, #12]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2200      	movs	r2, #0
 800299e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	3206      	adds	r2, #6
 80029b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d80c      	bhi.n	80029e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68d9      	ldr	r1, [r3, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	e004      	b.n	80029ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	461a      	mov	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d9bd      	bls.n	8002982 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a18:	611a      	str	r2, [r3, #16]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	e048      	b.n	8002ac6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6919      	ldr	r1, [r3, #16]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	440b      	add	r3, r1
 8002a44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2200      	movs	r2, #0
 8002a62:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2200      	movs	r2, #0
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002a70:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	3212      	adds	r2, #18
 8002a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d80c      	bhi.n	8002ab6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6919      	ldr	r1, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	e004      	b.n	8002ac0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d9b3      	bls.n	8002a34 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002af6:	60da      	str	r2, [r3, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	@ 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	e175      	b.n	8002e10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b24:	2201      	movs	r2, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	f040 8164 	bne.w	8002e0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d005      	beq.n	8002b5a <HAL_GPIO_Init+0x56>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d130      	bne.n	8002bbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	2203      	movs	r2, #3
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b90:	2201      	movs	r2, #1
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 0201 	and.w	r2, r3, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d017      	beq.n	8002bf8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d123      	bne.n	8002c4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	08da      	lsrs	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3208      	adds	r2, #8
 8002c46:	69b9      	ldr	r1, [r7, #24]
 8002c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0203 	and.w	r2, r3, #3
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80be 	beq.w	8002e0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8e:	4b66      	ldr	r3, [pc, #408]	@ (8002e28 <HAL_GPIO_Init+0x324>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	4a65      	ldr	r2, [pc, #404]	@ (8002e28 <HAL_GPIO_Init+0x324>)
 8002c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c9a:	4b63      	ldr	r3, [pc, #396]	@ (8002e28 <HAL_GPIO_Init+0x324>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ca6:	4a61      	ldr	r2, [pc, #388]	@ (8002e2c <HAL_GPIO_Init+0x328>)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	3302      	adds	r3, #2
 8002cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	220f      	movs	r2, #15
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a58      	ldr	r2, [pc, #352]	@ (8002e30 <HAL_GPIO_Init+0x32c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d037      	beq.n	8002d42 <HAL_GPIO_Init+0x23e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a57      	ldr	r2, [pc, #348]	@ (8002e34 <HAL_GPIO_Init+0x330>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d031      	beq.n	8002d3e <HAL_GPIO_Init+0x23a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a56      	ldr	r2, [pc, #344]	@ (8002e38 <HAL_GPIO_Init+0x334>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02b      	beq.n	8002d3a <HAL_GPIO_Init+0x236>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a55      	ldr	r2, [pc, #340]	@ (8002e3c <HAL_GPIO_Init+0x338>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d025      	beq.n	8002d36 <HAL_GPIO_Init+0x232>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a54      	ldr	r2, [pc, #336]	@ (8002e40 <HAL_GPIO_Init+0x33c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01f      	beq.n	8002d32 <HAL_GPIO_Init+0x22e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a53      	ldr	r2, [pc, #332]	@ (8002e44 <HAL_GPIO_Init+0x340>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d019      	beq.n	8002d2e <HAL_GPIO_Init+0x22a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a52      	ldr	r2, [pc, #328]	@ (8002e48 <HAL_GPIO_Init+0x344>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <HAL_GPIO_Init+0x226>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a51      	ldr	r2, [pc, #324]	@ (8002e4c <HAL_GPIO_Init+0x348>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00d      	beq.n	8002d26 <HAL_GPIO_Init+0x222>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a50      	ldr	r2, [pc, #320]	@ (8002e50 <HAL_GPIO_Init+0x34c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <HAL_GPIO_Init+0x21e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4f      	ldr	r2, [pc, #316]	@ (8002e54 <HAL_GPIO_Init+0x350>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d101      	bne.n	8002d1e <HAL_GPIO_Init+0x21a>
 8002d1a:	2309      	movs	r3, #9
 8002d1c:	e012      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d1e:	230a      	movs	r3, #10
 8002d20:	e010      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d22:	2308      	movs	r3, #8
 8002d24:	e00e      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d26:	2307      	movs	r3, #7
 8002d28:	e00c      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d2a:	2306      	movs	r3, #6
 8002d2c:	e00a      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d2e:	2305      	movs	r3, #5
 8002d30:	e008      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d32:	2304      	movs	r3, #4
 8002d34:	e006      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d36:	2303      	movs	r3, #3
 8002d38:	e004      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e002      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d42:	2300      	movs	r3, #0
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	f002 0203 	and.w	r2, r2, #3
 8002d4a:	0092      	lsls	r2, r2, #2
 8002d4c:	4093      	lsls	r3, r2
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d54:	4935      	ldr	r1, [pc, #212]	@ (8002e2c <HAL_GPIO_Init+0x328>)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	089b      	lsrs	r3, r3, #2
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d62:	4b3d      	ldr	r3, [pc, #244]	@ (8002e58 <HAL_GPIO_Init+0x354>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d86:	4a34      	ldr	r2, [pc, #208]	@ (8002e58 <HAL_GPIO_Init+0x354>)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d8c:	4b32      	ldr	r3, [pc, #200]	@ (8002e58 <HAL_GPIO_Init+0x354>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db0:	4a29      	ldr	r2, [pc, #164]	@ (8002e58 <HAL_GPIO_Init+0x354>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002db6:	4b28      	ldr	r3, [pc, #160]	@ (8002e58 <HAL_GPIO_Init+0x354>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dda:	4a1f      	ldr	r2, [pc, #124]	@ (8002e58 <HAL_GPIO_Init+0x354>)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <HAL_GPIO_Init+0x354>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e04:	4a14      	ldr	r2, [pc, #80]	@ (8002e58 <HAL_GPIO_Init+0x354>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b0f      	cmp	r3, #15
 8002e14:	f67f ae86 	bls.w	8002b24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3724      	adds	r7, #36	@ 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40013800 	.word	0x40013800
 8002e30:	40020000 	.word	0x40020000
 8002e34:	40020400 	.word	0x40020400
 8002e38:	40020800 	.word	0x40020800
 8002e3c:	40020c00 	.word	0x40020c00
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40021400 	.word	0x40021400
 8002e48:	40021800 	.word	0x40021800
 8002e4c:	40021c00 	.word	0x40021c00
 8002e50:	40022000 	.word	0x40022000
 8002e54:	40022400 	.word	0x40022400
 8002e58:	40013c00 	.word	0x40013c00

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e78:	e003      	b.n	8002e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	041a      	lsls	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	619a      	str	r2, [r3, #24]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e08b      	b.n	8002fba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe fa24 	bl	8001304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2224      	movs	r2, #36	@ 0x24
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ee0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ef0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	e006      	b.n	8002f18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d108      	bne.n	8002f32 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	e007      	b.n	8002f42 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc4 <HAL_I2C_Init+0x134>)
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69d9      	ldr	r1, [r3, #28]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1a      	ldr	r2, [r3, #32]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	02008000 	.word	0x02008000

08002fc8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	817b      	strh	r3, [r7, #10]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	f040 80fd 	bne.w	80031e4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_I2C_Master_Transmit+0x30>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0f6      	b.n	80031e6 <HAL_I2C_Master_Transmit+0x21e>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003000:	f7fe fcee 	bl	80019e0 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2319      	movs	r3, #25
 800300c:	2201      	movs	r2, #1
 800300e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 faf6 	bl	8003604 <I2C_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0e1      	b.n	80031e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2221      	movs	r2, #33	@ 0x21
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2210      	movs	r2, #16
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	893a      	ldrh	r2, [r7, #8]
 8003042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	2bff      	cmp	r3, #255	@ 0xff
 8003052:	d906      	bls.n	8003062 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	22ff      	movs	r2, #255	@ 0xff
 8003058:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800305a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e007      	b.n	8003072 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800306c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003070:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d024      	beq.n	80030c4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	8979      	ldrh	r1, [r7, #10]
 80030b6:	4b4e      	ldr	r3, [pc, #312]	@ (80031f0 <HAL_I2C_Master_Transmit+0x228>)
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fcf1 	bl	8003aa4 <I2C_TransferConfig>
 80030c2:	e066      	b.n	8003192 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	8979      	ldrh	r1, [r7, #10]
 80030cc:	4b48      	ldr	r3, [pc, #288]	@ (80031f0 <HAL_I2C_Master_Transmit+0x228>)
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fce6 	bl	8003aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030d8:	e05b      	b.n	8003192 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	6a39      	ldr	r1, [r7, #32]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fae9 	bl	80036b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07b      	b.n	80031e6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d034      	beq.n	8003192 <HAL_I2C_Master_Transmit+0x1ca>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312c:	2b00      	cmp	r3, #0
 800312e:	d130      	bne.n	8003192 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	2200      	movs	r2, #0
 8003138:	2180      	movs	r1, #128	@ 0x80
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fa62 	bl	8003604 <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e04d      	b.n	80031e6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	2bff      	cmp	r3, #255	@ 0xff
 8003152:	d90e      	bls.n	8003172 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	22ff      	movs	r2, #255	@ 0xff
 8003158:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315e:	b2da      	uxtb	r2, r3
 8003160:	8979      	ldrh	r1, [r7, #10]
 8003162:	2300      	movs	r3, #0
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fc9a 	bl	8003aa4 <I2C_TransferConfig>
 8003170:	e00f      	b.n	8003192 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	b2da      	uxtb	r2, r3
 8003182:	8979      	ldrh	r1, [r7, #10]
 8003184:	2300      	movs	r3, #0
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fc89 	bl	8003aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d19e      	bne.n	80030da <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	6a39      	ldr	r1, [r7, #32]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 facf 	bl	8003744 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e01a      	b.n	80031e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2220      	movs	r2, #32
 80031b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <HAL_I2C_Master_Transmit+0x22c>)
 80031c4:	400b      	ands	r3, r1
 80031c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	80002000 	.word	0x80002000
 80031f4:	fe00e800 	.word	0xfe00e800

080031f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	461a      	mov	r2, r3
 8003204:	460b      	mov	r3, r1
 8003206:	817b      	strh	r3, [r7, #10]
 8003208:	4613      	mov	r3, r2
 800320a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b20      	cmp	r3, #32
 8003216:	f040 80db 	bne.w	80033d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_I2C_Master_Receive+0x30>
 8003224:	2302      	movs	r3, #2
 8003226:	e0d4      	b.n	80033d2 <HAL_I2C_Master_Receive+0x1da>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003230:	f7fe fbd6 	bl	80019e0 <HAL_GetTick>
 8003234:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	2319      	movs	r3, #25
 800323c:	2201      	movs	r2, #1
 800323e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f9de 	bl	8003604 <I2C_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e0bf      	b.n	80033d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2222      	movs	r2, #34	@ 0x22
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2210      	movs	r2, #16
 800325e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	893a      	ldrh	r2, [r7, #8]
 8003272:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	2bff      	cmp	r3, #255	@ 0xff
 8003282:	d90e      	bls.n	80032a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328e:	b2da      	uxtb	r2, r3
 8003290:	8979      	ldrh	r1, [r7, #10]
 8003292:	4b52      	ldr	r3, [pc, #328]	@ (80033dc <HAL_I2C_Master_Receive+0x1e4>)
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fc02 	bl	8003aa4 <I2C_TransferConfig>
 80032a0:	e06d      	b.n	800337e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	8979      	ldrh	r1, [r7, #10]
 80032b4:	4b49      	ldr	r3, [pc, #292]	@ (80033dc <HAL_I2C_Master_Receive+0x1e4>)
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fbf1 	bl	8003aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80032c2:	e05c      	b.n	800337e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	6a39      	ldr	r1, [r7, #32]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fa7f 	bl	80037cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e07c      	b.n	80033d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d034      	beq.n	800337e <HAL_I2C_Master_Receive+0x186>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d130      	bne.n	800337e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2200      	movs	r2, #0
 8003324:	2180      	movs	r1, #128	@ 0x80
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f96c 	bl	8003604 <I2C_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e04d      	b.n	80033d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	2bff      	cmp	r3, #255	@ 0xff
 800333e:	d90e      	bls.n	800335e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	22ff      	movs	r2, #255	@ 0xff
 8003344:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334a:	b2da      	uxtb	r2, r3
 800334c:	8979      	ldrh	r1, [r7, #10]
 800334e:	2300      	movs	r3, #0
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fba4 	bl	8003aa4 <I2C_TransferConfig>
 800335c:	e00f      	b.n	800337e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	b2da      	uxtb	r2, r3
 800336e:	8979      	ldrh	r1, [r7, #10]
 8003370:	2300      	movs	r3, #0
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 fb93 	bl	8003aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d19d      	bne.n	80032c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	6a39      	ldr	r1, [r7, #32]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f9d9 	bl	8003744 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e01a      	b.n	80033d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2220      	movs	r2, #32
 80033a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6859      	ldr	r1, [r3, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b0c      	ldr	r3, [pc, #48]	@ (80033e0 <HAL_I2C_Master_Receive+0x1e8>)
 80033b0:	400b      	ands	r3, r1
 80033b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	80002400 	.word	0x80002400
 80033e0:	fe00e800 	.word	0xfe00e800

080033e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	@ 0x28
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	460b      	mov	r3, r1
 80033f2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b20      	cmp	r3, #32
 8003402:	f040 80d2 	bne.w	80035aa <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003414:	d101      	bne.n	800341a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003416:	2302      	movs	r3, #2
 8003418:	e0c8      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_I2C_IsDeviceReady+0x44>
 8003424:	2302      	movs	r3, #2
 8003426:	e0c1      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x1c8>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2224      	movs	r2, #36	@ 0x24
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_I2C_IsDeviceReady+0x6e>
 8003446:	897b      	ldrh	r3, [r7, #10]
 8003448:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800344c:	4b59      	ldr	r3, [pc, #356]	@ (80035b4 <HAL_I2C_IsDeviceReady+0x1d0>)
 800344e:	4313      	orrs	r3, r2
 8003450:	e004      	b.n	800345c <HAL_I2C_IsDeviceReady+0x78>
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003458:	4b57      	ldr	r3, [pc, #348]	@ (80035b8 <HAL_I2C_IsDeviceReady+0x1d4>)
 800345a:	4313      	orrs	r3, r2
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003462:	f7fe fabd 	bl	80019e0 <HAL_GetTick>
 8003466:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b20      	cmp	r3, #32
 8003474:	bf0c      	ite	eq
 8003476:	2301      	moveq	r3, #1
 8003478:	2300      	movne	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b10      	cmp	r3, #16
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003494:	e034      	b.n	8003500 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d01a      	beq.n	80034d4 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fe fa9f 	bl	80019e0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <HAL_I2C_IsDeviceReady+0xd0>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10f      	bne.n	80034d4 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e06b      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b20      	cmp	r3, #32
 80034e0:	bf0c      	ite	eq
 80034e2:	2301      	moveq	r3, #1
 80034e4:	2300      	movne	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003500:	7ffb      	ldrb	r3, [r7, #31]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <HAL_I2C_IsDeviceReady+0x128>
 8003506:	7fbb      	ldrb	r3, [r7, #30]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0c4      	beq.n	8003496 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b10      	cmp	r3, #16
 8003518:	d01a      	beq.n	8003550 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2200      	movs	r2, #0
 8003522:	2120      	movs	r1, #32
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f86d 	bl	8003604 <I2C_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e03b      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2220      	movs	r2, #32
 800353a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	e02d      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	2120      	movs	r1, #32
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f852 	bl	8003604 <I2C_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e020      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2210      	movs	r2, #16
 8003570:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2220      	movs	r2, #32
 8003578:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3301      	adds	r3, #1
 800357e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	f63f af5a 	bhi.w	800343e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	f043 0220 	orr.w	r2, r3, #32
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	02002000 	.word	0x02002000
 80035b8:	02002800 	.word	0x02002800

080035bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d103      	bne.n	80035da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d007      	beq.n	80035f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	619a      	str	r2, [r3, #24]
  }
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003614:	e03b      	b.n	800368e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f962 	bl	80038e4 <I2C_IsErrorOccurred>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e041      	b.n	80036ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d02d      	beq.n	800368e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fe f9d5 	bl	80019e0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d122      	bne.n	800368e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4013      	ands	r3, r2
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	429a      	cmp	r2, r3
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	429a      	cmp	r2, r3
 8003664:	d113      	bne.n	800368e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f043 0220 	orr.w	r2, r3, #32
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e00f      	b.n	80036ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699a      	ldr	r2, [r3, #24]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	bf0c      	ite	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	2300      	movne	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d0b4      	beq.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036c2:	e033      	b.n	800372c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f90b 	bl	80038e4 <I2C_IsErrorOccurred>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e031      	b.n	800373c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d025      	beq.n	800372c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e0:	f7fe f97e 	bl	80019e0 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d302      	bcc.n	80036f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d11a      	bne.n	800372c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b02      	cmp	r3, #2
 8003702:	d013      	beq.n	800372c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e007      	b.n	800373c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d1c4      	bne.n	80036c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003750:	e02f      	b.n	80037b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f8c4 	bl	80038e4 <I2C_IsErrorOccurred>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e02d      	b.n	80037c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003766:	f7fe f93b 	bl	80019e0 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	d302      	bcc.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11a      	bne.n	80037b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b20      	cmp	r3, #32
 8003788:	d013      	beq.n	80037b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	f043 0220 	orr.w	r2, r3, #32
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e007      	b.n	80037c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d1c8      	bne.n	8003752 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037dc:	e071      	b.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f87e 	bl	80038e4 <I2C_IsErrorOccurred>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d13b      	bne.n	8003878 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d138      	bne.n	8003878 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b04      	cmp	r3, #4
 8003812:	d105      	bne.n	8003820 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b10      	cmp	r3, #16
 800382c:	d121      	bne.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2210      	movs	r2, #16
 8003834:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2204      	movs	r2, #4
 800383a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2220      	movs	r2, #32
 8003842:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b24      	ldr	r3, [pc, #144]	@ (80038e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003850:	400b      	ands	r3, r1
 8003852:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	75fb      	strb	r3, [r7, #23]
 8003870:	e002      	b.n	8003878 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003878:	f7fe f8b2 	bl	80019e0 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	429a      	cmp	r2, r3
 8003886:	d302      	bcc.n	800388e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d119      	bne.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d116      	bne.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d00f      	beq.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f043 0220 	orr.w	r2, r3, #32
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d002      	beq.n	80038d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d083      	beq.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	fe00e800 	.word	0xfe00e800

080038e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	@ 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b00      	cmp	r3, #0
 800390e:	d068      	beq.n	80039e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2210      	movs	r2, #16
 8003916:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003918:	e049      	b.n	80039ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d045      	beq.n	80039ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003922:	f7fe f85d 	bl	80019e0 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	d302      	bcc.n	8003938 <I2C_IsErrorOccurred+0x54>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d13a      	bne.n	80039ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003942:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800394a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800395a:	d121      	bne.n	80039a0 <I2C_IsErrorOccurred+0xbc>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003962:	d01d      	beq.n	80039a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	2b20      	cmp	r3, #32
 8003968:	d01a      	beq.n	80039a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003978:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800397a:	f7fe f831 	bl	80019e0 <HAL_GetTick>
 800397e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003980:	e00e      	b.n	80039a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003982:	f7fe f82d 	bl	80019e0 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b19      	cmp	r3, #25
 800398e:	d907      	bls.n	80039a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f043 0320 	orr.w	r3, r3, #32
 8003996:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800399e:	e006      	b.n	80039ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d1e9      	bne.n	8003982 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d003      	beq.n	80039c4 <I2C_IsErrorOccurred+0xe0>
 80039bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0aa      	beq.n	800391a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2220      	movs	r2, #32
 80039d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f043 0304 	orr.w	r3, r3, #4
 80039da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00b      	beq.n	8003a0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f043 0308 	orr.w	r3, r3, #8
 8003a1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00b      	beq.n	8003a50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	f043 0302 	orr.w	r3, r3, #2
 8003a3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01c      	beq.n	8003a92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7ff fdaf 	bl	80035bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <I2C_IsErrorOccurred+0x1bc>)
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3728      	adds	r7, #40	@ 0x28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	fe00e800 	.word	0xfe00e800

08003aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	817b      	strh	r3, [r7, #10]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003abc:	7a7b      	ldrb	r3, [r7, #9]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ac4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ad2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	0d5b      	lsrs	r3, r3, #21
 8003ade:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003ae2:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <I2C_TransferConfig+0x60>)
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	ea02 0103 	and.w	r1, r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	03ff63ff 	.word	0x03ff63ff

08003b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d138      	bne.n	8003b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e032      	b.n	8003b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	@ 0x24
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d139      	bne.n	8003c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e033      	b.n	8003c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2224      	movs	r2, #36	@ 0x24
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af02      	add	r7, sp, #8
 8003c3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e108      	b.n	8003e5a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fd fcc0 	bl	80015e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c76:	d102      	bne.n	8003c7e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f002 f820 	bl	8005cc8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	7c1a      	ldrb	r2, [r3, #16]
 8003c90:	f88d 2000 	strb.w	r2, [sp]
 8003c94:	3304      	adds	r3, #4
 8003c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c98:	f001 ffbc 	bl	8005c14 <USB_CoreInit>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e0d5      	b.n	8003e5a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f002 f818 	bl	8005cea <USB_SetCurrentMode>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0c6      	b.n	8003e5a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	e04a      	b.n	8003d68 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cd2:	7bfa      	ldrb	r2, [r7, #15]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	3315      	adds	r3, #21
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	b298      	uxth	r0, r3
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	332e      	adds	r3, #46	@ 0x2e
 8003d0e:	4602      	mov	r2, r0
 8003d10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	3318      	adds	r3, #24
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	331c      	adds	r3, #28
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	3320      	adds	r3, #32
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3324      	adds	r3, #36	@ 0x24
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	3301      	adds	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	791b      	ldrb	r3, [r3, #4]
 8003d6c:	7bfa      	ldrb	r2, [r7, #15]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d3af      	bcc.n	8003cd2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d72:	2300      	movs	r3, #0
 8003d74:	73fb      	strb	r3, [r7, #15]
 8003d76:	e044      	b.n	8003e02 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d78:	7bfa      	ldrb	r2, [r7, #15]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d8e:	7bfa      	ldrb	r2, [r7, #15]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dba:	7bfa      	ldrb	r2, [r7, #15]
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	791b      	ldrb	r3, [r3, #4]
 8003e06:	7bfa      	ldrb	r2, [r7, #15]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d3b5      	bcc.n	8003d78 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	7c1a      	ldrb	r2, [r3, #16]
 8003e14:	f88d 2000 	strb.w	r2, [sp]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e1c:	f001 ffb2 	bl	8005d84 <USB_DevInit>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e013      	b.n	8003e5a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	7b1b      	ldrb	r3, [r3, #12]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d102      	bne.n	8003e4e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f80b 	bl	8003e64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f002 f96d 	bl	8006132 <USB_DevDisconnect>

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e92:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	10000003 	.word	0x10000003

08003eac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb0:	4b05      	ldr	r3, [pc, #20]	@ (8003ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a04      	ldr	r2, [pc, #16]	@ (8003ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eba:	6013      	str	r3, [r2, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40007000 	.word	0x40007000

08003ecc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ed6:	4b23      	ldr	r3, [pc, #140]	@ (8003f64 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	4a22      	ldr	r2, [pc, #136]	@ (8003f64 <HAL_PWREx_EnableOverDrive+0x98>)
 8003edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ee2:	4b20      	ldr	r3, [pc, #128]	@ (8003f64 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eee:	4b1e      	ldr	r3, [pc, #120]	@ (8003f68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003efa:	f7fd fd71 	bl	80019e0 <HAL_GetTick>
 8003efe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f00:	e009      	b.n	8003f16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f02:	f7fd fd6d 	bl	80019e0 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f10:	d901      	bls.n	8003f16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e022      	b.n	8003f5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f16:	4b14      	ldr	r3, [pc, #80]	@ (8003f68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f22:	d1ee      	bne.n	8003f02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f24:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0f      	ldr	r2, [pc, #60]	@ (8003f68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f30:	f7fd fd56 	bl	80019e0 <HAL_GetTick>
 8003f34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f36:	e009      	b.n	8003f4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f38:	f7fd fd52 	bl	80019e0 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f46:	d901      	bls.n	8003f4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e007      	b.n	8003f5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f4c:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f58:	d1ee      	bne.n	8003f38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40007000 	.word	0x40007000

08003f6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f74:	2300      	movs	r3, #0
 8003f76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e29b      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 8087 	beq.w	800409e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f90:	4b96      	ldr	r3, [pc, #600]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d00c      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9c:	4b93      	ldr	r3, [pc, #588]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 030c 	and.w	r3, r3, #12
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d112      	bne.n	8003fce <HAL_RCC_OscConfig+0x62>
 8003fa8:	4b90      	ldr	r3, [pc, #576]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fb4:	d10b      	bne.n	8003fce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d06c      	beq.n	800409c <HAL_RCC_OscConfig+0x130>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d168      	bne.n	800409c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e275      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x7a>
 8003fd8:	4b84      	ldr	r3, [pc, #528]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a83      	ldr	r2, [pc, #524]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8003fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	e02e      	b.n	8004044 <HAL_RCC_OscConfig+0xd8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0x9c>
 8003fee:	4b7f      	ldr	r3, [pc, #508]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7b      	ldr	r2, [pc, #492]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004000:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e01d      	b.n	8004044 <HAL_RCC_OscConfig+0xd8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004010:	d10c      	bne.n	800402c <HAL_RCC_OscConfig+0xc0>
 8004012:	4b76      	ldr	r3, [pc, #472]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a75      	ldr	r2, [pc, #468]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4b73      	ldr	r3, [pc, #460]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a72      	ldr	r2, [pc, #456]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e00b      	b.n	8004044 <HAL_RCC_OscConfig+0xd8>
 800402c:	4b6f      	ldr	r3, [pc, #444]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a6e      	ldr	r2, [pc, #440]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b6c      	ldr	r3, [pc, #432]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a6b      	ldr	r2, [pc, #428]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 800403e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d013      	beq.n	8004074 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fd fcc8 	bl	80019e0 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004054:	f7fd fcc4 	bl	80019e0 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	@ 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e229      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	4b61      	ldr	r3, [pc, #388]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0xe8>
 8004072:	e014      	b.n	800409e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fd fcb4 	bl	80019e0 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407c:	f7fd fcb0 	bl	80019e0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	@ 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e215      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408e:	4b57      	ldr	r3, [pc, #348]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x110>
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d069      	beq.n	800417e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040aa:	4b50      	ldr	r3, [pc, #320]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b6:	4b4d      	ldr	r3, [pc, #308]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d11c      	bne.n	80040fc <HAL_RCC_OscConfig+0x190>
 80040c2:	4b4a      	ldr	r3, [pc, #296]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d116      	bne.n	80040fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ce:	4b47      	ldr	r3, [pc, #284]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_RCC_OscConfig+0x17a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d001      	beq.n	80040e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e1e9      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e6:	4b41      	ldr	r3, [pc, #260]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	493d      	ldr	r1, [pc, #244]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fa:	e040      	b.n	800417e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d023      	beq.n	800414c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004104:	4b39      	ldr	r3, [pc, #228]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a38      	ldr	r2, [pc, #224]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fd fc66 	bl	80019e0 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004118:	f7fd fc62 	bl	80019e0 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e1c7      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412a:	4b30      	ldr	r3, [pc, #192]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004136:	4b2d      	ldr	r3, [pc, #180]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4929      	ldr	r1, [pc, #164]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
 800414a:	e018      	b.n	800417e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800414c:	4b27      	ldr	r3, [pc, #156]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a26      	ldr	r2, [pc, #152]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fd fc42 	bl	80019e0 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004160:	f7fd fc3e 	bl	80019e0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e1a3      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004172:	4b1e      	ldr	r3, [pc, #120]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d038      	beq.n	80041fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d019      	beq.n	80041c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004192:	4b16      	ldr	r3, [pc, #88]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004196:	4a15      	ldr	r2, [pc, #84]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419e:	f7fd fc1f 	bl	80019e0 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a6:	f7fd fc1b 	bl	80019e0 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e180      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b8:	4b0c      	ldr	r3, [pc, #48]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 80041ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0x23a>
 80041c4:	e01a      	b.n	80041fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c6:	4b09      	ldr	r3, [pc, #36]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 80041c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ca:	4a08      	ldr	r2, [pc, #32]	@ (80041ec <HAL_RCC_OscConfig+0x280>)
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d2:	f7fd fc05 	bl	80019e0 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d8:	e00a      	b.n	80041f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041da:	f7fd fc01 	bl	80019e0 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d903      	bls.n	80041f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e166      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
 80041ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f0:	4b92      	ldr	r3, [pc, #584]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80041f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ee      	bne.n	80041da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80a4 	beq.w	8004352 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800420a:	4b8c      	ldr	r3, [pc, #560]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10d      	bne.n	8004232 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	4b89      	ldr	r3, [pc, #548]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	4a88      	ldr	r2, [pc, #544]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004220:	6413      	str	r3, [r2, #64]	@ 0x40
 8004222:	4b86      	ldr	r3, [pc, #536]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800422e:	2301      	movs	r3, #1
 8004230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004232:	4b83      	ldr	r3, [pc, #524]	@ (8004440 <HAL_RCC_OscConfig+0x4d4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d118      	bne.n	8004270 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800423e:	4b80      	ldr	r3, [pc, #512]	@ (8004440 <HAL_RCC_OscConfig+0x4d4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a7f      	ldr	r2, [pc, #508]	@ (8004440 <HAL_RCC_OscConfig+0x4d4>)
 8004244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424a:	f7fd fbc9 	bl	80019e0 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004252:	f7fd fbc5 	bl	80019e0 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b64      	cmp	r3, #100	@ 0x64
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e12a      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004264:	4b76      	ldr	r3, [pc, #472]	@ (8004440 <HAL_RCC_OscConfig+0x4d4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d106      	bne.n	8004286 <HAL_RCC_OscConfig+0x31a>
 8004278:	4b70      	ldr	r3, [pc, #448]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427c:	4a6f      	ldr	r2, [pc, #444]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6713      	str	r3, [r2, #112]	@ 0x70
 8004284:	e02d      	b.n	80042e2 <HAL_RCC_OscConfig+0x376>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10c      	bne.n	80042a8 <HAL_RCC_OscConfig+0x33c>
 800428e:	4b6b      	ldr	r3, [pc, #428]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004292:	4a6a      	ldr	r2, [pc, #424]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	6713      	str	r3, [r2, #112]	@ 0x70
 800429a:	4b68      	ldr	r3, [pc, #416]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429e:	4a67      	ldr	r2, [pc, #412]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80042a0:	f023 0304 	bic.w	r3, r3, #4
 80042a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a6:	e01c      	b.n	80042e2 <HAL_RCC_OscConfig+0x376>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b05      	cmp	r3, #5
 80042ae:	d10c      	bne.n	80042ca <HAL_RCC_OscConfig+0x35e>
 80042b0:	4b62      	ldr	r3, [pc, #392]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b4:	4a61      	ldr	r2, [pc, #388]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80042bc:	4b5f      	ldr	r3, [pc, #380]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c0:	4a5e      	ldr	r2, [pc, #376]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c8:	e00b      	b.n	80042e2 <HAL_RCC_OscConfig+0x376>
 80042ca:	4b5c      	ldr	r3, [pc, #368]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ce:	4a5b      	ldr	r2, [pc, #364]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d6:	4b59      	ldr	r3, [pc, #356]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042da:	4a58      	ldr	r2, [pc, #352]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d015      	beq.n	8004316 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fd fb79 	bl	80019e0 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fd fb75 	bl	80019e0 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e0d8      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004308:	4b4c      	ldr	r3, [pc, #304]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ee      	beq.n	80042f2 <HAL_RCC_OscConfig+0x386>
 8004314:	e014      	b.n	8004340 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004316:	f7fd fb63 	bl	80019e0 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431c:	e00a      	b.n	8004334 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431e:	f7fd fb5f 	bl	80019e0 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432c:	4293      	cmp	r3, r2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e0c2      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004334:	4b41      	ldr	r3, [pc, #260]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1ee      	bne.n	800431e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d105      	bne.n	8004352 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004346:	4b3d      	ldr	r3, [pc, #244]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	4a3c      	ldr	r2, [pc, #240]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 800434c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004350:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80ae 	beq.w	80044b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800435c:	4b37      	ldr	r3, [pc, #220]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 030c 	and.w	r3, r3, #12
 8004364:	2b08      	cmp	r3, #8
 8004366:	d06d      	beq.n	8004444 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d14b      	bne.n	8004408 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004370:	4b32      	ldr	r3, [pc, #200]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a31      	ldr	r2, [pc, #196]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 8004376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800437a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd fb30 	bl	80019e0 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004384:	f7fd fb2c 	bl	80019e0 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e091      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	4b29      	ldr	r3, [pc, #164]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69da      	ldr	r2, [r3, #28]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	019b      	lsls	r3, r3, #6
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b8:	085b      	lsrs	r3, r3, #1
 80043ba:	3b01      	subs	r3, #1
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	061b      	lsls	r3, r3, #24
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	071b      	lsls	r3, r3, #28
 80043ce:	491b      	ldr	r1, [pc, #108]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d4:	4b19      	ldr	r3, [pc, #100]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a18      	ldr	r2, [pc, #96]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80043da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fd fafe 	bl	80019e0 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fd fafa 	bl	80019e0 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e05f      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fa:	4b10      	ldr	r3, [pc, #64]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0x47c>
 8004406:	e057      	b.n	80044b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004408:	4b0c      	ldr	r3, [pc, #48]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a0b      	ldr	r2, [pc, #44]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 800440e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fd fae4 	bl	80019e0 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441c:	f7fd fae0 	bl	80019e0 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e045      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	4b03      	ldr	r3, [pc, #12]	@ (800443c <HAL_RCC_OscConfig+0x4d0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x4b0>
 800443a:	e03d      	b.n	80044b8 <HAL_RCC_OscConfig+0x54c>
 800443c:	40023800 	.word	0x40023800
 8004440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004444:	4b1f      	ldr	r3, [pc, #124]	@ (80044c4 <HAL_RCC_OscConfig+0x558>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d030      	beq.n	80044b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d129      	bne.n	80044b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d122      	bne.n	80044b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004474:	4013      	ands	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800447a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800447c:	4293      	cmp	r3, r2
 800447e:	d119      	bne.n	80044b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448a:	085b      	lsrs	r3, r3, #1
 800448c:	3b01      	subs	r3, #1
 800448e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d10f      	bne.n	80044b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40023800 	.word	0x40023800

080044c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0d0      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e0:	4b6a      	ldr	r3, [pc, #424]	@ (800468c <HAL_RCC_ClockConfig+0x1c4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d910      	bls.n	8004510 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4b67      	ldr	r3, [pc, #412]	@ (800468c <HAL_RCC_ClockConfig+0x1c4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 020f 	bic.w	r2, r3, #15
 80044f6:	4965      	ldr	r1, [pc, #404]	@ (800468c <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b63      	ldr	r3, [pc, #396]	@ (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0b8      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d020      	beq.n	800455e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004528:	4b59      	ldr	r3, [pc, #356]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4a58      	ldr	r2, [pc, #352]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 800452e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004532:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004540:	4b53      	ldr	r3, [pc, #332]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	4a52      	ldr	r2, [pc, #328]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 8004546:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800454a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800454c:	4b50      	ldr	r3, [pc, #320]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	494d      	ldr	r1, [pc, #308]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d040      	beq.n	80045ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d107      	bne.n	8004582 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	4b47      	ldr	r3, [pc, #284]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d115      	bne.n	80045aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e07f      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d107      	bne.n	800459a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458a:	4b41      	ldr	r3, [pc, #260]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d109      	bne.n	80045aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e073      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459a:	4b3d      	ldr	r3, [pc, #244]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e06b      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045aa:	4b39      	ldr	r3, [pc, #228]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f023 0203 	bic.w	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4936      	ldr	r1, [pc, #216]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045bc:	f7fd fa10 	bl	80019e0 <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c2:	e00a      	b.n	80045da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c4:	f7fd fa0c 	bl	80019e0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e053      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045da:	4b2d      	ldr	r3, [pc, #180]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 020c 	and.w	r2, r3, #12
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d1eb      	bne.n	80045c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045ec:	4b27      	ldr	r3, [pc, #156]	@ (800468c <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d210      	bcs.n	800461c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fa:	4b24      	ldr	r3, [pc, #144]	@ (800468c <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 020f 	bic.w	r2, r3, #15
 8004602:	4922      	ldr	r1, [pc, #136]	@ (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b20      	ldr	r3, [pc, #128]	@ (800468c <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e032      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004628:	4b19      	ldr	r3, [pc, #100]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4916      	ldr	r1, [pc, #88]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004646:	4b12      	ldr	r3, [pc, #72]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	490e      	ldr	r1, [pc, #56]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800465a:	f000 f821 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 800465e:	4602      	mov	r2, r0
 8004660:	4b0b      	ldr	r3, [pc, #44]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	490a      	ldr	r1, [pc, #40]	@ (8004694 <HAL_RCC_ClockConfig+0x1cc>)
 800466c:	5ccb      	ldrb	r3, [r1, r3]
 800466e:	fa22 f303 	lsr.w	r3, r2, r3
 8004672:	4a09      	ldr	r2, [pc, #36]	@ (8004698 <HAL_RCC_ClockConfig+0x1d0>)
 8004674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004676:	4b09      	ldr	r3, [pc, #36]	@ (800469c <HAL_RCC_ClockConfig+0x1d4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fd f96c 	bl	8001958 <HAL_InitTick>

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40023c00 	.word	0x40023c00
 8004690:	40023800 	.word	0x40023800
 8004694:	08009314 	.word	0x08009314
 8004698:	20000000 	.word	0x20000000
 800469c:	20000004 	.word	0x20000004

080046a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a4:	b094      	sub	sp, #80	@ 0x50
 80046a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ac:	2300      	movs	r3, #0
 80046ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b0:	2300      	movs	r3, #0
 80046b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046b8:	4b79      	ldr	r3, [pc, #484]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 030c 	and.w	r3, r3, #12
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d00d      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0x40>
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	f200 80e1 	bhi.w	800488c <HAL_RCC_GetSysClockFreq+0x1ec>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x34>
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d003      	beq.n	80046da <HAL_RCC_GetSysClockFreq+0x3a>
 80046d2:	e0db      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046d4:	4b73      	ldr	r3, [pc, #460]	@ (80048a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80046d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046d8:	e0db      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046da:	4b73      	ldr	r3, [pc, #460]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80046dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046de:	e0d8      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046e0:	4b6f      	ldr	r3, [pc, #444]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046ea:	4b6d      	ldr	r3, [pc, #436]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d063      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f6:	4b6a      	ldr	r3, [pc, #424]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	099b      	lsrs	r3, r3, #6
 80046fc:	2200      	movs	r2, #0
 80046fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004700:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004708:	633b      	str	r3, [r7, #48]	@ 0x30
 800470a:	2300      	movs	r3, #0
 800470c:	637b      	str	r3, [r7, #52]	@ 0x34
 800470e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004712:	4622      	mov	r2, r4
 8004714:	462b      	mov	r3, r5
 8004716:	f04f 0000 	mov.w	r0, #0
 800471a:	f04f 0100 	mov.w	r1, #0
 800471e:	0159      	lsls	r1, r3, #5
 8004720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004724:	0150      	lsls	r0, r2, #5
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4621      	mov	r1, r4
 800472c:	1a51      	subs	r1, r2, r1
 800472e:	6139      	str	r1, [r7, #16]
 8004730:	4629      	mov	r1, r5
 8004732:	eb63 0301 	sbc.w	r3, r3, r1
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004744:	4659      	mov	r1, fp
 8004746:	018b      	lsls	r3, r1, #6
 8004748:	4651      	mov	r1, sl
 800474a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800474e:	4651      	mov	r1, sl
 8004750:	018a      	lsls	r2, r1, #6
 8004752:	4651      	mov	r1, sl
 8004754:	ebb2 0801 	subs.w	r8, r2, r1
 8004758:	4659      	mov	r1, fp
 800475a:	eb63 0901 	sbc.w	r9, r3, r1
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800476a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800476e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004772:	4690      	mov	r8, r2
 8004774:	4699      	mov	r9, r3
 8004776:	4623      	mov	r3, r4
 8004778:	eb18 0303 	adds.w	r3, r8, r3
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	462b      	mov	r3, r5
 8004780:	eb49 0303 	adc.w	r3, r9, r3
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004792:	4629      	mov	r1, r5
 8004794:	024b      	lsls	r3, r1, #9
 8004796:	4621      	mov	r1, r4
 8004798:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800479c:	4621      	mov	r1, r4
 800479e:	024a      	lsls	r2, r1, #9
 80047a0:	4610      	mov	r0, r2
 80047a2:	4619      	mov	r1, r3
 80047a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047a6:	2200      	movs	r2, #0
 80047a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047b0:	f7fb fd9e 	bl	80002f0 <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4613      	mov	r3, r2
 80047ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047bc:	e058      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047be:	4b38      	ldr	r3, [pc, #224]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	099b      	lsrs	r3, r3, #6
 80047c4:	2200      	movs	r2, #0
 80047c6:	4618      	mov	r0, r3
 80047c8:	4611      	mov	r1, r2
 80047ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047ce:	623b      	str	r3, [r7, #32]
 80047d0:	2300      	movs	r3, #0
 80047d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047d8:	4642      	mov	r2, r8
 80047da:	464b      	mov	r3, r9
 80047dc:	f04f 0000 	mov.w	r0, #0
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	0159      	lsls	r1, r3, #5
 80047e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ea:	0150      	lsls	r0, r2, #5
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4641      	mov	r1, r8
 80047f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80047f6:	4649      	mov	r1, r9
 80047f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004808:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800480c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004810:	ebb2 040a 	subs.w	r4, r2, sl
 8004814:	eb63 050b 	sbc.w	r5, r3, fp
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	00eb      	lsls	r3, r5, #3
 8004822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004826:	00e2      	lsls	r2, r4, #3
 8004828:	4614      	mov	r4, r2
 800482a:	461d      	mov	r5, r3
 800482c:	4643      	mov	r3, r8
 800482e:	18e3      	adds	r3, r4, r3
 8004830:	603b      	str	r3, [r7, #0]
 8004832:	464b      	mov	r3, r9
 8004834:	eb45 0303 	adc.w	r3, r5, r3
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004846:	4629      	mov	r1, r5
 8004848:	028b      	lsls	r3, r1, #10
 800484a:	4621      	mov	r1, r4
 800484c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004850:	4621      	mov	r1, r4
 8004852:	028a      	lsls	r2, r1, #10
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800485a:	2200      	movs	r2, #0
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	61fa      	str	r2, [r7, #28]
 8004860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004864:	f7fb fd44 	bl	80002f0 <__aeabi_uldivmod>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4613      	mov	r3, r2
 800486e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004870:	4b0b      	ldr	r3, [pc, #44]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	3301      	adds	r3, #1
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004880:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800488a:	e002      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800488c:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800488e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004894:	4618      	mov	r0, r3
 8004896:	3750      	adds	r7, #80	@ 0x50
 8004898:	46bd      	mov	sp, r7
 800489a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800489e:	bf00      	nop
 80048a0:	40023800 	.word	0x40023800
 80048a4:	00f42400 	.word	0x00f42400
 80048a8:	007a1200 	.word	0x007a1200

080048ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b0:	4b03      	ldr	r3, [pc, #12]	@ (80048c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048b2:	681b      	ldr	r3, [r3, #0]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000000 	.word	0x20000000

080048c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048c8:	f7ff fff0 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	0a9b      	lsrs	r3, r3, #10
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	4903      	ldr	r1, [pc, #12]	@ (80048e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048da:	5ccb      	ldrb	r3, [r1, r3]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	08009324 	.word	0x08009324

080048ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048f0:	f7ff ffdc 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b05      	ldr	r3, [pc, #20]	@ (800490c <HAL_RCC_GetPCLK2Freq+0x20>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0b5b      	lsrs	r3, r3, #13
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4903      	ldr	r1, [pc, #12]	@ (8004910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40023800 	.word	0x40023800
 8004910:	08009324 	.word	0x08009324

08004914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d012      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800493c:	4b69      	ldr	r3, [pc, #420]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4a68      	ldr	r2, [pc, #416]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004942:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004946:	6093      	str	r3, [r2, #8]
 8004948:	4b66      	ldr	r3, [pc, #408]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004950:	4964      	ldr	r1, [pc, #400]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800495e:	2301      	movs	r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d017      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800496e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004974:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497c:	4959      	ldr	r1, [pc, #356]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004988:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800498c:	d101      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800498e:	2301      	movs	r3, #1
 8004990:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800499a:	2301      	movs	r3, #1
 800499c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d017      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049aa:	4b4e      	ldr	r3, [pc, #312]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b8:	494a      	ldr	r1, [pc, #296]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c8:	d101      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049ca:	2301      	movs	r3, #1
 80049cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049d6:	2301      	movs	r3, #1
 80049d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80049e6:	2301      	movs	r3, #1
 80049e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 808b 	beq.w	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049f8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	4a39      	ldr	r2, [pc, #228]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a04:	4b37      	ldr	r3, [pc, #220]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a10:	4b35      	ldr	r3, [pc, #212]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a34      	ldr	r2, [pc, #208]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1c:	f7fc ffe0 	bl	80019e0 <HAL_GetTick>
 8004a20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a24:	f7fc ffdc 	bl	80019e0 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	@ 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e38f      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a36:	4b2c      	ldr	r3, [pc, #176]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a42:	4b28      	ldr	r3, [pc, #160]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d035      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d02e      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a60:	4b20      	ldr	r3, [pc, #128]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a74:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a76:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a82:	4a18      	ldr	r2, [pc, #96]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a88:	4b16      	ldr	r3, [pc, #88]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d114      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fc ffa4 	bl	80019e0 <HAL_GetTick>
 8004a98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a9c:	f7fc ffa0 	bl	80019e0 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e351      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ee      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aca:	d111      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004acc:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ad8:	4b04      	ldr	r3, [pc, #16]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ada:	400b      	ands	r3, r1
 8004adc:	4901      	ldr	r1, [pc, #4]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
 8004ae2:	e00b      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40007000 	.word	0x40007000
 8004aec:	0ffffcff 	.word	0x0ffffcff
 8004af0:	4bac      	ldr	r3, [pc, #688]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4aab      	ldr	r2, [pc, #684]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004afa:	6093      	str	r3, [r2, #8]
 8004afc:	4ba9      	ldr	r3, [pc, #676]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b08:	49a6      	ldr	r1, [pc, #664]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d010      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b1a:	4ba2      	ldr	r3, [pc, #648]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b20:	4aa0      	ldr	r2, [pc, #640]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b2a:	4b9e      	ldr	r3, [pc, #632]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b34:	499b      	ldr	r1, [pc, #620]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b48:	4b96      	ldr	r3, [pc, #600]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b56:	4993      	ldr	r1, [pc, #588]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b6a:	4b8e      	ldr	r3, [pc, #568]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b78:	498a      	ldr	r1, [pc, #552]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b8c:	4b85      	ldr	r3, [pc, #532]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b9a:	4982      	ldr	r1, [pc, #520]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bae:	4b7d      	ldr	r3, [pc, #500]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbc:	4979      	ldr	r1, [pc, #484]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bd0:	4b74      	ldr	r3, [pc, #464]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd6:	f023 0203 	bic.w	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bde:	4971      	ldr	r1, [pc, #452]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bf2:	4b6c      	ldr	r3, [pc, #432]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf8:	f023 020c 	bic.w	r2, r3, #12
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c00:	4968      	ldr	r1, [pc, #416]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c14:	4b63      	ldr	r3, [pc, #396]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c22:	4960      	ldr	r1, [pc, #384]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c36:	4b5b      	ldr	r3, [pc, #364]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c3c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c44:	4957      	ldr	r1, [pc, #348]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c58:	4b52      	ldr	r3, [pc, #328]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c66:	494f      	ldr	r1, [pc, #316]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c88:	4946      	ldr	r1, [pc, #280]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c9c:	4b41      	ldr	r3, [pc, #260]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004caa:	493e      	ldr	r1, [pc, #248]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cbe:	4b39      	ldr	r3, [pc, #228]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ccc:	4935      	ldr	r1, [pc, #212]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ce0:	4b30      	ldr	r3, [pc, #192]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cee:	492d      	ldr	r1, [pc, #180]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d011      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d02:	4b28      	ldr	r3, [pc, #160]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d08:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d10:	4924      	ldr	r1, [pc, #144]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d20:	d101      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d22:	2301      	movs	r3, #1
 8004d24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d32:	2301      	movs	r3, #1
 8004d34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d42:	4b18      	ldr	r3, [pc, #96]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d48:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d50:	4914      	ldr	r1, [pc, #80]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00b      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d64:	4b0f      	ldr	r3, [pc, #60]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d74:	490b      	ldr	r1, [pc, #44]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00f      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004d88:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d98:	4902      	ldr	r1, [pc, #8]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004da0:	e002      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004da2:	bf00      	nop
 8004da4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004db4:	4b8a      	ldr	r3, [pc, #552]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc4:	4986      	ldr	r1, [pc, #536]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00b      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004dd8:	4b81      	ldr	r3, [pc, #516]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dde:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004de8:	497d      	ldr	r1, [pc, #500]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d006      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80d6 	beq.w	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e04:	4b76      	ldr	r3, [pc, #472]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a75      	ldr	r2, [pc, #468]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e10:	f7fc fde6 	bl	80019e0 <HAL_GetTick>
 8004e14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e16:	e008      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e18:	f7fc fde2 	bl	80019e0 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b64      	cmp	r3, #100	@ 0x64
 8004e24:	d901      	bls.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e195      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d021      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11d      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e4a:	4b65      	ldr	r3, [pc, #404]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e50:	0c1b      	lsrs	r3, r3, #16
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e58:	4b61      	ldr	r3, [pc, #388]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e5e:	0e1b      	lsrs	r3, r3, #24
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	019a      	lsls	r2, r3, #6
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	041b      	lsls	r3, r3, #16
 8004e70:	431a      	orrs	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	061b      	lsls	r3, r3, #24
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	071b      	lsls	r3, r3, #28
 8004e7e:	4958      	ldr	r1, [pc, #352]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d004      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d02e      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eb0:	d129      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eb8:	0c1b      	lsrs	r3, r3, #16
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ec0:	4b47      	ldr	r3, [pc, #284]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ec6:	0f1b      	lsrs	r3, r3, #28
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	019a      	lsls	r2, r3, #6
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	041b      	lsls	r3, r3, #16
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	061b      	lsls	r3, r3, #24
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	071b      	lsls	r3, r3, #28
 8004ee6:	493e      	ldr	r1, [pc, #248]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004eee:	4b3c      	ldr	r3, [pc, #240]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ef4:	f023 021f 	bic.w	r2, r3, #31
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	3b01      	subs	r3, #1
 8004efe:	4938      	ldr	r1, [pc, #224]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01d      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f12:	4b33      	ldr	r3, [pc, #204]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f18:	0e1b      	lsrs	r3, r3, #24
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f20:	4b2f      	ldr	r3, [pc, #188]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f26:	0f1b      	lsrs	r3, r3, #28
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	019a      	lsls	r2, r3, #6
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	431a      	orrs	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	071b      	lsls	r3, r3, #28
 8004f46:	4926      	ldr	r1, [pc, #152]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d011      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	019a      	lsls	r2, r3, #6
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	041b      	lsls	r3, r3, #16
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	061b      	lsls	r3, r3, #24
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	071b      	lsls	r3, r3, #28
 8004f76:	491a      	ldr	r1, [pc, #104]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f7e:	4b18      	ldr	r3, [pc, #96]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a17      	ldr	r2, [pc, #92]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8a:	f7fc fd29 	bl	80019e0 <HAL_GetTick>
 8004f8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f92:	f7fc fd25 	bl	80019e0 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b64      	cmp	r3, #100	@ 0x64
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e0d8      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	f040 80ce 	bne.w	8005154 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fb8:	4b09      	ldr	r3, [pc, #36]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a08      	ldr	r2, [pc, #32]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc4:	f7fc fd0c 	bl	80019e0 <HAL_GetTick>
 8004fc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fcc:	f7fc fd08 	bl	80019e0 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b64      	cmp	r3, #100	@ 0x64
 8004fd8:	d904      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e0bb      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004fde:	bf00      	nop
 8004fe0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ff0:	d0ec      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d009      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800500e:	2b00      	cmp	r3, #0
 8005010:	d02e      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d12a      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800501a:	4b51      	ldr	r3, [pc, #324]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005020:	0c1b      	lsrs	r3, r3, #16
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005028:	4b4d      	ldr	r3, [pc, #308]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502e:	0f1b      	lsrs	r3, r3, #28
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	019a      	lsls	r2, r3, #6
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	041b      	lsls	r3, r3, #16
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	431a      	orrs	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	071b      	lsls	r3, r3, #28
 800504e:	4944      	ldr	r1, [pc, #272]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005056:	4b42      	ldr	r3, [pc, #264]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800505c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005064:	3b01      	subs	r3, #1
 8005066:	021b      	lsls	r3, r3, #8
 8005068:	493d      	ldr	r1, [pc, #244]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d022      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005080:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005084:	d11d      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005086:	4b36      	ldr	r3, [pc, #216]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508c:	0e1b      	lsrs	r3, r3, #24
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005094:	4b32      	ldr	r3, [pc, #200]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509a:	0f1b      	lsrs	r3, r3, #28
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	019a      	lsls	r2, r3, #6
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	041b      	lsls	r3, r3, #16
 80050ae:	431a      	orrs	r2, r3
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	061b      	lsls	r3, r3, #24
 80050b4:	431a      	orrs	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	071b      	lsls	r3, r3, #28
 80050ba:	4929      	ldr	r1, [pc, #164]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d028      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050ce:	4b24      	ldr	r3, [pc, #144]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d4:	0e1b      	lsrs	r3, r3, #24
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050dc:	4b20      	ldr	r3, [pc, #128]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e2:	0c1b      	lsrs	r3, r3, #16
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	019a      	lsls	r2, r3, #6
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	431a      	orrs	r2, r3
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	061b      	lsls	r3, r3, #24
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	071b      	lsls	r3, r3, #28
 8005102:	4917      	ldr	r1, [pc, #92]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800510a:	4b15      	ldr	r3, [pc, #84]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800510c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005110:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	4911      	ldr	r1, [pc, #68]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005120:	4b0f      	ldr	r3, [pc, #60]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a0e      	ldr	r2, [pc, #56]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800512a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512c:	f7fc fc58 	bl	80019e0 <HAL_GetTick>
 8005130:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005134:	f7fc fc54 	bl	80019e0 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	@ 0x64
 8005140:	d901      	bls.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e007      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005146:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800514e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005152:	d1ef      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40023800 	.word	0x40023800

08005164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e040      	b.n	80051f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fc f91c 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2224      	movs	r2, #36	@ 0x24
 8005190:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fb16 	bl	80057dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f8af 	bl	8005314 <UART_SetConfig>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e01b      	b.n	80051f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fb95 	bl	8005920 <UART_CheckIdleState>
 80051f6:	4603      	mov	r3, r0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	@ 0x28
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005214:	2b20      	cmp	r3, #32
 8005216:	d177      	bne.n	8005308 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <HAL_UART_Transmit+0x24>
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e070      	b.n	800530a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2221      	movs	r2, #33	@ 0x21
 8005234:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005236:	f7fc fbd3 	bl	80019e0 <HAL_GetTick>
 800523a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005254:	d108      	bne.n	8005268 <HAL_UART_Transmit+0x68>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d104      	bne.n	8005268 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	e003      	b.n	8005270 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005270:	e02f      	b.n	80052d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2200      	movs	r2, #0
 800527a:	2180      	movs	r1, #128	@ 0x80
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fbf7 	bl	8005a70 <UART_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d004      	beq.n	8005292 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e03b      	b.n	800530a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10b      	bne.n	80052b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	3302      	adds	r3, #2
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	e007      	b.n	80052c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	781a      	ldrb	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	3301      	adds	r3, #1
 80052be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1c9      	bne.n	8005272 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2200      	movs	r2, #0
 80052e6:	2140      	movs	r1, #64	@ 0x40
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fbc1 	bl	8005a70 <UART_WaitOnFlagUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d004      	beq.n	80052fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e005      	b.n	800530a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	e000      	b.n	800530a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005308:	2302      	movs	r3, #2
  }
}
 800530a:	4618      	mov	r0, r3
 800530c:	3720      	adds	r7, #32
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4ba6      	ldr	r3, [pc, #664]	@ (80055d8 <UART_SetConfig+0x2c4>)
 8005340:	4013      	ands	r3, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	6979      	ldr	r1, [r7, #20]
 8005348:	430b      	orrs	r3, r1
 800534a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	430a      	orrs	r2, r1
 8005384:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a94      	ldr	r2, [pc, #592]	@ (80055dc <UART_SetConfig+0x2c8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d120      	bne.n	80053d2 <UART_SetConfig+0xbe>
 8005390:	4b93      	ldr	r3, [pc, #588]	@ (80055e0 <UART_SetConfig+0x2cc>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b03      	cmp	r3, #3
 800539c:	d816      	bhi.n	80053cc <UART_SetConfig+0xb8>
 800539e:	a201      	add	r2, pc, #4	@ (adr r2, 80053a4 <UART_SetConfig+0x90>)
 80053a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053c1 	.word	0x080053c1
 80053ac:	080053bb 	.word	0x080053bb
 80053b0:	080053c7 	.word	0x080053c7
 80053b4:	2301      	movs	r3, #1
 80053b6:	77fb      	strb	r3, [r7, #31]
 80053b8:	e150      	b.n	800565c <UART_SetConfig+0x348>
 80053ba:	2302      	movs	r3, #2
 80053bc:	77fb      	strb	r3, [r7, #31]
 80053be:	e14d      	b.n	800565c <UART_SetConfig+0x348>
 80053c0:	2304      	movs	r3, #4
 80053c2:	77fb      	strb	r3, [r7, #31]
 80053c4:	e14a      	b.n	800565c <UART_SetConfig+0x348>
 80053c6:	2308      	movs	r3, #8
 80053c8:	77fb      	strb	r3, [r7, #31]
 80053ca:	e147      	b.n	800565c <UART_SetConfig+0x348>
 80053cc:	2310      	movs	r3, #16
 80053ce:	77fb      	strb	r3, [r7, #31]
 80053d0:	e144      	b.n	800565c <UART_SetConfig+0x348>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a83      	ldr	r2, [pc, #524]	@ (80055e4 <UART_SetConfig+0x2d0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d132      	bne.n	8005442 <UART_SetConfig+0x12e>
 80053dc:	4b80      	ldr	r3, [pc, #512]	@ (80055e0 <UART_SetConfig+0x2cc>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e2:	f003 030c 	and.w	r3, r3, #12
 80053e6:	2b0c      	cmp	r3, #12
 80053e8:	d828      	bhi.n	800543c <UART_SetConfig+0x128>
 80053ea:	a201      	add	r2, pc, #4	@ (adr r2, 80053f0 <UART_SetConfig+0xdc>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005425 	.word	0x08005425
 80053f4:	0800543d 	.word	0x0800543d
 80053f8:	0800543d 	.word	0x0800543d
 80053fc:	0800543d 	.word	0x0800543d
 8005400:	08005431 	.word	0x08005431
 8005404:	0800543d 	.word	0x0800543d
 8005408:	0800543d 	.word	0x0800543d
 800540c:	0800543d 	.word	0x0800543d
 8005410:	0800542b 	.word	0x0800542b
 8005414:	0800543d 	.word	0x0800543d
 8005418:	0800543d 	.word	0x0800543d
 800541c:	0800543d 	.word	0x0800543d
 8005420:	08005437 	.word	0x08005437
 8005424:	2300      	movs	r3, #0
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e118      	b.n	800565c <UART_SetConfig+0x348>
 800542a:	2302      	movs	r3, #2
 800542c:	77fb      	strb	r3, [r7, #31]
 800542e:	e115      	b.n	800565c <UART_SetConfig+0x348>
 8005430:	2304      	movs	r3, #4
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e112      	b.n	800565c <UART_SetConfig+0x348>
 8005436:	2308      	movs	r3, #8
 8005438:	77fb      	strb	r3, [r7, #31]
 800543a:	e10f      	b.n	800565c <UART_SetConfig+0x348>
 800543c:	2310      	movs	r3, #16
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e10c      	b.n	800565c <UART_SetConfig+0x348>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a68      	ldr	r2, [pc, #416]	@ (80055e8 <UART_SetConfig+0x2d4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d120      	bne.n	800548e <UART_SetConfig+0x17a>
 800544c:	4b64      	ldr	r3, [pc, #400]	@ (80055e0 <UART_SetConfig+0x2cc>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005452:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005456:	2b30      	cmp	r3, #48	@ 0x30
 8005458:	d013      	beq.n	8005482 <UART_SetConfig+0x16e>
 800545a:	2b30      	cmp	r3, #48	@ 0x30
 800545c:	d814      	bhi.n	8005488 <UART_SetConfig+0x174>
 800545e:	2b20      	cmp	r3, #32
 8005460:	d009      	beq.n	8005476 <UART_SetConfig+0x162>
 8005462:	2b20      	cmp	r3, #32
 8005464:	d810      	bhi.n	8005488 <UART_SetConfig+0x174>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <UART_SetConfig+0x15c>
 800546a:	2b10      	cmp	r3, #16
 800546c:	d006      	beq.n	800547c <UART_SetConfig+0x168>
 800546e:	e00b      	b.n	8005488 <UART_SetConfig+0x174>
 8005470:	2300      	movs	r3, #0
 8005472:	77fb      	strb	r3, [r7, #31]
 8005474:	e0f2      	b.n	800565c <UART_SetConfig+0x348>
 8005476:	2302      	movs	r3, #2
 8005478:	77fb      	strb	r3, [r7, #31]
 800547a:	e0ef      	b.n	800565c <UART_SetConfig+0x348>
 800547c:	2304      	movs	r3, #4
 800547e:	77fb      	strb	r3, [r7, #31]
 8005480:	e0ec      	b.n	800565c <UART_SetConfig+0x348>
 8005482:	2308      	movs	r3, #8
 8005484:	77fb      	strb	r3, [r7, #31]
 8005486:	e0e9      	b.n	800565c <UART_SetConfig+0x348>
 8005488:	2310      	movs	r3, #16
 800548a:	77fb      	strb	r3, [r7, #31]
 800548c:	e0e6      	b.n	800565c <UART_SetConfig+0x348>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a56      	ldr	r2, [pc, #344]	@ (80055ec <UART_SetConfig+0x2d8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d120      	bne.n	80054da <UART_SetConfig+0x1c6>
 8005498:	4b51      	ldr	r3, [pc, #324]	@ (80055e0 <UART_SetConfig+0x2cc>)
 800549a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80054a4:	d013      	beq.n	80054ce <UART_SetConfig+0x1ba>
 80054a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80054a8:	d814      	bhi.n	80054d4 <UART_SetConfig+0x1c0>
 80054aa:	2b80      	cmp	r3, #128	@ 0x80
 80054ac:	d009      	beq.n	80054c2 <UART_SetConfig+0x1ae>
 80054ae:	2b80      	cmp	r3, #128	@ 0x80
 80054b0:	d810      	bhi.n	80054d4 <UART_SetConfig+0x1c0>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <UART_SetConfig+0x1a8>
 80054b6:	2b40      	cmp	r3, #64	@ 0x40
 80054b8:	d006      	beq.n	80054c8 <UART_SetConfig+0x1b4>
 80054ba:	e00b      	b.n	80054d4 <UART_SetConfig+0x1c0>
 80054bc:	2300      	movs	r3, #0
 80054be:	77fb      	strb	r3, [r7, #31]
 80054c0:	e0cc      	b.n	800565c <UART_SetConfig+0x348>
 80054c2:	2302      	movs	r3, #2
 80054c4:	77fb      	strb	r3, [r7, #31]
 80054c6:	e0c9      	b.n	800565c <UART_SetConfig+0x348>
 80054c8:	2304      	movs	r3, #4
 80054ca:	77fb      	strb	r3, [r7, #31]
 80054cc:	e0c6      	b.n	800565c <UART_SetConfig+0x348>
 80054ce:	2308      	movs	r3, #8
 80054d0:	77fb      	strb	r3, [r7, #31]
 80054d2:	e0c3      	b.n	800565c <UART_SetConfig+0x348>
 80054d4:	2310      	movs	r3, #16
 80054d6:	77fb      	strb	r3, [r7, #31]
 80054d8:	e0c0      	b.n	800565c <UART_SetConfig+0x348>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a44      	ldr	r2, [pc, #272]	@ (80055f0 <UART_SetConfig+0x2dc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d125      	bne.n	8005530 <UART_SetConfig+0x21c>
 80054e4:	4b3e      	ldr	r3, [pc, #248]	@ (80055e0 <UART_SetConfig+0x2cc>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054f2:	d017      	beq.n	8005524 <UART_SetConfig+0x210>
 80054f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054f8:	d817      	bhi.n	800552a <UART_SetConfig+0x216>
 80054fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054fe:	d00b      	beq.n	8005518 <UART_SetConfig+0x204>
 8005500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005504:	d811      	bhi.n	800552a <UART_SetConfig+0x216>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <UART_SetConfig+0x1fe>
 800550a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800550e:	d006      	beq.n	800551e <UART_SetConfig+0x20a>
 8005510:	e00b      	b.n	800552a <UART_SetConfig+0x216>
 8005512:	2300      	movs	r3, #0
 8005514:	77fb      	strb	r3, [r7, #31]
 8005516:	e0a1      	b.n	800565c <UART_SetConfig+0x348>
 8005518:	2302      	movs	r3, #2
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e09e      	b.n	800565c <UART_SetConfig+0x348>
 800551e:	2304      	movs	r3, #4
 8005520:	77fb      	strb	r3, [r7, #31]
 8005522:	e09b      	b.n	800565c <UART_SetConfig+0x348>
 8005524:	2308      	movs	r3, #8
 8005526:	77fb      	strb	r3, [r7, #31]
 8005528:	e098      	b.n	800565c <UART_SetConfig+0x348>
 800552a:	2310      	movs	r3, #16
 800552c:	77fb      	strb	r3, [r7, #31]
 800552e:	e095      	b.n	800565c <UART_SetConfig+0x348>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a2f      	ldr	r2, [pc, #188]	@ (80055f4 <UART_SetConfig+0x2e0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d125      	bne.n	8005586 <UART_SetConfig+0x272>
 800553a:	4b29      	ldr	r3, [pc, #164]	@ (80055e0 <UART_SetConfig+0x2cc>)
 800553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005540:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005544:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005548:	d017      	beq.n	800557a <UART_SetConfig+0x266>
 800554a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800554e:	d817      	bhi.n	8005580 <UART_SetConfig+0x26c>
 8005550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005554:	d00b      	beq.n	800556e <UART_SetConfig+0x25a>
 8005556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800555a:	d811      	bhi.n	8005580 <UART_SetConfig+0x26c>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <UART_SetConfig+0x254>
 8005560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005564:	d006      	beq.n	8005574 <UART_SetConfig+0x260>
 8005566:	e00b      	b.n	8005580 <UART_SetConfig+0x26c>
 8005568:	2301      	movs	r3, #1
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e076      	b.n	800565c <UART_SetConfig+0x348>
 800556e:	2302      	movs	r3, #2
 8005570:	77fb      	strb	r3, [r7, #31]
 8005572:	e073      	b.n	800565c <UART_SetConfig+0x348>
 8005574:	2304      	movs	r3, #4
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e070      	b.n	800565c <UART_SetConfig+0x348>
 800557a:	2308      	movs	r3, #8
 800557c:	77fb      	strb	r3, [r7, #31]
 800557e:	e06d      	b.n	800565c <UART_SetConfig+0x348>
 8005580:	2310      	movs	r3, #16
 8005582:	77fb      	strb	r3, [r7, #31]
 8005584:	e06a      	b.n	800565c <UART_SetConfig+0x348>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1b      	ldr	r2, [pc, #108]	@ (80055f8 <UART_SetConfig+0x2e4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d138      	bne.n	8005602 <UART_SetConfig+0x2ee>
 8005590:	4b13      	ldr	r3, [pc, #76]	@ (80055e0 <UART_SetConfig+0x2cc>)
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005596:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800559a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800559e:	d017      	beq.n	80055d0 <UART_SetConfig+0x2bc>
 80055a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055a4:	d82a      	bhi.n	80055fc <UART_SetConfig+0x2e8>
 80055a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055aa:	d00b      	beq.n	80055c4 <UART_SetConfig+0x2b0>
 80055ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055b0:	d824      	bhi.n	80055fc <UART_SetConfig+0x2e8>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <UART_SetConfig+0x2aa>
 80055b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ba:	d006      	beq.n	80055ca <UART_SetConfig+0x2b6>
 80055bc:	e01e      	b.n	80055fc <UART_SetConfig+0x2e8>
 80055be:	2300      	movs	r3, #0
 80055c0:	77fb      	strb	r3, [r7, #31]
 80055c2:	e04b      	b.n	800565c <UART_SetConfig+0x348>
 80055c4:	2302      	movs	r3, #2
 80055c6:	77fb      	strb	r3, [r7, #31]
 80055c8:	e048      	b.n	800565c <UART_SetConfig+0x348>
 80055ca:	2304      	movs	r3, #4
 80055cc:	77fb      	strb	r3, [r7, #31]
 80055ce:	e045      	b.n	800565c <UART_SetConfig+0x348>
 80055d0:	2308      	movs	r3, #8
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e042      	b.n	800565c <UART_SetConfig+0x348>
 80055d6:	bf00      	nop
 80055d8:	efff69f3 	.word	0xefff69f3
 80055dc:	40011000 	.word	0x40011000
 80055e0:	40023800 	.word	0x40023800
 80055e4:	40004400 	.word	0x40004400
 80055e8:	40004800 	.word	0x40004800
 80055ec:	40004c00 	.word	0x40004c00
 80055f0:	40005000 	.word	0x40005000
 80055f4:	40011400 	.word	0x40011400
 80055f8:	40007800 	.word	0x40007800
 80055fc:	2310      	movs	r3, #16
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e02c      	b.n	800565c <UART_SetConfig+0x348>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a72      	ldr	r2, [pc, #456]	@ (80057d0 <UART_SetConfig+0x4bc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d125      	bne.n	8005658 <UART_SetConfig+0x344>
 800560c:	4b71      	ldr	r3, [pc, #452]	@ (80057d4 <UART_SetConfig+0x4c0>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005612:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005616:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800561a:	d017      	beq.n	800564c <UART_SetConfig+0x338>
 800561c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005620:	d817      	bhi.n	8005652 <UART_SetConfig+0x33e>
 8005622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005626:	d00b      	beq.n	8005640 <UART_SetConfig+0x32c>
 8005628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800562c:	d811      	bhi.n	8005652 <UART_SetConfig+0x33e>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <UART_SetConfig+0x326>
 8005632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005636:	d006      	beq.n	8005646 <UART_SetConfig+0x332>
 8005638:	e00b      	b.n	8005652 <UART_SetConfig+0x33e>
 800563a:	2300      	movs	r3, #0
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e00d      	b.n	800565c <UART_SetConfig+0x348>
 8005640:	2302      	movs	r3, #2
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e00a      	b.n	800565c <UART_SetConfig+0x348>
 8005646:	2304      	movs	r3, #4
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e007      	b.n	800565c <UART_SetConfig+0x348>
 800564c:	2308      	movs	r3, #8
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e004      	b.n	800565c <UART_SetConfig+0x348>
 8005652:	2310      	movs	r3, #16
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e001      	b.n	800565c <UART_SetConfig+0x348>
 8005658:	2310      	movs	r3, #16
 800565a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005664:	d15b      	bne.n	800571e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005666:	7ffb      	ldrb	r3, [r7, #31]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d828      	bhi.n	80056be <UART_SetConfig+0x3aa>
 800566c:	a201      	add	r2, pc, #4	@ (adr r2, 8005674 <UART_SetConfig+0x360>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	08005699 	.word	0x08005699
 8005678:	080056a1 	.word	0x080056a1
 800567c:	080056a9 	.word	0x080056a9
 8005680:	080056bf 	.word	0x080056bf
 8005684:	080056af 	.word	0x080056af
 8005688:	080056bf 	.word	0x080056bf
 800568c:	080056bf 	.word	0x080056bf
 8005690:	080056bf 	.word	0x080056bf
 8005694:	080056b7 	.word	0x080056b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005698:	f7ff f914 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 800569c:	61b8      	str	r0, [r7, #24]
        break;
 800569e:	e013      	b.n	80056c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a0:	f7ff f924 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 80056a4:	61b8      	str	r0, [r7, #24]
        break;
 80056a6:	e00f      	b.n	80056c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a8:	4b4b      	ldr	r3, [pc, #300]	@ (80057d8 <UART_SetConfig+0x4c4>)
 80056aa:	61bb      	str	r3, [r7, #24]
        break;
 80056ac:	e00c      	b.n	80056c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ae:	f7fe fff7 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 80056b2:	61b8      	str	r0, [r7, #24]
        break;
 80056b4:	e008      	b.n	80056c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ba:	61bb      	str	r3, [r7, #24]
        break;
 80056bc:	e004      	b.n	80056c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	77bb      	strb	r3, [r7, #30]
        break;
 80056c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d074      	beq.n	80057b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	005a      	lsls	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	085b      	lsrs	r3, r3, #1
 80056d8:	441a      	add	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b0f      	cmp	r3, #15
 80056e8:	d916      	bls.n	8005718 <UART_SetConfig+0x404>
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f0:	d212      	bcs.n	8005718 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f023 030f 	bic.w	r3, r3, #15
 80056fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	b29b      	uxth	r3, r3
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	b29a      	uxth	r2, r3
 8005708:	89fb      	ldrh	r3, [r7, #14]
 800570a:	4313      	orrs	r3, r2
 800570c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	89fa      	ldrh	r2, [r7, #14]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	e04f      	b.n	80057b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	77bb      	strb	r3, [r7, #30]
 800571c:	e04c      	b.n	80057b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800571e:	7ffb      	ldrb	r3, [r7, #31]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d828      	bhi.n	8005776 <UART_SetConfig+0x462>
 8005724:	a201      	add	r2, pc, #4	@ (adr r2, 800572c <UART_SetConfig+0x418>)
 8005726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572a:	bf00      	nop
 800572c:	08005751 	.word	0x08005751
 8005730:	08005759 	.word	0x08005759
 8005734:	08005761 	.word	0x08005761
 8005738:	08005777 	.word	0x08005777
 800573c:	08005767 	.word	0x08005767
 8005740:	08005777 	.word	0x08005777
 8005744:	08005777 	.word	0x08005777
 8005748:	08005777 	.word	0x08005777
 800574c:	0800576f 	.word	0x0800576f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005750:	f7ff f8b8 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 8005754:	61b8      	str	r0, [r7, #24]
        break;
 8005756:	e013      	b.n	8005780 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005758:	f7ff f8c8 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 800575c:	61b8      	str	r0, [r7, #24]
        break;
 800575e:	e00f      	b.n	8005780 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005760:	4b1d      	ldr	r3, [pc, #116]	@ (80057d8 <UART_SetConfig+0x4c4>)
 8005762:	61bb      	str	r3, [r7, #24]
        break;
 8005764:	e00c      	b.n	8005780 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005766:	f7fe ff9b 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 800576a:	61b8      	str	r0, [r7, #24]
        break;
 800576c:	e008      	b.n	8005780 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005772:	61bb      	str	r3, [r7, #24]
        break;
 8005774:	e004      	b.n	8005780 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	77bb      	strb	r3, [r7, #30]
        break;
 800577e:	bf00      	nop
    }

    if (pclk != 0U)
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d018      	beq.n	80057b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	085a      	lsrs	r2, r3, #1
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	441a      	add	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b0f      	cmp	r3, #15
 800579e:	d909      	bls.n	80057b4 <UART_SetConfig+0x4a0>
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a6:	d205      	bcs.n	80057b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60da      	str	r2, [r3, #12]
 80057b2:	e001      	b.n	80057b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40007c00 	.word	0x40007c00
 80057d4:	40023800 	.word	0x40023800
 80057d8:	00f42400 	.word	0x00f42400

080057dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01a      	beq.n	80058f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058da:	d10a      	bne.n	80058f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	605a      	str	r2, [r3, #4]
  }
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b098      	sub	sp, #96	@ 0x60
 8005924:	af02      	add	r7, sp, #8
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005930:	f7fc f856 	bl	80019e0 <HAL_GetTick>
 8005934:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b08      	cmp	r3, #8
 8005942:	d12e      	bne.n	80059a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005944:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800594c:	2200      	movs	r2, #0
 800594e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f88c 	bl	8005a70 <UART_WaitOnFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d021      	beq.n	80059a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800596c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005972:	653b      	str	r3, [r7, #80]	@ 0x50
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800597c:	647b      	str	r3, [r7, #68]	@ 0x44
 800597e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005982:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800598a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e6      	bne.n	800595e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e062      	b.n	8005a68 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d149      	bne.n	8005a44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059b8:	2200      	movs	r2, #0
 80059ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f856 	bl	8005a70 <UART_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d03c      	beq.n	8005a44 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	623b      	str	r3, [r7, #32]
   return(result);
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e6      	bne.n	80059ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a1c:	61fa      	str	r2, [r7, #28]
 8005a1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	69b9      	ldr	r1, [r7, #24]
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	617b      	str	r3, [r7, #20]
   return(result);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e011      	b.n	8005a68 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3758      	adds	r7, #88	@ 0x58
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a80:	e04f      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d04b      	beq.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8a:	f7fb ffa9 	bl	80019e0 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d302      	bcc.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e04e      	b.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d037      	beq.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b80      	cmp	r3, #128	@ 0x80
 8005ab6:	d034      	beq.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b40      	cmp	r3, #64	@ 0x40
 8005abc:	d031      	beq.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d110      	bne.n	8005aee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f838 	bl	8005b4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2208      	movs	r2, #8
 8005ade:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e029      	b.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005afc:	d111      	bne.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f81e 	bl	8005b4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e00f      	b.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	bf0c      	ite	eq
 8005b32:	2301      	moveq	r3, #1
 8005b34:	2300      	movne	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d0a0      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b095      	sub	sp, #84	@ 0x54
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b70:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e6      	bne.n	8005b52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3308      	adds	r3, #8
 8005b8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f023 0301 	bic.w	r3, r3, #1
 8005b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ba4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e5      	bne.n	8005b84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d118      	bne.n	8005bf2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f023 0310 	bic.w	r3, r3, #16
 8005bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	6979      	ldr	r1, [r7, #20]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	613b      	str	r3, [r7, #16]
   return(result);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e6      	bne.n	8005bc0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c06:	bf00      	nop
 8005c08:	3754      	adds	r7, #84	@ 0x54
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
	...

08005c14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c14:	b084      	sub	sp, #16
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	f107 001c 	add.w	r0, r7, #28
 8005c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c26:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d121      	bne.n	8005c72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c32:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	4b21      	ldr	r3, [pc, #132]	@ (8005cc4 <USB_CoreInit+0xb0>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d105      	bne.n	8005c66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fa92 	bl	8006190 <USB_CoreReset>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	73fb      	strb	r3, [r7, #15]
 8005c70:	e010      	b.n	8005c94 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fa86 	bl	8006190 <USB_CoreReset>
 8005c84:	4603      	mov	r3, r0
 8005c86:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005c94:	7fbb      	ldrb	r3, [r7, #30]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d10b      	bne.n	8005cb2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f043 0206 	orr.w	r2, r3, #6
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cbe:	b004      	add	sp, #16
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	ffbdffbf 	.word	0xffbdffbf

08005cc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f023 0201 	bic.w	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d115      	bne.n	8005d38 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d18:	200a      	movs	r0, #10
 8005d1a:	f7fb fe6d 	bl	80019f8 <HAL_Delay>
      ms += 10U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	330a      	adds	r3, #10
 8005d22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fa25 	bl	8006174 <USB_GetMode>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d01e      	beq.n	8005d6e <USB_SetCurrentMode+0x84>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d34:	d9f0      	bls.n	8005d18 <USB_SetCurrentMode+0x2e>
 8005d36:	e01a      	b.n	8005d6e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d115      	bne.n	8005d6a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d4a:	200a      	movs	r0, #10
 8005d4c:	f7fb fe54 	bl	80019f8 <HAL_Delay>
      ms += 10U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	330a      	adds	r3, #10
 8005d54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa0c 	bl	8006174 <USB_GetMode>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <USB_SetCurrentMode+0x84>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d66:	d9f0      	bls.n	8005d4a <USB_SetCurrentMode+0x60>
 8005d68:	e001      	b.n	8005d6e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e005      	b.n	8005d7a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d72:	d101      	bne.n	8005d78 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e000      	b.n	8005d7a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d84:	b084      	sub	sp, #16
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b086      	sub	sp, #24
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	e009      	b.n	8005db8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	3340      	adds	r3, #64	@ 0x40
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	2200      	movs	r2, #0
 8005db0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	3301      	adds	r3, #1
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b0e      	cmp	r3, #14
 8005dbc:	d9f2      	bls.n	8005da4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005dbe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d11c      	bne.n	8005e00 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dd4:	f043 0302 	orr.w	r3, r3, #2
 8005dd8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dde:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e005      	b.n	8005e0c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e04:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e12:	461a      	mov	r2, r3
 8005e14:	2300      	movs	r3, #0
 8005e16:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e18:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d10d      	bne.n	8005e3c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e28:	2100      	movs	r1, #0
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f968 	bl	8006100 <USB_SetDevSpeed>
 8005e30:	e008      	b.n	8005e44 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e32:	2101      	movs	r1, #1
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f963 	bl	8006100 <USB_SetDevSpeed>
 8005e3a:	e003      	b.n	8005e44 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e3c:	2103      	movs	r1, #3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f95e 	bl	8006100 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e44:	2110      	movs	r1, #16
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f8fa 	bl	8006040 <USB_FlushTxFifo>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f924 	bl	80060a4 <USB_FlushRxFifo>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	2300      	movs	r3, #0
 8005e70:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e78:	461a      	mov	r2, r3
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e84:	461a      	mov	r2, r3
 8005e86:	2300      	movs	r3, #0
 8005e88:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	e043      	b.n	8005f18 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ea6:	d118      	bne.n	8005eda <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e013      	b.n	8005eec <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	e008      	b.n	8005eec <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef8:	461a      	mov	r2, r3
 8005efa:	2300      	movs	r3, #0
 8005efc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	3301      	adds	r3, #1
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d3b5      	bcc.n	8005e90 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
 8005f28:	e043      	b.n	8005fb2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f40:	d118      	bne.n	8005f74 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f54:	461a      	mov	r2, r3
 8005f56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	e013      	b.n	8005f86 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	e008      	b.n	8005f86 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f80:	461a      	mov	r2, r3
 8005f82:	2300      	movs	r3, #0
 8005f84:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f92:	461a      	mov	r2, r3
 8005f94:	2300      	movs	r3, #0
 8005f96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005faa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d3b5      	bcc.n	8005f2a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fd0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005fde:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d105      	bne.n	8005ff4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	f043 0210 	orr.w	r2, r3, #16
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699a      	ldr	r2, [r3, #24]
 8005ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8006038 <USB_DevInit+0x2b4>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006000:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f043 0208 	orr.w	r2, r3, #8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006014:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006018:	2b01      	cmp	r3, #1
 800601a:	d105      	bne.n	8006028 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699a      	ldr	r2, [r3, #24]
 8006020:	4b06      	ldr	r3, [pc, #24]	@ (800603c <USB_DevInit+0x2b8>)
 8006022:	4313      	orrs	r3, r2
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006028:	7dfb      	ldrb	r3, [r7, #23]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006034:	b004      	add	sp, #16
 8006036:	4770      	bx	lr
 8006038:	803c3800 	.word	0x803c3800
 800603c:	40000004 	.word	0x40000004

08006040 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3301      	adds	r3, #1
 8006052:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800605a:	d901      	bls.n	8006060 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e01b      	b.n	8006098 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	daf2      	bge.n	800604e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	019b      	lsls	r3, r3, #6
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3301      	adds	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006084:	d901      	bls.n	800608a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e006      	b.n	8006098 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b20      	cmp	r3, #32
 8006094:	d0f0      	beq.n	8006078 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060bc:	d901      	bls.n	80060c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e018      	b.n	80060f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	daf2      	bge.n	80060b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2210      	movs	r2, #16
 80060d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060e0:	d901      	bls.n	80060e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e006      	b.n	80060f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d0f0      	beq.n	80060d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	68f9      	ldr	r1, [r7, #12]
 800611c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006120:	4313      	orrs	r3, r2
 8006122:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006132:	b480      	push	{r7}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800614c:	f023 0303 	bic.w	r3, r3, #3
 8006150:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006160:	f043 0302 	orr.w	r3, r3, #2
 8006164:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f003 0301 	and.w	r3, r3, #1
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3301      	adds	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061a8:	d901      	bls.n	80061ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e01b      	b.n	80061e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	daf2      	bge.n	800619c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f043 0201 	orr.w	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061d2:	d901      	bls.n	80061d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e006      	b.n	80061e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d0f0      	beq.n	80061c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <log10f>:
 80061f4:	b508      	push	{r3, lr}
 80061f6:	ed2d 8b02 	vpush	{d8}
 80061fa:	eeb0 8a40 	vmov.f32	s16, s0
 80061fe:	f000 f9f5 	bl	80065ec <__ieee754_log10f>
 8006202:	eeb4 8a48 	vcmp.f32	s16, s16
 8006206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620a:	d60f      	bvs.n	800622c <log10f+0x38>
 800620c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006214:	d80a      	bhi.n	800622c <log10f+0x38>
 8006216:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800621a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621e:	d108      	bne.n	8006232 <log10f+0x3e>
 8006220:	f001 f852 	bl	80072c8 <__errno>
 8006224:	2322      	movs	r3, #34	@ 0x22
 8006226:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006248 <log10f+0x54>
 800622a:	6003      	str	r3, [r0, #0]
 800622c:	ecbd 8b02 	vpop	{d8}
 8006230:	bd08      	pop	{r3, pc}
 8006232:	f001 f849 	bl	80072c8 <__errno>
 8006236:	ecbd 8b02 	vpop	{d8}
 800623a:	2321      	movs	r3, #33	@ 0x21
 800623c:	6003      	str	r3, [r0, #0]
 800623e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006242:	4802      	ldr	r0, [pc, #8]	@ (800624c <log10f+0x58>)
 8006244:	f000 b804 	b.w	8006250 <nanf>
 8006248:	ff800000 	.word	0xff800000
 800624c:	0800992e 	.word	0x0800992e

08006250 <nanf>:
 8006250:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006258 <nanf+0x8>
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	7fc00000 	.word	0x7fc00000

0800625c <checkint>:
 800625c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006260:	2b7e      	cmp	r3, #126	@ 0x7e
 8006262:	d910      	bls.n	8006286 <checkint+0x2a>
 8006264:	2b96      	cmp	r3, #150	@ 0x96
 8006266:	d80c      	bhi.n	8006282 <checkint+0x26>
 8006268:	2201      	movs	r2, #1
 800626a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	1e5a      	subs	r2, r3, #1
 8006274:	4202      	tst	r2, r0
 8006276:	d106      	bne.n	8006286 <checkint+0x2a>
 8006278:	4203      	tst	r3, r0
 800627a:	bf0c      	ite	eq
 800627c:	2002      	moveq	r0, #2
 800627e:	2001      	movne	r0, #1
 8006280:	4770      	bx	lr
 8006282:	2002      	movs	r0, #2
 8006284:	4770      	bx	lr
 8006286:	2000      	movs	r0, #0
 8006288:	4770      	bx	lr
 800628a:	0000      	movs	r0, r0
 800628c:	0000      	movs	r0, r0
	...

08006290 <powf>:
 8006290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006292:	ee10 1a10 	vmov	r1, s0
 8006296:	ee10 4a90 	vmov	r4, s1
 800629a:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 800629e:	0063      	lsls	r3, r4, #1
 80062a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80062a4:	eef0 7a40 	vmov.f32	s15, s0
 80062a8:	eeb0 7a60 	vmov.f32	s14, s1
 80062ac:	f103 30ff 	add.w	r0, r3, #4294967295
 80062b0:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 80062b4:	d252      	bcs.n	800635c <powf+0xcc>
 80062b6:	4290      	cmp	r0, r2
 80062b8:	d258      	bcs.n	800636c <powf+0xdc>
 80062ba:	2000      	movs	r0, #0
 80062bc:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 80062c0:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 80062c4:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 80062c8:	0ddb      	lsrs	r3, r3, #23
 80062ca:	4a9d      	ldr	r2, [pc, #628]	@ (8006540 <powf+0x2b0>)
 80062cc:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 80062d0:	05db      	lsls	r3, r3, #23
 80062d2:	1ac9      	subs	r1, r1, r3
 80062d4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 80062d8:	ee07 1a90 	vmov	s15, r1
 80062dc:	ed94 5b02 	vldr	d5, [r4, #8]
 80062e0:	ed94 4b00 	vldr	d4, [r4]
 80062e4:	15db      	asrs	r3, r3, #23
 80062e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eea4 2b06 	vfma.f64	d2, d4, d6
 80062f2:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 80062f6:	ee22 4b02 	vmul.f64	d4, d2, d2
 80062fa:	ee24 0b04 	vmul.f64	d0, d4, d4
 80062fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006302:	ee36 6b05 	vadd.f64	d6, d6, d5
 8006306:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 800630a:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 800630e:	eea2 1b05 	vfma.f64	d1, d2, d5
 8006312:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 8006316:	eea2 5b03 	vfma.f64	d5, d2, d3
 800631a:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 800631e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8006322:	eea2 6b03 	vfma.f64	d6, d2, d3
 8006326:	eea4 6b05 	vfma.f64	d6, d4, d5
 800632a:	eea1 6b00 	vfma.f64	d6, d1, d0
 800632e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006332:	ee17 3a90 	vmov	r3, s15
 8006336:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800633a:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 800633e:	429a      	cmp	r2, r3
 8006340:	f0c0 80b8 	bcc.w	80064b4 <powf+0x224>
 8006344:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8006520 <powf+0x290>
 8006348:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800634c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006350:	dd79      	ble.n	8006446 <powf+0x1b6>
 8006352:	b003      	add	sp, #12
 8006354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006358:	f000 b920 	b.w	800659c <__math_oflowf>
 800635c:	4290      	cmp	r0, r2
 800635e:	d330      	bcc.n	80063c2 <powf+0x132>
 8006360:	b12b      	cbz	r3, 800636e <powf+0xde>
 8006362:	0049      	lsls	r1, r1, #1
 8006364:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 8006368:	d808      	bhi.n	800637c <powf+0xec>
 800636a:	e015      	b.n	8006398 <powf+0x108>
 800636c:	b953      	cbnz	r3, 8006384 <powf+0xf4>
 800636e:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 8006372:	0049      	lsls	r1, r1, #1
 8006374:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 8006378:	f240 80ca 	bls.w	8006510 <powf+0x280>
 800637c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8006380:	b003      	add	sp, #12
 8006382:	bd30      	pop	{r4, r5, pc}
 8006384:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8006388:	d105      	bne.n	8006396 <powf+0x106>
 800638a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800638e:	0064      	lsls	r4, r4, #1
 8006390:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8006394:	e7f0      	b.n	8006378 <powf+0xe8>
 8006396:	0049      	lsls	r1, r1, #1
 8006398:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 800639c:	d1ee      	bne.n	800637c <powf+0xec>
 800639e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 80063a2:	f000 80b5 	beq.w	8006510 <powf+0x280>
 80063a6:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 80063aa:	ea6f 0404 	mvn.w	r4, r4
 80063ae:	bf34      	ite	cc
 80063b0:	2100      	movcc	r1, #0
 80063b2:	2101      	movcs	r1, #1
 80063b4:	0fe4      	lsrs	r4, r4, #31
 80063b6:	42a1      	cmp	r1, r4
 80063b8:	f040 80ad 	bne.w	8006516 <powf+0x286>
 80063bc:	ee27 0a07 	vmul.f32	s0, s14, s14
 80063c0:	e7de      	b.n	8006380 <powf+0xf0>
 80063c2:	004d      	lsls	r5, r1, #1
 80063c4:	1e6b      	subs	r3, r5, #1
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d31b      	bcc.n	8006402 <powf+0x172>
 80063ca:	2900      	cmp	r1, #0
 80063cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80063d0:	da0e      	bge.n	80063f0 <powf+0x160>
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7ff ff42 	bl	800625c <checkint>
 80063d8:	2801      	cmp	r0, #1
 80063da:	d109      	bne.n	80063f0 <powf+0x160>
 80063dc:	eeb1 0a40 	vneg.f32	s0, s0
 80063e0:	b945      	cbnz	r5, 80063f4 <powf+0x164>
 80063e2:	2c00      	cmp	r4, #0
 80063e4:	dacc      	bge.n	8006380 <powf+0xf0>
 80063e6:	b003      	add	sp, #12
 80063e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063ec:	f000 b8dc 	b.w	80065a8 <__math_divzerof>
 80063f0:	2000      	movs	r0, #0
 80063f2:	e7f5      	b.n	80063e0 <powf+0x150>
 80063f4:	2c00      	cmp	r4, #0
 80063f6:	dac3      	bge.n	8006380 <powf+0xf0>
 80063f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80063fc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006400:	e7be      	b.n	8006380 <powf+0xf0>
 8006402:	2900      	cmp	r1, #0
 8006404:	da1d      	bge.n	8006442 <powf+0x1b2>
 8006406:	4620      	mov	r0, r4
 8006408:	f7ff ff28 	bl	800625c <checkint>
 800640c:	b920      	cbnz	r0, 8006418 <powf+0x188>
 800640e:	b003      	add	sp, #12
 8006410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006414:	f000 b8da 	b.w	80065cc <__math_invalidf>
 8006418:	1e43      	subs	r3, r0, #1
 800641a:	4258      	negs	r0, r3
 800641c:	4158      	adcs	r0, r3
 800641e:	0400      	lsls	r0, r0, #16
 8006420:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006424:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8006428:	f4bf af48 	bcs.w	80062bc <powf+0x2c>
 800642c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8006544 <powf+0x2b4>
 8006430:	ee27 0aa6 	vmul.f32	s0, s15, s13
 8006434:	ee10 3a10 	vmov	r3, s0
 8006438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800643c:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 8006440:	e73c      	b.n	80062bc <powf+0x2c>
 8006442:	2000      	movs	r0, #0
 8006444:	e7ee      	b.n	8006424 <powf+0x194>
 8006446:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8006528 <powf+0x298>
 800644a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800644e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006452:	dd0f      	ble.n	8006474 <powf+0x1e4>
 8006454:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 8006458:	b1c0      	cbz	r0, 800648c <powf+0x1fc>
 800645a:	9301      	str	r3, [sp, #4]
 800645c:	eddd 6a01 	vldr	s13, [sp, #4]
 8006460:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 8006464:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006468:	eef4 6a46 	vcmp.f32	s13, s12
 800646c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006470:	f47f af6f 	bne.w	8006352 <powf+0xc2>
 8006474:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8006530 <powf+0x2a0>
 8006478:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800647c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006480:	d80c      	bhi.n	800649c <powf+0x20c>
 8006482:	b003      	add	sp, #12
 8006484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006488:	f000 b87c 	b.w	8006584 <__math_uflowf>
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	eddd 6a00 	vldr	s13, [sp]
 8006492:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006496:	ee76 6a86 	vadd.f32	s13, s13, s12
 800649a:	e7e5      	b.n	8006468 <powf+0x1d8>
 800649c:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8006538 <powf+0x2a8>
 80064a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80064a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a8:	d504      	bpl.n	80064b4 <powf+0x224>
 80064aa:	b003      	add	sp, #12
 80064ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064b0:	f000 b86e 	b.w	8006590 <__math_may_uflowf>
 80064b4:	4b24      	ldr	r3, [pc, #144]	@ (8006548 <powf+0x2b8>)
 80064b6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80064ba:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 80064be:	ee37 6b05 	vadd.f64	d6, d7, d5
 80064c2:	ee16 2a10 	vmov	r2, s12
 80064c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80064ca:	f002 011f 	and.w	r1, r2, #31
 80064ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80064d2:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 80064d6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064da:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 80064de:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80064e2:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80064e6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80064ea:	686d      	ldr	r5, [r5, #4]
 80064ec:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 80064f0:	1880      	adds	r0, r0, r2
 80064f2:	2100      	movs	r1, #0
 80064f4:	190a      	adds	r2, r1, r4
 80064f6:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 80064fa:	eea7 0b05 	vfma.f64	d0, d7, d5
 80064fe:	ec43 2b17 	vmov	d7, r2, r3
 8006502:	eea6 0b04 	vfma.f64	d0, d6, d4
 8006506:	ee20 0b07 	vmul.f64	d0, d0, d7
 800650a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800650e:	e737      	b.n	8006380 <powf+0xf0>
 8006510:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006514:	e734      	b.n	8006380 <powf+0xf0>
 8006516:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800654c <powf+0x2bc>
 800651a:	e731      	b.n	8006380 <powf+0xf0>
 800651c:	f3af 8000 	nop.w
 8006520:	ffd1d571 	.word	0xffd1d571
 8006524:	405fffff 	.word	0x405fffff
 8006528:	ffa3aae2 	.word	0xffa3aae2
 800652c:	405fffff 	.word	0x405fffff
 8006530:	00000000 	.word	0x00000000
 8006534:	c062c000 	.word	0xc062c000
 8006538:	00000000 	.word	0x00000000
 800653c:	c062a000 	.word	0xc062a000
 8006540:	08009598 	.word	0x08009598
 8006544:	4b000000 	.word	0x4b000000
 8006548:	08009330 	.word	0x08009330
 800654c:	00000000 	.word	0x00000000

08006550 <with_errnof>:
 8006550:	b510      	push	{r4, lr}
 8006552:	ed2d 8b02 	vpush	{d8}
 8006556:	eeb0 8a40 	vmov.f32	s16, s0
 800655a:	4604      	mov	r4, r0
 800655c:	f000 feb4 	bl	80072c8 <__errno>
 8006560:	eeb0 0a48 	vmov.f32	s0, s16
 8006564:	ecbd 8b02 	vpop	{d8}
 8006568:	6004      	str	r4, [r0, #0]
 800656a:	bd10      	pop	{r4, pc}

0800656c <xflowf>:
 800656c:	b130      	cbz	r0, 800657c <xflowf+0x10>
 800656e:	eef1 7a40 	vneg.f32	s15, s0
 8006572:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006576:	2022      	movs	r0, #34	@ 0x22
 8006578:	f7ff bfea 	b.w	8006550 <with_errnof>
 800657c:	eef0 7a40 	vmov.f32	s15, s0
 8006580:	e7f7      	b.n	8006572 <xflowf+0x6>
	...

08006584 <__math_uflowf>:
 8006584:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800658c <__math_uflowf+0x8>
 8006588:	f7ff bff0 	b.w	800656c <xflowf>
 800658c:	10000000 	.word	0x10000000

08006590 <__math_may_uflowf>:
 8006590:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006598 <__math_may_uflowf+0x8>
 8006594:	f7ff bfea 	b.w	800656c <xflowf>
 8006598:	1a200000 	.word	0x1a200000

0800659c <__math_oflowf>:
 800659c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80065a4 <__math_oflowf+0x8>
 80065a0:	f7ff bfe4 	b.w	800656c <xflowf>
 80065a4:	70000000 	.word	0x70000000

080065a8 <__math_divzerof>:
 80065a8:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80065c8 <__math_divzerof+0x20>
 80065ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80065b0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f04f 0022 	mov.w	r0, #34	@ 0x22
 80065ba:	fe47 7a87 	vseleq.f32	s15, s15, s14
 80065be:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80065c2:	f7ff bfc5 	b.w	8006550 <with_errnof>
 80065c6:	bf00      	nop
 80065c8:	00000000 	.word	0x00000000

080065cc <__math_invalidf>:
 80065cc:	eef0 7a40 	vmov.f32	s15, s0
 80065d0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80065d4:	eef4 7a67 	vcmp.f32	s15, s15
 80065d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065dc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80065e0:	d602      	bvs.n	80065e8 <__math_invalidf+0x1c>
 80065e2:	2021      	movs	r0, #33	@ 0x21
 80065e4:	f7ff bfb4 	b.w	8006550 <with_errnof>
 80065e8:	4770      	bx	lr
	...

080065ec <__ieee754_log10f>:
 80065ec:	b508      	push	{r3, lr}
 80065ee:	ee10 3a10 	vmov	r3, s0
 80065f2:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80065f6:	ed2d 8b02 	vpush	{d8}
 80065fa:	d108      	bne.n	800660e <__ieee754_log10f+0x22>
 80065fc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006684 <__ieee754_log10f+0x98>
 8006600:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8006688 <__ieee754_log10f+0x9c>
 8006604:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006608:	ecbd 8b02 	vpop	{d8}
 800660c:	bd08      	pop	{r3, pc}
 800660e:	2b00      	cmp	r3, #0
 8006610:	461a      	mov	r2, r3
 8006612:	da02      	bge.n	800661a <__ieee754_log10f+0x2e>
 8006614:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006618:	e7f2      	b.n	8006600 <__ieee754_log10f+0x14>
 800661a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800661e:	db02      	blt.n	8006626 <__ieee754_log10f+0x3a>
 8006620:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006624:	e7f0      	b.n	8006608 <__ieee754_log10f+0x1c>
 8006626:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800662a:	bfbf      	itttt	lt
 800662c:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800668c <__ieee754_log10f+0xa0>
 8006630:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006634:	f06f 0118 	mvnlt.w	r1, #24
 8006638:	ee17 2a90 	vmovlt	r2, s15
 800663c:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8006640:	bfa8      	it	ge
 8006642:	2100      	movge	r1, #0
 8006644:	3b7f      	subs	r3, #127	@ 0x7f
 8006646:	440b      	add	r3, r1
 8006648:	0fd9      	lsrs	r1, r3, #31
 800664a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006656:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800665a:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800665e:	ee00 3a10 	vmov	s0, r3
 8006662:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006666:	f000 f819 	bl	800669c <logf>
 800666a:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8006690 <__ieee754_log10f+0xa4>
 800666e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006672:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8006694 <__ieee754_log10f+0xa8>
 8006676:	eea8 0a27 	vfma.f32	s0, s16, s15
 800667a:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8006698 <__ieee754_log10f+0xac>
 800667e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8006682:	e7c1      	b.n	8006608 <__ieee754_log10f+0x1c>
 8006684:	cc000000 	.word	0xcc000000
 8006688:	00000000 	.word	0x00000000
 800668c:	4c000000 	.word	0x4c000000
 8006690:	3ede5bd9 	.word	0x3ede5bd9
 8006694:	355427db 	.word	0x355427db
 8006698:	3e9a2080 	.word	0x3e9a2080

0800669c <logf>:
 800669c:	ee10 3a10 	vmov	r3, s0
 80066a0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80066a4:	b410      	push	{r4}
 80066a6:	d055      	beq.n	8006754 <logf+0xb8>
 80066a8:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
 80066ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80066b0:	d31a      	bcc.n	80066e8 <logf+0x4c>
 80066b2:	005a      	lsls	r2, r3, #1
 80066b4:	d104      	bne.n	80066c0 <logf+0x24>
 80066b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ba:	2001      	movs	r0, #1
 80066bc:	f7ff bf74 	b.w	80065a8 <__math_divzerof>
 80066c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80066c4:	d043      	beq.n	800674e <logf+0xb2>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	db02      	blt.n	80066d0 <logf+0x34>
 80066ca:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
 80066ce:	d303      	bcc.n	80066d8 <logf+0x3c>
 80066d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066d4:	f7ff bf7a 	b.w	80065cc <__math_invalidf>
 80066d8:	eddf 7a20 	vldr	s15, [pc, #128]	@ 800675c <logf+0xc0>
 80066dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80066e0:	ee10 3a10 	vmov	r3, s0
 80066e4:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
 80066e8:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
 80066ec:	491c      	ldr	r1, [pc, #112]	@ (8006760 <logf+0xc4>)
 80066ee:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 80066f2:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
 80066f6:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80066fa:	0dd4      	lsrs	r4, r2, #23
 80066fc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8006700:	05e4      	lsls	r4, r4, #23
 8006702:	ed90 5b00 	vldr	d5, [r0]
 8006706:	1b1b      	subs	r3, r3, r4
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	ed90 6b02 	vldr	d6, [r0, #8]
 8006710:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006714:	15d2      	asrs	r2, r2, #23
 8006716:	eea5 0b07 	vfma.f64	d0, d5, d7
 800671a:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
 800671e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8006722:	ee07 2a90 	vmov	s15, r2
 8006726:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800672a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800672e:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 8006732:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 8006736:	eea5 7b00 	vfma.f64	d7, d5, d0
 800673a:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
 800673e:	ee30 0b06 	vadd.f64	d0, d0, d6
 8006742:	eea5 7b04 	vfma.f64	d7, d5, d4
 8006746:	eea4 0b07 	vfma.f64	d0, d4, d7
 800674a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800674e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8006764 <logf+0xc8>
 8006758:	e7f9      	b.n	800674e <logf+0xb2>
 800675a:	bf00      	nop
 800675c:	4b000000 	.word	0x4b000000
 8006760:	08009478 	.word	0x08009478
 8006764:	00000000 	.word	0x00000000

08006768 <__cvt>:
 8006768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676a:	ed2d 8b02 	vpush	{d8}
 800676e:	eeb0 8b40 	vmov.f64	d8, d0
 8006772:	b085      	sub	sp, #20
 8006774:	4617      	mov	r7, r2
 8006776:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006778:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800677a:	ee18 2a90 	vmov	r2, s17
 800677e:	f025 0520 	bic.w	r5, r5, #32
 8006782:	2a00      	cmp	r2, #0
 8006784:	bfb6      	itet	lt
 8006786:	222d      	movlt	r2, #45	@ 0x2d
 8006788:	2200      	movge	r2, #0
 800678a:	eeb1 8b40 	vneglt.f64	d8, d0
 800678e:	2d46      	cmp	r5, #70	@ 0x46
 8006790:	460c      	mov	r4, r1
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	d004      	beq.n	80067a0 <__cvt+0x38>
 8006796:	2d45      	cmp	r5, #69	@ 0x45
 8006798:	d100      	bne.n	800679c <__cvt+0x34>
 800679a:	3401      	adds	r4, #1
 800679c:	2102      	movs	r1, #2
 800679e:	e000      	b.n	80067a2 <__cvt+0x3a>
 80067a0:	2103      	movs	r1, #3
 80067a2:	ab03      	add	r3, sp, #12
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	ab02      	add	r3, sp, #8
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	4622      	mov	r2, r4
 80067ac:	4633      	mov	r3, r6
 80067ae:	eeb0 0b48 	vmov.f64	d0, d8
 80067b2:	f000 fe41 	bl	8007438 <_dtoa_r>
 80067b6:	2d47      	cmp	r5, #71	@ 0x47
 80067b8:	d114      	bne.n	80067e4 <__cvt+0x7c>
 80067ba:	07fb      	lsls	r3, r7, #31
 80067bc:	d50a      	bpl.n	80067d4 <__cvt+0x6c>
 80067be:	1902      	adds	r2, r0, r4
 80067c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80067c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c8:	bf08      	it	eq
 80067ca:	9203      	streq	r2, [sp, #12]
 80067cc:	2130      	movs	r1, #48	@ 0x30
 80067ce:	9b03      	ldr	r3, [sp, #12]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d319      	bcc.n	8006808 <__cvt+0xa0>
 80067d4:	9b03      	ldr	r3, [sp, #12]
 80067d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067d8:	1a1b      	subs	r3, r3, r0
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	b005      	add	sp, #20
 80067de:	ecbd 8b02 	vpop	{d8}
 80067e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e4:	2d46      	cmp	r5, #70	@ 0x46
 80067e6:	eb00 0204 	add.w	r2, r0, r4
 80067ea:	d1e9      	bne.n	80067c0 <__cvt+0x58>
 80067ec:	7803      	ldrb	r3, [r0, #0]
 80067ee:	2b30      	cmp	r3, #48	@ 0x30
 80067f0:	d107      	bne.n	8006802 <__cvt+0x9a>
 80067f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80067f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067fa:	bf1c      	itt	ne
 80067fc:	f1c4 0401 	rsbne	r4, r4, #1
 8006800:	6034      	strne	r4, [r6, #0]
 8006802:	6833      	ldr	r3, [r6, #0]
 8006804:	441a      	add	r2, r3
 8006806:	e7db      	b.n	80067c0 <__cvt+0x58>
 8006808:	1c5c      	adds	r4, r3, #1
 800680a:	9403      	str	r4, [sp, #12]
 800680c:	7019      	strb	r1, [r3, #0]
 800680e:	e7de      	b.n	80067ce <__cvt+0x66>

08006810 <__exponent>:
 8006810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006812:	2900      	cmp	r1, #0
 8006814:	bfba      	itte	lt
 8006816:	4249      	neglt	r1, r1
 8006818:	232d      	movlt	r3, #45	@ 0x2d
 800681a:	232b      	movge	r3, #43	@ 0x2b
 800681c:	2909      	cmp	r1, #9
 800681e:	7002      	strb	r2, [r0, #0]
 8006820:	7043      	strb	r3, [r0, #1]
 8006822:	dd29      	ble.n	8006878 <__exponent+0x68>
 8006824:	f10d 0307 	add.w	r3, sp, #7
 8006828:	461d      	mov	r5, r3
 800682a:	270a      	movs	r7, #10
 800682c:	461a      	mov	r2, r3
 800682e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006832:	fb07 1416 	mls	r4, r7, r6, r1
 8006836:	3430      	adds	r4, #48	@ 0x30
 8006838:	f802 4c01 	strb.w	r4, [r2, #-1]
 800683c:	460c      	mov	r4, r1
 800683e:	2c63      	cmp	r4, #99	@ 0x63
 8006840:	f103 33ff 	add.w	r3, r3, #4294967295
 8006844:	4631      	mov	r1, r6
 8006846:	dcf1      	bgt.n	800682c <__exponent+0x1c>
 8006848:	3130      	adds	r1, #48	@ 0x30
 800684a:	1e94      	subs	r4, r2, #2
 800684c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006850:	1c41      	adds	r1, r0, #1
 8006852:	4623      	mov	r3, r4
 8006854:	42ab      	cmp	r3, r5
 8006856:	d30a      	bcc.n	800686e <__exponent+0x5e>
 8006858:	f10d 0309 	add.w	r3, sp, #9
 800685c:	1a9b      	subs	r3, r3, r2
 800685e:	42ac      	cmp	r4, r5
 8006860:	bf88      	it	hi
 8006862:	2300      	movhi	r3, #0
 8006864:	3302      	adds	r3, #2
 8006866:	4403      	add	r3, r0
 8006868:	1a18      	subs	r0, r3, r0
 800686a:	b003      	add	sp, #12
 800686c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800686e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006872:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006876:	e7ed      	b.n	8006854 <__exponent+0x44>
 8006878:	2330      	movs	r3, #48	@ 0x30
 800687a:	3130      	adds	r1, #48	@ 0x30
 800687c:	7083      	strb	r3, [r0, #2]
 800687e:	70c1      	strb	r1, [r0, #3]
 8006880:	1d03      	adds	r3, r0, #4
 8006882:	e7f1      	b.n	8006868 <__exponent+0x58>
 8006884:	0000      	movs	r0, r0
	...

08006888 <_printf_float>:
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	b08d      	sub	sp, #52	@ 0x34
 800688e:	460c      	mov	r4, r1
 8006890:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006894:	4616      	mov	r6, r2
 8006896:	461f      	mov	r7, r3
 8006898:	4605      	mov	r5, r0
 800689a:	f000 fccb 	bl	8007234 <_localeconv_r>
 800689e:	f8d0 b000 	ldr.w	fp, [r0]
 80068a2:	4658      	mov	r0, fp
 80068a4:	f7f9 fd1c 	bl	80002e0 <strlen>
 80068a8:	2300      	movs	r3, #0
 80068aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ac:	f8d8 3000 	ldr.w	r3, [r8]
 80068b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80068b4:	6822      	ldr	r2, [r4, #0]
 80068b6:	9005      	str	r0, [sp, #20]
 80068b8:	3307      	adds	r3, #7
 80068ba:	f023 0307 	bic.w	r3, r3, #7
 80068be:	f103 0108 	add.w	r1, r3, #8
 80068c2:	f8c8 1000 	str.w	r1, [r8]
 80068c6:	ed93 0b00 	vldr	d0, [r3]
 80068ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006b28 <_printf_float+0x2a0>
 80068ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80068d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80068d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80068de:	dd24      	ble.n	800692a <_printf_float+0xa2>
 80068e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80068e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e8:	d502      	bpl.n	80068f0 <_printf_float+0x68>
 80068ea:	232d      	movs	r3, #45	@ 0x2d
 80068ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068f0:	498f      	ldr	r1, [pc, #572]	@ (8006b30 <_printf_float+0x2a8>)
 80068f2:	4b90      	ldr	r3, [pc, #576]	@ (8006b34 <_printf_float+0x2ac>)
 80068f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80068f8:	bf94      	ite	ls
 80068fa:	4688      	movls	r8, r1
 80068fc:	4698      	movhi	r8, r3
 80068fe:	f022 0204 	bic.w	r2, r2, #4
 8006902:	2303      	movs	r3, #3
 8006904:	6123      	str	r3, [r4, #16]
 8006906:	6022      	str	r2, [r4, #0]
 8006908:	f04f 0a00 	mov.w	sl, #0
 800690c:	9700      	str	r7, [sp, #0]
 800690e:	4633      	mov	r3, r6
 8006910:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006912:	4621      	mov	r1, r4
 8006914:	4628      	mov	r0, r5
 8006916:	f000 f9d1 	bl	8006cbc <_printf_common>
 800691a:	3001      	adds	r0, #1
 800691c:	f040 8089 	bne.w	8006a32 <_printf_float+0x1aa>
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	b00d      	add	sp, #52	@ 0x34
 8006926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692a:	eeb4 0b40 	vcmp.f64	d0, d0
 800692e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006932:	d709      	bvc.n	8006948 <_printf_float+0xc0>
 8006934:	ee10 3a90 	vmov	r3, s1
 8006938:	2b00      	cmp	r3, #0
 800693a:	bfbc      	itt	lt
 800693c:	232d      	movlt	r3, #45	@ 0x2d
 800693e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006942:	497d      	ldr	r1, [pc, #500]	@ (8006b38 <_printf_float+0x2b0>)
 8006944:	4b7d      	ldr	r3, [pc, #500]	@ (8006b3c <_printf_float+0x2b4>)
 8006946:	e7d5      	b.n	80068f4 <_printf_float+0x6c>
 8006948:	6863      	ldr	r3, [r4, #4]
 800694a:	1c59      	adds	r1, r3, #1
 800694c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006950:	d139      	bne.n	80069c6 <_printf_float+0x13e>
 8006952:	2306      	movs	r3, #6
 8006954:	6063      	str	r3, [r4, #4]
 8006956:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800695a:	2300      	movs	r3, #0
 800695c:	6022      	str	r2, [r4, #0]
 800695e:	9303      	str	r3, [sp, #12]
 8006960:	ab0a      	add	r3, sp, #40	@ 0x28
 8006962:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006966:	ab09      	add	r3, sp, #36	@ 0x24
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	6861      	ldr	r1, [r4, #4]
 800696c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006970:	4628      	mov	r0, r5
 8006972:	f7ff fef9 	bl	8006768 <__cvt>
 8006976:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800697a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800697c:	4680      	mov	r8, r0
 800697e:	d129      	bne.n	80069d4 <_printf_float+0x14c>
 8006980:	1cc8      	adds	r0, r1, #3
 8006982:	db02      	blt.n	800698a <_printf_float+0x102>
 8006984:	6863      	ldr	r3, [r4, #4]
 8006986:	4299      	cmp	r1, r3
 8006988:	dd41      	ble.n	8006a0e <_printf_float+0x186>
 800698a:	f1a9 0902 	sub.w	r9, r9, #2
 800698e:	fa5f f989 	uxtb.w	r9, r9
 8006992:	3901      	subs	r1, #1
 8006994:	464a      	mov	r2, r9
 8006996:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800699a:	9109      	str	r1, [sp, #36]	@ 0x24
 800699c:	f7ff ff38 	bl	8006810 <__exponent>
 80069a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069a2:	1813      	adds	r3, r2, r0
 80069a4:	2a01      	cmp	r2, #1
 80069a6:	4682      	mov	sl, r0
 80069a8:	6123      	str	r3, [r4, #16]
 80069aa:	dc02      	bgt.n	80069b2 <_printf_float+0x12a>
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	07d2      	lsls	r2, r2, #31
 80069b0:	d501      	bpl.n	80069b6 <_printf_float+0x12e>
 80069b2:	3301      	adds	r3, #1
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0a6      	beq.n	800690c <_printf_float+0x84>
 80069be:	232d      	movs	r3, #45	@ 0x2d
 80069c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069c4:	e7a2      	b.n	800690c <_printf_float+0x84>
 80069c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80069ca:	d1c4      	bne.n	8006956 <_printf_float+0xce>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1c2      	bne.n	8006956 <_printf_float+0xce>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e7bf      	b.n	8006954 <_printf_float+0xcc>
 80069d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80069d8:	d9db      	bls.n	8006992 <_printf_float+0x10a>
 80069da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80069de:	d118      	bne.n	8006a12 <_printf_float+0x18a>
 80069e0:	2900      	cmp	r1, #0
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	dd0b      	ble.n	80069fe <_printf_float+0x176>
 80069e6:	6121      	str	r1, [r4, #16]
 80069e8:	b913      	cbnz	r3, 80069f0 <_printf_float+0x168>
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	07d0      	lsls	r0, r2, #31
 80069ee:	d502      	bpl.n	80069f6 <_printf_float+0x16e>
 80069f0:	3301      	adds	r3, #1
 80069f2:	440b      	add	r3, r1
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80069f8:	f04f 0a00 	mov.w	sl, #0
 80069fc:	e7db      	b.n	80069b6 <_printf_float+0x12e>
 80069fe:	b913      	cbnz	r3, 8006a06 <_printf_float+0x17e>
 8006a00:	6822      	ldr	r2, [r4, #0]
 8006a02:	07d2      	lsls	r2, r2, #31
 8006a04:	d501      	bpl.n	8006a0a <_printf_float+0x182>
 8006a06:	3302      	adds	r3, #2
 8006a08:	e7f4      	b.n	80069f4 <_printf_float+0x16c>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e7f2      	b.n	80069f4 <_printf_float+0x16c>
 8006a0e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006a12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a14:	4299      	cmp	r1, r3
 8006a16:	db05      	blt.n	8006a24 <_printf_float+0x19c>
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	6121      	str	r1, [r4, #16]
 8006a1c:	07d8      	lsls	r0, r3, #31
 8006a1e:	d5ea      	bpl.n	80069f6 <_printf_float+0x16e>
 8006a20:	1c4b      	adds	r3, r1, #1
 8006a22:	e7e7      	b.n	80069f4 <_printf_float+0x16c>
 8006a24:	2900      	cmp	r1, #0
 8006a26:	bfd4      	ite	le
 8006a28:	f1c1 0202 	rsble	r2, r1, #2
 8006a2c:	2201      	movgt	r2, #1
 8006a2e:	4413      	add	r3, r2
 8006a30:	e7e0      	b.n	80069f4 <_printf_float+0x16c>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	055a      	lsls	r2, r3, #21
 8006a36:	d407      	bmi.n	8006a48 <_printf_float+0x1c0>
 8006a38:	6923      	ldr	r3, [r4, #16]
 8006a3a:	4642      	mov	r2, r8
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4628      	mov	r0, r5
 8006a40:	47b8      	blx	r7
 8006a42:	3001      	adds	r0, #1
 8006a44:	d12a      	bne.n	8006a9c <_printf_float+0x214>
 8006a46:	e76b      	b.n	8006920 <_printf_float+0x98>
 8006a48:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006a4c:	f240 80e0 	bls.w	8006c10 <_printf_float+0x388>
 8006a50:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006a54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a5c:	d133      	bne.n	8006ac6 <_printf_float+0x23e>
 8006a5e:	4a38      	ldr	r2, [pc, #224]	@ (8006b40 <_printf_float+0x2b8>)
 8006a60:	2301      	movs	r3, #1
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	f43f af59 	beq.w	8006920 <_printf_float+0x98>
 8006a6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006a72:	4543      	cmp	r3, r8
 8006a74:	db02      	blt.n	8006a7c <_printf_float+0x1f4>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	07d8      	lsls	r0, r3, #31
 8006a7a:	d50f      	bpl.n	8006a9c <_printf_float+0x214>
 8006a7c:	9b05      	ldr	r3, [sp, #20]
 8006a7e:	465a      	mov	r2, fp
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	f43f af4a 	beq.w	8006920 <_printf_float+0x98>
 8006a8c:	f04f 0900 	mov.w	r9, #0
 8006a90:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a94:	f104 0a1a 	add.w	sl, r4, #26
 8006a98:	45c8      	cmp	r8, r9
 8006a9a:	dc09      	bgt.n	8006ab0 <_printf_float+0x228>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	079b      	lsls	r3, r3, #30
 8006aa0:	f100 8107 	bmi.w	8006cb2 <_printf_float+0x42a>
 8006aa4:	68e0      	ldr	r0, [r4, #12]
 8006aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006aa8:	4298      	cmp	r0, r3
 8006aaa:	bfb8      	it	lt
 8006aac:	4618      	movlt	r0, r3
 8006aae:	e739      	b.n	8006924 <_printf_float+0x9c>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	4652      	mov	r2, sl
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	47b8      	blx	r7
 8006aba:	3001      	adds	r0, #1
 8006abc:	f43f af30 	beq.w	8006920 <_printf_float+0x98>
 8006ac0:	f109 0901 	add.w	r9, r9, #1
 8006ac4:	e7e8      	b.n	8006a98 <_printf_float+0x210>
 8006ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	dc3b      	bgt.n	8006b44 <_printf_float+0x2bc>
 8006acc:	4a1c      	ldr	r2, [pc, #112]	@ (8006b40 <_printf_float+0x2b8>)
 8006ace:	2301      	movs	r3, #1
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f43f af22 	beq.w	8006920 <_printf_float+0x98>
 8006adc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006ae0:	ea59 0303 	orrs.w	r3, r9, r3
 8006ae4:	d102      	bne.n	8006aec <_printf_float+0x264>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	07d9      	lsls	r1, r3, #31
 8006aea:	d5d7      	bpl.n	8006a9c <_printf_float+0x214>
 8006aec:	9b05      	ldr	r3, [sp, #20]
 8006aee:	465a      	mov	r2, fp
 8006af0:	4631      	mov	r1, r6
 8006af2:	4628      	mov	r0, r5
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	f43f af12 	beq.w	8006920 <_printf_float+0x98>
 8006afc:	f04f 0a00 	mov.w	sl, #0
 8006b00:	f104 0b1a 	add.w	fp, r4, #26
 8006b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b06:	425b      	negs	r3, r3
 8006b08:	4553      	cmp	r3, sl
 8006b0a:	dc01      	bgt.n	8006b10 <_printf_float+0x288>
 8006b0c:	464b      	mov	r3, r9
 8006b0e:	e794      	b.n	8006a3a <_printf_float+0x1b2>
 8006b10:	2301      	movs	r3, #1
 8006b12:	465a      	mov	r2, fp
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b8      	blx	r7
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f43f af00 	beq.w	8006920 <_printf_float+0x98>
 8006b20:	f10a 0a01 	add.w	sl, sl, #1
 8006b24:	e7ee      	b.n	8006b04 <_printf_float+0x27c>
 8006b26:	bf00      	nop
 8006b28:	ffffffff 	.word	0xffffffff
 8006b2c:	7fefffff 	.word	0x7fefffff
 8006b30:	080096c0 	.word	0x080096c0
 8006b34:	080096c4 	.word	0x080096c4
 8006b38:	080096c8 	.word	0x080096c8
 8006b3c:	080096cc 	.word	0x080096cc
 8006b40:	080096d0 	.word	0x080096d0
 8006b44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b4a:	4553      	cmp	r3, sl
 8006b4c:	bfa8      	it	ge
 8006b4e:	4653      	movge	r3, sl
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	4699      	mov	r9, r3
 8006b54:	dc37      	bgt.n	8006bc6 <_printf_float+0x33e>
 8006b56:	2300      	movs	r3, #0
 8006b58:	9307      	str	r3, [sp, #28]
 8006b5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b5e:	f104 021a 	add.w	r2, r4, #26
 8006b62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b64:	9907      	ldr	r1, [sp, #28]
 8006b66:	9306      	str	r3, [sp, #24]
 8006b68:	eba3 0309 	sub.w	r3, r3, r9
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	dc31      	bgt.n	8006bd4 <_printf_float+0x34c>
 8006b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b72:	459a      	cmp	sl, r3
 8006b74:	dc3b      	bgt.n	8006bee <_printf_float+0x366>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	07da      	lsls	r2, r3, #31
 8006b7a:	d438      	bmi.n	8006bee <_printf_float+0x366>
 8006b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7e:	ebaa 0903 	sub.w	r9, sl, r3
 8006b82:	9b06      	ldr	r3, [sp, #24]
 8006b84:	ebaa 0303 	sub.w	r3, sl, r3
 8006b88:	4599      	cmp	r9, r3
 8006b8a:	bfa8      	it	ge
 8006b8c:	4699      	movge	r9, r3
 8006b8e:	f1b9 0f00 	cmp.w	r9, #0
 8006b92:	dc34      	bgt.n	8006bfe <_printf_float+0x376>
 8006b94:	f04f 0800 	mov.w	r8, #0
 8006b98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b9c:	f104 0b1a 	add.w	fp, r4, #26
 8006ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba2:	ebaa 0303 	sub.w	r3, sl, r3
 8006ba6:	eba3 0309 	sub.w	r3, r3, r9
 8006baa:	4543      	cmp	r3, r8
 8006bac:	f77f af76 	ble.w	8006a9c <_printf_float+0x214>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	465a      	mov	r2, fp
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	47b8      	blx	r7
 8006bba:	3001      	adds	r0, #1
 8006bbc:	f43f aeb0 	beq.w	8006920 <_printf_float+0x98>
 8006bc0:	f108 0801 	add.w	r8, r8, #1
 8006bc4:	e7ec      	b.n	8006ba0 <_printf_float+0x318>
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	4631      	mov	r1, r6
 8006bca:	4628      	mov	r0, r5
 8006bcc:	47b8      	blx	r7
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d1c1      	bne.n	8006b56 <_printf_float+0x2ce>
 8006bd2:	e6a5      	b.n	8006920 <_printf_float+0x98>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4628      	mov	r0, r5
 8006bda:	9206      	str	r2, [sp, #24]
 8006bdc:	47b8      	blx	r7
 8006bde:	3001      	adds	r0, #1
 8006be0:	f43f ae9e 	beq.w	8006920 <_printf_float+0x98>
 8006be4:	9b07      	ldr	r3, [sp, #28]
 8006be6:	9a06      	ldr	r2, [sp, #24]
 8006be8:	3301      	adds	r3, #1
 8006bea:	9307      	str	r3, [sp, #28]
 8006bec:	e7b9      	b.n	8006b62 <_printf_float+0x2da>
 8006bee:	9b05      	ldr	r3, [sp, #20]
 8006bf0:	465a      	mov	r2, fp
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d1bf      	bne.n	8006b7c <_printf_float+0x2f4>
 8006bfc:	e690      	b.n	8006920 <_printf_float+0x98>
 8006bfe:	9a06      	ldr	r2, [sp, #24]
 8006c00:	464b      	mov	r3, r9
 8006c02:	4442      	add	r2, r8
 8006c04:	4631      	mov	r1, r6
 8006c06:	4628      	mov	r0, r5
 8006c08:	47b8      	blx	r7
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d1c2      	bne.n	8006b94 <_printf_float+0x30c>
 8006c0e:	e687      	b.n	8006920 <_printf_float+0x98>
 8006c10:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006c14:	f1b9 0f01 	cmp.w	r9, #1
 8006c18:	dc01      	bgt.n	8006c1e <_printf_float+0x396>
 8006c1a:	07db      	lsls	r3, r3, #31
 8006c1c:	d536      	bpl.n	8006c8c <_printf_float+0x404>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	4642      	mov	r2, r8
 8006c22:	4631      	mov	r1, r6
 8006c24:	4628      	mov	r0, r5
 8006c26:	47b8      	blx	r7
 8006c28:	3001      	adds	r0, #1
 8006c2a:	f43f ae79 	beq.w	8006920 <_printf_float+0x98>
 8006c2e:	9b05      	ldr	r3, [sp, #20]
 8006c30:	465a      	mov	r2, fp
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f43f ae71 	beq.w	8006920 <_printf_float+0x98>
 8006c3e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006c42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4a:	f109 39ff 	add.w	r9, r9, #4294967295
 8006c4e:	d018      	beq.n	8006c82 <_printf_float+0x3fa>
 8006c50:	464b      	mov	r3, r9
 8006c52:	f108 0201 	add.w	r2, r8, #1
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b8      	blx	r7
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d10c      	bne.n	8006c7a <_printf_float+0x3f2>
 8006c60:	e65e      	b.n	8006920 <_printf_float+0x98>
 8006c62:	2301      	movs	r3, #1
 8006c64:	465a      	mov	r2, fp
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f ae57 	beq.w	8006920 <_printf_float+0x98>
 8006c72:	f108 0801 	add.w	r8, r8, #1
 8006c76:	45c8      	cmp	r8, r9
 8006c78:	dbf3      	blt.n	8006c62 <_printf_float+0x3da>
 8006c7a:	4653      	mov	r3, sl
 8006c7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c80:	e6dc      	b.n	8006a3c <_printf_float+0x1b4>
 8006c82:	f04f 0800 	mov.w	r8, #0
 8006c86:	f104 0b1a 	add.w	fp, r4, #26
 8006c8a:	e7f4      	b.n	8006c76 <_printf_float+0x3ee>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	4642      	mov	r2, r8
 8006c90:	e7e1      	b.n	8006c56 <_printf_float+0x3ce>
 8006c92:	2301      	movs	r3, #1
 8006c94:	464a      	mov	r2, r9
 8006c96:	4631      	mov	r1, r6
 8006c98:	4628      	mov	r0, r5
 8006c9a:	47b8      	blx	r7
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	f43f ae3f 	beq.w	8006920 <_printf_float+0x98>
 8006ca2:	f108 0801 	add.w	r8, r8, #1
 8006ca6:	68e3      	ldr	r3, [r4, #12]
 8006ca8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006caa:	1a5b      	subs	r3, r3, r1
 8006cac:	4543      	cmp	r3, r8
 8006cae:	dcf0      	bgt.n	8006c92 <_printf_float+0x40a>
 8006cb0:	e6f8      	b.n	8006aa4 <_printf_float+0x21c>
 8006cb2:	f04f 0800 	mov.w	r8, #0
 8006cb6:	f104 0919 	add.w	r9, r4, #25
 8006cba:	e7f4      	b.n	8006ca6 <_printf_float+0x41e>

08006cbc <_printf_common>:
 8006cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc0:	4616      	mov	r6, r2
 8006cc2:	4698      	mov	r8, r3
 8006cc4:	688a      	ldr	r2, [r1, #8]
 8006cc6:	690b      	ldr	r3, [r1, #16]
 8006cc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	bfb8      	it	lt
 8006cd0:	4613      	movlt	r3, r2
 8006cd2:	6033      	str	r3, [r6, #0]
 8006cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cd8:	4607      	mov	r7, r0
 8006cda:	460c      	mov	r4, r1
 8006cdc:	b10a      	cbz	r2, 8006ce2 <_printf_common+0x26>
 8006cde:	3301      	adds	r3, #1
 8006ce0:	6033      	str	r3, [r6, #0]
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	0699      	lsls	r1, r3, #26
 8006ce6:	bf42      	ittt	mi
 8006ce8:	6833      	ldrmi	r3, [r6, #0]
 8006cea:	3302      	addmi	r3, #2
 8006cec:	6033      	strmi	r3, [r6, #0]
 8006cee:	6825      	ldr	r5, [r4, #0]
 8006cf0:	f015 0506 	ands.w	r5, r5, #6
 8006cf4:	d106      	bne.n	8006d04 <_printf_common+0x48>
 8006cf6:	f104 0a19 	add.w	sl, r4, #25
 8006cfa:	68e3      	ldr	r3, [r4, #12]
 8006cfc:	6832      	ldr	r2, [r6, #0]
 8006cfe:	1a9b      	subs	r3, r3, r2
 8006d00:	42ab      	cmp	r3, r5
 8006d02:	dc26      	bgt.n	8006d52 <_printf_common+0x96>
 8006d04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d08:	6822      	ldr	r2, [r4, #0]
 8006d0a:	3b00      	subs	r3, #0
 8006d0c:	bf18      	it	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	0692      	lsls	r2, r2, #26
 8006d12:	d42b      	bmi.n	8006d6c <_printf_common+0xb0>
 8006d14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d18:	4641      	mov	r1, r8
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	47c8      	blx	r9
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d01e      	beq.n	8006d60 <_printf_common+0xa4>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	6922      	ldr	r2, [r4, #16]
 8006d26:	f003 0306 	and.w	r3, r3, #6
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	bf02      	ittt	eq
 8006d2e:	68e5      	ldreq	r5, [r4, #12]
 8006d30:	6833      	ldreq	r3, [r6, #0]
 8006d32:	1aed      	subeq	r5, r5, r3
 8006d34:	68a3      	ldr	r3, [r4, #8]
 8006d36:	bf0c      	ite	eq
 8006d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d3c:	2500      	movne	r5, #0
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	bfc4      	itt	gt
 8006d42:	1a9b      	subgt	r3, r3, r2
 8006d44:	18ed      	addgt	r5, r5, r3
 8006d46:	2600      	movs	r6, #0
 8006d48:	341a      	adds	r4, #26
 8006d4a:	42b5      	cmp	r5, r6
 8006d4c:	d11a      	bne.n	8006d84 <_printf_common+0xc8>
 8006d4e:	2000      	movs	r0, #0
 8006d50:	e008      	b.n	8006d64 <_printf_common+0xa8>
 8006d52:	2301      	movs	r3, #1
 8006d54:	4652      	mov	r2, sl
 8006d56:	4641      	mov	r1, r8
 8006d58:	4638      	mov	r0, r7
 8006d5a:	47c8      	blx	r9
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d103      	bne.n	8006d68 <_printf_common+0xac>
 8006d60:	f04f 30ff 	mov.w	r0, #4294967295
 8006d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d68:	3501      	adds	r5, #1
 8006d6a:	e7c6      	b.n	8006cfa <_printf_common+0x3e>
 8006d6c:	18e1      	adds	r1, r4, r3
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	2030      	movs	r0, #48	@ 0x30
 8006d72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d76:	4422      	add	r2, r4
 8006d78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d80:	3302      	adds	r3, #2
 8006d82:	e7c7      	b.n	8006d14 <_printf_common+0x58>
 8006d84:	2301      	movs	r3, #1
 8006d86:	4622      	mov	r2, r4
 8006d88:	4641      	mov	r1, r8
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	47c8      	blx	r9
 8006d8e:	3001      	adds	r0, #1
 8006d90:	d0e6      	beq.n	8006d60 <_printf_common+0xa4>
 8006d92:	3601      	adds	r6, #1
 8006d94:	e7d9      	b.n	8006d4a <_printf_common+0x8e>
	...

08006d98 <_printf_i>:
 8006d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d9c:	7e0f      	ldrb	r7, [r1, #24]
 8006d9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006da0:	2f78      	cmp	r7, #120	@ 0x78
 8006da2:	4691      	mov	r9, r2
 8006da4:	4680      	mov	r8, r0
 8006da6:	460c      	mov	r4, r1
 8006da8:	469a      	mov	sl, r3
 8006daa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006dae:	d807      	bhi.n	8006dc0 <_printf_i+0x28>
 8006db0:	2f62      	cmp	r7, #98	@ 0x62
 8006db2:	d80a      	bhi.n	8006dca <_printf_i+0x32>
 8006db4:	2f00      	cmp	r7, #0
 8006db6:	f000 80d2 	beq.w	8006f5e <_printf_i+0x1c6>
 8006dba:	2f58      	cmp	r7, #88	@ 0x58
 8006dbc:	f000 80b9 	beq.w	8006f32 <_printf_i+0x19a>
 8006dc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006dc8:	e03a      	b.n	8006e40 <_printf_i+0xa8>
 8006dca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dce:	2b15      	cmp	r3, #21
 8006dd0:	d8f6      	bhi.n	8006dc0 <_printf_i+0x28>
 8006dd2:	a101      	add	r1, pc, #4	@ (adr r1, 8006dd8 <_printf_i+0x40>)
 8006dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dd8:	08006e31 	.word	0x08006e31
 8006ddc:	08006e45 	.word	0x08006e45
 8006de0:	08006dc1 	.word	0x08006dc1
 8006de4:	08006dc1 	.word	0x08006dc1
 8006de8:	08006dc1 	.word	0x08006dc1
 8006dec:	08006dc1 	.word	0x08006dc1
 8006df0:	08006e45 	.word	0x08006e45
 8006df4:	08006dc1 	.word	0x08006dc1
 8006df8:	08006dc1 	.word	0x08006dc1
 8006dfc:	08006dc1 	.word	0x08006dc1
 8006e00:	08006dc1 	.word	0x08006dc1
 8006e04:	08006f45 	.word	0x08006f45
 8006e08:	08006e6f 	.word	0x08006e6f
 8006e0c:	08006eff 	.word	0x08006eff
 8006e10:	08006dc1 	.word	0x08006dc1
 8006e14:	08006dc1 	.word	0x08006dc1
 8006e18:	08006f67 	.word	0x08006f67
 8006e1c:	08006dc1 	.word	0x08006dc1
 8006e20:	08006e6f 	.word	0x08006e6f
 8006e24:	08006dc1 	.word	0x08006dc1
 8006e28:	08006dc1 	.word	0x08006dc1
 8006e2c:	08006f07 	.word	0x08006f07
 8006e30:	6833      	ldr	r3, [r6, #0]
 8006e32:	1d1a      	adds	r2, r3, #4
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6032      	str	r2, [r6, #0]
 8006e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e40:	2301      	movs	r3, #1
 8006e42:	e09d      	b.n	8006f80 <_printf_i+0x1e8>
 8006e44:	6833      	ldr	r3, [r6, #0]
 8006e46:	6820      	ldr	r0, [r4, #0]
 8006e48:	1d19      	adds	r1, r3, #4
 8006e4a:	6031      	str	r1, [r6, #0]
 8006e4c:	0606      	lsls	r6, r0, #24
 8006e4e:	d501      	bpl.n	8006e54 <_printf_i+0xbc>
 8006e50:	681d      	ldr	r5, [r3, #0]
 8006e52:	e003      	b.n	8006e5c <_printf_i+0xc4>
 8006e54:	0645      	lsls	r5, r0, #25
 8006e56:	d5fb      	bpl.n	8006e50 <_printf_i+0xb8>
 8006e58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e5c:	2d00      	cmp	r5, #0
 8006e5e:	da03      	bge.n	8006e68 <_printf_i+0xd0>
 8006e60:	232d      	movs	r3, #45	@ 0x2d
 8006e62:	426d      	negs	r5, r5
 8006e64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e68:	4859      	ldr	r0, [pc, #356]	@ (8006fd0 <_printf_i+0x238>)
 8006e6a:	230a      	movs	r3, #10
 8006e6c:	e011      	b.n	8006e92 <_printf_i+0xfa>
 8006e6e:	6821      	ldr	r1, [r4, #0]
 8006e70:	6833      	ldr	r3, [r6, #0]
 8006e72:	0608      	lsls	r0, r1, #24
 8006e74:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e78:	d402      	bmi.n	8006e80 <_printf_i+0xe8>
 8006e7a:	0649      	lsls	r1, r1, #25
 8006e7c:	bf48      	it	mi
 8006e7e:	b2ad      	uxthmi	r5, r5
 8006e80:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e82:	4853      	ldr	r0, [pc, #332]	@ (8006fd0 <_printf_i+0x238>)
 8006e84:	6033      	str	r3, [r6, #0]
 8006e86:	bf14      	ite	ne
 8006e88:	230a      	movne	r3, #10
 8006e8a:	2308      	moveq	r3, #8
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e92:	6866      	ldr	r6, [r4, #4]
 8006e94:	60a6      	str	r6, [r4, #8]
 8006e96:	2e00      	cmp	r6, #0
 8006e98:	bfa2      	ittt	ge
 8006e9a:	6821      	ldrge	r1, [r4, #0]
 8006e9c:	f021 0104 	bicge.w	r1, r1, #4
 8006ea0:	6021      	strge	r1, [r4, #0]
 8006ea2:	b90d      	cbnz	r5, 8006ea8 <_printf_i+0x110>
 8006ea4:	2e00      	cmp	r6, #0
 8006ea6:	d04b      	beq.n	8006f40 <_printf_i+0x1a8>
 8006ea8:	4616      	mov	r6, r2
 8006eaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eae:	fb03 5711 	mls	r7, r3, r1, r5
 8006eb2:	5dc7      	ldrb	r7, [r0, r7]
 8006eb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006eb8:	462f      	mov	r7, r5
 8006eba:	42bb      	cmp	r3, r7
 8006ebc:	460d      	mov	r5, r1
 8006ebe:	d9f4      	bls.n	8006eaa <_printf_i+0x112>
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d10b      	bne.n	8006edc <_printf_i+0x144>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	07df      	lsls	r7, r3, #31
 8006ec8:	d508      	bpl.n	8006edc <_printf_i+0x144>
 8006eca:	6923      	ldr	r3, [r4, #16]
 8006ecc:	6861      	ldr	r1, [r4, #4]
 8006ece:	4299      	cmp	r1, r3
 8006ed0:	bfde      	ittt	le
 8006ed2:	2330      	movle	r3, #48	@ 0x30
 8006ed4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ed8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006edc:	1b92      	subs	r2, r2, r6
 8006ede:	6122      	str	r2, [r4, #16]
 8006ee0:	f8cd a000 	str.w	sl, [sp]
 8006ee4:	464b      	mov	r3, r9
 8006ee6:	aa03      	add	r2, sp, #12
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7ff fee6 	bl	8006cbc <_printf_common>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d14a      	bne.n	8006f8a <_printf_i+0x1f2>
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	b004      	add	sp, #16
 8006efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	f043 0320 	orr.w	r3, r3, #32
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	4833      	ldr	r0, [pc, #204]	@ (8006fd4 <_printf_i+0x23c>)
 8006f08:	2778      	movs	r7, #120	@ 0x78
 8006f0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	6831      	ldr	r1, [r6, #0]
 8006f12:	061f      	lsls	r7, r3, #24
 8006f14:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f18:	d402      	bmi.n	8006f20 <_printf_i+0x188>
 8006f1a:	065f      	lsls	r7, r3, #25
 8006f1c:	bf48      	it	mi
 8006f1e:	b2ad      	uxthmi	r5, r5
 8006f20:	6031      	str	r1, [r6, #0]
 8006f22:	07d9      	lsls	r1, r3, #31
 8006f24:	bf44      	itt	mi
 8006f26:	f043 0320 	orrmi.w	r3, r3, #32
 8006f2a:	6023      	strmi	r3, [r4, #0]
 8006f2c:	b11d      	cbz	r5, 8006f36 <_printf_i+0x19e>
 8006f2e:	2310      	movs	r3, #16
 8006f30:	e7ac      	b.n	8006e8c <_printf_i+0xf4>
 8006f32:	4827      	ldr	r0, [pc, #156]	@ (8006fd0 <_printf_i+0x238>)
 8006f34:	e7e9      	b.n	8006f0a <_printf_i+0x172>
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	f023 0320 	bic.w	r3, r3, #32
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	e7f6      	b.n	8006f2e <_printf_i+0x196>
 8006f40:	4616      	mov	r6, r2
 8006f42:	e7bd      	b.n	8006ec0 <_printf_i+0x128>
 8006f44:	6833      	ldr	r3, [r6, #0]
 8006f46:	6825      	ldr	r5, [r4, #0]
 8006f48:	6961      	ldr	r1, [r4, #20]
 8006f4a:	1d18      	adds	r0, r3, #4
 8006f4c:	6030      	str	r0, [r6, #0]
 8006f4e:	062e      	lsls	r6, r5, #24
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	d501      	bpl.n	8006f58 <_printf_i+0x1c0>
 8006f54:	6019      	str	r1, [r3, #0]
 8006f56:	e002      	b.n	8006f5e <_printf_i+0x1c6>
 8006f58:	0668      	lsls	r0, r5, #25
 8006f5a:	d5fb      	bpl.n	8006f54 <_printf_i+0x1bc>
 8006f5c:	8019      	strh	r1, [r3, #0]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	6123      	str	r3, [r4, #16]
 8006f62:	4616      	mov	r6, r2
 8006f64:	e7bc      	b.n	8006ee0 <_printf_i+0x148>
 8006f66:	6833      	ldr	r3, [r6, #0]
 8006f68:	1d1a      	adds	r2, r3, #4
 8006f6a:	6032      	str	r2, [r6, #0]
 8006f6c:	681e      	ldr	r6, [r3, #0]
 8006f6e:	6862      	ldr	r2, [r4, #4]
 8006f70:	2100      	movs	r1, #0
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7f9 f964 	bl	8000240 <memchr>
 8006f78:	b108      	cbz	r0, 8006f7e <_printf_i+0x1e6>
 8006f7a:	1b80      	subs	r0, r0, r6
 8006f7c:	6060      	str	r0, [r4, #4]
 8006f7e:	6863      	ldr	r3, [r4, #4]
 8006f80:	6123      	str	r3, [r4, #16]
 8006f82:	2300      	movs	r3, #0
 8006f84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f88:	e7aa      	b.n	8006ee0 <_printf_i+0x148>
 8006f8a:	6923      	ldr	r3, [r4, #16]
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	4649      	mov	r1, r9
 8006f90:	4640      	mov	r0, r8
 8006f92:	47d0      	blx	sl
 8006f94:	3001      	adds	r0, #1
 8006f96:	d0ad      	beq.n	8006ef4 <_printf_i+0x15c>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	079b      	lsls	r3, r3, #30
 8006f9c:	d413      	bmi.n	8006fc6 <_printf_i+0x22e>
 8006f9e:	68e0      	ldr	r0, [r4, #12]
 8006fa0:	9b03      	ldr	r3, [sp, #12]
 8006fa2:	4298      	cmp	r0, r3
 8006fa4:	bfb8      	it	lt
 8006fa6:	4618      	movlt	r0, r3
 8006fa8:	e7a6      	b.n	8006ef8 <_printf_i+0x160>
 8006faa:	2301      	movs	r3, #1
 8006fac:	4632      	mov	r2, r6
 8006fae:	4649      	mov	r1, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	47d0      	blx	sl
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d09d      	beq.n	8006ef4 <_printf_i+0x15c>
 8006fb8:	3501      	adds	r5, #1
 8006fba:	68e3      	ldr	r3, [r4, #12]
 8006fbc:	9903      	ldr	r1, [sp, #12]
 8006fbe:	1a5b      	subs	r3, r3, r1
 8006fc0:	42ab      	cmp	r3, r5
 8006fc2:	dcf2      	bgt.n	8006faa <_printf_i+0x212>
 8006fc4:	e7eb      	b.n	8006f9e <_printf_i+0x206>
 8006fc6:	2500      	movs	r5, #0
 8006fc8:	f104 0619 	add.w	r6, r4, #25
 8006fcc:	e7f5      	b.n	8006fba <_printf_i+0x222>
 8006fce:	bf00      	nop
 8006fd0:	080096d2 	.word	0x080096d2
 8006fd4:	080096e3 	.word	0x080096e3

08006fd8 <std>:
 8006fd8:	2300      	movs	r3, #0
 8006fda:	b510      	push	{r4, lr}
 8006fdc:	4604      	mov	r4, r0
 8006fde:	e9c0 3300 	strd	r3, r3, [r0]
 8006fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fe6:	6083      	str	r3, [r0, #8]
 8006fe8:	8181      	strh	r1, [r0, #12]
 8006fea:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fec:	81c2      	strh	r2, [r0, #14]
 8006fee:	6183      	str	r3, [r0, #24]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	305c      	adds	r0, #92	@ 0x5c
 8006ff6:	f000 f914 	bl	8007222 <memset>
 8006ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8007030 <std+0x58>)
 8006ffc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8007034 <std+0x5c>)
 8007000:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007002:	4b0d      	ldr	r3, [pc, #52]	@ (8007038 <std+0x60>)
 8007004:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007006:	4b0d      	ldr	r3, [pc, #52]	@ (800703c <std+0x64>)
 8007008:	6323      	str	r3, [r4, #48]	@ 0x30
 800700a:	4b0d      	ldr	r3, [pc, #52]	@ (8007040 <std+0x68>)
 800700c:	6224      	str	r4, [r4, #32]
 800700e:	429c      	cmp	r4, r3
 8007010:	d006      	beq.n	8007020 <std+0x48>
 8007012:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007016:	4294      	cmp	r4, r2
 8007018:	d002      	beq.n	8007020 <std+0x48>
 800701a:	33d0      	adds	r3, #208	@ 0xd0
 800701c:	429c      	cmp	r4, r3
 800701e:	d105      	bne.n	800702c <std+0x54>
 8007020:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007028:	f000 b978 	b.w	800731c <__retarget_lock_init_recursive>
 800702c:	bd10      	pop	{r4, pc}
 800702e:	bf00      	nop
 8007030:	0800719d 	.word	0x0800719d
 8007034:	080071bf 	.word	0x080071bf
 8007038:	080071f7 	.word	0x080071f7
 800703c:	0800721b 	.word	0x0800721b
 8007040:	20000cf0 	.word	0x20000cf0

08007044 <stdio_exit_handler>:
 8007044:	4a02      	ldr	r2, [pc, #8]	@ (8007050 <stdio_exit_handler+0xc>)
 8007046:	4903      	ldr	r1, [pc, #12]	@ (8007054 <stdio_exit_handler+0x10>)
 8007048:	4803      	ldr	r0, [pc, #12]	@ (8007058 <stdio_exit_handler+0x14>)
 800704a:	f000 b869 	b.w	8007120 <_fwalk_sglue>
 800704e:	bf00      	nop
 8007050:	2000000c 	.word	0x2000000c
 8007054:	08008ba1 	.word	0x08008ba1
 8007058:	2000001c 	.word	0x2000001c

0800705c <cleanup_stdio>:
 800705c:	6841      	ldr	r1, [r0, #4]
 800705e:	4b0c      	ldr	r3, [pc, #48]	@ (8007090 <cleanup_stdio+0x34>)
 8007060:	4299      	cmp	r1, r3
 8007062:	b510      	push	{r4, lr}
 8007064:	4604      	mov	r4, r0
 8007066:	d001      	beq.n	800706c <cleanup_stdio+0x10>
 8007068:	f001 fd9a 	bl	8008ba0 <_fflush_r>
 800706c:	68a1      	ldr	r1, [r4, #8]
 800706e:	4b09      	ldr	r3, [pc, #36]	@ (8007094 <cleanup_stdio+0x38>)
 8007070:	4299      	cmp	r1, r3
 8007072:	d002      	beq.n	800707a <cleanup_stdio+0x1e>
 8007074:	4620      	mov	r0, r4
 8007076:	f001 fd93 	bl	8008ba0 <_fflush_r>
 800707a:	68e1      	ldr	r1, [r4, #12]
 800707c:	4b06      	ldr	r3, [pc, #24]	@ (8007098 <cleanup_stdio+0x3c>)
 800707e:	4299      	cmp	r1, r3
 8007080:	d004      	beq.n	800708c <cleanup_stdio+0x30>
 8007082:	4620      	mov	r0, r4
 8007084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007088:	f001 bd8a 	b.w	8008ba0 <_fflush_r>
 800708c:	bd10      	pop	{r4, pc}
 800708e:	bf00      	nop
 8007090:	20000cf0 	.word	0x20000cf0
 8007094:	20000d58 	.word	0x20000d58
 8007098:	20000dc0 	.word	0x20000dc0

0800709c <global_stdio_init.part.0>:
 800709c:	b510      	push	{r4, lr}
 800709e:	4b0b      	ldr	r3, [pc, #44]	@ (80070cc <global_stdio_init.part.0+0x30>)
 80070a0:	4c0b      	ldr	r4, [pc, #44]	@ (80070d0 <global_stdio_init.part.0+0x34>)
 80070a2:	4a0c      	ldr	r2, [pc, #48]	@ (80070d4 <global_stdio_init.part.0+0x38>)
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	4620      	mov	r0, r4
 80070a8:	2200      	movs	r2, #0
 80070aa:	2104      	movs	r1, #4
 80070ac:	f7ff ff94 	bl	8006fd8 <std>
 80070b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070b4:	2201      	movs	r2, #1
 80070b6:	2109      	movs	r1, #9
 80070b8:	f7ff ff8e 	bl	8006fd8 <std>
 80070bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070c0:	2202      	movs	r2, #2
 80070c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c6:	2112      	movs	r1, #18
 80070c8:	f7ff bf86 	b.w	8006fd8 <std>
 80070cc:	20000e28 	.word	0x20000e28
 80070d0:	20000cf0 	.word	0x20000cf0
 80070d4:	08007045 	.word	0x08007045

080070d8 <__sfp_lock_acquire>:
 80070d8:	4801      	ldr	r0, [pc, #4]	@ (80070e0 <__sfp_lock_acquire+0x8>)
 80070da:	f000 b920 	b.w	800731e <__retarget_lock_acquire_recursive>
 80070de:	bf00      	nop
 80070e0:	20000e31 	.word	0x20000e31

080070e4 <__sfp_lock_release>:
 80070e4:	4801      	ldr	r0, [pc, #4]	@ (80070ec <__sfp_lock_release+0x8>)
 80070e6:	f000 b91b 	b.w	8007320 <__retarget_lock_release_recursive>
 80070ea:	bf00      	nop
 80070ec:	20000e31 	.word	0x20000e31

080070f0 <__sinit>:
 80070f0:	b510      	push	{r4, lr}
 80070f2:	4604      	mov	r4, r0
 80070f4:	f7ff fff0 	bl	80070d8 <__sfp_lock_acquire>
 80070f8:	6a23      	ldr	r3, [r4, #32]
 80070fa:	b11b      	cbz	r3, 8007104 <__sinit+0x14>
 80070fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007100:	f7ff bff0 	b.w	80070e4 <__sfp_lock_release>
 8007104:	4b04      	ldr	r3, [pc, #16]	@ (8007118 <__sinit+0x28>)
 8007106:	6223      	str	r3, [r4, #32]
 8007108:	4b04      	ldr	r3, [pc, #16]	@ (800711c <__sinit+0x2c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f5      	bne.n	80070fc <__sinit+0xc>
 8007110:	f7ff ffc4 	bl	800709c <global_stdio_init.part.0>
 8007114:	e7f2      	b.n	80070fc <__sinit+0xc>
 8007116:	bf00      	nop
 8007118:	0800705d 	.word	0x0800705d
 800711c:	20000e28 	.word	0x20000e28

08007120 <_fwalk_sglue>:
 8007120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007124:	4607      	mov	r7, r0
 8007126:	4688      	mov	r8, r1
 8007128:	4614      	mov	r4, r2
 800712a:	2600      	movs	r6, #0
 800712c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007130:	f1b9 0901 	subs.w	r9, r9, #1
 8007134:	d505      	bpl.n	8007142 <_fwalk_sglue+0x22>
 8007136:	6824      	ldr	r4, [r4, #0]
 8007138:	2c00      	cmp	r4, #0
 800713a:	d1f7      	bne.n	800712c <_fwalk_sglue+0xc>
 800713c:	4630      	mov	r0, r6
 800713e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007142:	89ab      	ldrh	r3, [r5, #12]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d907      	bls.n	8007158 <_fwalk_sglue+0x38>
 8007148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800714c:	3301      	adds	r3, #1
 800714e:	d003      	beq.n	8007158 <_fwalk_sglue+0x38>
 8007150:	4629      	mov	r1, r5
 8007152:	4638      	mov	r0, r7
 8007154:	47c0      	blx	r8
 8007156:	4306      	orrs	r6, r0
 8007158:	3568      	adds	r5, #104	@ 0x68
 800715a:	e7e9      	b.n	8007130 <_fwalk_sglue+0x10>

0800715c <siprintf>:
 800715c:	b40e      	push	{r1, r2, r3}
 800715e:	b500      	push	{lr}
 8007160:	b09c      	sub	sp, #112	@ 0x70
 8007162:	ab1d      	add	r3, sp, #116	@ 0x74
 8007164:	9002      	str	r0, [sp, #8]
 8007166:	9006      	str	r0, [sp, #24]
 8007168:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800716c:	4809      	ldr	r0, [pc, #36]	@ (8007194 <siprintf+0x38>)
 800716e:	9107      	str	r1, [sp, #28]
 8007170:	9104      	str	r1, [sp, #16]
 8007172:	4909      	ldr	r1, [pc, #36]	@ (8007198 <siprintf+0x3c>)
 8007174:	f853 2b04 	ldr.w	r2, [r3], #4
 8007178:	9105      	str	r1, [sp, #20]
 800717a:	6800      	ldr	r0, [r0, #0]
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	a902      	add	r1, sp, #8
 8007180:	f001 fb8e 	bl	80088a0 <_svfiprintf_r>
 8007184:	9b02      	ldr	r3, [sp, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	701a      	strb	r2, [r3, #0]
 800718a:	b01c      	add	sp, #112	@ 0x70
 800718c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007190:	b003      	add	sp, #12
 8007192:	4770      	bx	lr
 8007194:	20000018 	.word	0x20000018
 8007198:	ffff0208 	.word	0xffff0208

0800719c <__sread>:
 800719c:	b510      	push	{r4, lr}
 800719e:	460c      	mov	r4, r1
 80071a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a4:	f000 f86c 	bl	8007280 <_read_r>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	bfab      	itete	ge
 80071ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071ae:	89a3      	ldrhlt	r3, [r4, #12]
 80071b0:	181b      	addge	r3, r3, r0
 80071b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071b6:	bfac      	ite	ge
 80071b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071ba:	81a3      	strhlt	r3, [r4, #12]
 80071bc:	bd10      	pop	{r4, pc}

080071be <__swrite>:
 80071be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c2:	461f      	mov	r7, r3
 80071c4:	898b      	ldrh	r3, [r1, #12]
 80071c6:	05db      	lsls	r3, r3, #23
 80071c8:	4605      	mov	r5, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	4616      	mov	r6, r2
 80071ce:	d505      	bpl.n	80071dc <__swrite+0x1e>
 80071d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d4:	2302      	movs	r3, #2
 80071d6:	2200      	movs	r2, #0
 80071d8:	f000 f840 	bl	800725c <_lseek_r>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	4632      	mov	r2, r6
 80071ea:	463b      	mov	r3, r7
 80071ec:	4628      	mov	r0, r5
 80071ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071f2:	f000 b857 	b.w	80072a4 <_write_r>

080071f6 <__sseek>:
 80071f6:	b510      	push	{r4, lr}
 80071f8:	460c      	mov	r4, r1
 80071fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071fe:	f000 f82d 	bl	800725c <_lseek_r>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	bf15      	itete	ne
 8007208:	6560      	strne	r0, [r4, #84]	@ 0x54
 800720a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800720e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007212:	81a3      	strheq	r3, [r4, #12]
 8007214:	bf18      	it	ne
 8007216:	81a3      	strhne	r3, [r4, #12]
 8007218:	bd10      	pop	{r4, pc}

0800721a <__sclose>:
 800721a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721e:	f000 b80d 	b.w	800723c <_close_r>

08007222 <memset>:
 8007222:	4402      	add	r2, r0
 8007224:	4603      	mov	r3, r0
 8007226:	4293      	cmp	r3, r2
 8007228:	d100      	bne.n	800722c <memset+0xa>
 800722a:	4770      	bx	lr
 800722c:	f803 1b01 	strb.w	r1, [r3], #1
 8007230:	e7f9      	b.n	8007226 <memset+0x4>
	...

08007234 <_localeconv_r>:
 8007234:	4800      	ldr	r0, [pc, #0]	@ (8007238 <_localeconv_r+0x4>)
 8007236:	4770      	bx	lr
 8007238:	20000158 	.word	0x20000158

0800723c <_close_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4d06      	ldr	r5, [pc, #24]	@ (8007258 <_close_r+0x1c>)
 8007240:	2300      	movs	r3, #0
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	602b      	str	r3, [r5, #0]
 8007248:	f7fa fad3 	bl	80017f2 <_close>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_close_r+0x1a>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_close_r+0x1a>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	20000e2c 	.word	0x20000e2c

0800725c <_lseek_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4d07      	ldr	r5, [pc, #28]	@ (800727c <_lseek_r+0x20>)
 8007260:	4604      	mov	r4, r0
 8007262:	4608      	mov	r0, r1
 8007264:	4611      	mov	r1, r2
 8007266:	2200      	movs	r2, #0
 8007268:	602a      	str	r2, [r5, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	f7fa fae8 	bl	8001840 <_lseek>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_lseek_r+0x1e>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_lseek_r+0x1e>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	20000e2c 	.word	0x20000e2c

08007280 <_read_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4d07      	ldr	r5, [pc, #28]	@ (80072a0 <_read_r+0x20>)
 8007284:	4604      	mov	r4, r0
 8007286:	4608      	mov	r0, r1
 8007288:	4611      	mov	r1, r2
 800728a:	2200      	movs	r2, #0
 800728c:	602a      	str	r2, [r5, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f7fa fa76 	bl	8001780 <_read>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_read_r+0x1e>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	b103      	cbz	r3, 800729e <_read_r+0x1e>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	20000e2c 	.word	0x20000e2c

080072a4 <_write_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4d07      	ldr	r5, [pc, #28]	@ (80072c4 <_write_r+0x20>)
 80072a8:	4604      	mov	r4, r0
 80072aa:	4608      	mov	r0, r1
 80072ac:	4611      	mov	r1, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	602a      	str	r2, [r5, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	f7fa fa81 	bl	80017ba <_write>
 80072b8:	1c43      	adds	r3, r0, #1
 80072ba:	d102      	bne.n	80072c2 <_write_r+0x1e>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	b103      	cbz	r3, 80072c2 <_write_r+0x1e>
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	20000e2c 	.word	0x20000e2c

080072c8 <__errno>:
 80072c8:	4b01      	ldr	r3, [pc, #4]	@ (80072d0 <__errno+0x8>)
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	20000018 	.word	0x20000018

080072d4 <__libc_init_array>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	4d0d      	ldr	r5, [pc, #52]	@ (800730c <__libc_init_array+0x38>)
 80072d8:	4c0d      	ldr	r4, [pc, #52]	@ (8007310 <__libc_init_array+0x3c>)
 80072da:	1b64      	subs	r4, r4, r5
 80072dc:	10a4      	asrs	r4, r4, #2
 80072de:	2600      	movs	r6, #0
 80072e0:	42a6      	cmp	r6, r4
 80072e2:	d109      	bne.n	80072f8 <__libc_init_array+0x24>
 80072e4:	4d0b      	ldr	r5, [pc, #44]	@ (8007314 <__libc_init_array+0x40>)
 80072e6:	4c0c      	ldr	r4, [pc, #48]	@ (8007318 <__libc_init_array+0x44>)
 80072e8:	f001 fff8 	bl	80092dc <_init>
 80072ec:	1b64      	subs	r4, r4, r5
 80072ee:	10a4      	asrs	r4, r4, #2
 80072f0:	2600      	movs	r6, #0
 80072f2:	42a6      	cmp	r6, r4
 80072f4:	d105      	bne.n	8007302 <__libc_init_array+0x2e>
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fc:	4798      	blx	r3
 80072fe:	3601      	adds	r6, #1
 8007300:	e7ee      	b.n	80072e0 <__libc_init_array+0xc>
 8007302:	f855 3b04 	ldr.w	r3, [r5], #4
 8007306:	4798      	blx	r3
 8007308:	3601      	adds	r6, #1
 800730a:	e7f2      	b.n	80072f2 <__libc_init_array+0x1e>
 800730c:	08009a38 	.word	0x08009a38
 8007310:	08009a38 	.word	0x08009a38
 8007314:	08009a38 	.word	0x08009a38
 8007318:	08009a40 	.word	0x08009a40

0800731c <__retarget_lock_init_recursive>:
 800731c:	4770      	bx	lr

0800731e <__retarget_lock_acquire_recursive>:
 800731e:	4770      	bx	lr

08007320 <__retarget_lock_release_recursive>:
 8007320:	4770      	bx	lr

08007322 <quorem>:
 8007322:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007326:	6903      	ldr	r3, [r0, #16]
 8007328:	690c      	ldr	r4, [r1, #16]
 800732a:	42a3      	cmp	r3, r4
 800732c:	4607      	mov	r7, r0
 800732e:	db7e      	blt.n	800742e <quorem+0x10c>
 8007330:	3c01      	subs	r4, #1
 8007332:	f101 0814 	add.w	r8, r1, #20
 8007336:	00a3      	lsls	r3, r4, #2
 8007338:	f100 0514 	add.w	r5, r0, #20
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007342:	9301      	str	r3, [sp, #4]
 8007344:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007348:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800734c:	3301      	adds	r3, #1
 800734e:	429a      	cmp	r2, r3
 8007350:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007354:	fbb2 f6f3 	udiv	r6, r2, r3
 8007358:	d32e      	bcc.n	80073b8 <quorem+0x96>
 800735a:	f04f 0a00 	mov.w	sl, #0
 800735e:	46c4      	mov	ip, r8
 8007360:	46ae      	mov	lr, r5
 8007362:	46d3      	mov	fp, sl
 8007364:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007368:	b298      	uxth	r0, r3
 800736a:	fb06 a000 	mla	r0, r6, r0, sl
 800736e:	0c02      	lsrs	r2, r0, #16
 8007370:	0c1b      	lsrs	r3, r3, #16
 8007372:	fb06 2303 	mla	r3, r6, r3, r2
 8007376:	f8de 2000 	ldr.w	r2, [lr]
 800737a:	b280      	uxth	r0, r0
 800737c:	b292      	uxth	r2, r2
 800737e:	1a12      	subs	r2, r2, r0
 8007380:	445a      	add	r2, fp
 8007382:	f8de 0000 	ldr.w	r0, [lr]
 8007386:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800738a:	b29b      	uxth	r3, r3
 800738c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007390:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007394:	b292      	uxth	r2, r2
 8007396:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800739a:	45e1      	cmp	r9, ip
 800739c:	f84e 2b04 	str.w	r2, [lr], #4
 80073a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80073a4:	d2de      	bcs.n	8007364 <quorem+0x42>
 80073a6:	9b00      	ldr	r3, [sp, #0]
 80073a8:	58eb      	ldr	r3, [r5, r3]
 80073aa:	b92b      	cbnz	r3, 80073b8 <quorem+0x96>
 80073ac:	9b01      	ldr	r3, [sp, #4]
 80073ae:	3b04      	subs	r3, #4
 80073b0:	429d      	cmp	r5, r3
 80073b2:	461a      	mov	r2, r3
 80073b4:	d32f      	bcc.n	8007416 <quorem+0xf4>
 80073b6:	613c      	str	r4, [r7, #16]
 80073b8:	4638      	mov	r0, r7
 80073ba:	f001 f90d 	bl	80085d8 <__mcmp>
 80073be:	2800      	cmp	r0, #0
 80073c0:	db25      	blt.n	800740e <quorem+0xec>
 80073c2:	4629      	mov	r1, r5
 80073c4:	2000      	movs	r0, #0
 80073c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80073ca:	f8d1 c000 	ldr.w	ip, [r1]
 80073ce:	fa1f fe82 	uxth.w	lr, r2
 80073d2:	fa1f f38c 	uxth.w	r3, ip
 80073d6:	eba3 030e 	sub.w	r3, r3, lr
 80073da:	4403      	add	r3, r0
 80073dc:	0c12      	lsrs	r2, r2, #16
 80073de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80073e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ec:	45c1      	cmp	r9, r8
 80073ee:	f841 3b04 	str.w	r3, [r1], #4
 80073f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80073f6:	d2e6      	bcs.n	80073c6 <quorem+0xa4>
 80073f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007400:	b922      	cbnz	r2, 800740c <quorem+0xea>
 8007402:	3b04      	subs	r3, #4
 8007404:	429d      	cmp	r5, r3
 8007406:	461a      	mov	r2, r3
 8007408:	d30b      	bcc.n	8007422 <quorem+0x100>
 800740a:	613c      	str	r4, [r7, #16]
 800740c:	3601      	adds	r6, #1
 800740e:	4630      	mov	r0, r6
 8007410:	b003      	add	sp, #12
 8007412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007416:	6812      	ldr	r2, [r2, #0]
 8007418:	3b04      	subs	r3, #4
 800741a:	2a00      	cmp	r2, #0
 800741c:	d1cb      	bne.n	80073b6 <quorem+0x94>
 800741e:	3c01      	subs	r4, #1
 8007420:	e7c6      	b.n	80073b0 <quorem+0x8e>
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	3b04      	subs	r3, #4
 8007426:	2a00      	cmp	r2, #0
 8007428:	d1ef      	bne.n	800740a <quorem+0xe8>
 800742a:	3c01      	subs	r4, #1
 800742c:	e7ea      	b.n	8007404 <quorem+0xe2>
 800742e:	2000      	movs	r0, #0
 8007430:	e7ee      	b.n	8007410 <quorem+0xee>
 8007432:	0000      	movs	r0, r0
 8007434:	0000      	movs	r0, r0
	...

08007438 <_dtoa_r>:
 8007438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743c:	ed2d 8b02 	vpush	{d8}
 8007440:	69c7      	ldr	r7, [r0, #28]
 8007442:	b091      	sub	sp, #68	@ 0x44
 8007444:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007448:	ec55 4b10 	vmov	r4, r5, d0
 800744c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800744e:	9107      	str	r1, [sp, #28]
 8007450:	4681      	mov	r9, r0
 8007452:	9209      	str	r2, [sp, #36]	@ 0x24
 8007454:	930d      	str	r3, [sp, #52]	@ 0x34
 8007456:	b97f      	cbnz	r7, 8007478 <_dtoa_r+0x40>
 8007458:	2010      	movs	r0, #16
 800745a:	f000 fd8d 	bl	8007f78 <malloc>
 800745e:	4602      	mov	r2, r0
 8007460:	f8c9 001c 	str.w	r0, [r9, #28]
 8007464:	b920      	cbnz	r0, 8007470 <_dtoa_r+0x38>
 8007466:	4ba0      	ldr	r3, [pc, #640]	@ (80076e8 <_dtoa_r+0x2b0>)
 8007468:	21ef      	movs	r1, #239	@ 0xef
 800746a:	48a0      	ldr	r0, [pc, #640]	@ (80076ec <_dtoa_r+0x2b4>)
 800746c:	f001 fbf8 	bl	8008c60 <__assert_func>
 8007470:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007474:	6007      	str	r7, [r0, #0]
 8007476:	60c7      	str	r7, [r0, #12]
 8007478:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800747c:	6819      	ldr	r1, [r3, #0]
 800747e:	b159      	cbz	r1, 8007498 <_dtoa_r+0x60>
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	604a      	str	r2, [r1, #4]
 8007484:	2301      	movs	r3, #1
 8007486:	4093      	lsls	r3, r2
 8007488:	608b      	str	r3, [r1, #8]
 800748a:	4648      	mov	r0, r9
 800748c:	f000 fe6a 	bl	8008164 <_Bfree>
 8007490:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	1e2b      	subs	r3, r5, #0
 800749a:	bfbb      	ittet	lt
 800749c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80074a0:	9303      	strlt	r3, [sp, #12]
 80074a2:	2300      	movge	r3, #0
 80074a4:	2201      	movlt	r2, #1
 80074a6:	bfac      	ite	ge
 80074a8:	6033      	strge	r3, [r6, #0]
 80074aa:	6032      	strlt	r2, [r6, #0]
 80074ac:	4b90      	ldr	r3, [pc, #576]	@ (80076f0 <_dtoa_r+0x2b8>)
 80074ae:	9e03      	ldr	r6, [sp, #12]
 80074b0:	43b3      	bics	r3, r6
 80074b2:	d110      	bne.n	80074d6 <_dtoa_r+0x9e>
 80074b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80074c0:	4323      	orrs	r3, r4
 80074c2:	f000 84de 	beq.w	8007e82 <_dtoa_r+0xa4a>
 80074c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80074c8:	4f8a      	ldr	r7, [pc, #552]	@ (80076f4 <_dtoa_r+0x2bc>)
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 84e0 	beq.w	8007e90 <_dtoa_r+0xa58>
 80074d0:	1cfb      	adds	r3, r7, #3
 80074d2:	f000 bcdb 	b.w	8007e8c <_dtoa_r+0xa54>
 80074d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80074da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80074de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e2:	d10a      	bne.n	80074fa <_dtoa_r+0xc2>
 80074e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074e6:	2301      	movs	r3, #1
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80074ec:	b113      	cbz	r3, 80074f4 <_dtoa_r+0xbc>
 80074ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80074f0:	4b81      	ldr	r3, [pc, #516]	@ (80076f8 <_dtoa_r+0x2c0>)
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	4f81      	ldr	r7, [pc, #516]	@ (80076fc <_dtoa_r+0x2c4>)
 80074f6:	f000 bccb 	b.w	8007e90 <_dtoa_r+0xa58>
 80074fa:	aa0e      	add	r2, sp, #56	@ 0x38
 80074fc:	a90f      	add	r1, sp, #60	@ 0x3c
 80074fe:	4648      	mov	r0, r9
 8007500:	eeb0 0b48 	vmov.f64	d0, d8
 8007504:	f001 f918 	bl	8008738 <__d2b>
 8007508:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800750c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800750e:	9001      	str	r0, [sp, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d045      	beq.n	80075a0 <_dtoa_r+0x168>
 8007514:	eeb0 7b48 	vmov.f64	d7, d8
 8007518:	ee18 1a90 	vmov	r1, s17
 800751c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007520:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007524:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007528:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800752c:	2500      	movs	r5, #0
 800752e:	ee07 1a90 	vmov	s15, r1
 8007532:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007536:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80076d0 <_dtoa_r+0x298>
 800753a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800753e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80076d8 <_dtoa_r+0x2a0>
 8007542:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007546:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80076e0 <_dtoa_r+0x2a8>
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007552:	eeb0 7b46 	vmov.f64	d7, d6
 8007556:	eea4 7b05 	vfma.f64	d7, d4, d5
 800755a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800755e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007566:	ee16 8a90 	vmov	r8, s13
 800756a:	d508      	bpl.n	800757e <_dtoa_r+0x146>
 800756c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007570:	eeb4 6b47 	vcmp.f64	d6, d7
 8007574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007578:	bf18      	it	ne
 800757a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800757e:	f1b8 0f16 	cmp.w	r8, #22
 8007582:	d82b      	bhi.n	80075dc <_dtoa_r+0x1a4>
 8007584:	495e      	ldr	r1, [pc, #376]	@ (8007700 <_dtoa_r+0x2c8>)
 8007586:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800758a:	ed91 7b00 	vldr	d7, [r1]
 800758e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007596:	d501      	bpl.n	800759c <_dtoa_r+0x164>
 8007598:	f108 38ff 	add.w	r8, r8, #4294967295
 800759c:	2100      	movs	r1, #0
 800759e:	e01e      	b.n	80075de <_dtoa_r+0x1a6>
 80075a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075a2:	4413      	add	r3, r2
 80075a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80075a8:	2920      	cmp	r1, #32
 80075aa:	bfc1      	itttt	gt
 80075ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80075b0:	408e      	lslgt	r6, r1
 80075b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80075b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80075ba:	bfd6      	itet	le
 80075bc:	f1c1 0120 	rsble	r1, r1, #32
 80075c0:	4331      	orrgt	r1, r6
 80075c2:	fa04 f101 	lslle.w	r1, r4, r1
 80075c6:	ee07 1a90 	vmov	s15, r1
 80075ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80075ce:	3b01      	subs	r3, #1
 80075d0:	ee17 1a90 	vmov	r1, s15
 80075d4:	2501      	movs	r5, #1
 80075d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80075da:	e7a8      	b.n	800752e <_dtoa_r+0xf6>
 80075dc:	2101      	movs	r1, #1
 80075de:	1ad2      	subs	r2, r2, r3
 80075e0:	1e53      	subs	r3, r2, #1
 80075e2:	9306      	str	r3, [sp, #24]
 80075e4:	bf45      	ittet	mi
 80075e6:	f1c2 0301 	rsbmi	r3, r2, #1
 80075ea:	9305      	strmi	r3, [sp, #20]
 80075ec:	2300      	movpl	r3, #0
 80075ee:	2300      	movmi	r3, #0
 80075f0:	bf4c      	ite	mi
 80075f2:	9306      	strmi	r3, [sp, #24]
 80075f4:	9305      	strpl	r3, [sp, #20]
 80075f6:	f1b8 0f00 	cmp.w	r8, #0
 80075fa:	910c      	str	r1, [sp, #48]	@ 0x30
 80075fc:	db18      	blt.n	8007630 <_dtoa_r+0x1f8>
 80075fe:	9b06      	ldr	r3, [sp, #24]
 8007600:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007604:	4443      	add	r3, r8
 8007606:	9306      	str	r3, [sp, #24]
 8007608:	2300      	movs	r3, #0
 800760a:	9a07      	ldr	r2, [sp, #28]
 800760c:	2a09      	cmp	r2, #9
 800760e:	d849      	bhi.n	80076a4 <_dtoa_r+0x26c>
 8007610:	2a05      	cmp	r2, #5
 8007612:	bfc4      	itt	gt
 8007614:	3a04      	subgt	r2, #4
 8007616:	9207      	strgt	r2, [sp, #28]
 8007618:	9a07      	ldr	r2, [sp, #28]
 800761a:	f1a2 0202 	sub.w	r2, r2, #2
 800761e:	bfcc      	ite	gt
 8007620:	2400      	movgt	r4, #0
 8007622:	2401      	movle	r4, #1
 8007624:	2a03      	cmp	r2, #3
 8007626:	d848      	bhi.n	80076ba <_dtoa_r+0x282>
 8007628:	e8df f002 	tbb	[pc, r2]
 800762c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007630:	9b05      	ldr	r3, [sp, #20]
 8007632:	2200      	movs	r2, #0
 8007634:	eba3 0308 	sub.w	r3, r3, r8
 8007638:	9305      	str	r3, [sp, #20]
 800763a:	920a      	str	r2, [sp, #40]	@ 0x28
 800763c:	f1c8 0300 	rsb	r3, r8, #0
 8007640:	e7e3      	b.n	800760a <_dtoa_r+0x1d2>
 8007642:	2200      	movs	r2, #0
 8007644:	9208      	str	r2, [sp, #32]
 8007646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007648:	2a00      	cmp	r2, #0
 800764a:	dc39      	bgt.n	80076c0 <_dtoa_r+0x288>
 800764c:	f04f 0b01 	mov.w	fp, #1
 8007650:	46da      	mov	sl, fp
 8007652:	465a      	mov	r2, fp
 8007654:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007658:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800765c:	2100      	movs	r1, #0
 800765e:	2004      	movs	r0, #4
 8007660:	f100 0614 	add.w	r6, r0, #20
 8007664:	4296      	cmp	r6, r2
 8007666:	d930      	bls.n	80076ca <_dtoa_r+0x292>
 8007668:	6079      	str	r1, [r7, #4]
 800766a:	4648      	mov	r0, r9
 800766c:	9304      	str	r3, [sp, #16]
 800766e:	f000 fd39 	bl	80080e4 <_Balloc>
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	4607      	mov	r7, r0
 8007676:	2800      	cmp	r0, #0
 8007678:	d146      	bne.n	8007708 <_dtoa_r+0x2d0>
 800767a:	4b22      	ldr	r3, [pc, #136]	@ (8007704 <_dtoa_r+0x2cc>)
 800767c:	4602      	mov	r2, r0
 800767e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007682:	e6f2      	b.n	800746a <_dtoa_r+0x32>
 8007684:	2201      	movs	r2, #1
 8007686:	e7dd      	b.n	8007644 <_dtoa_r+0x20c>
 8007688:	2200      	movs	r2, #0
 800768a:	9208      	str	r2, [sp, #32]
 800768c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800768e:	eb08 0b02 	add.w	fp, r8, r2
 8007692:	f10b 0a01 	add.w	sl, fp, #1
 8007696:	4652      	mov	r2, sl
 8007698:	2a01      	cmp	r2, #1
 800769a:	bfb8      	it	lt
 800769c:	2201      	movlt	r2, #1
 800769e:	e7db      	b.n	8007658 <_dtoa_r+0x220>
 80076a0:	2201      	movs	r2, #1
 80076a2:	e7f2      	b.n	800768a <_dtoa_r+0x252>
 80076a4:	2401      	movs	r4, #1
 80076a6:	2200      	movs	r2, #0
 80076a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80076ac:	f04f 3bff 	mov.w	fp, #4294967295
 80076b0:	2100      	movs	r1, #0
 80076b2:	46da      	mov	sl, fp
 80076b4:	2212      	movs	r2, #18
 80076b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80076b8:	e7ce      	b.n	8007658 <_dtoa_r+0x220>
 80076ba:	2201      	movs	r2, #1
 80076bc:	9208      	str	r2, [sp, #32]
 80076be:	e7f5      	b.n	80076ac <_dtoa_r+0x274>
 80076c0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80076c4:	46da      	mov	sl, fp
 80076c6:	465a      	mov	r2, fp
 80076c8:	e7c6      	b.n	8007658 <_dtoa_r+0x220>
 80076ca:	3101      	adds	r1, #1
 80076cc:	0040      	lsls	r0, r0, #1
 80076ce:	e7c7      	b.n	8007660 <_dtoa_r+0x228>
 80076d0:	636f4361 	.word	0x636f4361
 80076d4:	3fd287a7 	.word	0x3fd287a7
 80076d8:	8b60c8b3 	.word	0x8b60c8b3
 80076dc:	3fc68a28 	.word	0x3fc68a28
 80076e0:	509f79fb 	.word	0x509f79fb
 80076e4:	3fd34413 	.word	0x3fd34413
 80076e8:	08009701 	.word	0x08009701
 80076ec:	08009718 	.word	0x08009718
 80076f0:	7ff00000 	.word	0x7ff00000
 80076f4:	080096fd 	.word	0x080096fd
 80076f8:	080096d1 	.word	0x080096d1
 80076fc:	080096d0 	.word	0x080096d0
 8007700:	08009810 	.word	0x08009810
 8007704:	08009770 	.word	0x08009770
 8007708:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800770c:	f1ba 0f0e 	cmp.w	sl, #14
 8007710:	6010      	str	r0, [r2, #0]
 8007712:	d86f      	bhi.n	80077f4 <_dtoa_r+0x3bc>
 8007714:	2c00      	cmp	r4, #0
 8007716:	d06d      	beq.n	80077f4 <_dtoa_r+0x3bc>
 8007718:	f1b8 0f00 	cmp.w	r8, #0
 800771c:	f340 80c2 	ble.w	80078a4 <_dtoa_r+0x46c>
 8007720:	4aca      	ldr	r2, [pc, #808]	@ (8007a4c <_dtoa_r+0x614>)
 8007722:	f008 010f 	and.w	r1, r8, #15
 8007726:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800772a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800772e:	ed92 7b00 	vldr	d7, [r2]
 8007732:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007736:	f000 80a9 	beq.w	800788c <_dtoa_r+0x454>
 800773a:	4ac5      	ldr	r2, [pc, #788]	@ (8007a50 <_dtoa_r+0x618>)
 800773c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007740:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007744:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007748:	f001 010f 	and.w	r1, r1, #15
 800774c:	2203      	movs	r2, #3
 800774e:	48c0      	ldr	r0, [pc, #768]	@ (8007a50 <_dtoa_r+0x618>)
 8007750:	2900      	cmp	r1, #0
 8007752:	f040 809d 	bne.w	8007890 <_dtoa_r+0x458>
 8007756:	ed9d 6b02 	vldr	d6, [sp, #8]
 800775a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800775e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007762:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007764:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007768:	2900      	cmp	r1, #0
 800776a:	f000 80c1 	beq.w	80078f0 <_dtoa_r+0x4b8>
 800776e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007772:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777a:	f140 80b9 	bpl.w	80078f0 <_dtoa_r+0x4b8>
 800777e:	f1ba 0f00 	cmp.w	sl, #0
 8007782:	f000 80b5 	beq.w	80078f0 <_dtoa_r+0x4b8>
 8007786:	f1bb 0f00 	cmp.w	fp, #0
 800778a:	dd31      	ble.n	80077f0 <_dtoa_r+0x3b8>
 800778c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007790:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007794:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007798:	f108 31ff 	add.w	r1, r8, #4294967295
 800779c:	9104      	str	r1, [sp, #16]
 800779e:	3201      	adds	r2, #1
 80077a0:	465c      	mov	r4, fp
 80077a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80077a6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80077aa:	ee07 2a90 	vmov	s15, r2
 80077ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80077b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80077b6:	ee15 2a90 	vmov	r2, s11
 80077ba:	ec51 0b15 	vmov	r0, r1, d5
 80077be:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80077c2:	2c00      	cmp	r4, #0
 80077c4:	f040 8098 	bne.w	80078f8 <_dtoa_r+0x4c0>
 80077c8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80077cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80077d0:	ec41 0b17 	vmov	d7, r0, r1
 80077d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80077d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077dc:	f300 8261 	bgt.w	8007ca2 <_dtoa_r+0x86a>
 80077e0:	eeb1 7b47 	vneg.f64	d7, d7
 80077e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80077e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ec:	f100 80f5 	bmi.w	80079da <_dtoa_r+0x5a2>
 80077f0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80077f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	f2c0 812c 	blt.w	8007a54 <_dtoa_r+0x61c>
 80077fc:	f1b8 0f0e 	cmp.w	r8, #14
 8007800:	f300 8128 	bgt.w	8007a54 <_dtoa_r+0x61c>
 8007804:	4b91      	ldr	r3, [pc, #580]	@ (8007a4c <_dtoa_r+0x614>)
 8007806:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800780a:	ed93 6b00 	vldr	d6, [r3]
 800780e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	da03      	bge.n	800781c <_dtoa_r+0x3e4>
 8007814:	f1ba 0f00 	cmp.w	sl, #0
 8007818:	f340 80d2 	ble.w	80079c0 <_dtoa_r+0x588>
 800781c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007820:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007824:	463e      	mov	r6, r7
 8007826:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800782a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800782e:	ee15 3a10 	vmov	r3, s10
 8007832:	3330      	adds	r3, #48	@ 0x30
 8007834:	f806 3b01 	strb.w	r3, [r6], #1
 8007838:	1bf3      	subs	r3, r6, r7
 800783a:	459a      	cmp	sl, r3
 800783c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007840:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007844:	f040 80f8 	bne.w	8007a38 <_dtoa_r+0x600>
 8007848:	ee37 7b07 	vadd.f64	d7, d7, d7
 800784c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007854:	f300 80dd 	bgt.w	8007a12 <_dtoa_r+0x5da>
 8007858:	eeb4 7b46 	vcmp.f64	d7, d6
 800785c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007860:	d104      	bne.n	800786c <_dtoa_r+0x434>
 8007862:	ee15 3a10 	vmov	r3, s10
 8007866:	07db      	lsls	r3, r3, #31
 8007868:	f100 80d3 	bmi.w	8007a12 <_dtoa_r+0x5da>
 800786c:	9901      	ldr	r1, [sp, #4]
 800786e:	4648      	mov	r0, r9
 8007870:	f000 fc78 	bl	8008164 <_Bfree>
 8007874:	2300      	movs	r3, #0
 8007876:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007878:	7033      	strb	r3, [r6, #0]
 800787a:	f108 0301 	add.w	r3, r8, #1
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 8304 	beq.w	8007e90 <_dtoa_r+0xa58>
 8007888:	601e      	str	r6, [r3, #0]
 800788a:	e301      	b.n	8007e90 <_dtoa_r+0xa58>
 800788c:	2202      	movs	r2, #2
 800788e:	e75e      	b.n	800774e <_dtoa_r+0x316>
 8007890:	07cc      	lsls	r4, r1, #31
 8007892:	d504      	bpl.n	800789e <_dtoa_r+0x466>
 8007894:	ed90 6b00 	vldr	d6, [r0]
 8007898:	3201      	adds	r2, #1
 800789a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800789e:	1049      	asrs	r1, r1, #1
 80078a0:	3008      	adds	r0, #8
 80078a2:	e755      	b.n	8007750 <_dtoa_r+0x318>
 80078a4:	d022      	beq.n	80078ec <_dtoa_r+0x4b4>
 80078a6:	f1c8 0100 	rsb	r1, r8, #0
 80078aa:	4a68      	ldr	r2, [pc, #416]	@ (8007a4c <_dtoa_r+0x614>)
 80078ac:	f001 000f 	and.w	r0, r1, #15
 80078b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80078b4:	ed92 7b00 	vldr	d7, [r2]
 80078b8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80078bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80078c0:	4863      	ldr	r0, [pc, #396]	@ (8007a50 <_dtoa_r+0x618>)
 80078c2:	1109      	asrs	r1, r1, #4
 80078c4:	2400      	movs	r4, #0
 80078c6:	2202      	movs	r2, #2
 80078c8:	b929      	cbnz	r1, 80078d6 <_dtoa_r+0x49e>
 80078ca:	2c00      	cmp	r4, #0
 80078cc:	f43f af49 	beq.w	8007762 <_dtoa_r+0x32a>
 80078d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80078d4:	e745      	b.n	8007762 <_dtoa_r+0x32a>
 80078d6:	07ce      	lsls	r6, r1, #31
 80078d8:	d505      	bpl.n	80078e6 <_dtoa_r+0x4ae>
 80078da:	ed90 6b00 	vldr	d6, [r0]
 80078de:	3201      	adds	r2, #1
 80078e0:	2401      	movs	r4, #1
 80078e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80078e6:	1049      	asrs	r1, r1, #1
 80078e8:	3008      	adds	r0, #8
 80078ea:	e7ed      	b.n	80078c8 <_dtoa_r+0x490>
 80078ec:	2202      	movs	r2, #2
 80078ee:	e738      	b.n	8007762 <_dtoa_r+0x32a>
 80078f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80078f4:	4654      	mov	r4, sl
 80078f6:	e754      	b.n	80077a2 <_dtoa_r+0x36a>
 80078f8:	4a54      	ldr	r2, [pc, #336]	@ (8007a4c <_dtoa_r+0x614>)
 80078fa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80078fe:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007902:	9a08      	ldr	r2, [sp, #32]
 8007904:	ec41 0b17 	vmov	d7, r0, r1
 8007908:	443c      	add	r4, r7
 800790a:	b34a      	cbz	r2, 8007960 <_dtoa_r+0x528>
 800790c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007910:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007914:	463e      	mov	r6, r7
 8007916:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800791a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800791e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007922:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007926:	ee14 2a90 	vmov	r2, s9
 800792a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800792e:	3230      	adds	r2, #48	@ 0x30
 8007930:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007934:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793c:	f806 2b01 	strb.w	r2, [r6], #1
 8007940:	d438      	bmi.n	80079b4 <_dtoa_r+0x57c>
 8007942:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007946:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800794a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794e:	d462      	bmi.n	8007a16 <_dtoa_r+0x5de>
 8007950:	42a6      	cmp	r6, r4
 8007952:	f43f af4d 	beq.w	80077f0 <_dtoa_r+0x3b8>
 8007956:	ee27 7b03 	vmul.f64	d7, d7, d3
 800795a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800795e:	e7e0      	b.n	8007922 <_dtoa_r+0x4ea>
 8007960:	4621      	mov	r1, r4
 8007962:	463e      	mov	r6, r7
 8007964:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007968:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800796c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007970:	ee14 2a90 	vmov	r2, s9
 8007974:	3230      	adds	r2, #48	@ 0x30
 8007976:	f806 2b01 	strb.w	r2, [r6], #1
 800797a:	42a6      	cmp	r6, r4
 800797c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007980:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007984:	d119      	bne.n	80079ba <_dtoa_r+0x582>
 8007986:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800798a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800798e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007996:	dc3e      	bgt.n	8007a16 <_dtoa_r+0x5de>
 8007998:	ee35 5b47 	vsub.f64	d5, d5, d7
 800799c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80079a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a4:	f57f af24 	bpl.w	80077f0 <_dtoa_r+0x3b8>
 80079a8:	460e      	mov	r6, r1
 80079aa:	3901      	subs	r1, #1
 80079ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079b0:	2b30      	cmp	r3, #48	@ 0x30
 80079b2:	d0f9      	beq.n	80079a8 <_dtoa_r+0x570>
 80079b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80079b8:	e758      	b.n	800786c <_dtoa_r+0x434>
 80079ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 80079be:	e7d5      	b.n	800796c <_dtoa_r+0x534>
 80079c0:	d10b      	bne.n	80079da <_dtoa_r+0x5a2>
 80079c2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80079c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80079ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d6:	f2c0 8161 	blt.w	8007c9c <_dtoa_r+0x864>
 80079da:	2400      	movs	r4, #0
 80079dc:	4625      	mov	r5, r4
 80079de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e0:	43db      	mvns	r3, r3
 80079e2:	9304      	str	r3, [sp, #16]
 80079e4:	463e      	mov	r6, r7
 80079e6:	f04f 0800 	mov.w	r8, #0
 80079ea:	4621      	mov	r1, r4
 80079ec:	4648      	mov	r0, r9
 80079ee:	f000 fbb9 	bl	8008164 <_Bfree>
 80079f2:	2d00      	cmp	r5, #0
 80079f4:	d0de      	beq.n	80079b4 <_dtoa_r+0x57c>
 80079f6:	f1b8 0f00 	cmp.w	r8, #0
 80079fa:	d005      	beq.n	8007a08 <_dtoa_r+0x5d0>
 80079fc:	45a8      	cmp	r8, r5
 80079fe:	d003      	beq.n	8007a08 <_dtoa_r+0x5d0>
 8007a00:	4641      	mov	r1, r8
 8007a02:	4648      	mov	r0, r9
 8007a04:	f000 fbae 	bl	8008164 <_Bfree>
 8007a08:	4629      	mov	r1, r5
 8007a0a:	4648      	mov	r0, r9
 8007a0c:	f000 fbaa 	bl	8008164 <_Bfree>
 8007a10:	e7d0      	b.n	80079b4 <_dtoa_r+0x57c>
 8007a12:	f8cd 8010 	str.w	r8, [sp, #16]
 8007a16:	4633      	mov	r3, r6
 8007a18:	461e      	mov	r6, r3
 8007a1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a1e:	2a39      	cmp	r2, #57	@ 0x39
 8007a20:	d106      	bne.n	8007a30 <_dtoa_r+0x5f8>
 8007a22:	429f      	cmp	r7, r3
 8007a24:	d1f8      	bne.n	8007a18 <_dtoa_r+0x5e0>
 8007a26:	9a04      	ldr	r2, [sp, #16]
 8007a28:	3201      	adds	r2, #1
 8007a2a:	9204      	str	r2, [sp, #16]
 8007a2c:	2230      	movs	r2, #48	@ 0x30
 8007a2e:	703a      	strb	r2, [r7, #0]
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	3201      	adds	r2, #1
 8007a34:	701a      	strb	r2, [r3, #0]
 8007a36:	e7bd      	b.n	80079b4 <_dtoa_r+0x57c>
 8007a38:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007a3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a44:	f47f aeef 	bne.w	8007826 <_dtoa_r+0x3ee>
 8007a48:	e710      	b.n	800786c <_dtoa_r+0x434>
 8007a4a:	bf00      	nop
 8007a4c:	08009810 	.word	0x08009810
 8007a50:	080097e8 	.word	0x080097e8
 8007a54:	9908      	ldr	r1, [sp, #32]
 8007a56:	2900      	cmp	r1, #0
 8007a58:	f000 80e3 	beq.w	8007c22 <_dtoa_r+0x7ea>
 8007a5c:	9907      	ldr	r1, [sp, #28]
 8007a5e:	2901      	cmp	r1, #1
 8007a60:	f300 80c8 	bgt.w	8007bf4 <_dtoa_r+0x7bc>
 8007a64:	2d00      	cmp	r5, #0
 8007a66:	f000 80c1 	beq.w	8007bec <_dtoa_r+0x7b4>
 8007a6a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007a6e:	9e05      	ldr	r6, [sp, #20]
 8007a70:	461c      	mov	r4, r3
 8007a72:	9304      	str	r3, [sp, #16]
 8007a74:	9b05      	ldr	r3, [sp, #20]
 8007a76:	4413      	add	r3, r2
 8007a78:	9305      	str	r3, [sp, #20]
 8007a7a:	9b06      	ldr	r3, [sp, #24]
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	4413      	add	r3, r2
 8007a80:	4648      	mov	r0, r9
 8007a82:	9306      	str	r3, [sp, #24]
 8007a84:	f000 fc22 	bl	80082cc <__i2b>
 8007a88:	9b04      	ldr	r3, [sp, #16]
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	b166      	cbz	r6, 8007aa8 <_dtoa_r+0x670>
 8007a8e:	9a06      	ldr	r2, [sp, #24]
 8007a90:	2a00      	cmp	r2, #0
 8007a92:	dd09      	ble.n	8007aa8 <_dtoa_r+0x670>
 8007a94:	42b2      	cmp	r2, r6
 8007a96:	9905      	ldr	r1, [sp, #20]
 8007a98:	bfa8      	it	ge
 8007a9a:	4632      	movge	r2, r6
 8007a9c:	1a89      	subs	r1, r1, r2
 8007a9e:	9105      	str	r1, [sp, #20]
 8007aa0:	9906      	ldr	r1, [sp, #24]
 8007aa2:	1ab6      	subs	r6, r6, r2
 8007aa4:	1a8a      	subs	r2, r1, r2
 8007aa6:	9206      	str	r2, [sp, #24]
 8007aa8:	b1fb      	cbz	r3, 8007aea <_dtoa_r+0x6b2>
 8007aaa:	9a08      	ldr	r2, [sp, #32]
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	f000 80bc 	beq.w	8007c2a <_dtoa_r+0x7f2>
 8007ab2:	b19c      	cbz	r4, 8007adc <_dtoa_r+0x6a4>
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	4648      	mov	r0, r9
 8007aba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007abc:	f000 fcc6 	bl	800844c <__pow5mult>
 8007ac0:	9a01      	ldr	r2, [sp, #4]
 8007ac2:	4601      	mov	r1, r0
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	4648      	mov	r0, r9
 8007ac8:	f000 fc16 	bl	80082f8 <__multiply>
 8007acc:	9901      	ldr	r1, [sp, #4]
 8007ace:	9004      	str	r0, [sp, #16]
 8007ad0:	4648      	mov	r0, r9
 8007ad2:	f000 fb47 	bl	8008164 <_Bfree>
 8007ad6:	9a04      	ldr	r2, [sp, #16]
 8007ad8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ada:	9201      	str	r2, [sp, #4]
 8007adc:	1b1a      	subs	r2, r3, r4
 8007ade:	d004      	beq.n	8007aea <_dtoa_r+0x6b2>
 8007ae0:	9901      	ldr	r1, [sp, #4]
 8007ae2:	4648      	mov	r0, r9
 8007ae4:	f000 fcb2 	bl	800844c <__pow5mult>
 8007ae8:	9001      	str	r0, [sp, #4]
 8007aea:	2101      	movs	r1, #1
 8007aec:	4648      	mov	r0, r9
 8007aee:	f000 fbed 	bl	80082cc <__i2b>
 8007af2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007af4:	4604      	mov	r4, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 81d0 	beq.w	8007e9c <_dtoa_r+0xa64>
 8007afc:	461a      	mov	r2, r3
 8007afe:	4601      	mov	r1, r0
 8007b00:	4648      	mov	r0, r9
 8007b02:	f000 fca3 	bl	800844c <__pow5mult>
 8007b06:	9b07      	ldr	r3, [sp, #28]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	f300 8095 	bgt.w	8007c3a <_dtoa_r+0x802>
 8007b10:	9b02      	ldr	r3, [sp, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f040 808b 	bne.w	8007c2e <_dtoa_r+0x7f6>
 8007b18:	9b03      	ldr	r3, [sp, #12]
 8007b1a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007b1e:	2a00      	cmp	r2, #0
 8007b20:	f040 8087 	bne.w	8007c32 <_dtoa_r+0x7fa>
 8007b24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007b28:	0d12      	lsrs	r2, r2, #20
 8007b2a:	0512      	lsls	r2, r2, #20
 8007b2c:	2a00      	cmp	r2, #0
 8007b2e:	f000 8082 	beq.w	8007c36 <_dtoa_r+0x7fe>
 8007b32:	9b05      	ldr	r3, [sp, #20]
 8007b34:	3301      	adds	r3, #1
 8007b36:	9305      	str	r3, [sp, #20]
 8007b38:	9b06      	ldr	r3, [sp, #24]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	9306      	str	r3, [sp, #24]
 8007b3e:	2301      	movs	r3, #1
 8007b40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 81af 	beq.w	8007ea8 <_dtoa_r+0xa70>
 8007b4a:	6922      	ldr	r2, [r4, #16]
 8007b4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007b50:	6910      	ldr	r0, [r2, #16]
 8007b52:	f000 fb6f 	bl	8008234 <__hi0bits>
 8007b56:	f1c0 0020 	rsb	r0, r0, #32
 8007b5a:	9b06      	ldr	r3, [sp, #24]
 8007b5c:	4418      	add	r0, r3
 8007b5e:	f010 001f 	ands.w	r0, r0, #31
 8007b62:	d076      	beq.n	8007c52 <_dtoa_r+0x81a>
 8007b64:	f1c0 0220 	rsb	r2, r0, #32
 8007b68:	2a04      	cmp	r2, #4
 8007b6a:	dd69      	ble.n	8007c40 <_dtoa_r+0x808>
 8007b6c:	9b05      	ldr	r3, [sp, #20]
 8007b6e:	f1c0 001c 	rsb	r0, r0, #28
 8007b72:	4403      	add	r3, r0
 8007b74:	9305      	str	r3, [sp, #20]
 8007b76:	9b06      	ldr	r3, [sp, #24]
 8007b78:	4406      	add	r6, r0
 8007b7a:	4403      	add	r3, r0
 8007b7c:	9306      	str	r3, [sp, #24]
 8007b7e:	9b05      	ldr	r3, [sp, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dd05      	ble.n	8007b90 <_dtoa_r+0x758>
 8007b84:	9901      	ldr	r1, [sp, #4]
 8007b86:	461a      	mov	r2, r3
 8007b88:	4648      	mov	r0, r9
 8007b8a:	f000 fcb9 	bl	8008500 <__lshift>
 8007b8e:	9001      	str	r0, [sp, #4]
 8007b90:	9b06      	ldr	r3, [sp, #24]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	dd05      	ble.n	8007ba2 <_dtoa_r+0x76a>
 8007b96:	4621      	mov	r1, r4
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4648      	mov	r0, r9
 8007b9c:	f000 fcb0 	bl	8008500 <__lshift>
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d056      	beq.n	8007c56 <_dtoa_r+0x81e>
 8007ba8:	9801      	ldr	r0, [sp, #4]
 8007baa:	4621      	mov	r1, r4
 8007bac:	f000 fd14 	bl	80085d8 <__mcmp>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	da50      	bge.n	8007c56 <_dtoa_r+0x81e>
 8007bb4:	f108 33ff 	add.w	r3, r8, #4294967295
 8007bb8:	9304      	str	r3, [sp, #16]
 8007bba:	9901      	ldr	r1, [sp, #4]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	220a      	movs	r2, #10
 8007bc0:	4648      	mov	r0, r9
 8007bc2:	f000 faf1 	bl	80081a8 <__multadd>
 8007bc6:	9b08      	ldr	r3, [sp, #32]
 8007bc8:	9001      	str	r0, [sp, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 816e 	beq.w	8007eac <_dtoa_r+0xa74>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	220a      	movs	r2, #10
 8007bd6:	4648      	mov	r0, r9
 8007bd8:	f000 fae6 	bl	80081a8 <__multadd>
 8007bdc:	f1bb 0f00 	cmp.w	fp, #0
 8007be0:	4605      	mov	r5, r0
 8007be2:	dc64      	bgt.n	8007cae <_dtoa_r+0x876>
 8007be4:	9b07      	ldr	r3, [sp, #28]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	dc3e      	bgt.n	8007c68 <_dtoa_r+0x830>
 8007bea:	e060      	b.n	8007cae <_dtoa_r+0x876>
 8007bec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007bf2:	e73c      	b.n	8007a6e <_dtoa_r+0x636>
 8007bf4:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	bfbf      	itttt	lt
 8007bfc:	1ae2      	sublt	r2, r4, r3
 8007bfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007c00:	189b      	addlt	r3, r3, r2
 8007c02:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8007c04:	bfae      	itee	ge
 8007c06:	1b1c      	subge	r4, r3, r4
 8007c08:	4623      	movlt	r3, r4
 8007c0a:	2400      	movlt	r4, #0
 8007c0c:	f1ba 0f00 	cmp.w	sl, #0
 8007c10:	bfb5      	itete	lt
 8007c12:	9a05      	ldrlt	r2, [sp, #20]
 8007c14:	9e05      	ldrge	r6, [sp, #20]
 8007c16:	eba2 060a 	sublt.w	r6, r2, sl
 8007c1a:	4652      	movge	r2, sl
 8007c1c:	bfb8      	it	lt
 8007c1e:	2200      	movlt	r2, #0
 8007c20:	e727      	b.n	8007a72 <_dtoa_r+0x63a>
 8007c22:	9e05      	ldr	r6, [sp, #20]
 8007c24:	9d08      	ldr	r5, [sp, #32]
 8007c26:	461c      	mov	r4, r3
 8007c28:	e730      	b.n	8007a8c <_dtoa_r+0x654>
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	e758      	b.n	8007ae0 <_dtoa_r+0x6a8>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e786      	b.n	8007b40 <_dtoa_r+0x708>
 8007c32:	9b02      	ldr	r3, [sp, #8]
 8007c34:	e784      	b.n	8007b40 <_dtoa_r+0x708>
 8007c36:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007c38:	e783      	b.n	8007b42 <_dtoa_r+0x70a>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c3e:	e784      	b.n	8007b4a <_dtoa_r+0x712>
 8007c40:	d09d      	beq.n	8007b7e <_dtoa_r+0x746>
 8007c42:	9b05      	ldr	r3, [sp, #20]
 8007c44:	321c      	adds	r2, #28
 8007c46:	4413      	add	r3, r2
 8007c48:	9305      	str	r3, [sp, #20]
 8007c4a:	9b06      	ldr	r3, [sp, #24]
 8007c4c:	4416      	add	r6, r2
 8007c4e:	4413      	add	r3, r2
 8007c50:	e794      	b.n	8007b7c <_dtoa_r+0x744>
 8007c52:	4602      	mov	r2, r0
 8007c54:	e7f5      	b.n	8007c42 <_dtoa_r+0x80a>
 8007c56:	f1ba 0f00 	cmp.w	sl, #0
 8007c5a:	f8cd 8010 	str.w	r8, [sp, #16]
 8007c5e:	46d3      	mov	fp, sl
 8007c60:	dc21      	bgt.n	8007ca6 <_dtoa_r+0x86e>
 8007c62:	9b07      	ldr	r3, [sp, #28]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	dd1e      	ble.n	8007ca6 <_dtoa_r+0x86e>
 8007c68:	f1bb 0f00 	cmp.w	fp, #0
 8007c6c:	f47f aeb7 	bne.w	80079de <_dtoa_r+0x5a6>
 8007c70:	4621      	mov	r1, r4
 8007c72:	465b      	mov	r3, fp
 8007c74:	2205      	movs	r2, #5
 8007c76:	4648      	mov	r0, r9
 8007c78:	f000 fa96 	bl	80081a8 <__multadd>
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	4604      	mov	r4, r0
 8007c80:	9801      	ldr	r0, [sp, #4]
 8007c82:	f000 fca9 	bl	80085d8 <__mcmp>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f77f aea9 	ble.w	80079de <_dtoa_r+0x5a6>
 8007c8c:	463e      	mov	r6, r7
 8007c8e:	2331      	movs	r3, #49	@ 0x31
 8007c90:	f806 3b01 	strb.w	r3, [r6], #1
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	3301      	adds	r3, #1
 8007c98:	9304      	str	r3, [sp, #16]
 8007c9a:	e6a4      	b.n	80079e6 <_dtoa_r+0x5ae>
 8007c9c:	f8cd 8010 	str.w	r8, [sp, #16]
 8007ca0:	4654      	mov	r4, sl
 8007ca2:	4625      	mov	r5, r4
 8007ca4:	e7f2      	b.n	8007c8c <_dtoa_r+0x854>
 8007ca6:	9b08      	ldr	r3, [sp, #32]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 8103 	beq.w	8007eb4 <_dtoa_r+0xa7c>
 8007cae:	2e00      	cmp	r6, #0
 8007cb0:	dd05      	ble.n	8007cbe <_dtoa_r+0x886>
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	4648      	mov	r0, r9
 8007cb8:	f000 fc22 	bl	8008500 <__lshift>
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d058      	beq.n	8007d76 <_dtoa_r+0x93e>
 8007cc4:	6869      	ldr	r1, [r5, #4]
 8007cc6:	4648      	mov	r0, r9
 8007cc8:	f000 fa0c 	bl	80080e4 <_Balloc>
 8007ccc:	4606      	mov	r6, r0
 8007cce:	b928      	cbnz	r0, 8007cdc <_dtoa_r+0x8a4>
 8007cd0:	4b82      	ldr	r3, [pc, #520]	@ (8007edc <_dtoa_r+0xaa4>)
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007cd8:	f7ff bbc7 	b.w	800746a <_dtoa_r+0x32>
 8007cdc:	692a      	ldr	r2, [r5, #16]
 8007cde:	3202      	adds	r2, #2
 8007ce0:	0092      	lsls	r2, r2, #2
 8007ce2:	f105 010c 	add.w	r1, r5, #12
 8007ce6:	300c      	adds	r0, #12
 8007ce8:	f000 ffac 	bl	8008c44 <memcpy>
 8007cec:	2201      	movs	r2, #1
 8007cee:	4631      	mov	r1, r6
 8007cf0:	4648      	mov	r0, r9
 8007cf2:	f000 fc05 	bl	8008500 <__lshift>
 8007cf6:	1c7b      	adds	r3, r7, #1
 8007cf8:	9305      	str	r3, [sp, #20]
 8007cfa:	eb07 030b 	add.w	r3, r7, fp
 8007cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d00:	9b02      	ldr	r3, [sp, #8]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	46a8      	mov	r8, r5
 8007d08:	9308      	str	r3, [sp, #32]
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	9b05      	ldr	r3, [sp, #20]
 8007d0e:	9801      	ldr	r0, [sp, #4]
 8007d10:	4621      	mov	r1, r4
 8007d12:	f103 3bff 	add.w	fp, r3, #4294967295
 8007d16:	f7ff fb04 	bl	8007322 <quorem>
 8007d1a:	4641      	mov	r1, r8
 8007d1c:	9002      	str	r0, [sp, #8]
 8007d1e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007d22:	9801      	ldr	r0, [sp, #4]
 8007d24:	f000 fc58 	bl	80085d8 <__mcmp>
 8007d28:	462a      	mov	r2, r5
 8007d2a:	9006      	str	r0, [sp, #24]
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	4648      	mov	r0, r9
 8007d30:	f000 fc6e 	bl	8008610 <__mdiff>
 8007d34:	68c2      	ldr	r2, [r0, #12]
 8007d36:	4606      	mov	r6, r0
 8007d38:	b9fa      	cbnz	r2, 8007d7a <_dtoa_r+0x942>
 8007d3a:	4601      	mov	r1, r0
 8007d3c:	9801      	ldr	r0, [sp, #4]
 8007d3e:	f000 fc4b 	bl	80085d8 <__mcmp>
 8007d42:	4602      	mov	r2, r0
 8007d44:	4631      	mov	r1, r6
 8007d46:	4648      	mov	r0, r9
 8007d48:	920a      	str	r2, [sp, #40]	@ 0x28
 8007d4a:	f000 fa0b 	bl	8008164 <_Bfree>
 8007d4e:	9b07      	ldr	r3, [sp, #28]
 8007d50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d52:	9e05      	ldr	r6, [sp, #20]
 8007d54:	ea43 0102 	orr.w	r1, r3, r2
 8007d58:	9b08      	ldr	r3, [sp, #32]
 8007d5a:	4319      	orrs	r1, r3
 8007d5c:	d10f      	bne.n	8007d7e <_dtoa_r+0x946>
 8007d5e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007d62:	d028      	beq.n	8007db6 <_dtoa_r+0x97e>
 8007d64:	9b06      	ldr	r3, [sp, #24]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	dd02      	ble.n	8007d70 <_dtoa_r+0x938>
 8007d6a:	9b02      	ldr	r3, [sp, #8]
 8007d6c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8007d70:	f88b a000 	strb.w	sl, [fp]
 8007d74:	e639      	b.n	80079ea <_dtoa_r+0x5b2>
 8007d76:	4628      	mov	r0, r5
 8007d78:	e7bd      	b.n	8007cf6 <_dtoa_r+0x8be>
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	e7e2      	b.n	8007d44 <_dtoa_r+0x90c>
 8007d7e:	9b06      	ldr	r3, [sp, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	db04      	blt.n	8007d8e <_dtoa_r+0x956>
 8007d84:	9907      	ldr	r1, [sp, #28]
 8007d86:	430b      	orrs	r3, r1
 8007d88:	9908      	ldr	r1, [sp, #32]
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	d120      	bne.n	8007dd0 <_dtoa_r+0x998>
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	ddee      	ble.n	8007d70 <_dtoa_r+0x938>
 8007d92:	9901      	ldr	r1, [sp, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	4648      	mov	r0, r9
 8007d98:	f000 fbb2 	bl	8008500 <__lshift>
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	9001      	str	r0, [sp, #4]
 8007da0:	f000 fc1a 	bl	80085d8 <__mcmp>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	dc03      	bgt.n	8007db0 <_dtoa_r+0x978>
 8007da8:	d1e2      	bne.n	8007d70 <_dtoa_r+0x938>
 8007daa:	f01a 0f01 	tst.w	sl, #1
 8007dae:	d0df      	beq.n	8007d70 <_dtoa_r+0x938>
 8007db0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007db4:	d1d9      	bne.n	8007d6a <_dtoa_r+0x932>
 8007db6:	2339      	movs	r3, #57	@ 0x39
 8007db8:	f88b 3000 	strb.w	r3, [fp]
 8007dbc:	4633      	mov	r3, r6
 8007dbe:	461e      	mov	r6, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007dc6:	2a39      	cmp	r2, #57	@ 0x39
 8007dc8:	d053      	beq.n	8007e72 <_dtoa_r+0xa3a>
 8007dca:	3201      	adds	r2, #1
 8007dcc:	701a      	strb	r2, [r3, #0]
 8007dce:	e60c      	b.n	80079ea <_dtoa_r+0x5b2>
 8007dd0:	2a00      	cmp	r2, #0
 8007dd2:	dd07      	ble.n	8007de4 <_dtoa_r+0x9ac>
 8007dd4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007dd8:	d0ed      	beq.n	8007db6 <_dtoa_r+0x97e>
 8007dda:	f10a 0301 	add.w	r3, sl, #1
 8007dde:	f88b 3000 	strb.w	r3, [fp]
 8007de2:	e602      	b.n	80079ea <_dtoa_r+0x5b2>
 8007de4:	9b05      	ldr	r3, [sp, #20]
 8007de6:	9a05      	ldr	r2, [sp, #20]
 8007de8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d029      	beq.n	8007e46 <_dtoa_r+0xa0e>
 8007df2:	9901      	ldr	r1, [sp, #4]
 8007df4:	2300      	movs	r3, #0
 8007df6:	220a      	movs	r2, #10
 8007df8:	4648      	mov	r0, r9
 8007dfa:	f000 f9d5 	bl	80081a8 <__multadd>
 8007dfe:	45a8      	cmp	r8, r5
 8007e00:	9001      	str	r0, [sp, #4]
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	f04f 020a 	mov.w	r2, #10
 8007e0a:	4641      	mov	r1, r8
 8007e0c:	4648      	mov	r0, r9
 8007e0e:	d107      	bne.n	8007e20 <_dtoa_r+0x9e8>
 8007e10:	f000 f9ca 	bl	80081a8 <__multadd>
 8007e14:	4680      	mov	r8, r0
 8007e16:	4605      	mov	r5, r0
 8007e18:	9b05      	ldr	r3, [sp, #20]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	9305      	str	r3, [sp, #20]
 8007e1e:	e775      	b.n	8007d0c <_dtoa_r+0x8d4>
 8007e20:	f000 f9c2 	bl	80081a8 <__multadd>
 8007e24:	4629      	mov	r1, r5
 8007e26:	4680      	mov	r8, r0
 8007e28:	2300      	movs	r3, #0
 8007e2a:	220a      	movs	r2, #10
 8007e2c:	4648      	mov	r0, r9
 8007e2e:	f000 f9bb 	bl	80081a8 <__multadd>
 8007e32:	4605      	mov	r5, r0
 8007e34:	e7f0      	b.n	8007e18 <_dtoa_r+0x9e0>
 8007e36:	f1bb 0f00 	cmp.w	fp, #0
 8007e3a:	bfcc      	ite	gt
 8007e3c:	465e      	movgt	r6, fp
 8007e3e:	2601      	movle	r6, #1
 8007e40:	443e      	add	r6, r7
 8007e42:	f04f 0800 	mov.w	r8, #0
 8007e46:	9901      	ldr	r1, [sp, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	4648      	mov	r0, r9
 8007e4c:	f000 fb58 	bl	8008500 <__lshift>
 8007e50:	4621      	mov	r1, r4
 8007e52:	9001      	str	r0, [sp, #4]
 8007e54:	f000 fbc0 	bl	80085d8 <__mcmp>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	dcaf      	bgt.n	8007dbc <_dtoa_r+0x984>
 8007e5c:	d102      	bne.n	8007e64 <_dtoa_r+0xa2c>
 8007e5e:	f01a 0f01 	tst.w	sl, #1
 8007e62:	d1ab      	bne.n	8007dbc <_dtoa_r+0x984>
 8007e64:	4633      	mov	r3, r6
 8007e66:	461e      	mov	r6, r3
 8007e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e6c:	2a30      	cmp	r2, #48	@ 0x30
 8007e6e:	d0fa      	beq.n	8007e66 <_dtoa_r+0xa2e>
 8007e70:	e5bb      	b.n	80079ea <_dtoa_r+0x5b2>
 8007e72:	429f      	cmp	r7, r3
 8007e74:	d1a3      	bne.n	8007dbe <_dtoa_r+0x986>
 8007e76:	9b04      	ldr	r3, [sp, #16]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	9304      	str	r3, [sp, #16]
 8007e7c:	2331      	movs	r3, #49	@ 0x31
 8007e7e:	703b      	strb	r3, [r7, #0]
 8007e80:	e5b3      	b.n	80079ea <_dtoa_r+0x5b2>
 8007e82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e84:	4f16      	ldr	r7, [pc, #88]	@ (8007ee0 <_dtoa_r+0xaa8>)
 8007e86:	b11b      	cbz	r3, 8007e90 <_dtoa_r+0xa58>
 8007e88:	f107 0308 	add.w	r3, r7, #8
 8007e8c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	4638      	mov	r0, r7
 8007e92:	b011      	add	sp, #68	@ 0x44
 8007e94:	ecbd 8b02 	vpop	{d8}
 8007e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	f77f ae36 	ble.w	8007b10 <_dtoa_r+0x6d8>
 8007ea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ea6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	e656      	b.n	8007b5a <_dtoa_r+0x722>
 8007eac:	f1bb 0f00 	cmp.w	fp, #0
 8007eb0:	f77f aed7 	ble.w	8007c62 <_dtoa_r+0x82a>
 8007eb4:	463e      	mov	r6, r7
 8007eb6:	9801      	ldr	r0, [sp, #4]
 8007eb8:	4621      	mov	r1, r4
 8007eba:	f7ff fa32 	bl	8007322 <quorem>
 8007ebe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007ec2:	f806 ab01 	strb.w	sl, [r6], #1
 8007ec6:	1bf2      	subs	r2, r6, r7
 8007ec8:	4593      	cmp	fp, r2
 8007eca:	ddb4      	ble.n	8007e36 <_dtoa_r+0x9fe>
 8007ecc:	9901      	ldr	r1, [sp, #4]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	220a      	movs	r2, #10
 8007ed2:	4648      	mov	r0, r9
 8007ed4:	f000 f968 	bl	80081a8 <__multadd>
 8007ed8:	9001      	str	r0, [sp, #4]
 8007eda:	e7ec      	b.n	8007eb6 <_dtoa_r+0xa7e>
 8007edc:	08009770 	.word	0x08009770
 8007ee0:	080096f4 	.word	0x080096f4

08007ee4 <_free_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	2900      	cmp	r1, #0
 8007eea:	d041      	beq.n	8007f70 <_free_r+0x8c>
 8007eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ef0:	1f0c      	subs	r4, r1, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bfb8      	it	lt
 8007ef6:	18e4      	addlt	r4, r4, r3
 8007ef8:	f000 f8e8 	bl	80080cc <__malloc_lock>
 8007efc:	4a1d      	ldr	r2, [pc, #116]	@ (8007f74 <_free_r+0x90>)
 8007efe:	6813      	ldr	r3, [r2, #0]
 8007f00:	b933      	cbnz	r3, 8007f10 <_free_r+0x2c>
 8007f02:	6063      	str	r3, [r4, #4]
 8007f04:	6014      	str	r4, [r2, #0]
 8007f06:	4628      	mov	r0, r5
 8007f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f0c:	f000 b8e4 	b.w	80080d8 <__malloc_unlock>
 8007f10:	42a3      	cmp	r3, r4
 8007f12:	d908      	bls.n	8007f26 <_free_r+0x42>
 8007f14:	6820      	ldr	r0, [r4, #0]
 8007f16:	1821      	adds	r1, r4, r0
 8007f18:	428b      	cmp	r3, r1
 8007f1a:	bf01      	itttt	eq
 8007f1c:	6819      	ldreq	r1, [r3, #0]
 8007f1e:	685b      	ldreq	r3, [r3, #4]
 8007f20:	1809      	addeq	r1, r1, r0
 8007f22:	6021      	streq	r1, [r4, #0]
 8007f24:	e7ed      	b.n	8007f02 <_free_r+0x1e>
 8007f26:	461a      	mov	r2, r3
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	b10b      	cbz	r3, 8007f30 <_free_r+0x4c>
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	d9fa      	bls.n	8007f26 <_free_r+0x42>
 8007f30:	6811      	ldr	r1, [r2, #0]
 8007f32:	1850      	adds	r0, r2, r1
 8007f34:	42a0      	cmp	r0, r4
 8007f36:	d10b      	bne.n	8007f50 <_free_r+0x6c>
 8007f38:	6820      	ldr	r0, [r4, #0]
 8007f3a:	4401      	add	r1, r0
 8007f3c:	1850      	adds	r0, r2, r1
 8007f3e:	4283      	cmp	r3, r0
 8007f40:	6011      	str	r1, [r2, #0]
 8007f42:	d1e0      	bne.n	8007f06 <_free_r+0x22>
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	6053      	str	r3, [r2, #4]
 8007f4a:	4408      	add	r0, r1
 8007f4c:	6010      	str	r0, [r2, #0]
 8007f4e:	e7da      	b.n	8007f06 <_free_r+0x22>
 8007f50:	d902      	bls.n	8007f58 <_free_r+0x74>
 8007f52:	230c      	movs	r3, #12
 8007f54:	602b      	str	r3, [r5, #0]
 8007f56:	e7d6      	b.n	8007f06 <_free_r+0x22>
 8007f58:	6820      	ldr	r0, [r4, #0]
 8007f5a:	1821      	adds	r1, r4, r0
 8007f5c:	428b      	cmp	r3, r1
 8007f5e:	bf04      	itt	eq
 8007f60:	6819      	ldreq	r1, [r3, #0]
 8007f62:	685b      	ldreq	r3, [r3, #4]
 8007f64:	6063      	str	r3, [r4, #4]
 8007f66:	bf04      	itt	eq
 8007f68:	1809      	addeq	r1, r1, r0
 8007f6a:	6021      	streq	r1, [r4, #0]
 8007f6c:	6054      	str	r4, [r2, #4]
 8007f6e:	e7ca      	b.n	8007f06 <_free_r+0x22>
 8007f70:	bd38      	pop	{r3, r4, r5, pc}
 8007f72:	bf00      	nop
 8007f74:	20000e38 	.word	0x20000e38

08007f78 <malloc>:
 8007f78:	4b02      	ldr	r3, [pc, #8]	@ (8007f84 <malloc+0xc>)
 8007f7a:	4601      	mov	r1, r0
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	f000 b825 	b.w	8007fcc <_malloc_r>
 8007f82:	bf00      	nop
 8007f84:	20000018 	.word	0x20000018

08007f88 <sbrk_aligned>:
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	4e0f      	ldr	r6, [pc, #60]	@ (8007fc8 <sbrk_aligned+0x40>)
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	6831      	ldr	r1, [r6, #0]
 8007f90:	4605      	mov	r5, r0
 8007f92:	b911      	cbnz	r1, 8007f9a <sbrk_aligned+0x12>
 8007f94:	f000 fe46 	bl	8008c24 <_sbrk_r>
 8007f98:	6030      	str	r0, [r6, #0]
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f000 fe41 	bl	8008c24 <_sbrk_r>
 8007fa2:	1c43      	adds	r3, r0, #1
 8007fa4:	d103      	bne.n	8007fae <sbrk_aligned+0x26>
 8007fa6:	f04f 34ff 	mov.w	r4, #4294967295
 8007faa:	4620      	mov	r0, r4
 8007fac:	bd70      	pop	{r4, r5, r6, pc}
 8007fae:	1cc4      	adds	r4, r0, #3
 8007fb0:	f024 0403 	bic.w	r4, r4, #3
 8007fb4:	42a0      	cmp	r0, r4
 8007fb6:	d0f8      	beq.n	8007faa <sbrk_aligned+0x22>
 8007fb8:	1a21      	subs	r1, r4, r0
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f000 fe32 	bl	8008c24 <_sbrk_r>
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	d1f2      	bne.n	8007faa <sbrk_aligned+0x22>
 8007fc4:	e7ef      	b.n	8007fa6 <sbrk_aligned+0x1e>
 8007fc6:	bf00      	nop
 8007fc8:	20000e34 	.word	0x20000e34

08007fcc <_malloc_r>:
 8007fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fd0:	1ccd      	adds	r5, r1, #3
 8007fd2:	f025 0503 	bic.w	r5, r5, #3
 8007fd6:	3508      	adds	r5, #8
 8007fd8:	2d0c      	cmp	r5, #12
 8007fda:	bf38      	it	cc
 8007fdc:	250c      	movcc	r5, #12
 8007fde:	2d00      	cmp	r5, #0
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	db01      	blt.n	8007fe8 <_malloc_r+0x1c>
 8007fe4:	42a9      	cmp	r1, r5
 8007fe6:	d904      	bls.n	8007ff2 <_malloc_r+0x26>
 8007fe8:	230c      	movs	r3, #12
 8007fea:	6033      	str	r3, [r6, #0]
 8007fec:	2000      	movs	r0, #0
 8007fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080c8 <_malloc_r+0xfc>
 8007ff6:	f000 f869 	bl	80080cc <__malloc_lock>
 8007ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8007ffe:	461c      	mov	r4, r3
 8008000:	bb44      	cbnz	r4, 8008054 <_malloc_r+0x88>
 8008002:	4629      	mov	r1, r5
 8008004:	4630      	mov	r0, r6
 8008006:	f7ff ffbf 	bl	8007f88 <sbrk_aligned>
 800800a:	1c43      	adds	r3, r0, #1
 800800c:	4604      	mov	r4, r0
 800800e:	d158      	bne.n	80080c2 <_malloc_r+0xf6>
 8008010:	f8d8 4000 	ldr.w	r4, [r8]
 8008014:	4627      	mov	r7, r4
 8008016:	2f00      	cmp	r7, #0
 8008018:	d143      	bne.n	80080a2 <_malloc_r+0xd6>
 800801a:	2c00      	cmp	r4, #0
 800801c:	d04b      	beq.n	80080b6 <_malloc_r+0xea>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	4639      	mov	r1, r7
 8008022:	4630      	mov	r0, r6
 8008024:	eb04 0903 	add.w	r9, r4, r3
 8008028:	f000 fdfc 	bl	8008c24 <_sbrk_r>
 800802c:	4581      	cmp	r9, r0
 800802e:	d142      	bne.n	80080b6 <_malloc_r+0xea>
 8008030:	6821      	ldr	r1, [r4, #0]
 8008032:	1a6d      	subs	r5, r5, r1
 8008034:	4629      	mov	r1, r5
 8008036:	4630      	mov	r0, r6
 8008038:	f7ff ffa6 	bl	8007f88 <sbrk_aligned>
 800803c:	3001      	adds	r0, #1
 800803e:	d03a      	beq.n	80080b6 <_malloc_r+0xea>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	442b      	add	r3, r5
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	f8d8 3000 	ldr.w	r3, [r8]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	bb62      	cbnz	r2, 80080a8 <_malloc_r+0xdc>
 800804e:	f8c8 7000 	str.w	r7, [r8]
 8008052:	e00f      	b.n	8008074 <_malloc_r+0xa8>
 8008054:	6822      	ldr	r2, [r4, #0]
 8008056:	1b52      	subs	r2, r2, r5
 8008058:	d420      	bmi.n	800809c <_malloc_r+0xd0>
 800805a:	2a0b      	cmp	r2, #11
 800805c:	d917      	bls.n	800808e <_malloc_r+0xc2>
 800805e:	1961      	adds	r1, r4, r5
 8008060:	42a3      	cmp	r3, r4
 8008062:	6025      	str	r5, [r4, #0]
 8008064:	bf18      	it	ne
 8008066:	6059      	strne	r1, [r3, #4]
 8008068:	6863      	ldr	r3, [r4, #4]
 800806a:	bf08      	it	eq
 800806c:	f8c8 1000 	streq.w	r1, [r8]
 8008070:	5162      	str	r2, [r4, r5]
 8008072:	604b      	str	r3, [r1, #4]
 8008074:	4630      	mov	r0, r6
 8008076:	f000 f82f 	bl	80080d8 <__malloc_unlock>
 800807a:	f104 000b 	add.w	r0, r4, #11
 800807e:	1d23      	adds	r3, r4, #4
 8008080:	f020 0007 	bic.w	r0, r0, #7
 8008084:	1ac2      	subs	r2, r0, r3
 8008086:	bf1c      	itt	ne
 8008088:	1a1b      	subne	r3, r3, r0
 800808a:	50a3      	strne	r3, [r4, r2]
 800808c:	e7af      	b.n	8007fee <_malloc_r+0x22>
 800808e:	6862      	ldr	r2, [r4, #4]
 8008090:	42a3      	cmp	r3, r4
 8008092:	bf0c      	ite	eq
 8008094:	f8c8 2000 	streq.w	r2, [r8]
 8008098:	605a      	strne	r2, [r3, #4]
 800809a:	e7eb      	b.n	8008074 <_malloc_r+0xa8>
 800809c:	4623      	mov	r3, r4
 800809e:	6864      	ldr	r4, [r4, #4]
 80080a0:	e7ae      	b.n	8008000 <_malloc_r+0x34>
 80080a2:	463c      	mov	r4, r7
 80080a4:	687f      	ldr	r7, [r7, #4]
 80080a6:	e7b6      	b.n	8008016 <_malloc_r+0x4a>
 80080a8:	461a      	mov	r2, r3
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	42a3      	cmp	r3, r4
 80080ae:	d1fb      	bne.n	80080a8 <_malloc_r+0xdc>
 80080b0:	2300      	movs	r3, #0
 80080b2:	6053      	str	r3, [r2, #4]
 80080b4:	e7de      	b.n	8008074 <_malloc_r+0xa8>
 80080b6:	230c      	movs	r3, #12
 80080b8:	6033      	str	r3, [r6, #0]
 80080ba:	4630      	mov	r0, r6
 80080bc:	f000 f80c 	bl	80080d8 <__malloc_unlock>
 80080c0:	e794      	b.n	8007fec <_malloc_r+0x20>
 80080c2:	6005      	str	r5, [r0, #0]
 80080c4:	e7d6      	b.n	8008074 <_malloc_r+0xa8>
 80080c6:	bf00      	nop
 80080c8:	20000e38 	.word	0x20000e38

080080cc <__malloc_lock>:
 80080cc:	4801      	ldr	r0, [pc, #4]	@ (80080d4 <__malloc_lock+0x8>)
 80080ce:	f7ff b926 	b.w	800731e <__retarget_lock_acquire_recursive>
 80080d2:	bf00      	nop
 80080d4:	20000e30 	.word	0x20000e30

080080d8 <__malloc_unlock>:
 80080d8:	4801      	ldr	r0, [pc, #4]	@ (80080e0 <__malloc_unlock+0x8>)
 80080da:	f7ff b921 	b.w	8007320 <__retarget_lock_release_recursive>
 80080de:	bf00      	nop
 80080e0:	20000e30 	.word	0x20000e30

080080e4 <_Balloc>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	69c6      	ldr	r6, [r0, #28]
 80080e8:	4604      	mov	r4, r0
 80080ea:	460d      	mov	r5, r1
 80080ec:	b976      	cbnz	r6, 800810c <_Balloc+0x28>
 80080ee:	2010      	movs	r0, #16
 80080f0:	f7ff ff42 	bl	8007f78 <malloc>
 80080f4:	4602      	mov	r2, r0
 80080f6:	61e0      	str	r0, [r4, #28]
 80080f8:	b920      	cbnz	r0, 8008104 <_Balloc+0x20>
 80080fa:	4b18      	ldr	r3, [pc, #96]	@ (800815c <_Balloc+0x78>)
 80080fc:	4818      	ldr	r0, [pc, #96]	@ (8008160 <_Balloc+0x7c>)
 80080fe:	216b      	movs	r1, #107	@ 0x6b
 8008100:	f000 fdae 	bl	8008c60 <__assert_func>
 8008104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008108:	6006      	str	r6, [r0, #0]
 800810a:	60c6      	str	r6, [r0, #12]
 800810c:	69e6      	ldr	r6, [r4, #28]
 800810e:	68f3      	ldr	r3, [r6, #12]
 8008110:	b183      	cbz	r3, 8008134 <_Balloc+0x50>
 8008112:	69e3      	ldr	r3, [r4, #28]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800811a:	b9b8      	cbnz	r0, 800814c <_Balloc+0x68>
 800811c:	2101      	movs	r1, #1
 800811e:	fa01 f605 	lsl.w	r6, r1, r5
 8008122:	1d72      	adds	r2, r6, #5
 8008124:	0092      	lsls	r2, r2, #2
 8008126:	4620      	mov	r0, r4
 8008128:	f000 fdb8 	bl	8008c9c <_calloc_r>
 800812c:	b160      	cbz	r0, 8008148 <_Balloc+0x64>
 800812e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008132:	e00e      	b.n	8008152 <_Balloc+0x6e>
 8008134:	2221      	movs	r2, #33	@ 0x21
 8008136:	2104      	movs	r1, #4
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fdaf 	bl	8008c9c <_calloc_r>
 800813e:	69e3      	ldr	r3, [r4, #28]
 8008140:	60f0      	str	r0, [r6, #12]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e4      	bne.n	8008112 <_Balloc+0x2e>
 8008148:	2000      	movs	r0, #0
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	6802      	ldr	r2, [r0, #0]
 800814e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008152:	2300      	movs	r3, #0
 8008154:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008158:	e7f7      	b.n	800814a <_Balloc+0x66>
 800815a:	bf00      	nop
 800815c:	08009701 	.word	0x08009701
 8008160:	08009781 	.word	0x08009781

08008164 <_Bfree>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	69c6      	ldr	r6, [r0, #28]
 8008168:	4605      	mov	r5, r0
 800816a:	460c      	mov	r4, r1
 800816c:	b976      	cbnz	r6, 800818c <_Bfree+0x28>
 800816e:	2010      	movs	r0, #16
 8008170:	f7ff ff02 	bl	8007f78 <malloc>
 8008174:	4602      	mov	r2, r0
 8008176:	61e8      	str	r0, [r5, #28]
 8008178:	b920      	cbnz	r0, 8008184 <_Bfree+0x20>
 800817a:	4b09      	ldr	r3, [pc, #36]	@ (80081a0 <_Bfree+0x3c>)
 800817c:	4809      	ldr	r0, [pc, #36]	@ (80081a4 <_Bfree+0x40>)
 800817e:	218f      	movs	r1, #143	@ 0x8f
 8008180:	f000 fd6e 	bl	8008c60 <__assert_func>
 8008184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008188:	6006      	str	r6, [r0, #0]
 800818a:	60c6      	str	r6, [r0, #12]
 800818c:	b13c      	cbz	r4, 800819e <_Bfree+0x3a>
 800818e:	69eb      	ldr	r3, [r5, #28]
 8008190:	6862      	ldr	r2, [r4, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008198:	6021      	str	r1, [r4, #0]
 800819a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	08009701 	.word	0x08009701
 80081a4:	08009781 	.word	0x08009781

080081a8 <__multadd>:
 80081a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ac:	690d      	ldr	r5, [r1, #16]
 80081ae:	4607      	mov	r7, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	461e      	mov	r6, r3
 80081b4:	f101 0c14 	add.w	ip, r1, #20
 80081b8:	2000      	movs	r0, #0
 80081ba:	f8dc 3000 	ldr.w	r3, [ip]
 80081be:	b299      	uxth	r1, r3
 80081c0:	fb02 6101 	mla	r1, r2, r1, r6
 80081c4:	0c1e      	lsrs	r6, r3, #16
 80081c6:	0c0b      	lsrs	r3, r1, #16
 80081c8:	fb02 3306 	mla	r3, r2, r6, r3
 80081cc:	b289      	uxth	r1, r1
 80081ce:	3001      	adds	r0, #1
 80081d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081d4:	4285      	cmp	r5, r0
 80081d6:	f84c 1b04 	str.w	r1, [ip], #4
 80081da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081de:	dcec      	bgt.n	80081ba <__multadd+0x12>
 80081e0:	b30e      	cbz	r6, 8008226 <__multadd+0x7e>
 80081e2:	68a3      	ldr	r3, [r4, #8]
 80081e4:	42ab      	cmp	r3, r5
 80081e6:	dc19      	bgt.n	800821c <__multadd+0x74>
 80081e8:	6861      	ldr	r1, [r4, #4]
 80081ea:	4638      	mov	r0, r7
 80081ec:	3101      	adds	r1, #1
 80081ee:	f7ff ff79 	bl	80080e4 <_Balloc>
 80081f2:	4680      	mov	r8, r0
 80081f4:	b928      	cbnz	r0, 8008202 <__multadd+0x5a>
 80081f6:	4602      	mov	r2, r0
 80081f8:	4b0c      	ldr	r3, [pc, #48]	@ (800822c <__multadd+0x84>)
 80081fa:	480d      	ldr	r0, [pc, #52]	@ (8008230 <__multadd+0x88>)
 80081fc:	21ba      	movs	r1, #186	@ 0xba
 80081fe:	f000 fd2f 	bl	8008c60 <__assert_func>
 8008202:	6922      	ldr	r2, [r4, #16]
 8008204:	3202      	adds	r2, #2
 8008206:	f104 010c 	add.w	r1, r4, #12
 800820a:	0092      	lsls	r2, r2, #2
 800820c:	300c      	adds	r0, #12
 800820e:	f000 fd19 	bl	8008c44 <memcpy>
 8008212:	4621      	mov	r1, r4
 8008214:	4638      	mov	r0, r7
 8008216:	f7ff ffa5 	bl	8008164 <_Bfree>
 800821a:	4644      	mov	r4, r8
 800821c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008220:	3501      	adds	r5, #1
 8008222:	615e      	str	r6, [r3, #20]
 8008224:	6125      	str	r5, [r4, #16]
 8008226:	4620      	mov	r0, r4
 8008228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800822c:	08009770 	.word	0x08009770
 8008230:	08009781 	.word	0x08009781

08008234 <__hi0bits>:
 8008234:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008238:	4603      	mov	r3, r0
 800823a:	bf36      	itet	cc
 800823c:	0403      	lslcc	r3, r0, #16
 800823e:	2000      	movcs	r0, #0
 8008240:	2010      	movcc	r0, #16
 8008242:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008246:	bf3c      	itt	cc
 8008248:	021b      	lslcc	r3, r3, #8
 800824a:	3008      	addcc	r0, #8
 800824c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008250:	bf3c      	itt	cc
 8008252:	011b      	lslcc	r3, r3, #4
 8008254:	3004      	addcc	r0, #4
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825a:	bf3c      	itt	cc
 800825c:	009b      	lslcc	r3, r3, #2
 800825e:	3002      	addcc	r0, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	db05      	blt.n	8008270 <__hi0bits+0x3c>
 8008264:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008268:	f100 0001 	add.w	r0, r0, #1
 800826c:	bf08      	it	eq
 800826e:	2020      	moveq	r0, #32
 8008270:	4770      	bx	lr

08008272 <__lo0bits>:
 8008272:	6803      	ldr	r3, [r0, #0]
 8008274:	4602      	mov	r2, r0
 8008276:	f013 0007 	ands.w	r0, r3, #7
 800827a:	d00b      	beq.n	8008294 <__lo0bits+0x22>
 800827c:	07d9      	lsls	r1, r3, #31
 800827e:	d421      	bmi.n	80082c4 <__lo0bits+0x52>
 8008280:	0798      	lsls	r0, r3, #30
 8008282:	bf49      	itett	mi
 8008284:	085b      	lsrmi	r3, r3, #1
 8008286:	089b      	lsrpl	r3, r3, #2
 8008288:	2001      	movmi	r0, #1
 800828a:	6013      	strmi	r3, [r2, #0]
 800828c:	bf5c      	itt	pl
 800828e:	6013      	strpl	r3, [r2, #0]
 8008290:	2002      	movpl	r0, #2
 8008292:	4770      	bx	lr
 8008294:	b299      	uxth	r1, r3
 8008296:	b909      	cbnz	r1, 800829c <__lo0bits+0x2a>
 8008298:	0c1b      	lsrs	r3, r3, #16
 800829a:	2010      	movs	r0, #16
 800829c:	b2d9      	uxtb	r1, r3
 800829e:	b909      	cbnz	r1, 80082a4 <__lo0bits+0x32>
 80082a0:	3008      	adds	r0, #8
 80082a2:	0a1b      	lsrs	r3, r3, #8
 80082a4:	0719      	lsls	r1, r3, #28
 80082a6:	bf04      	itt	eq
 80082a8:	091b      	lsreq	r3, r3, #4
 80082aa:	3004      	addeq	r0, #4
 80082ac:	0799      	lsls	r1, r3, #30
 80082ae:	bf04      	itt	eq
 80082b0:	089b      	lsreq	r3, r3, #2
 80082b2:	3002      	addeq	r0, #2
 80082b4:	07d9      	lsls	r1, r3, #31
 80082b6:	d403      	bmi.n	80082c0 <__lo0bits+0x4e>
 80082b8:	085b      	lsrs	r3, r3, #1
 80082ba:	f100 0001 	add.w	r0, r0, #1
 80082be:	d003      	beq.n	80082c8 <__lo0bits+0x56>
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	4770      	bx	lr
 80082c4:	2000      	movs	r0, #0
 80082c6:	4770      	bx	lr
 80082c8:	2020      	movs	r0, #32
 80082ca:	4770      	bx	lr

080082cc <__i2b>:
 80082cc:	b510      	push	{r4, lr}
 80082ce:	460c      	mov	r4, r1
 80082d0:	2101      	movs	r1, #1
 80082d2:	f7ff ff07 	bl	80080e4 <_Balloc>
 80082d6:	4602      	mov	r2, r0
 80082d8:	b928      	cbnz	r0, 80082e6 <__i2b+0x1a>
 80082da:	4b05      	ldr	r3, [pc, #20]	@ (80082f0 <__i2b+0x24>)
 80082dc:	4805      	ldr	r0, [pc, #20]	@ (80082f4 <__i2b+0x28>)
 80082de:	f240 1145 	movw	r1, #325	@ 0x145
 80082e2:	f000 fcbd 	bl	8008c60 <__assert_func>
 80082e6:	2301      	movs	r3, #1
 80082e8:	6144      	str	r4, [r0, #20]
 80082ea:	6103      	str	r3, [r0, #16]
 80082ec:	bd10      	pop	{r4, pc}
 80082ee:	bf00      	nop
 80082f0:	08009770 	.word	0x08009770
 80082f4:	08009781 	.word	0x08009781

080082f8 <__multiply>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	4614      	mov	r4, r2
 80082fe:	690a      	ldr	r2, [r1, #16]
 8008300:	6923      	ldr	r3, [r4, #16]
 8008302:	429a      	cmp	r2, r3
 8008304:	bfa8      	it	ge
 8008306:	4623      	movge	r3, r4
 8008308:	460f      	mov	r7, r1
 800830a:	bfa4      	itt	ge
 800830c:	460c      	movge	r4, r1
 800830e:	461f      	movge	r7, r3
 8008310:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008314:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008318:	68a3      	ldr	r3, [r4, #8]
 800831a:	6861      	ldr	r1, [r4, #4]
 800831c:	eb0a 0609 	add.w	r6, sl, r9
 8008320:	42b3      	cmp	r3, r6
 8008322:	b085      	sub	sp, #20
 8008324:	bfb8      	it	lt
 8008326:	3101      	addlt	r1, #1
 8008328:	f7ff fedc 	bl	80080e4 <_Balloc>
 800832c:	b930      	cbnz	r0, 800833c <__multiply+0x44>
 800832e:	4602      	mov	r2, r0
 8008330:	4b44      	ldr	r3, [pc, #272]	@ (8008444 <__multiply+0x14c>)
 8008332:	4845      	ldr	r0, [pc, #276]	@ (8008448 <__multiply+0x150>)
 8008334:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008338:	f000 fc92 	bl	8008c60 <__assert_func>
 800833c:	f100 0514 	add.w	r5, r0, #20
 8008340:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008344:	462b      	mov	r3, r5
 8008346:	2200      	movs	r2, #0
 8008348:	4543      	cmp	r3, r8
 800834a:	d321      	bcc.n	8008390 <__multiply+0x98>
 800834c:	f107 0114 	add.w	r1, r7, #20
 8008350:	f104 0214 	add.w	r2, r4, #20
 8008354:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008358:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800835c:	9302      	str	r3, [sp, #8]
 800835e:	1b13      	subs	r3, r2, r4
 8008360:	3b15      	subs	r3, #21
 8008362:	f023 0303 	bic.w	r3, r3, #3
 8008366:	3304      	adds	r3, #4
 8008368:	f104 0715 	add.w	r7, r4, #21
 800836c:	42ba      	cmp	r2, r7
 800836e:	bf38      	it	cc
 8008370:	2304      	movcc	r3, #4
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	9b02      	ldr	r3, [sp, #8]
 8008376:	9103      	str	r1, [sp, #12]
 8008378:	428b      	cmp	r3, r1
 800837a:	d80c      	bhi.n	8008396 <__multiply+0x9e>
 800837c:	2e00      	cmp	r6, #0
 800837e:	dd03      	ble.n	8008388 <__multiply+0x90>
 8008380:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008384:	2b00      	cmp	r3, #0
 8008386:	d05b      	beq.n	8008440 <__multiply+0x148>
 8008388:	6106      	str	r6, [r0, #16]
 800838a:	b005      	add	sp, #20
 800838c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008390:	f843 2b04 	str.w	r2, [r3], #4
 8008394:	e7d8      	b.n	8008348 <__multiply+0x50>
 8008396:	f8b1 a000 	ldrh.w	sl, [r1]
 800839a:	f1ba 0f00 	cmp.w	sl, #0
 800839e:	d024      	beq.n	80083ea <__multiply+0xf2>
 80083a0:	f104 0e14 	add.w	lr, r4, #20
 80083a4:	46a9      	mov	r9, r5
 80083a6:	f04f 0c00 	mov.w	ip, #0
 80083aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083ae:	f8d9 3000 	ldr.w	r3, [r9]
 80083b2:	fa1f fb87 	uxth.w	fp, r7
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80083bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80083c0:	f8d9 7000 	ldr.w	r7, [r9]
 80083c4:	4463      	add	r3, ip
 80083c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80083ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80083ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80083d8:	4572      	cmp	r2, lr
 80083da:	f849 3b04 	str.w	r3, [r9], #4
 80083de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80083e2:	d8e2      	bhi.n	80083aa <__multiply+0xb2>
 80083e4:	9b01      	ldr	r3, [sp, #4]
 80083e6:	f845 c003 	str.w	ip, [r5, r3]
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80083f0:	3104      	adds	r1, #4
 80083f2:	f1b9 0f00 	cmp.w	r9, #0
 80083f6:	d021      	beq.n	800843c <__multiply+0x144>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	f104 0c14 	add.w	ip, r4, #20
 80083fe:	46ae      	mov	lr, r5
 8008400:	f04f 0a00 	mov.w	sl, #0
 8008404:	f8bc b000 	ldrh.w	fp, [ip]
 8008408:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800840c:	fb09 770b 	mla	r7, r9, fp, r7
 8008410:	4457      	add	r7, sl
 8008412:	b29b      	uxth	r3, r3
 8008414:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008418:	f84e 3b04 	str.w	r3, [lr], #4
 800841c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008420:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008424:	f8be 3000 	ldrh.w	r3, [lr]
 8008428:	fb09 330a 	mla	r3, r9, sl, r3
 800842c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008430:	4562      	cmp	r2, ip
 8008432:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008436:	d8e5      	bhi.n	8008404 <__multiply+0x10c>
 8008438:	9f01      	ldr	r7, [sp, #4]
 800843a:	51eb      	str	r3, [r5, r7]
 800843c:	3504      	adds	r5, #4
 800843e:	e799      	b.n	8008374 <__multiply+0x7c>
 8008440:	3e01      	subs	r6, #1
 8008442:	e79b      	b.n	800837c <__multiply+0x84>
 8008444:	08009770 	.word	0x08009770
 8008448:	08009781 	.word	0x08009781

0800844c <__pow5mult>:
 800844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008450:	4615      	mov	r5, r2
 8008452:	f012 0203 	ands.w	r2, r2, #3
 8008456:	4607      	mov	r7, r0
 8008458:	460e      	mov	r6, r1
 800845a:	d007      	beq.n	800846c <__pow5mult+0x20>
 800845c:	4c25      	ldr	r4, [pc, #148]	@ (80084f4 <__pow5mult+0xa8>)
 800845e:	3a01      	subs	r2, #1
 8008460:	2300      	movs	r3, #0
 8008462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008466:	f7ff fe9f 	bl	80081a8 <__multadd>
 800846a:	4606      	mov	r6, r0
 800846c:	10ad      	asrs	r5, r5, #2
 800846e:	d03d      	beq.n	80084ec <__pow5mult+0xa0>
 8008470:	69fc      	ldr	r4, [r7, #28]
 8008472:	b97c      	cbnz	r4, 8008494 <__pow5mult+0x48>
 8008474:	2010      	movs	r0, #16
 8008476:	f7ff fd7f 	bl	8007f78 <malloc>
 800847a:	4602      	mov	r2, r0
 800847c:	61f8      	str	r0, [r7, #28]
 800847e:	b928      	cbnz	r0, 800848c <__pow5mult+0x40>
 8008480:	4b1d      	ldr	r3, [pc, #116]	@ (80084f8 <__pow5mult+0xac>)
 8008482:	481e      	ldr	r0, [pc, #120]	@ (80084fc <__pow5mult+0xb0>)
 8008484:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008488:	f000 fbea 	bl	8008c60 <__assert_func>
 800848c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008490:	6004      	str	r4, [r0, #0]
 8008492:	60c4      	str	r4, [r0, #12]
 8008494:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800849c:	b94c      	cbnz	r4, 80084b2 <__pow5mult+0x66>
 800849e:	f240 2171 	movw	r1, #625	@ 0x271
 80084a2:	4638      	mov	r0, r7
 80084a4:	f7ff ff12 	bl	80082cc <__i2b>
 80084a8:	2300      	movs	r3, #0
 80084aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80084ae:	4604      	mov	r4, r0
 80084b0:	6003      	str	r3, [r0, #0]
 80084b2:	f04f 0900 	mov.w	r9, #0
 80084b6:	07eb      	lsls	r3, r5, #31
 80084b8:	d50a      	bpl.n	80084d0 <__pow5mult+0x84>
 80084ba:	4631      	mov	r1, r6
 80084bc:	4622      	mov	r2, r4
 80084be:	4638      	mov	r0, r7
 80084c0:	f7ff ff1a 	bl	80082f8 <__multiply>
 80084c4:	4631      	mov	r1, r6
 80084c6:	4680      	mov	r8, r0
 80084c8:	4638      	mov	r0, r7
 80084ca:	f7ff fe4b 	bl	8008164 <_Bfree>
 80084ce:	4646      	mov	r6, r8
 80084d0:	106d      	asrs	r5, r5, #1
 80084d2:	d00b      	beq.n	80084ec <__pow5mult+0xa0>
 80084d4:	6820      	ldr	r0, [r4, #0]
 80084d6:	b938      	cbnz	r0, 80084e8 <__pow5mult+0x9c>
 80084d8:	4622      	mov	r2, r4
 80084da:	4621      	mov	r1, r4
 80084dc:	4638      	mov	r0, r7
 80084de:	f7ff ff0b 	bl	80082f8 <__multiply>
 80084e2:	6020      	str	r0, [r4, #0]
 80084e4:	f8c0 9000 	str.w	r9, [r0]
 80084e8:	4604      	mov	r4, r0
 80084ea:	e7e4      	b.n	80084b6 <__pow5mult+0x6a>
 80084ec:	4630      	mov	r0, r6
 80084ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f2:	bf00      	nop
 80084f4:	080097dc 	.word	0x080097dc
 80084f8:	08009701 	.word	0x08009701
 80084fc:	08009781 	.word	0x08009781

08008500 <__lshift>:
 8008500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	460c      	mov	r4, r1
 8008506:	6849      	ldr	r1, [r1, #4]
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800850e:	68a3      	ldr	r3, [r4, #8]
 8008510:	4607      	mov	r7, r0
 8008512:	4691      	mov	r9, r2
 8008514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008518:	f108 0601 	add.w	r6, r8, #1
 800851c:	42b3      	cmp	r3, r6
 800851e:	db0b      	blt.n	8008538 <__lshift+0x38>
 8008520:	4638      	mov	r0, r7
 8008522:	f7ff fddf 	bl	80080e4 <_Balloc>
 8008526:	4605      	mov	r5, r0
 8008528:	b948      	cbnz	r0, 800853e <__lshift+0x3e>
 800852a:	4602      	mov	r2, r0
 800852c:	4b28      	ldr	r3, [pc, #160]	@ (80085d0 <__lshift+0xd0>)
 800852e:	4829      	ldr	r0, [pc, #164]	@ (80085d4 <__lshift+0xd4>)
 8008530:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008534:	f000 fb94 	bl	8008c60 <__assert_func>
 8008538:	3101      	adds	r1, #1
 800853a:	005b      	lsls	r3, r3, #1
 800853c:	e7ee      	b.n	800851c <__lshift+0x1c>
 800853e:	2300      	movs	r3, #0
 8008540:	f100 0114 	add.w	r1, r0, #20
 8008544:	f100 0210 	add.w	r2, r0, #16
 8008548:	4618      	mov	r0, r3
 800854a:	4553      	cmp	r3, sl
 800854c:	db33      	blt.n	80085b6 <__lshift+0xb6>
 800854e:	6920      	ldr	r0, [r4, #16]
 8008550:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008554:	f104 0314 	add.w	r3, r4, #20
 8008558:	f019 091f 	ands.w	r9, r9, #31
 800855c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008560:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008564:	d02b      	beq.n	80085be <__lshift+0xbe>
 8008566:	f1c9 0e20 	rsb	lr, r9, #32
 800856a:	468a      	mov	sl, r1
 800856c:	2200      	movs	r2, #0
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	fa00 f009 	lsl.w	r0, r0, r9
 8008574:	4310      	orrs	r0, r2
 8008576:	f84a 0b04 	str.w	r0, [sl], #4
 800857a:	f853 2b04 	ldr.w	r2, [r3], #4
 800857e:	459c      	cmp	ip, r3
 8008580:	fa22 f20e 	lsr.w	r2, r2, lr
 8008584:	d8f3      	bhi.n	800856e <__lshift+0x6e>
 8008586:	ebac 0304 	sub.w	r3, ip, r4
 800858a:	3b15      	subs	r3, #21
 800858c:	f023 0303 	bic.w	r3, r3, #3
 8008590:	3304      	adds	r3, #4
 8008592:	f104 0015 	add.w	r0, r4, #21
 8008596:	4584      	cmp	ip, r0
 8008598:	bf38      	it	cc
 800859a:	2304      	movcc	r3, #4
 800859c:	50ca      	str	r2, [r1, r3]
 800859e:	b10a      	cbz	r2, 80085a4 <__lshift+0xa4>
 80085a0:	f108 0602 	add.w	r6, r8, #2
 80085a4:	3e01      	subs	r6, #1
 80085a6:	4638      	mov	r0, r7
 80085a8:	612e      	str	r6, [r5, #16]
 80085aa:	4621      	mov	r1, r4
 80085ac:	f7ff fdda 	bl	8008164 <_Bfree>
 80085b0:	4628      	mov	r0, r5
 80085b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80085ba:	3301      	adds	r3, #1
 80085bc:	e7c5      	b.n	800854a <__lshift+0x4a>
 80085be:	3904      	subs	r1, #4
 80085c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80085c8:	459c      	cmp	ip, r3
 80085ca:	d8f9      	bhi.n	80085c0 <__lshift+0xc0>
 80085cc:	e7ea      	b.n	80085a4 <__lshift+0xa4>
 80085ce:	bf00      	nop
 80085d0:	08009770 	.word	0x08009770
 80085d4:	08009781 	.word	0x08009781

080085d8 <__mcmp>:
 80085d8:	690a      	ldr	r2, [r1, #16]
 80085da:	4603      	mov	r3, r0
 80085dc:	6900      	ldr	r0, [r0, #16]
 80085de:	1a80      	subs	r0, r0, r2
 80085e0:	b530      	push	{r4, r5, lr}
 80085e2:	d10e      	bne.n	8008602 <__mcmp+0x2a>
 80085e4:	3314      	adds	r3, #20
 80085e6:	3114      	adds	r1, #20
 80085e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80085ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80085f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085f8:	4295      	cmp	r5, r2
 80085fa:	d003      	beq.n	8008604 <__mcmp+0x2c>
 80085fc:	d205      	bcs.n	800860a <__mcmp+0x32>
 80085fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008602:	bd30      	pop	{r4, r5, pc}
 8008604:	42a3      	cmp	r3, r4
 8008606:	d3f3      	bcc.n	80085f0 <__mcmp+0x18>
 8008608:	e7fb      	b.n	8008602 <__mcmp+0x2a>
 800860a:	2001      	movs	r0, #1
 800860c:	e7f9      	b.n	8008602 <__mcmp+0x2a>
	...

08008610 <__mdiff>:
 8008610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	4689      	mov	r9, r1
 8008616:	4606      	mov	r6, r0
 8008618:	4611      	mov	r1, r2
 800861a:	4648      	mov	r0, r9
 800861c:	4614      	mov	r4, r2
 800861e:	f7ff ffdb 	bl	80085d8 <__mcmp>
 8008622:	1e05      	subs	r5, r0, #0
 8008624:	d112      	bne.n	800864c <__mdiff+0x3c>
 8008626:	4629      	mov	r1, r5
 8008628:	4630      	mov	r0, r6
 800862a:	f7ff fd5b 	bl	80080e4 <_Balloc>
 800862e:	4602      	mov	r2, r0
 8008630:	b928      	cbnz	r0, 800863e <__mdiff+0x2e>
 8008632:	4b3f      	ldr	r3, [pc, #252]	@ (8008730 <__mdiff+0x120>)
 8008634:	f240 2137 	movw	r1, #567	@ 0x237
 8008638:	483e      	ldr	r0, [pc, #248]	@ (8008734 <__mdiff+0x124>)
 800863a:	f000 fb11 	bl	8008c60 <__assert_func>
 800863e:	2301      	movs	r3, #1
 8008640:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008644:	4610      	mov	r0, r2
 8008646:	b003      	add	sp, #12
 8008648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864c:	bfbc      	itt	lt
 800864e:	464b      	movlt	r3, r9
 8008650:	46a1      	movlt	r9, r4
 8008652:	4630      	mov	r0, r6
 8008654:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008658:	bfba      	itte	lt
 800865a:	461c      	movlt	r4, r3
 800865c:	2501      	movlt	r5, #1
 800865e:	2500      	movge	r5, #0
 8008660:	f7ff fd40 	bl	80080e4 <_Balloc>
 8008664:	4602      	mov	r2, r0
 8008666:	b918      	cbnz	r0, 8008670 <__mdiff+0x60>
 8008668:	4b31      	ldr	r3, [pc, #196]	@ (8008730 <__mdiff+0x120>)
 800866a:	f240 2145 	movw	r1, #581	@ 0x245
 800866e:	e7e3      	b.n	8008638 <__mdiff+0x28>
 8008670:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008674:	6926      	ldr	r6, [r4, #16]
 8008676:	60c5      	str	r5, [r0, #12]
 8008678:	f109 0310 	add.w	r3, r9, #16
 800867c:	f109 0514 	add.w	r5, r9, #20
 8008680:	f104 0e14 	add.w	lr, r4, #20
 8008684:	f100 0b14 	add.w	fp, r0, #20
 8008688:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800868c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	46d9      	mov	r9, fp
 8008694:	f04f 0c00 	mov.w	ip, #0
 8008698:	9b01      	ldr	r3, [sp, #4]
 800869a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800869e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	fa1f f38a 	uxth.w	r3, sl
 80086a8:	4619      	mov	r1, r3
 80086aa:	b283      	uxth	r3, r0
 80086ac:	1acb      	subs	r3, r1, r3
 80086ae:	0c00      	lsrs	r0, r0, #16
 80086b0:	4463      	add	r3, ip
 80086b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80086b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80086c0:	4576      	cmp	r6, lr
 80086c2:	f849 3b04 	str.w	r3, [r9], #4
 80086c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086ca:	d8e5      	bhi.n	8008698 <__mdiff+0x88>
 80086cc:	1b33      	subs	r3, r6, r4
 80086ce:	3b15      	subs	r3, #21
 80086d0:	f023 0303 	bic.w	r3, r3, #3
 80086d4:	3415      	adds	r4, #21
 80086d6:	3304      	adds	r3, #4
 80086d8:	42a6      	cmp	r6, r4
 80086da:	bf38      	it	cc
 80086dc:	2304      	movcc	r3, #4
 80086de:	441d      	add	r5, r3
 80086e0:	445b      	add	r3, fp
 80086e2:	461e      	mov	r6, r3
 80086e4:	462c      	mov	r4, r5
 80086e6:	4544      	cmp	r4, r8
 80086e8:	d30e      	bcc.n	8008708 <__mdiff+0xf8>
 80086ea:	f108 0103 	add.w	r1, r8, #3
 80086ee:	1b49      	subs	r1, r1, r5
 80086f0:	f021 0103 	bic.w	r1, r1, #3
 80086f4:	3d03      	subs	r5, #3
 80086f6:	45a8      	cmp	r8, r5
 80086f8:	bf38      	it	cc
 80086fa:	2100      	movcc	r1, #0
 80086fc:	440b      	add	r3, r1
 80086fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008702:	b191      	cbz	r1, 800872a <__mdiff+0x11a>
 8008704:	6117      	str	r7, [r2, #16]
 8008706:	e79d      	b.n	8008644 <__mdiff+0x34>
 8008708:	f854 1b04 	ldr.w	r1, [r4], #4
 800870c:	46e6      	mov	lr, ip
 800870e:	0c08      	lsrs	r0, r1, #16
 8008710:	fa1c fc81 	uxtah	ip, ip, r1
 8008714:	4471      	add	r1, lr
 8008716:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800871a:	b289      	uxth	r1, r1
 800871c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008720:	f846 1b04 	str.w	r1, [r6], #4
 8008724:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008728:	e7dd      	b.n	80086e6 <__mdiff+0xd6>
 800872a:	3f01      	subs	r7, #1
 800872c:	e7e7      	b.n	80086fe <__mdiff+0xee>
 800872e:	bf00      	nop
 8008730:	08009770 	.word	0x08009770
 8008734:	08009781 	.word	0x08009781

08008738 <__d2b>:
 8008738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800873c:	460f      	mov	r7, r1
 800873e:	2101      	movs	r1, #1
 8008740:	ec59 8b10 	vmov	r8, r9, d0
 8008744:	4616      	mov	r6, r2
 8008746:	f7ff fccd 	bl	80080e4 <_Balloc>
 800874a:	4604      	mov	r4, r0
 800874c:	b930      	cbnz	r0, 800875c <__d2b+0x24>
 800874e:	4602      	mov	r2, r0
 8008750:	4b23      	ldr	r3, [pc, #140]	@ (80087e0 <__d2b+0xa8>)
 8008752:	4824      	ldr	r0, [pc, #144]	@ (80087e4 <__d2b+0xac>)
 8008754:	f240 310f 	movw	r1, #783	@ 0x30f
 8008758:	f000 fa82 	bl	8008c60 <__assert_func>
 800875c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008764:	b10d      	cbz	r5, 800876a <__d2b+0x32>
 8008766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800876a:	9301      	str	r3, [sp, #4]
 800876c:	f1b8 0300 	subs.w	r3, r8, #0
 8008770:	d023      	beq.n	80087ba <__d2b+0x82>
 8008772:	4668      	mov	r0, sp
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	f7ff fd7c 	bl	8008272 <__lo0bits>
 800877a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800877e:	b1d0      	cbz	r0, 80087b6 <__d2b+0x7e>
 8008780:	f1c0 0320 	rsb	r3, r0, #32
 8008784:	fa02 f303 	lsl.w	r3, r2, r3
 8008788:	430b      	orrs	r3, r1
 800878a:	40c2      	lsrs	r2, r0
 800878c:	6163      	str	r3, [r4, #20]
 800878e:	9201      	str	r2, [sp, #4]
 8008790:	9b01      	ldr	r3, [sp, #4]
 8008792:	61a3      	str	r3, [r4, #24]
 8008794:	2b00      	cmp	r3, #0
 8008796:	bf0c      	ite	eq
 8008798:	2201      	moveq	r2, #1
 800879a:	2202      	movne	r2, #2
 800879c:	6122      	str	r2, [r4, #16]
 800879e:	b1a5      	cbz	r5, 80087ca <__d2b+0x92>
 80087a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80087a4:	4405      	add	r5, r0
 80087a6:	603d      	str	r5, [r7, #0]
 80087a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80087ac:	6030      	str	r0, [r6, #0]
 80087ae:	4620      	mov	r0, r4
 80087b0:	b003      	add	sp, #12
 80087b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087b6:	6161      	str	r1, [r4, #20]
 80087b8:	e7ea      	b.n	8008790 <__d2b+0x58>
 80087ba:	a801      	add	r0, sp, #4
 80087bc:	f7ff fd59 	bl	8008272 <__lo0bits>
 80087c0:	9b01      	ldr	r3, [sp, #4]
 80087c2:	6163      	str	r3, [r4, #20]
 80087c4:	3020      	adds	r0, #32
 80087c6:	2201      	movs	r2, #1
 80087c8:	e7e8      	b.n	800879c <__d2b+0x64>
 80087ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80087d2:	6038      	str	r0, [r7, #0]
 80087d4:	6918      	ldr	r0, [r3, #16]
 80087d6:	f7ff fd2d 	bl	8008234 <__hi0bits>
 80087da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087de:	e7e5      	b.n	80087ac <__d2b+0x74>
 80087e0:	08009770 	.word	0x08009770
 80087e4:	08009781 	.word	0x08009781

080087e8 <__ssputs_r>:
 80087e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ec:	688e      	ldr	r6, [r1, #8]
 80087ee:	461f      	mov	r7, r3
 80087f0:	42be      	cmp	r6, r7
 80087f2:	680b      	ldr	r3, [r1, #0]
 80087f4:	4682      	mov	sl, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	4690      	mov	r8, r2
 80087fa:	d82d      	bhi.n	8008858 <__ssputs_r+0x70>
 80087fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008800:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008804:	d026      	beq.n	8008854 <__ssputs_r+0x6c>
 8008806:	6965      	ldr	r5, [r4, #20]
 8008808:	6909      	ldr	r1, [r1, #16]
 800880a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800880e:	eba3 0901 	sub.w	r9, r3, r1
 8008812:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008816:	1c7b      	adds	r3, r7, #1
 8008818:	444b      	add	r3, r9
 800881a:	106d      	asrs	r5, r5, #1
 800881c:	429d      	cmp	r5, r3
 800881e:	bf38      	it	cc
 8008820:	461d      	movcc	r5, r3
 8008822:	0553      	lsls	r3, r2, #21
 8008824:	d527      	bpl.n	8008876 <__ssputs_r+0x8e>
 8008826:	4629      	mov	r1, r5
 8008828:	f7ff fbd0 	bl	8007fcc <_malloc_r>
 800882c:	4606      	mov	r6, r0
 800882e:	b360      	cbz	r0, 800888a <__ssputs_r+0xa2>
 8008830:	6921      	ldr	r1, [r4, #16]
 8008832:	464a      	mov	r2, r9
 8008834:	f000 fa06 	bl	8008c44 <memcpy>
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800883e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	6126      	str	r6, [r4, #16]
 8008846:	6165      	str	r5, [r4, #20]
 8008848:	444e      	add	r6, r9
 800884a:	eba5 0509 	sub.w	r5, r5, r9
 800884e:	6026      	str	r6, [r4, #0]
 8008850:	60a5      	str	r5, [r4, #8]
 8008852:	463e      	mov	r6, r7
 8008854:	42be      	cmp	r6, r7
 8008856:	d900      	bls.n	800885a <__ssputs_r+0x72>
 8008858:	463e      	mov	r6, r7
 800885a:	6820      	ldr	r0, [r4, #0]
 800885c:	4632      	mov	r2, r6
 800885e:	4641      	mov	r1, r8
 8008860:	f000 f9c6 	bl	8008bf0 <memmove>
 8008864:	68a3      	ldr	r3, [r4, #8]
 8008866:	1b9b      	subs	r3, r3, r6
 8008868:	60a3      	str	r3, [r4, #8]
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	4433      	add	r3, r6
 800886e:	6023      	str	r3, [r4, #0]
 8008870:	2000      	movs	r0, #0
 8008872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008876:	462a      	mov	r2, r5
 8008878:	f000 fa36 	bl	8008ce8 <_realloc_r>
 800887c:	4606      	mov	r6, r0
 800887e:	2800      	cmp	r0, #0
 8008880:	d1e0      	bne.n	8008844 <__ssputs_r+0x5c>
 8008882:	6921      	ldr	r1, [r4, #16]
 8008884:	4650      	mov	r0, sl
 8008886:	f7ff fb2d 	bl	8007ee4 <_free_r>
 800888a:	230c      	movs	r3, #12
 800888c:	f8ca 3000 	str.w	r3, [sl]
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008896:	81a3      	strh	r3, [r4, #12]
 8008898:	f04f 30ff 	mov.w	r0, #4294967295
 800889c:	e7e9      	b.n	8008872 <__ssputs_r+0x8a>
	...

080088a0 <_svfiprintf_r>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	4698      	mov	r8, r3
 80088a6:	898b      	ldrh	r3, [r1, #12]
 80088a8:	061b      	lsls	r3, r3, #24
 80088aa:	b09d      	sub	sp, #116	@ 0x74
 80088ac:	4607      	mov	r7, r0
 80088ae:	460d      	mov	r5, r1
 80088b0:	4614      	mov	r4, r2
 80088b2:	d510      	bpl.n	80088d6 <_svfiprintf_r+0x36>
 80088b4:	690b      	ldr	r3, [r1, #16]
 80088b6:	b973      	cbnz	r3, 80088d6 <_svfiprintf_r+0x36>
 80088b8:	2140      	movs	r1, #64	@ 0x40
 80088ba:	f7ff fb87 	bl	8007fcc <_malloc_r>
 80088be:	6028      	str	r0, [r5, #0]
 80088c0:	6128      	str	r0, [r5, #16]
 80088c2:	b930      	cbnz	r0, 80088d2 <_svfiprintf_r+0x32>
 80088c4:	230c      	movs	r3, #12
 80088c6:	603b      	str	r3, [r7, #0]
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295
 80088cc:	b01d      	add	sp, #116	@ 0x74
 80088ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d2:	2340      	movs	r3, #64	@ 0x40
 80088d4:	616b      	str	r3, [r5, #20]
 80088d6:	2300      	movs	r3, #0
 80088d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80088da:	2320      	movs	r3, #32
 80088dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80088e4:	2330      	movs	r3, #48	@ 0x30
 80088e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a84 <_svfiprintf_r+0x1e4>
 80088ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088ee:	f04f 0901 	mov.w	r9, #1
 80088f2:	4623      	mov	r3, r4
 80088f4:	469a      	mov	sl, r3
 80088f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088fa:	b10a      	cbz	r2, 8008900 <_svfiprintf_r+0x60>
 80088fc:	2a25      	cmp	r2, #37	@ 0x25
 80088fe:	d1f9      	bne.n	80088f4 <_svfiprintf_r+0x54>
 8008900:	ebba 0b04 	subs.w	fp, sl, r4
 8008904:	d00b      	beq.n	800891e <_svfiprintf_r+0x7e>
 8008906:	465b      	mov	r3, fp
 8008908:	4622      	mov	r2, r4
 800890a:	4629      	mov	r1, r5
 800890c:	4638      	mov	r0, r7
 800890e:	f7ff ff6b 	bl	80087e8 <__ssputs_r>
 8008912:	3001      	adds	r0, #1
 8008914:	f000 80a7 	beq.w	8008a66 <_svfiprintf_r+0x1c6>
 8008918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800891a:	445a      	add	r2, fp
 800891c:	9209      	str	r2, [sp, #36]	@ 0x24
 800891e:	f89a 3000 	ldrb.w	r3, [sl]
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 809f 	beq.w	8008a66 <_svfiprintf_r+0x1c6>
 8008928:	2300      	movs	r3, #0
 800892a:	f04f 32ff 	mov.w	r2, #4294967295
 800892e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008932:	f10a 0a01 	add.w	sl, sl, #1
 8008936:	9304      	str	r3, [sp, #16]
 8008938:	9307      	str	r3, [sp, #28]
 800893a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800893e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008940:	4654      	mov	r4, sl
 8008942:	2205      	movs	r2, #5
 8008944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008948:	484e      	ldr	r0, [pc, #312]	@ (8008a84 <_svfiprintf_r+0x1e4>)
 800894a:	f7f7 fc79 	bl	8000240 <memchr>
 800894e:	9a04      	ldr	r2, [sp, #16]
 8008950:	b9d8      	cbnz	r0, 800898a <_svfiprintf_r+0xea>
 8008952:	06d0      	lsls	r0, r2, #27
 8008954:	bf44      	itt	mi
 8008956:	2320      	movmi	r3, #32
 8008958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800895c:	0711      	lsls	r1, r2, #28
 800895e:	bf44      	itt	mi
 8008960:	232b      	movmi	r3, #43	@ 0x2b
 8008962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008966:	f89a 3000 	ldrb.w	r3, [sl]
 800896a:	2b2a      	cmp	r3, #42	@ 0x2a
 800896c:	d015      	beq.n	800899a <_svfiprintf_r+0xfa>
 800896e:	9a07      	ldr	r2, [sp, #28]
 8008970:	4654      	mov	r4, sl
 8008972:	2000      	movs	r0, #0
 8008974:	f04f 0c0a 	mov.w	ip, #10
 8008978:	4621      	mov	r1, r4
 800897a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800897e:	3b30      	subs	r3, #48	@ 0x30
 8008980:	2b09      	cmp	r3, #9
 8008982:	d94b      	bls.n	8008a1c <_svfiprintf_r+0x17c>
 8008984:	b1b0      	cbz	r0, 80089b4 <_svfiprintf_r+0x114>
 8008986:	9207      	str	r2, [sp, #28]
 8008988:	e014      	b.n	80089b4 <_svfiprintf_r+0x114>
 800898a:	eba0 0308 	sub.w	r3, r0, r8
 800898e:	fa09 f303 	lsl.w	r3, r9, r3
 8008992:	4313      	orrs	r3, r2
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	46a2      	mov	sl, r4
 8008998:	e7d2      	b.n	8008940 <_svfiprintf_r+0xa0>
 800899a:	9b03      	ldr	r3, [sp, #12]
 800899c:	1d19      	adds	r1, r3, #4
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	9103      	str	r1, [sp, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	bfbb      	ittet	lt
 80089a6:	425b      	neglt	r3, r3
 80089a8:	f042 0202 	orrlt.w	r2, r2, #2
 80089ac:	9307      	strge	r3, [sp, #28]
 80089ae:	9307      	strlt	r3, [sp, #28]
 80089b0:	bfb8      	it	lt
 80089b2:	9204      	strlt	r2, [sp, #16]
 80089b4:	7823      	ldrb	r3, [r4, #0]
 80089b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80089b8:	d10a      	bne.n	80089d0 <_svfiprintf_r+0x130>
 80089ba:	7863      	ldrb	r3, [r4, #1]
 80089bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80089be:	d132      	bne.n	8008a26 <_svfiprintf_r+0x186>
 80089c0:	9b03      	ldr	r3, [sp, #12]
 80089c2:	1d1a      	adds	r2, r3, #4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	9203      	str	r2, [sp, #12]
 80089c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089cc:	3402      	adds	r4, #2
 80089ce:	9305      	str	r3, [sp, #20]
 80089d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a94 <_svfiprintf_r+0x1f4>
 80089d4:	7821      	ldrb	r1, [r4, #0]
 80089d6:	2203      	movs	r2, #3
 80089d8:	4650      	mov	r0, sl
 80089da:	f7f7 fc31 	bl	8000240 <memchr>
 80089de:	b138      	cbz	r0, 80089f0 <_svfiprintf_r+0x150>
 80089e0:	9b04      	ldr	r3, [sp, #16]
 80089e2:	eba0 000a 	sub.w	r0, r0, sl
 80089e6:	2240      	movs	r2, #64	@ 0x40
 80089e8:	4082      	lsls	r2, r0
 80089ea:	4313      	orrs	r3, r2
 80089ec:	3401      	adds	r4, #1
 80089ee:	9304      	str	r3, [sp, #16]
 80089f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f4:	4824      	ldr	r0, [pc, #144]	@ (8008a88 <_svfiprintf_r+0x1e8>)
 80089f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089fa:	2206      	movs	r2, #6
 80089fc:	f7f7 fc20 	bl	8000240 <memchr>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d036      	beq.n	8008a72 <_svfiprintf_r+0x1d2>
 8008a04:	4b21      	ldr	r3, [pc, #132]	@ (8008a8c <_svfiprintf_r+0x1ec>)
 8008a06:	bb1b      	cbnz	r3, 8008a50 <_svfiprintf_r+0x1b0>
 8008a08:	9b03      	ldr	r3, [sp, #12]
 8008a0a:	3307      	adds	r3, #7
 8008a0c:	f023 0307 	bic.w	r3, r3, #7
 8008a10:	3308      	adds	r3, #8
 8008a12:	9303      	str	r3, [sp, #12]
 8008a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a16:	4433      	add	r3, r6
 8008a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a1a:	e76a      	b.n	80088f2 <_svfiprintf_r+0x52>
 8008a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a20:	460c      	mov	r4, r1
 8008a22:	2001      	movs	r0, #1
 8008a24:	e7a8      	b.n	8008978 <_svfiprintf_r+0xd8>
 8008a26:	2300      	movs	r3, #0
 8008a28:	3401      	adds	r4, #1
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	f04f 0c0a 	mov.w	ip, #10
 8008a32:	4620      	mov	r0, r4
 8008a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a38:	3a30      	subs	r2, #48	@ 0x30
 8008a3a:	2a09      	cmp	r2, #9
 8008a3c:	d903      	bls.n	8008a46 <_svfiprintf_r+0x1a6>
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0c6      	beq.n	80089d0 <_svfiprintf_r+0x130>
 8008a42:	9105      	str	r1, [sp, #20]
 8008a44:	e7c4      	b.n	80089d0 <_svfiprintf_r+0x130>
 8008a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e7f0      	b.n	8008a32 <_svfiprintf_r+0x192>
 8008a50:	ab03      	add	r3, sp, #12
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	462a      	mov	r2, r5
 8008a56:	4b0e      	ldr	r3, [pc, #56]	@ (8008a90 <_svfiprintf_r+0x1f0>)
 8008a58:	a904      	add	r1, sp, #16
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	f7fd ff14 	bl	8006888 <_printf_float>
 8008a60:	1c42      	adds	r2, r0, #1
 8008a62:	4606      	mov	r6, r0
 8008a64:	d1d6      	bne.n	8008a14 <_svfiprintf_r+0x174>
 8008a66:	89ab      	ldrh	r3, [r5, #12]
 8008a68:	065b      	lsls	r3, r3, #25
 8008a6a:	f53f af2d 	bmi.w	80088c8 <_svfiprintf_r+0x28>
 8008a6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a70:	e72c      	b.n	80088cc <_svfiprintf_r+0x2c>
 8008a72:	ab03      	add	r3, sp, #12
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	462a      	mov	r2, r5
 8008a78:	4b05      	ldr	r3, [pc, #20]	@ (8008a90 <_svfiprintf_r+0x1f0>)
 8008a7a:	a904      	add	r1, sp, #16
 8008a7c:	4638      	mov	r0, r7
 8008a7e:	f7fe f98b 	bl	8006d98 <_printf_i>
 8008a82:	e7ed      	b.n	8008a60 <_svfiprintf_r+0x1c0>
 8008a84:	080098d8 	.word	0x080098d8
 8008a88:	080098e2 	.word	0x080098e2
 8008a8c:	08006889 	.word	0x08006889
 8008a90:	080087e9 	.word	0x080087e9
 8008a94:	080098de 	.word	0x080098de

08008a98 <__sflush_r>:
 8008a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa0:	0716      	lsls	r6, r2, #28
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	d454      	bmi.n	8008b52 <__sflush_r+0xba>
 8008aa8:	684b      	ldr	r3, [r1, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dc02      	bgt.n	8008ab4 <__sflush_r+0x1c>
 8008aae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	dd48      	ble.n	8008b46 <__sflush_r+0xae>
 8008ab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	d045      	beq.n	8008b46 <__sflush_r+0xae>
 8008aba:	2300      	movs	r3, #0
 8008abc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ac0:	682f      	ldr	r7, [r5, #0]
 8008ac2:	6a21      	ldr	r1, [r4, #32]
 8008ac4:	602b      	str	r3, [r5, #0]
 8008ac6:	d030      	beq.n	8008b2a <__sflush_r+0x92>
 8008ac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	0759      	lsls	r1, r3, #29
 8008ace:	d505      	bpl.n	8008adc <__sflush_r+0x44>
 8008ad0:	6863      	ldr	r3, [r4, #4]
 8008ad2:	1ad2      	subs	r2, r2, r3
 8008ad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ad6:	b10b      	cbz	r3, 8008adc <__sflush_r+0x44>
 8008ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ada:	1ad2      	subs	r2, r2, r3
 8008adc:	2300      	movs	r3, #0
 8008ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ae0:	6a21      	ldr	r1, [r4, #32]
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	47b0      	blx	r6
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	d106      	bne.n	8008afa <__sflush_r+0x62>
 8008aec:	6829      	ldr	r1, [r5, #0]
 8008aee:	291d      	cmp	r1, #29
 8008af0:	d82b      	bhi.n	8008b4a <__sflush_r+0xb2>
 8008af2:	4a2a      	ldr	r2, [pc, #168]	@ (8008b9c <__sflush_r+0x104>)
 8008af4:	410a      	asrs	r2, r1
 8008af6:	07d6      	lsls	r6, r2, #31
 8008af8:	d427      	bmi.n	8008b4a <__sflush_r+0xb2>
 8008afa:	2200      	movs	r2, #0
 8008afc:	6062      	str	r2, [r4, #4]
 8008afe:	04d9      	lsls	r1, r3, #19
 8008b00:	6922      	ldr	r2, [r4, #16]
 8008b02:	6022      	str	r2, [r4, #0]
 8008b04:	d504      	bpl.n	8008b10 <__sflush_r+0x78>
 8008b06:	1c42      	adds	r2, r0, #1
 8008b08:	d101      	bne.n	8008b0e <__sflush_r+0x76>
 8008b0a:	682b      	ldr	r3, [r5, #0]
 8008b0c:	b903      	cbnz	r3, 8008b10 <__sflush_r+0x78>
 8008b0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b12:	602f      	str	r7, [r5, #0]
 8008b14:	b1b9      	cbz	r1, 8008b46 <__sflush_r+0xae>
 8008b16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b1a:	4299      	cmp	r1, r3
 8008b1c:	d002      	beq.n	8008b24 <__sflush_r+0x8c>
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f7ff f9e0 	bl	8007ee4 <_free_r>
 8008b24:	2300      	movs	r3, #0
 8008b26:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b28:	e00d      	b.n	8008b46 <__sflush_r+0xae>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	47b0      	blx	r6
 8008b30:	4602      	mov	r2, r0
 8008b32:	1c50      	adds	r0, r2, #1
 8008b34:	d1c9      	bne.n	8008aca <__sflush_r+0x32>
 8008b36:	682b      	ldr	r3, [r5, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d0c6      	beq.n	8008aca <__sflush_r+0x32>
 8008b3c:	2b1d      	cmp	r3, #29
 8008b3e:	d001      	beq.n	8008b44 <__sflush_r+0xac>
 8008b40:	2b16      	cmp	r3, #22
 8008b42:	d11e      	bne.n	8008b82 <__sflush_r+0xea>
 8008b44:	602f      	str	r7, [r5, #0]
 8008b46:	2000      	movs	r0, #0
 8008b48:	e022      	b.n	8008b90 <__sflush_r+0xf8>
 8008b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b4e:	b21b      	sxth	r3, r3
 8008b50:	e01b      	b.n	8008b8a <__sflush_r+0xf2>
 8008b52:	690f      	ldr	r7, [r1, #16]
 8008b54:	2f00      	cmp	r7, #0
 8008b56:	d0f6      	beq.n	8008b46 <__sflush_r+0xae>
 8008b58:	0793      	lsls	r3, r2, #30
 8008b5a:	680e      	ldr	r6, [r1, #0]
 8008b5c:	bf08      	it	eq
 8008b5e:	694b      	ldreq	r3, [r1, #20]
 8008b60:	600f      	str	r7, [r1, #0]
 8008b62:	bf18      	it	ne
 8008b64:	2300      	movne	r3, #0
 8008b66:	eba6 0807 	sub.w	r8, r6, r7
 8008b6a:	608b      	str	r3, [r1, #8]
 8008b6c:	f1b8 0f00 	cmp.w	r8, #0
 8008b70:	dde9      	ble.n	8008b46 <__sflush_r+0xae>
 8008b72:	6a21      	ldr	r1, [r4, #32]
 8008b74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b76:	4643      	mov	r3, r8
 8008b78:	463a      	mov	r2, r7
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	47b0      	blx	r6
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	dc08      	bgt.n	8008b94 <__sflush_r+0xfc>
 8008b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b8a:	81a3      	strh	r3, [r4, #12]
 8008b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b94:	4407      	add	r7, r0
 8008b96:	eba8 0800 	sub.w	r8, r8, r0
 8008b9a:	e7e7      	b.n	8008b6c <__sflush_r+0xd4>
 8008b9c:	dfbffffe 	.word	0xdfbffffe

08008ba0 <_fflush_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	690b      	ldr	r3, [r1, #16]
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	b913      	cbnz	r3, 8008bb0 <_fflush_r+0x10>
 8008baa:	2500      	movs	r5, #0
 8008bac:	4628      	mov	r0, r5
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	b118      	cbz	r0, 8008bba <_fflush_r+0x1a>
 8008bb2:	6a03      	ldr	r3, [r0, #32]
 8008bb4:	b90b      	cbnz	r3, 8008bba <_fflush_r+0x1a>
 8008bb6:	f7fe fa9b 	bl	80070f0 <__sinit>
 8008bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0f3      	beq.n	8008baa <_fflush_r+0xa>
 8008bc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bc4:	07d0      	lsls	r0, r2, #31
 8008bc6:	d404      	bmi.n	8008bd2 <_fflush_r+0x32>
 8008bc8:	0599      	lsls	r1, r3, #22
 8008bca:	d402      	bmi.n	8008bd2 <_fflush_r+0x32>
 8008bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bce:	f7fe fba6 	bl	800731e <__retarget_lock_acquire_recursive>
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	f7ff ff5f 	bl	8008a98 <__sflush_r>
 8008bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bdc:	07da      	lsls	r2, r3, #31
 8008bde:	4605      	mov	r5, r0
 8008be0:	d4e4      	bmi.n	8008bac <_fflush_r+0xc>
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	059b      	lsls	r3, r3, #22
 8008be6:	d4e1      	bmi.n	8008bac <_fflush_r+0xc>
 8008be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bea:	f7fe fb99 	bl	8007320 <__retarget_lock_release_recursive>
 8008bee:	e7dd      	b.n	8008bac <_fflush_r+0xc>

08008bf0 <memmove>:
 8008bf0:	4288      	cmp	r0, r1
 8008bf2:	b510      	push	{r4, lr}
 8008bf4:	eb01 0402 	add.w	r4, r1, r2
 8008bf8:	d902      	bls.n	8008c00 <memmove+0x10>
 8008bfa:	4284      	cmp	r4, r0
 8008bfc:	4623      	mov	r3, r4
 8008bfe:	d807      	bhi.n	8008c10 <memmove+0x20>
 8008c00:	1e43      	subs	r3, r0, #1
 8008c02:	42a1      	cmp	r1, r4
 8008c04:	d008      	beq.n	8008c18 <memmove+0x28>
 8008c06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c0e:	e7f8      	b.n	8008c02 <memmove+0x12>
 8008c10:	4402      	add	r2, r0
 8008c12:	4601      	mov	r1, r0
 8008c14:	428a      	cmp	r2, r1
 8008c16:	d100      	bne.n	8008c1a <memmove+0x2a>
 8008c18:	bd10      	pop	{r4, pc}
 8008c1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c22:	e7f7      	b.n	8008c14 <memmove+0x24>

08008c24 <_sbrk_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d06      	ldr	r5, [pc, #24]	@ (8008c40 <_sbrk_r+0x1c>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	602b      	str	r3, [r5, #0]
 8008c30:	f7f8 fe14 	bl	800185c <_sbrk>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_sbrk_r+0x1a>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_sbrk_r+0x1a>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	20000e2c 	.word	0x20000e2c

08008c44 <memcpy>:
 8008c44:	440a      	add	r2, r1
 8008c46:	4291      	cmp	r1, r2
 8008c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c4c:	d100      	bne.n	8008c50 <memcpy+0xc>
 8008c4e:	4770      	bx	lr
 8008c50:	b510      	push	{r4, lr}
 8008c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c5a:	4291      	cmp	r1, r2
 8008c5c:	d1f9      	bne.n	8008c52 <memcpy+0xe>
 8008c5e:	bd10      	pop	{r4, pc}

08008c60 <__assert_func>:
 8008c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c62:	4614      	mov	r4, r2
 8008c64:	461a      	mov	r2, r3
 8008c66:	4b09      	ldr	r3, [pc, #36]	@ (8008c8c <__assert_func+0x2c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	68d8      	ldr	r0, [r3, #12]
 8008c6e:	b954      	cbnz	r4, 8008c86 <__assert_func+0x26>
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <__assert_func+0x30>)
 8008c72:	461c      	mov	r4, r3
 8008c74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c78:	9100      	str	r1, [sp, #0]
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	4905      	ldr	r1, [pc, #20]	@ (8008c94 <__assert_func+0x34>)
 8008c7e:	f000 f86f 	bl	8008d60 <fiprintf>
 8008c82:	f000 f87f 	bl	8008d84 <abort>
 8008c86:	4b04      	ldr	r3, [pc, #16]	@ (8008c98 <__assert_func+0x38>)
 8008c88:	e7f4      	b.n	8008c74 <__assert_func+0x14>
 8008c8a:	bf00      	nop
 8008c8c:	20000018 	.word	0x20000018
 8008c90:	0800992e 	.word	0x0800992e
 8008c94:	08009900 	.word	0x08009900
 8008c98:	080098f3 	.word	0x080098f3

08008c9c <_calloc_r>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	fba1 5402 	umull	r5, r4, r1, r2
 8008ca2:	b93c      	cbnz	r4, 8008cb4 <_calloc_r+0x18>
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	f7ff f991 	bl	8007fcc <_malloc_r>
 8008caa:	4606      	mov	r6, r0
 8008cac:	b928      	cbnz	r0, 8008cba <_calloc_r+0x1e>
 8008cae:	2600      	movs	r6, #0
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	bd70      	pop	{r4, r5, r6, pc}
 8008cb4:	220c      	movs	r2, #12
 8008cb6:	6002      	str	r2, [r0, #0]
 8008cb8:	e7f9      	b.n	8008cae <_calloc_r+0x12>
 8008cba:	462a      	mov	r2, r5
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	f7fe fab0 	bl	8007222 <memset>
 8008cc2:	e7f5      	b.n	8008cb0 <_calloc_r+0x14>

08008cc4 <__ascii_mbtowc>:
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	b901      	cbnz	r1, 8008cca <__ascii_mbtowc+0x6>
 8008cc8:	a901      	add	r1, sp, #4
 8008cca:	b142      	cbz	r2, 8008cde <__ascii_mbtowc+0x1a>
 8008ccc:	b14b      	cbz	r3, 8008ce2 <__ascii_mbtowc+0x1e>
 8008cce:	7813      	ldrb	r3, [r2, #0]
 8008cd0:	600b      	str	r3, [r1, #0]
 8008cd2:	7812      	ldrb	r2, [r2, #0]
 8008cd4:	1e10      	subs	r0, r2, #0
 8008cd6:	bf18      	it	ne
 8008cd8:	2001      	movne	r0, #1
 8008cda:	b002      	add	sp, #8
 8008cdc:	4770      	bx	lr
 8008cde:	4610      	mov	r0, r2
 8008ce0:	e7fb      	b.n	8008cda <__ascii_mbtowc+0x16>
 8008ce2:	f06f 0001 	mvn.w	r0, #1
 8008ce6:	e7f8      	b.n	8008cda <__ascii_mbtowc+0x16>

08008ce8 <_realloc_r>:
 8008ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cec:	4680      	mov	r8, r0
 8008cee:	4615      	mov	r5, r2
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	b921      	cbnz	r1, 8008cfe <_realloc_r+0x16>
 8008cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	f7ff b967 	b.w	8007fcc <_malloc_r>
 8008cfe:	b92a      	cbnz	r2, 8008d0c <_realloc_r+0x24>
 8008d00:	f7ff f8f0 	bl	8007ee4 <_free_r>
 8008d04:	2400      	movs	r4, #0
 8008d06:	4620      	mov	r0, r4
 8008d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d0c:	f000 f841 	bl	8008d92 <_malloc_usable_size_r>
 8008d10:	4285      	cmp	r5, r0
 8008d12:	4606      	mov	r6, r0
 8008d14:	d802      	bhi.n	8008d1c <_realloc_r+0x34>
 8008d16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d1a:	d8f4      	bhi.n	8008d06 <_realloc_r+0x1e>
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4640      	mov	r0, r8
 8008d20:	f7ff f954 	bl	8007fcc <_malloc_r>
 8008d24:	4607      	mov	r7, r0
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d0ec      	beq.n	8008d04 <_realloc_r+0x1c>
 8008d2a:	42b5      	cmp	r5, r6
 8008d2c:	462a      	mov	r2, r5
 8008d2e:	4621      	mov	r1, r4
 8008d30:	bf28      	it	cs
 8008d32:	4632      	movcs	r2, r6
 8008d34:	f7ff ff86 	bl	8008c44 <memcpy>
 8008d38:	4621      	mov	r1, r4
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	f7ff f8d2 	bl	8007ee4 <_free_r>
 8008d40:	463c      	mov	r4, r7
 8008d42:	e7e0      	b.n	8008d06 <_realloc_r+0x1e>

08008d44 <__ascii_wctomb>:
 8008d44:	4603      	mov	r3, r0
 8008d46:	4608      	mov	r0, r1
 8008d48:	b141      	cbz	r1, 8008d5c <__ascii_wctomb+0x18>
 8008d4a:	2aff      	cmp	r2, #255	@ 0xff
 8008d4c:	d904      	bls.n	8008d58 <__ascii_wctomb+0x14>
 8008d4e:	228a      	movs	r2, #138	@ 0x8a
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	f04f 30ff 	mov.w	r0, #4294967295
 8008d56:	4770      	bx	lr
 8008d58:	700a      	strb	r2, [r1, #0]
 8008d5a:	2001      	movs	r0, #1
 8008d5c:	4770      	bx	lr
	...

08008d60 <fiprintf>:
 8008d60:	b40e      	push	{r1, r2, r3}
 8008d62:	b503      	push	{r0, r1, lr}
 8008d64:	4601      	mov	r1, r0
 8008d66:	ab03      	add	r3, sp, #12
 8008d68:	4805      	ldr	r0, [pc, #20]	@ (8008d80 <fiprintf+0x20>)
 8008d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d6e:	6800      	ldr	r0, [r0, #0]
 8008d70:	9301      	str	r3, [sp, #4]
 8008d72:	f000 f83f 	bl	8008df4 <_vfiprintf_r>
 8008d76:	b002      	add	sp, #8
 8008d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d7c:	b003      	add	sp, #12
 8008d7e:	4770      	bx	lr
 8008d80:	20000018 	.word	0x20000018

08008d84 <abort>:
 8008d84:	b508      	push	{r3, lr}
 8008d86:	2006      	movs	r0, #6
 8008d88:	f000 fa08 	bl	800919c <raise>
 8008d8c:	2001      	movs	r0, #1
 8008d8e:	f7f8 fcec 	bl	800176a <_exit>

08008d92 <_malloc_usable_size_r>:
 8008d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d96:	1f18      	subs	r0, r3, #4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	bfbc      	itt	lt
 8008d9c:	580b      	ldrlt	r3, [r1, r0]
 8008d9e:	18c0      	addlt	r0, r0, r3
 8008da0:	4770      	bx	lr

08008da2 <__sfputc_r>:
 8008da2:	6893      	ldr	r3, [r2, #8]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	b410      	push	{r4}
 8008daa:	6093      	str	r3, [r2, #8]
 8008dac:	da08      	bge.n	8008dc0 <__sfputc_r+0x1e>
 8008dae:	6994      	ldr	r4, [r2, #24]
 8008db0:	42a3      	cmp	r3, r4
 8008db2:	db01      	blt.n	8008db8 <__sfputc_r+0x16>
 8008db4:	290a      	cmp	r1, #10
 8008db6:	d103      	bne.n	8008dc0 <__sfputc_r+0x1e>
 8008db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dbc:	f000 b932 	b.w	8009024 <__swbuf_r>
 8008dc0:	6813      	ldr	r3, [r2, #0]
 8008dc2:	1c58      	adds	r0, r3, #1
 8008dc4:	6010      	str	r0, [r2, #0]
 8008dc6:	7019      	strb	r1, [r3, #0]
 8008dc8:	4608      	mov	r0, r1
 8008dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <__sfputs_r>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	460f      	mov	r7, r1
 8008dd6:	4614      	mov	r4, r2
 8008dd8:	18d5      	adds	r5, r2, r3
 8008dda:	42ac      	cmp	r4, r5
 8008ddc:	d101      	bne.n	8008de2 <__sfputs_r+0x12>
 8008dde:	2000      	movs	r0, #0
 8008de0:	e007      	b.n	8008df2 <__sfputs_r+0x22>
 8008de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de6:	463a      	mov	r2, r7
 8008de8:	4630      	mov	r0, r6
 8008dea:	f7ff ffda 	bl	8008da2 <__sfputc_r>
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	d1f3      	bne.n	8008dda <__sfputs_r+0xa>
 8008df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008df4 <_vfiprintf_r>:
 8008df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df8:	460d      	mov	r5, r1
 8008dfa:	b09d      	sub	sp, #116	@ 0x74
 8008dfc:	4614      	mov	r4, r2
 8008dfe:	4698      	mov	r8, r3
 8008e00:	4606      	mov	r6, r0
 8008e02:	b118      	cbz	r0, 8008e0c <_vfiprintf_r+0x18>
 8008e04:	6a03      	ldr	r3, [r0, #32]
 8008e06:	b90b      	cbnz	r3, 8008e0c <_vfiprintf_r+0x18>
 8008e08:	f7fe f972 	bl	80070f0 <__sinit>
 8008e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e0e:	07d9      	lsls	r1, r3, #31
 8008e10:	d405      	bmi.n	8008e1e <_vfiprintf_r+0x2a>
 8008e12:	89ab      	ldrh	r3, [r5, #12]
 8008e14:	059a      	lsls	r2, r3, #22
 8008e16:	d402      	bmi.n	8008e1e <_vfiprintf_r+0x2a>
 8008e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e1a:	f7fe fa80 	bl	800731e <__retarget_lock_acquire_recursive>
 8008e1e:	89ab      	ldrh	r3, [r5, #12]
 8008e20:	071b      	lsls	r3, r3, #28
 8008e22:	d501      	bpl.n	8008e28 <_vfiprintf_r+0x34>
 8008e24:	692b      	ldr	r3, [r5, #16]
 8008e26:	b99b      	cbnz	r3, 8008e50 <_vfiprintf_r+0x5c>
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f000 f938 	bl	80090a0 <__swsetup_r>
 8008e30:	b170      	cbz	r0, 8008e50 <_vfiprintf_r+0x5c>
 8008e32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e34:	07dc      	lsls	r4, r3, #31
 8008e36:	d504      	bpl.n	8008e42 <_vfiprintf_r+0x4e>
 8008e38:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3c:	b01d      	add	sp, #116	@ 0x74
 8008e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e42:	89ab      	ldrh	r3, [r5, #12]
 8008e44:	0598      	lsls	r0, r3, #22
 8008e46:	d4f7      	bmi.n	8008e38 <_vfiprintf_r+0x44>
 8008e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e4a:	f7fe fa69 	bl	8007320 <__retarget_lock_release_recursive>
 8008e4e:	e7f3      	b.n	8008e38 <_vfiprintf_r+0x44>
 8008e50:	2300      	movs	r3, #0
 8008e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e54:	2320      	movs	r3, #32
 8008e56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e5e:	2330      	movs	r3, #48	@ 0x30
 8008e60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009010 <_vfiprintf_r+0x21c>
 8008e64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e68:	f04f 0901 	mov.w	r9, #1
 8008e6c:	4623      	mov	r3, r4
 8008e6e:	469a      	mov	sl, r3
 8008e70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e74:	b10a      	cbz	r2, 8008e7a <_vfiprintf_r+0x86>
 8008e76:	2a25      	cmp	r2, #37	@ 0x25
 8008e78:	d1f9      	bne.n	8008e6e <_vfiprintf_r+0x7a>
 8008e7a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e7e:	d00b      	beq.n	8008e98 <_vfiprintf_r+0xa4>
 8008e80:	465b      	mov	r3, fp
 8008e82:	4622      	mov	r2, r4
 8008e84:	4629      	mov	r1, r5
 8008e86:	4630      	mov	r0, r6
 8008e88:	f7ff ffa2 	bl	8008dd0 <__sfputs_r>
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	f000 80a7 	beq.w	8008fe0 <_vfiprintf_r+0x1ec>
 8008e92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e94:	445a      	add	r2, fp
 8008e96:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e98:	f89a 3000 	ldrb.w	r3, [sl]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 809f 	beq.w	8008fe0 <_vfiprintf_r+0x1ec>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eac:	f10a 0a01 	add.w	sl, sl, #1
 8008eb0:	9304      	str	r3, [sp, #16]
 8008eb2:	9307      	str	r3, [sp, #28]
 8008eb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008eb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008eba:	4654      	mov	r4, sl
 8008ebc:	2205      	movs	r2, #5
 8008ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec2:	4853      	ldr	r0, [pc, #332]	@ (8009010 <_vfiprintf_r+0x21c>)
 8008ec4:	f7f7 f9bc 	bl	8000240 <memchr>
 8008ec8:	9a04      	ldr	r2, [sp, #16]
 8008eca:	b9d8      	cbnz	r0, 8008f04 <_vfiprintf_r+0x110>
 8008ecc:	06d1      	lsls	r1, r2, #27
 8008ece:	bf44      	itt	mi
 8008ed0:	2320      	movmi	r3, #32
 8008ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ed6:	0713      	lsls	r3, r2, #28
 8008ed8:	bf44      	itt	mi
 8008eda:	232b      	movmi	r3, #43	@ 0x2b
 8008edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ee6:	d015      	beq.n	8008f14 <_vfiprintf_r+0x120>
 8008ee8:	9a07      	ldr	r2, [sp, #28]
 8008eea:	4654      	mov	r4, sl
 8008eec:	2000      	movs	r0, #0
 8008eee:	f04f 0c0a 	mov.w	ip, #10
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ef8:	3b30      	subs	r3, #48	@ 0x30
 8008efa:	2b09      	cmp	r3, #9
 8008efc:	d94b      	bls.n	8008f96 <_vfiprintf_r+0x1a2>
 8008efe:	b1b0      	cbz	r0, 8008f2e <_vfiprintf_r+0x13a>
 8008f00:	9207      	str	r2, [sp, #28]
 8008f02:	e014      	b.n	8008f2e <_vfiprintf_r+0x13a>
 8008f04:	eba0 0308 	sub.w	r3, r0, r8
 8008f08:	fa09 f303 	lsl.w	r3, r9, r3
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	9304      	str	r3, [sp, #16]
 8008f10:	46a2      	mov	sl, r4
 8008f12:	e7d2      	b.n	8008eba <_vfiprintf_r+0xc6>
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	1d19      	adds	r1, r3, #4
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	9103      	str	r1, [sp, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	bfbb      	ittet	lt
 8008f20:	425b      	neglt	r3, r3
 8008f22:	f042 0202 	orrlt.w	r2, r2, #2
 8008f26:	9307      	strge	r3, [sp, #28]
 8008f28:	9307      	strlt	r3, [sp, #28]
 8008f2a:	bfb8      	it	lt
 8008f2c:	9204      	strlt	r2, [sp, #16]
 8008f2e:	7823      	ldrb	r3, [r4, #0]
 8008f30:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f32:	d10a      	bne.n	8008f4a <_vfiprintf_r+0x156>
 8008f34:	7863      	ldrb	r3, [r4, #1]
 8008f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f38:	d132      	bne.n	8008fa0 <_vfiprintf_r+0x1ac>
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	1d1a      	adds	r2, r3, #4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	9203      	str	r2, [sp, #12]
 8008f42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f46:	3402      	adds	r4, #2
 8008f48:	9305      	str	r3, [sp, #20]
 8008f4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009020 <_vfiprintf_r+0x22c>
 8008f4e:	7821      	ldrb	r1, [r4, #0]
 8008f50:	2203      	movs	r2, #3
 8008f52:	4650      	mov	r0, sl
 8008f54:	f7f7 f974 	bl	8000240 <memchr>
 8008f58:	b138      	cbz	r0, 8008f6a <_vfiprintf_r+0x176>
 8008f5a:	9b04      	ldr	r3, [sp, #16]
 8008f5c:	eba0 000a 	sub.w	r0, r0, sl
 8008f60:	2240      	movs	r2, #64	@ 0x40
 8008f62:	4082      	lsls	r2, r0
 8008f64:	4313      	orrs	r3, r2
 8008f66:	3401      	adds	r4, #1
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6e:	4829      	ldr	r0, [pc, #164]	@ (8009014 <_vfiprintf_r+0x220>)
 8008f70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f74:	2206      	movs	r2, #6
 8008f76:	f7f7 f963 	bl	8000240 <memchr>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d03f      	beq.n	8008ffe <_vfiprintf_r+0x20a>
 8008f7e:	4b26      	ldr	r3, [pc, #152]	@ (8009018 <_vfiprintf_r+0x224>)
 8008f80:	bb1b      	cbnz	r3, 8008fca <_vfiprintf_r+0x1d6>
 8008f82:	9b03      	ldr	r3, [sp, #12]
 8008f84:	3307      	adds	r3, #7
 8008f86:	f023 0307 	bic.w	r3, r3, #7
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	9303      	str	r3, [sp, #12]
 8008f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f90:	443b      	add	r3, r7
 8008f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f94:	e76a      	b.n	8008e6c <_vfiprintf_r+0x78>
 8008f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	e7a8      	b.n	8008ef2 <_vfiprintf_r+0xfe>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	3401      	adds	r4, #1
 8008fa4:	9305      	str	r3, [sp, #20]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	f04f 0c0a 	mov.w	ip, #10
 8008fac:	4620      	mov	r0, r4
 8008fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fb2:	3a30      	subs	r2, #48	@ 0x30
 8008fb4:	2a09      	cmp	r2, #9
 8008fb6:	d903      	bls.n	8008fc0 <_vfiprintf_r+0x1cc>
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0c6      	beq.n	8008f4a <_vfiprintf_r+0x156>
 8008fbc:	9105      	str	r1, [sp, #20]
 8008fbe:	e7c4      	b.n	8008f4a <_vfiprintf_r+0x156>
 8008fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e7f0      	b.n	8008fac <_vfiprintf_r+0x1b8>
 8008fca:	ab03      	add	r3, sp, #12
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	462a      	mov	r2, r5
 8008fd0:	4b12      	ldr	r3, [pc, #72]	@ (800901c <_vfiprintf_r+0x228>)
 8008fd2:	a904      	add	r1, sp, #16
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7fd fc57 	bl	8006888 <_printf_float>
 8008fda:	4607      	mov	r7, r0
 8008fdc:	1c78      	adds	r0, r7, #1
 8008fde:	d1d6      	bne.n	8008f8e <_vfiprintf_r+0x19a>
 8008fe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fe2:	07d9      	lsls	r1, r3, #31
 8008fe4:	d405      	bmi.n	8008ff2 <_vfiprintf_r+0x1fe>
 8008fe6:	89ab      	ldrh	r3, [r5, #12]
 8008fe8:	059a      	lsls	r2, r3, #22
 8008fea:	d402      	bmi.n	8008ff2 <_vfiprintf_r+0x1fe>
 8008fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fee:	f7fe f997 	bl	8007320 <__retarget_lock_release_recursive>
 8008ff2:	89ab      	ldrh	r3, [r5, #12]
 8008ff4:	065b      	lsls	r3, r3, #25
 8008ff6:	f53f af1f 	bmi.w	8008e38 <_vfiprintf_r+0x44>
 8008ffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ffc:	e71e      	b.n	8008e3c <_vfiprintf_r+0x48>
 8008ffe:	ab03      	add	r3, sp, #12
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	462a      	mov	r2, r5
 8009004:	4b05      	ldr	r3, [pc, #20]	@ (800901c <_vfiprintf_r+0x228>)
 8009006:	a904      	add	r1, sp, #16
 8009008:	4630      	mov	r0, r6
 800900a:	f7fd fec5 	bl	8006d98 <_printf_i>
 800900e:	e7e4      	b.n	8008fda <_vfiprintf_r+0x1e6>
 8009010:	080098d8 	.word	0x080098d8
 8009014:	080098e2 	.word	0x080098e2
 8009018:	08006889 	.word	0x08006889
 800901c:	08008dd1 	.word	0x08008dd1
 8009020:	080098de 	.word	0x080098de

08009024 <__swbuf_r>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	460e      	mov	r6, r1
 8009028:	4614      	mov	r4, r2
 800902a:	4605      	mov	r5, r0
 800902c:	b118      	cbz	r0, 8009036 <__swbuf_r+0x12>
 800902e:	6a03      	ldr	r3, [r0, #32]
 8009030:	b90b      	cbnz	r3, 8009036 <__swbuf_r+0x12>
 8009032:	f7fe f85d 	bl	80070f0 <__sinit>
 8009036:	69a3      	ldr	r3, [r4, #24]
 8009038:	60a3      	str	r3, [r4, #8]
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	071a      	lsls	r2, r3, #28
 800903e:	d501      	bpl.n	8009044 <__swbuf_r+0x20>
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	b943      	cbnz	r3, 8009056 <__swbuf_r+0x32>
 8009044:	4621      	mov	r1, r4
 8009046:	4628      	mov	r0, r5
 8009048:	f000 f82a 	bl	80090a0 <__swsetup_r>
 800904c:	b118      	cbz	r0, 8009056 <__swbuf_r+0x32>
 800904e:	f04f 37ff 	mov.w	r7, #4294967295
 8009052:	4638      	mov	r0, r7
 8009054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	6922      	ldr	r2, [r4, #16]
 800905a:	1a98      	subs	r0, r3, r2
 800905c:	6963      	ldr	r3, [r4, #20]
 800905e:	b2f6      	uxtb	r6, r6
 8009060:	4283      	cmp	r3, r0
 8009062:	4637      	mov	r7, r6
 8009064:	dc05      	bgt.n	8009072 <__swbuf_r+0x4e>
 8009066:	4621      	mov	r1, r4
 8009068:	4628      	mov	r0, r5
 800906a:	f7ff fd99 	bl	8008ba0 <_fflush_r>
 800906e:	2800      	cmp	r0, #0
 8009070:	d1ed      	bne.n	800904e <__swbuf_r+0x2a>
 8009072:	68a3      	ldr	r3, [r4, #8]
 8009074:	3b01      	subs	r3, #1
 8009076:	60a3      	str	r3, [r4, #8]
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	6022      	str	r2, [r4, #0]
 800907e:	701e      	strb	r6, [r3, #0]
 8009080:	6962      	ldr	r2, [r4, #20]
 8009082:	1c43      	adds	r3, r0, #1
 8009084:	429a      	cmp	r2, r3
 8009086:	d004      	beq.n	8009092 <__swbuf_r+0x6e>
 8009088:	89a3      	ldrh	r3, [r4, #12]
 800908a:	07db      	lsls	r3, r3, #31
 800908c:	d5e1      	bpl.n	8009052 <__swbuf_r+0x2e>
 800908e:	2e0a      	cmp	r6, #10
 8009090:	d1df      	bne.n	8009052 <__swbuf_r+0x2e>
 8009092:	4621      	mov	r1, r4
 8009094:	4628      	mov	r0, r5
 8009096:	f7ff fd83 	bl	8008ba0 <_fflush_r>
 800909a:	2800      	cmp	r0, #0
 800909c:	d0d9      	beq.n	8009052 <__swbuf_r+0x2e>
 800909e:	e7d6      	b.n	800904e <__swbuf_r+0x2a>

080090a0 <__swsetup_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4b29      	ldr	r3, [pc, #164]	@ (8009148 <__swsetup_r+0xa8>)
 80090a4:	4605      	mov	r5, r0
 80090a6:	6818      	ldr	r0, [r3, #0]
 80090a8:	460c      	mov	r4, r1
 80090aa:	b118      	cbz	r0, 80090b4 <__swsetup_r+0x14>
 80090ac:	6a03      	ldr	r3, [r0, #32]
 80090ae:	b90b      	cbnz	r3, 80090b4 <__swsetup_r+0x14>
 80090b0:	f7fe f81e 	bl	80070f0 <__sinit>
 80090b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b8:	0719      	lsls	r1, r3, #28
 80090ba:	d422      	bmi.n	8009102 <__swsetup_r+0x62>
 80090bc:	06da      	lsls	r2, r3, #27
 80090be:	d407      	bmi.n	80090d0 <__swsetup_r+0x30>
 80090c0:	2209      	movs	r2, #9
 80090c2:	602a      	str	r2, [r5, #0]
 80090c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090c8:	81a3      	strh	r3, [r4, #12]
 80090ca:	f04f 30ff 	mov.w	r0, #4294967295
 80090ce:	e033      	b.n	8009138 <__swsetup_r+0x98>
 80090d0:	0758      	lsls	r0, r3, #29
 80090d2:	d512      	bpl.n	80090fa <__swsetup_r+0x5a>
 80090d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090d6:	b141      	cbz	r1, 80090ea <__swsetup_r+0x4a>
 80090d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090dc:	4299      	cmp	r1, r3
 80090de:	d002      	beq.n	80090e6 <__swsetup_r+0x46>
 80090e0:	4628      	mov	r0, r5
 80090e2:	f7fe feff 	bl	8007ee4 <_free_r>
 80090e6:	2300      	movs	r3, #0
 80090e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80090f0:	81a3      	strh	r3, [r4, #12]
 80090f2:	2300      	movs	r3, #0
 80090f4:	6063      	str	r3, [r4, #4]
 80090f6:	6923      	ldr	r3, [r4, #16]
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	f043 0308 	orr.w	r3, r3, #8
 8009100:	81a3      	strh	r3, [r4, #12]
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	b94b      	cbnz	r3, 800911a <__swsetup_r+0x7a>
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800910c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009110:	d003      	beq.n	800911a <__swsetup_r+0x7a>
 8009112:	4621      	mov	r1, r4
 8009114:	4628      	mov	r0, r5
 8009116:	f000 f883 	bl	8009220 <__smakebuf_r>
 800911a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800911e:	f013 0201 	ands.w	r2, r3, #1
 8009122:	d00a      	beq.n	800913a <__swsetup_r+0x9a>
 8009124:	2200      	movs	r2, #0
 8009126:	60a2      	str	r2, [r4, #8]
 8009128:	6962      	ldr	r2, [r4, #20]
 800912a:	4252      	negs	r2, r2
 800912c:	61a2      	str	r2, [r4, #24]
 800912e:	6922      	ldr	r2, [r4, #16]
 8009130:	b942      	cbnz	r2, 8009144 <__swsetup_r+0xa4>
 8009132:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009136:	d1c5      	bne.n	80090c4 <__swsetup_r+0x24>
 8009138:	bd38      	pop	{r3, r4, r5, pc}
 800913a:	0799      	lsls	r1, r3, #30
 800913c:	bf58      	it	pl
 800913e:	6962      	ldrpl	r2, [r4, #20]
 8009140:	60a2      	str	r2, [r4, #8]
 8009142:	e7f4      	b.n	800912e <__swsetup_r+0x8e>
 8009144:	2000      	movs	r0, #0
 8009146:	e7f7      	b.n	8009138 <__swsetup_r+0x98>
 8009148:	20000018 	.word	0x20000018

0800914c <_raise_r>:
 800914c:	291f      	cmp	r1, #31
 800914e:	b538      	push	{r3, r4, r5, lr}
 8009150:	4605      	mov	r5, r0
 8009152:	460c      	mov	r4, r1
 8009154:	d904      	bls.n	8009160 <_raise_r+0x14>
 8009156:	2316      	movs	r3, #22
 8009158:	6003      	str	r3, [r0, #0]
 800915a:	f04f 30ff 	mov.w	r0, #4294967295
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009162:	b112      	cbz	r2, 800916a <_raise_r+0x1e>
 8009164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009168:	b94b      	cbnz	r3, 800917e <_raise_r+0x32>
 800916a:	4628      	mov	r0, r5
 800916c:	f000 f830 	bl	80091d0 <_getpid_r>
 8009170:	4622      	mov	r2, r4
 8009172:	4601      	mov	r1, r0
 8009174:	4628      	mov	r0, r5
 8009176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800917a:	f000 b817 	b.w	80091ac <_kill_r>
 800917e:	2b01      	cmp	r3, #1
 8009180:	d00a      	beq.n	8009198 <_raise_r+0x4c>
 8009182:	1c59      	adds	r1, r3, #1
 8009184:	d103      	bne.n	800918e <_raise_r+0x42>
 8009186:	2316      	movs	r3, #22
 8009188:	6003      	str	r3, [r0, #0]
 800918a:	2001      	movs	r0, #1
 800918c:	e7e7      	b.n	800915e <_raise_r+0x12>
 800918e:	2100      	movs	r1, #0
 8009190:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009194:	4620      	mov	r0, r4
 8009196:	4798      	blx	r3
 8009198:	2000      	movs	r0, #0
 800919a:	e7e0      	b.n	800915e <_raise_r+0x12>

0800919c <raise>:
 800919c:	4b02      	ldr	r3, [pc, #8]	@ (80091a8 <raise+0xc>)
 800919e:	4601      	mov	r1, r0
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	f7ff bfd3 	b.w	800914c <_raise_r>
 80091a6:	bf00      	nop
 80091a8:	20000018 	.word	0x20000018

080091ac <_kill_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4d07      	ldr	r5, [pc, #28]	@ (80091cc <_kill_r+0x20>)
 80091b0:	2300      	movs	r3, #0
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	602b      	str	r3, [r5, #0]
 80091ba:	f7f8 fac6 	bl	800174a <_kill>
 80091be:	1c43      	adds	r3, r0, #1
 80091c0:	d102      	bne.n	80091c8 <_kill_r+0x1c>
 80091c2:	682b      	ldr	r3, [r5, #0]
 80091c4:	b103      	cbz	r3, 80091c8 <_kill_r+0x1c>
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	bd38      	pop	{r3, r4, r5, pc}
 80091ca:	bf00      	nop
 80091cc:	20000e2c 	.word	0x20000e2c

080091d0 <_getpid_r>:
 80091d0:	f7f8 bab3 	b.w	800173a <_getpid>

080091d4 <__swhatbuf_r>:
 80091d4:	b570      	push	{r4, r5, r6, lr}
 80091d6:	460c      	mov	r4, r1
 80091d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091dc:	2900      	cmp	r1, #0
 80091de:	b096      	sub	sp, #88	@ 0x58
 80091e0:	4615      	mov	r5, r2
 80091e2:	461e      	mov	r6, r3
 80091e4:	da0d      	bge.n	8009202 <__swhatbuf_r+0x2e>
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091ec:	f04f 0100 	mov.w	r1, #0
 80091f0:	bf14      	ite	ne
 80091f2:	2340      	movne	r3, #64	@ 0x40
 80091f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091f8:	2000      	movs	r0, #0
 80091fa:	6031      	str	r1, [r6, #0]
 80091fc:	602b      	str	r3, [r5, #0]
 80091fe:	b016      	add	sp, #88	@ 0x58
 8009200:	bd70      	pop	{r4, r5, r6, pc}
 8009202:	466a      	mov	r2, sp
 8009204:	f000 f848 	bl	8009298 <_fstat_r>
 8009208:	2800      	cmp	r0, #0
 800920a:	dbec      	blt.n	80091e6 <__swhatbuf_r+0x12>
 800920c:	9901      	ldr	r1, [sp, #4]
 800920e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009212:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009216:	4259      	negs	r1, r3
 8009218:	4159      	adcs	r1, r3
 800921a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800921e:	e7eb      	b.n	80091f8 <__swhatbuf_r+0x24>

08009220 <__smakebuf_r>:
 8009220:	898b      	ldrh	r3, [r1, #12]
 8009222:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009224:	079d      	lsls	r5, r3, #30
 8009226:	4606      	mov	r6, r0
 8009228:	460c      	mov	r4, r1
 800922a:	d507      	bpl.n	800923c <__smakebuf_r+0x1c>
 800922c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	6123      	str	r3, [r4, #16]
 8009234:	2301      	movs	r3, #1
 8009236:	6163      	str	r3, [r4, #20]
 8009238:	b003      	add	sp, #12
 800923a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800923c:	ab01      	add	r3, sp, #4
 800923e:	466a      	mov	r2, sp
 8009240:	f7ff ffc8 	bl	80091d4 <__swhatbuf_r>
 8009244:	9f00      	ldr	r7, [sp, #0]
 8009246:	4605      	mov	r5, r0
 8009248:	4639      	mov	r1, r7
 800924a:	4630      	mov	r0, r6
 800924c:	f7fe febe 	bl	8007fcc <_malloc_r>
 8009250:	b948      	cbnz	r0, 8009266 <__smakebuf_r+0x46>
 8009252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009256:	059a      	lsls	r2, r3, #22
 8009258:	d4ee      	bmi.n	8009238 <__smakebuf_r+0x18>
 800925a:	f023 0303 	bic.w	r3, r3, #3
 800925e:	f043 0302 	orr.w	r3, r3, #2
 8009262:	81a3      	strh	r3, [r4, #12]
 8009264:	e7e2      	b.n	800922c <__smakebuf_r+0xc>
 8009266:	89a3      	ldrh	r3, [r4, #12]
 8009268:	6020      	str	r0, [r4, #0]
 800926a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800926e:	81a3      	strh	r3, [r4, #12]
 8009270:	9b01      	ldr	r3, [sp, #4]
 8009272:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009276:	b15b      	cbz	r3, 8009290 <__smakebuf_r+0x70>
 8009278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800927c:	4630      	mov	r0, r6
 800927e:	f000 f81d 	bl	80092bc <_isatty_r>
 8009282:	b128      	cbz	r0, 8009290 <__smakebuf_r+0x70>
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	f023 0303 	bic.w	r3, r3, #3
 800928a:	f043 0301 	orr.w	r3, r3, #1
 800928e:	81a3      	strh	r3, [r4, #12]
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	431d      	orrs	r5, r3
 8009294:	81a5      	strh	r5, [r4, #12]
 8009296:	e7cf      	b.n	8009238 <__smakebuf_r+0x18>

08009298 <_fstat_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d07      	ldr	r5, [pc, #28]	@ (80092b8 <_fstat_r+0x20>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	4611      	mov	r1, r2
 80092a4:	602b      	str	r3, [r5, #0]
 80092a6:	f7f8 fab0 	bl	800180a <_fstat>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	d102      	bne.n	80092b4 <_fstat_r+0x1c>
 80092ae:	682b      	ldr	r3, [r5, #0]
 80092b0:	b103      	cbz	r3, 80092b4 <_fstat_r+0x1c>
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	bd38      	pop	{r3, r4, r5, pc}
 80092b6:	bf00      	nop
 80092b8:	20000e2c 	.word	0x20000e2c

080092bc <_isatty_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4d06      	ldr	r5, [pc, #24]	@ (80092d8 <_isatty_r+0x1c>)
 80092c0:	2300      	movs	r3, #0
 80092c2:	4604      	mov	r4, r0
 80092c4:	4608      	mov	r0, r1
 80092c6:	602b      	str	r3, [r5, #0]
 80092c8:	f7f8 faaf 	bl	800182a <_isatty>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d102      	bne.n	80092d6 <_isatty_r+0x1a>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	b103      	cbz	r3, 80092d6 <_isatty_r+0x1a>
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	20000e2c 	.word	0x20000e2c

080092dc <_init>:
 80092dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092de:	bf00      	nop
 80092e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e2:	bc08      	pop	{r3}
 80092e4:	469e      	mov	lr, r3
 80092e6:	4770      	bx	lr

080092e8 <_fini>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	bf00      	nop
 80092ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ee:	bc08      	pop	{r3}
 80092f0:	469e      	mov	lr, r3
 80092f2:	4770      	bx	lr
