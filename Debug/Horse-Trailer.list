
Horse-Trailer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b64  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002028  08009d68  08009d68  0000ad68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd90  0800bd90  0000d314  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd90  0800bd90  0000cd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd98  0800bd98  0000d314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bd98  0800bd98  0000cd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800bda0  0800bda0  0000cda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bda8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  0800bf7c  0000d1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  0800c01c  0000d274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000bb0  20000314  0800c0bc  0000d314  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000ec4  0800c0bc  0000dec4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000d314  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a832  00000000  00000000  0000d342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000037d6  00000000  00000000  00027b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001320  00000000  00000000  0002b350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ebe  00000000  00000000  0002c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e637  00000000  00000000  0002d52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019b89  00000000  00000000  0005bb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00109209  00000000  00000000  000756ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017e8f7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006394  00000000  00000000  0017e93c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006e  00000000  00000000  00184cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	08009d4c 	.word	0x08009d4c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	08009d4c 	.word	0x08009d4c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <_ZN20DFRobot_OxygenSensorC1EP19__I2C_HandleTypeDef>:
 * @date 2022-08-02
 * @url https://github.com/DFRobot/DFRobot_OxygenSensor
 */
#include "DFRobot_OxygenSensor.h"

DFRobot_OxygenSensor::DFRobot_OxygenSensor(I2C_HandleTypeDef *pI2C) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f04f 0200 	mov.w	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	330c      	adds	r3, #12
 80005f6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f007 fb48 	bl	8007c92 <memset>
	this->_pI2C = pI2C;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	601a      	str	r2, [r3, #0]
}
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <_ZN20DFRobot_OxygenSensorD1Ev>:

DFRobot_OxygenSensor::~DFRobot_OxygenSensor() {
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
	this->_pI2C = NULL;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
}
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <_ZN20DFRobot_OxygenSensor5beginEh>:

bool DFRobot_OxygenSensor::begin(uint8_t addr) {
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	460b      	mov	r3, r1
 8000638:	70fb      	strb	r3, [r7, #3]
	this->_addr = addr;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	78fa      	ldrb	r2, [r7, #3]
 800063e:	711a      	strb	r2, [r3, #4]
	if (HAL_I2C_IsDeviceReady(_pI2C, _addr << 1, 3, HAL_MAX_DELAY) == HAL_OK) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	b299      	uxth	r1, r3
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	2203      	movs	r2, #3
 8000652:	f003 f905 	bl	8003860 <HAL_I2C_IsDeviceReady>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	bf0c      	ite	eq
 800065c:	2301      	moveq	r3, #1
 800065e:	2300      	movne	r3, #0
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <_ZN20DFRobot_OxygenSensor5beginEh+0x3c>
		return true;
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <_ZN20DFRobot_OxygenSensor5beginEh+0x3e>
	}
	return false;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <_ZN20DFRobot_OxygenSensor9readFlashEv>:

void DFRobot_OxygenSensor::readFlash() {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	6078      	str	r0, [r7, #4]
	uint8_t value = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	73fb      	strb	r3, [r7, #15]
	uint8_t reg = GET_KEY_REGISTER;
 8000680:	230a      	movs	r3, #10
 8000682:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(_pI2C, _addr << 1, &reg, 1, HAL_MAX_DELAY);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	b299      	uxth	r1, r3
 8000690:	f107 020e 	add.w	r2, r7, #14
 8000694:	f04f 33ff 	mov.w	r3, #4294967295
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	f002 fed2 	bl	8003444 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80006a0:	2032      	movs	r0, #50	@ 0x32
 80006a2:	f001 fbe7 	bl	8001e74 <HAL_Delay>

	HAL_I2C_Master_Receive(_pI2C, _addr << 1, &value, 1, HAL_MAX_DELAY);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	b299      	uxth	r1, r3
 80006b2:	f107 020f 	add.w	r2, r7, #15
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	f002 ffd9 	bl	8003674 <HAL_I2C_Master_Receive>

	if (value == 0) {
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d103      	bne.n	80006d0 <_ZN20DFRobot_OxygenSensor9readFlashEv+0x5c>
		this->_Key = 20.9 / 120.0;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a09      	ldr	r2, [pc, #36]	@ (80006f0 <_ZN20DFRobot_OxygenSensor9readFlashEv+0x7c>)
 80006cc:	609a      	str	r2, [r3, #8]
	} else {
		this->_Key = (float) value / 1000.0;
	}

}
 80006ce:	e00b      	b.n	80006e8 <_ZN20DFRobot_OxygenSensor9readFlashEv+0x74>
		this->_Key = (float) value / 1000.0;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	ee07 3a90 	vmov	s15, r3
 80006d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006da:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80006f4 <_ZN20DFRobot_OxygenSensor9readFlashEv+0x80>
 80006de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	3e3258bf 	.word	0x3e3258bf
 80006f4:	447a0000 	.word	0x447a0000

080006f8 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh>:
		keyValue = (vol / mv) * 1000;
		i2cWrite(AUTUAL_SET_REGISTER, keyValue);
	}
}

float DFRobot_OxygenSensor::getOxygenData(uint8_t collectNum) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
	uint8_t rxbuf[3] = { 0 };
 8000704:	4b4e      	ldr	r3, [pc, #312]	@ (8000840 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x148>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	81bb      	strh	r3, [r7, #12]
 800070a:	2300      	movs	r3, #0
 800070c:	73bb      	strb	r3, [r7, #14]
	uint8_t reg = OXYGEN_DATA_REGISTER;
 800070e:	2303      	movs	r3, #3
 8000710:	72fb      	strb	r3, [r7, #11]
	static uint8_t i = 0, j = 0;

	readFlash();
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ffae 	bl	8000674 <_ZN20DFRobot_OxygenSensor9readFlashEv>

	if (collectNum > 0) {
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	2b00      	cmp	r3, #0
 800071c:	f000 8084 	beq.w	8000828 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x130>

		for (j = collectNum - 1; j > 0; j--) {
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	3b01      	subs	r3, #1
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b47      	ldr	r3, [pc, #284]	@ (8000844 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x14c>)
 8000728:	701a      	strb	r2, [r3, #0]
 800072a:	e017      	b.n	800075c <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x64>
			oxygenData[j] = oxygenData[j - 1];
 800072c:	4b45      	ldr	r3, [pc, #276]	@ (8000844 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x14c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3b01      	subs	r3, #1
 8000732:	4a44      	ldr	r2, [pc, #272]	@ (8000844 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x14c>)
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	4610      	mov	r0, r2
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	3302      	adds	r3, #2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	3304      	adds	r3, #4
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	1c83      	adds	r3, r0, #2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	440b      	add	r3, r1
 800074c:	3304      	adds	r3, #4
 800074e:	601a      	str	r2, [r3, #0]
		for (j = collectNum - 1; j > 0; j--) {
 8000750:	4b3c      	ldr	r3, [pc, #240]	@ (8000844 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x14c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	3b01      	subs	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b3a      	ldr	r3, [pc, #232]	@ (8000844 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x14c>)
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	4b39      	ldr	r3, [pc, #228]	@ (8000844 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x14c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1e3      	bne.n	800072c <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x34>
		}
		HAL_I2C_Master_Transmit(_pI2C, _addr << 1, &reg, 1, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	b299      	uxth	r1, r3
 8000770:	f107 020b 	add.w	r2, r7, #11
 8000774:	f04f 33ff 	mov.w	r3, #4294967295
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2301      	movs	r3, #1
 800077c:	f002 fe62 	bl	8003444 <HAL_I2C_Master_Transmit>
		HAL_Delay(100);
 8000780:	2064      	movs	r0, #100	@ 0x64
 8000782:	f001 fb77 	bl	8001e74 <HAL_Delay>
		HAL_I2C_Master_Receive(_pI2C, _addr << 1, rxbuf, 3, HAL_MAX_DELAY);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	b299      	uxth	r1, r3
 8000792:	f107 020c 	add.w	r2, r7, #12
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2303      	movs	r3, #3
 800079e:	f002 ff69 	bl	8003674 <HAL_I2C_Master_Receive>

		oxygenData[0] = (_Key)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80007a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
				* (((float) rxbuf[0]) + ((float) rxbuf[1] / 10.0)
 80007ac:	7b3b      	ldrb	r3, [r7, #12]
 80007ae:	ee07 3a90 	vmov	s15, r3
 80007b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80007ba:	7b7b      	ldrb	r3, [r7, #13]
 80007bc:	ee07 3a90 	vmov	s15, r3
 80007c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007c4:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80007c8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80007cc:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80007d0:	ee35 5b07 	vadd.f64	d5, d5, d7
						+ ((float) rxbuf[2] / 100.0));
 80007d4:	7bbb      	ldrb	r3, [r7, #14]
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007de:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80007e2:	ed9f 3b15 	vldr	d3, [pc, #84]	@ 8000838 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x140>
 80007e6:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80007ea:	ee35 7b07 	vadd.f64	d7, d5, d7
				* (((float) rxbuf[0]) + ((float) rxbuf[1] / 10.0)
 80007ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		oxygenData[0] = (_Key)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	edc3 7a03 	vstr	s15, [r3, #12]

		if (i < collectNum)
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x150>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	78fa      	ldrb	r2, [r7, #3]
 8000802:	429a      	cmp	r2, r3
 8000804:	d905      	bls.n	8000812 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x11a>
			i++;
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x150>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x150>)
 8000810:	701a      	strb	r2, [r3, #0]
		return getAverageNum(oxygenData, i);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	330c      	adds	r3, #12
 8000816:	4a0c      	ldr	r2, [pc, #48]	@ (8000848 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x150>)
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f000 f815 	bl	800084c <_ZN20DFRobot_OxygenSensor13getAverageNumEPfh>
 8000822:	eef0 7a40 	vmov.f32	s15, s0
 8000826:	e001      	b.n	800082c <_ZN20DFRobot_OxygenSensor13getOxygenDataEh+0x134>
	} else {
		return -1.0;
 8000828:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
	}
}
 800082c:	eeb0 0a67 	vmov.f32	s0, s15
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	00000000 	.word	0x00000000
 800083c:	40590000 	.word	0x40590000
 8000840:	08009d68 	.word	0x08009d68
 8000844:	20000331 	.word	0x20000331
 8000848:	20000330 	.word	0x20000330

0800084c <_ZN20DFRobot_OxygenSensor13getAverageNumEPfh>:

float DFRobot_OxygenSensor::getAverageNum(float bArray[], uint8_t len) {
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	@ 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	4613      	mov	r3, r2
 8000858:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	double bTemp = 0;
 800085a:	f04f 0200 	mov.w	r2, #0
 800085e:	f04f 0300 	mov.w	r3, #0
 8000862:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (i = 0; i < len; i++) {
 8000866:	2300      	movs	r3, #0
 8000868:	77fb      	strb	r3, [r7, #31]
 800086a:	e010      	b.n	800088e <_ZN20DFRobot_OxygenSensor13getAverageNumEPfh+0x42>
		bTemp += bArray[i];
 800086c:	7ffb      	ldrb	r3, [r7, #31]
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	68ba      	ldr	r2, [r7, #8]
 8000872:	4413      	add	r3, r2
 8000874:	edd3 7a00 	vldr	s15, [r3]
 8000878:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800087c:	ed97 6b04 	vldr	d6, [r7, #16]
 8000880:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000884:	ed87 7b04 	vstr	d7, [r7, #16]
	for (i = 0; i < len; i++) {
 8000888:	7ffb      	ldrb	r3, [r7, #31]
 800088a:	3301      	adds	r3, #1
 800088c:	77fb      	strb	r3, [r7, #31]
 800088e:	7ffa      	ldrb	r2, [r7, #31]
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	429a      	cmp	r2, r3
 8000894:	d3ea      	bcc.n	800086c <_ZN20DFRobot_OxygenSensor13getAverageNumEPfh+0x20>
	}
	return bTemp / (float) len;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	ee07 3a90 	vmov	s15, r3
 800089c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008a4:	ed97 5b04 	vldr	d5, [r7, #16]
 80008a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80008b0:	eeb0 0a67 	vmov.f32	s0, s15
 80008b4:	3724      	adds	r7, #36	@ 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <_ZN5SCD30C1EP19__I2C_HandleTypeDef>:
    THE SOFTWARE.
*/

#include "SCD30.h"

SCD30::SCD30(I2C_HandleTypeDef *hi2c) {
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	6039      	str	r1, [r7, #0]
    this->_hi2c = hi2c;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	601a      	str	r2, [r3, #0]
}
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <_ZN5SCD305beginEv>:

bool SCD30::begin() {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    if (HAL_I2C_IsDeviceReady(_hi2c, SCD30_I2C_ADDRESS << 1, 3, HAL_MAX_DELAY) == HAL_OK) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	2203      	movs	r2, #3
 80008ee:	21c2      	movs	r1, #194	@ 0xc2
 80008f0:	f002 ffb6 	bl	8003860 <HAL_I2C_IsDeviceReady>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	bf0c      	ite	eq
 80008fa:	2301      	moveq	r3, #1
 80008fc:	2300      	movne	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d005      	beq.n	8000910 <_ZN5SCD305beginEv+0x34>
        setAutoSelfCalibration(true);
 8000904:	2101      	movs	r1, #1
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 f807 	bl	800091a <_ZN5SCD3022setAutoSelfCalibrationEb>
        return true;
 800090c:	2301      	movs	r3, #1
 800090e:	e000      	b.n	8000912 <_ZN5SCD305beginEv+0x36>
    }
    return false;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <_ZN5SCD3022setAutoSelfCalibrationEb>:

bool SCD30::isAvailable() {
    return readRegister(SCD30_GET_DATA_READY);
}

void SCD30::setAutoSelfCalibration(bool enable) {
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	70fb      	strb	r3, [r7, #3]
    writeCommandWithArguments(SCD30_AUTOMATIC_SELF_CALIBRATION, enable ? 1 : 0);
 8000926:	78fb      	ldrb	r3, [r7, #3]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <_ZN5SCD3022setAutoSelfCalibrationEb+0x16>
 800092c:	2301      	movs	r3, #1
 800092e:	e000      	b.n	8000932 <_ZN5SCD3022setAutoSelfCalibrationEb+0x18>
 8000930:	2300      	movs	r3, #0
 8000932:	461a      	mov	r2, r3
 8000934:	f245 3106 	movw	r1, #21254	@ 0x5306
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 f822 	bl	8000982 <_ZN5SCD3025writeCommandWithArgumentsEtt>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <_ZN5SCD3022setMeasurementIntervalEt>:

void SCD30::setMeasurementInterval(uint16_t interval) {
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	460b      	mov	r3, r1
 8000950:	807b      	strh	r3, [r7, #2]
    writeCommandWithArguments(SCD30_SET_MEASUREMENT_INTERVAL, interval);
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	461a      	mov	r2, r3
 8000956:	f44f 418c 	mov.w	r1, #17920	@ 0x4600
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f811 	bl	8000982 <_ZN5SCD3025writeCommandWithArgumentsEtt>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <_ZN5SCD3024startPeriodicMeasurementEv>:

void SCD30::startPeriodicMeasurement() {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    writeCommandWithArguments(SCD30_CONTINUOUS_MEASUREMENT, 0x0000);
 8000970:	2200      	movs	r2, #0
 8000972:	2110      	movs	r1, #16
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f000 f804 	bl	8000982 <_ZN5SCD3025writeCommandWithArgumentsEtt>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <_ZN5SCD3025writeCommandWithArgumentsEtt>:
void SCD30::writeCommand(uint16_t command) {
    uint8_t buf[2] = {static_cast<uint8_t>(command >> 8), static_cast<uint8_t>(command & 0xFF)};
    HAL_I2C_Master_Transmit(_hi2c, SCD30_I2C_ADDRESS << 1, buf, 2, HAL_MAX_DELAY);
}

void SCD30::writeCommandWithArguments(uint16_t command, uint16_t arguments) {
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af02      	add	r7, sp, #8
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	460b      	mov	r3, r1
 800098c:	807b      	strh	r3, [r7, #2]
 800098e:	4613      	mov	r3, r2
 8000990:	803b      	strh	r3, [r7, #0]
    uint8_t buf[5] = {
        static_cast<uint8_t>(command >> 8),
 8000992:	887b      	ldrh	r3, [r7, #2]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b29b      	uxth	r3, r3
        static_cast<uint8_t>(command & 0xFF),
        static_cast<uint8_t>(arguments >> 8),
        static_cast<uint8_t>(arguments & 0xFF),
        calculateCrc(reinterpret_cast<uint8_t *>(&arguments), 2)
    };
 8000998:	b2db      	uxtb	r3, r3
 800099a:	723b      	strb	r3, [r7, #8]
 800099c:	887b      	ldrh	r3, [r7, #2]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	727b      	strb	r3, [r7, #9]
        static_cast<uint8_t>(arguments >> 8),
 80009a2:	883b      	ldrh	r3, [r7, #0]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	b29b      	uxth	r3, r3
    };
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	72bb      	strb	r3, [r7, #10]
 80009ac:	883b      	ldrh	r3, [r7, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	72fb      	strb	r3, [r7, #11]
        calculateCrc(reinterpret_cast<uint8_t *>(&arguments), 2)
 80009b2:	463b      	mov	r3, r7
 80009b4:	2202      	movs	r2, #2
 80009b6:	4619      	mov	r1, r3
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 f811 	bl	80009e0 <_ZN5SCD3012calculateCrcEPhh>
 80009be:	4603      	mov	r3, r0
    };
 80009c0:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(_hi2c, SCD30_I2C_ADDRESS << 1, buf, 5, HAL_MAX_DELAY);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6818      	ldr	r0, [r3, #0]
 80009c6:	f107 0208 	add.w	r2, r7, #8
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2305      	movs	r3, #5
 80009d2:	21c2      	movs	r1, #194	@ 0xc2
 80009d4:	f002 fd36 	bl	8003444 <HAL_I2C_Master_Transmit>
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <_ZN5SCD3012calculateCrcEPhh>:
    writeCommand(address);
    HAL_I2C_Master_Receive(_hi2c, SCD30_I2C_ADDRESS << 1, buf, 2, HAL_MAX_DELAY);
    return (buf[0] << 8) | buf[1];
}

uint8_t SCD30::calculateCrc(uint8_t *data, uint8_t len) {
 80009e0:	b480      	push	{r7}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	4613      	mov	r3, r2
 80009ec:	71fb      	strb	r3, [r7, #7]
    uint8_t crc = 0xFF;
 80009ee:	23ff      	movs	r3, #255	@ 0xff
 80009f0:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < len; i++) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	75bb      	strb	r3, [r7, #22]
 80009f6:	e022      	b.n	8000a3e <_ZN5SCD3012calculateCrcEPhh+0x5e>
        crc ^= data[i];
 80009f8:	7dbb      	ldrb	r3, [r7, #22]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	7dfb      	ldrb	r3, [r7, #23]
 8000a02:	4053      	eors	r3, r2
 8000a04:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) {
 8000a06:	2300      	movs	r3, #0
 8000a08:	757b      	strb	r3, [r7, #21]
 8000a0a:	e012      	b.n	8000a32 <_ZN5SCD3012calculateCrcEPhh+0x52>
            crc = (crc & 0x80) ? (crc << 1) ^ SCD30_POLYNOMIAL : (crc << 1);
 8000a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	da07      	bge.n	8000a24 <_ZN5SCD3012calculateCrcEPhh+0x44>
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	e002      	b.n	8000a2a <_ZN5SCD3012calculateCrcEPhh+0x4a>
 8000a24:	7dfb      	ldrb	r3, [r7, #23]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) {
 8000a2c:	7d7b      	ldrb	r3, [r7, #21]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	757b      	strb	r3, [r7, #21]
 8000a32:	7d7b      	ldrb	r3, [r7, #21]
 8000a34:	2b07      	cmp	r3, #7
 8000a36:	d9e9      	bls.n	8000a0c <_ZN5SCD3012calculateCrcEPhh+0x2c>
    for (uint8_t i = 0; i < len; i++) {
 8000a38:	7dbb      	ldrb	r3, [r7, #22]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	75bb      	strb	r3, [r7, #22]
 8000a3e:	7dba      	ldrb	r2, [r7, #22]
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d3d8      	bcc.n	80009f8 <_ZN5SCD3012calculateCrcEPhh+0x18>
        }
    }
    return crc;
 8000a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	371c      	adds	r7, #28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	0000      	movs	r0, r0
	...

08000a58 <_Z10measure_COv>:
const float RL = 9.62;  // Measured value of the pull-up resistor (10 kΩ)
const float R0 = 1.0; // Needs to be calibrated in fresh air

// UART5 - communication with USB-UART converter and PC app

void measure_CO(void){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000a5e:	4836      	ldr	r0, [pc, #216]	@ (8000b38 <_Z10measure_COv+0xe0>)
 8000a60:	f001 fa70 	bl	8001f44 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000a64:	2164      	movs	r1, #100	@ 0x64
 8000a66:	4834      	ldr	r0, [pc, #208]	@ (8000b38 <_Z10measure_COv+0xe0>)
 8000a68:	f001 fb6e 	bl	8002148 <HAL_ADC_PollForConversion>
	float COsenosorValue = HAL_ADC_GetValue(&hadc1);
 8000a6c:	4832      	ldr	r0, [pc, #200]	@ (8000b38 <_Z10measure_COv+0xe0>)
 8000a6e:	f001 fbf6 	bl	800225e <HAL_ADC_GetValue>
 8000a72:	ee07 0a90 	vmov	s15, r0
 8000a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a7a:	edc7 7a03 	vstr	s15, [r7, #12]
	HAL_ADC_Stop(&hadc1);
 8000a7e:	482e      	ldr	r0, [pc, #184]	@ (8000b38 <_Z10measure_COv+0xe0>)
 8000a80:	f001 fb2e 	bl	80020e0 <HAL_ADC_Stop>

	float Rs = ((1023.0 / COsenosorValue) - 1) * RL;
 8000a84:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a88:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a8c:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8000b20 <_Z10measure_COv+0xc8>
 8000a90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a94:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8000a98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a9c:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8000b28 <_Z10measure_COv+0xd0>
 8000aa0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000aa4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa8:	edc7 7a02 	vstr	s15, [r7, #8]
	float ratio = Rs/R0;
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	607b      	str	r3, [r7, #4]
	float ppm = powf(10, (log10f(ratio) - 1.7) / -1.5);
 8000ab0:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ab4:	f005 fddc 	bl	8006670 <log10f>
 8000ab8:	eef0 7a40 	vmov.f32	s15, s0
 8000abc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac0:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 8000b30 <_Z10measure_COv+0xd8>
 8000ac4:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000ac8:	eebf 5b08 	vmov.f64	d5, #248	@ 0xbfc00000 -1.5
 8000acc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ad0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ad4:	eef0 0a67 	vmov.f32	s1, s15
 8000ad8:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000adc:	f006 f89c 	bl	8006c18 <powf>
 8000ae0:	ed87 0a00 	vstr	s0, [r7]

	sprintf(buffer, "000%.4f\r\n", ppm);
 8000ae4:	edd7 7a00 	vldr	s15, [r7]
 8000ae8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aec:	ec53 2b17 	vmov	r2, r3, d7
 8000af0:	4912      	ldr	r1, [pc, #72]	@ (8000b3c <_Z10measure_COv+0xe4>)
 8000af2:	4813      	ldr	r0, [pc, #76]	@ (8000b40 <_Z10measure_COv+0xe8>)
 8000af4:	f007 f86a 	bl	8007bcc <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000af8:	4811      	ldr	r0, [pc, #68]	@ (8000b40 <_Z10measure_COv+0xe8>)
 8000afa:	f7ff fbf1 	bl	80002e0 <strlen>
 8000afe:	4603      	mov	r3, r0
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	490e      	ldr	r1, [pc, #56]	@ (8000b40 <_Z10measure_COv+0xe8>)
 8000b08:	480e      	ldr	r0, [pc, #56]	@ (8000b44 <_Z10measure_COv+0xec>)
 8000b0a:	f004 fdb7 	bl	800567c <HAL_UART_Transmit>
	memset(buffer, 0, sizeof(buffer));
 8000b0e:	2210      	movs	r2, #16
 8000b10:	2100      	movs	r1, #0
 8000b12:	480b      	ldr	r0, [pc, #44]	@ (8000b40 <_Z10measure_COv+0xe8>)
 8000b14:	f007 f8bd 	bl	8007c92 <memset>
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	00000000 	.word	0x00000000
 8000b24:	408ff800 	.word	0x408ff800
 8000b28:	a0000000 	.word	0xa0000000
 8000b2c:	40233d70 	.word	0x40233d70
 8000b30:	33333333 	.word	0x33333333
 8000b34:	3ffb3333 	.word	0x3ffb3333
 8000b38:	2000037c 	.word	0x2000037c
 8000b3c:	08009d6c 	.word	0x08009d6c
 8000b40:	20000334 	.word	0x20000334
 8000b44:	20000550 	.word	0x20000550

08000b48 <_Z10measure_O2v>:

void measure_O2(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	float oxygenConcentration = oxygenSensor.getOxygenData(10);
 8000b4e:	210a      	movs	r1, #10
 8000b50:	4811      	ldr	r0, [pc, #68]	@ (8000b98 <_Z10measure_O2v+0x50>)
 8000b52:	f7ff fdd1 	bl	80006f8 <_ZN20DFRobot_OxygenSensor13getOxygenDataEh>
 8000b56:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(buffer, "001%.4f\r\n", oxygenConcentration);
 8000b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b62:	ec53 2b17 	vmov	r2, r3, d7
 8000b66:	490d      	ldr	r1, [pc, #52]	@ (8000b9c <_Z10measure_O2v+0x54>)
 8000b68:	480d      	ldr	r0, [pc, #52]	@ (8000ba0 <_Z10measure_O2v+0x58>)
 8000b6a:	f007 f82f 	bl	8007bcc <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000b6e:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <_Z10measure_O2v+0x58>)
 8000b70:	f7ff fbb6 	bl	80002e0 <strlen>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	4908      	ldr	r1, [pc, #32]	@ (8000ba0 <_Z10measure_O2v+0x58>)
 8000b7e:	4809      	ldr	r0, [pc, #36]	@ (8000ba4 <_Z10measure_O2v+0x5c>)
 8000b80:	f004 fd7c 	bl	800567c <HAL_UART_Transmit>
	memset(buffer, 0, sizeof(buffer));
 8000b84:	2210      	movs	r2, #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <_Z10measure_O2v+0x58>)
 8000b8a:	f007 f882 	bl	8007c92 <memset>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000bc8 	.word	0x20000bc8
 8000b9c:	08009d78 	.word	0x08009d78
 8000ba0:	20000334 	.word	0x20000334
 8000ba4:	20000550 	.word	0x20000550

08000ba8 <_Z11measure_NOxv>:

void measure_NOx(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	ed2d 8b02 	vpush	{d8}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000bb2:	4841      	ldr	r0, [pc, #260]	@ (8000cb8 <_Z11measure_NOxv+0x110>)
 8000bb4:	f001 f9c6 	bl	8001f44 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000bb8:	2164      	movs	r1, #100	@ 0x64
 8000bba:	483f      	ldr	r0, [pc, #252]	@ (8000cb8 <_Z11measure_NOxv+0x110>)
 8000bbc:	f001 fac4 	bl	8002148 <HAL_ADC_PollForConversion>
	float NOxsensorValue = HAL_ADC_GetValue(&hadc1);
 8000bc0:	483d      	ldr	r0, [pc, #244]	@ (8000cb8 <_Z11measure_NOxv+0x110>)
 8000bc2:	f001 fb4c 	bl	800225e <HAL_ADC_GetValue>
 8000bc6:	ee07 0a90 	vmov	s15, r0
 8000bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bce:	edc7 7a03 	vstr	s15, [r7, #12]
	HAL_ADC_Stop(&hadc1);
 8000bd2:	4839      	ldr	r0, [pc, #228]	@ (8000cb8 <_Z11measure_NOxv+0x110>)
 8000bd4:	f001 fa84 	bl	80020e0 <HAL_ADC_Stop>

	float sensedVoltage = (NOxsensorValue / 1023.0) * 5.0;
 8000bd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bdc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000be0:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8000c90 <_Z11measure_NOxv+0xe8>
 8000be4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000be8:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8000bec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bf4:	edc7 7a02 	vstr	s15, [r7, #8]
	float output = pow(sensedVoltage, 3)*(-0.00130116)+pow(sensedVoltage, 2)*(0.03712166)
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	ed97 0a02 	vldr	s0, [r7, #8]
 8000bfe:	f000 f863 	bl	8000cc8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IDTplcvNS1_IT_XsrSt12__is_integerIS2_E7__valueEE6__typeELi0EcvNS1_IT0_XsrS3_IS7_E7__valueEE6__typeELi0EEXsrS3_ISB_E7__valueEE6__typeES2_S7_>
 8000c02:	eeb0 7b40 	vmov.f64	d7, d0
 8000c06:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8000c98 <_Z11measure_NOxv+0xf0>
 8000c0a:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000c0e:	2002      	movs	r0, #2
 8000c10:	ed97 0a02 	vldr	s0, [r7, #8]
 8000c14:	f000 f858 	bl	8000cc8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IDTplcvNS1_IT_XsrSt12__is_integerIS2_E7__valueEE6__typeELi0EcvNS1_IT0_XsrS3_IS7_E7__valueEE6__typeELi0EEXsrS3_ISB_E7__valueEE6__typeES2_S7_>
 8000c18:	eeb0 7b40 	vmov.f64	d7, d0
 8000c1c:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000ca0 <_Z11measure_NOxv+0xf8>
 8000c20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c24:	ee38 6b07 	vadd.f64	d6, d8, d7
			+sensedVoltage*(-0.42411996)+(-0.00329962);
 8000c28:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c30:	ed9f 5b1d 	vldr	d5, [pc, #116]	@ 8000ca8 <_Z11measure_NOxv+0x100>
 8000c34:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000c38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c3c:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8000cb0 <_Z11measure_NOxv+0x108>
 8000c40:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c48:	edc7 7a01 	vstr	s15, [r7, #4]
	sprintf(buffer, "002%.4f\r\n", output);
 8000c4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c54:	ec53 2b17 	vmov	r2, r3, d7
 8000c58:	4918      	ldr	r1, [pc, #96]	@ (8000cbc <_Z11measure_NOxv+0x114>)
 8000c5a:	4819      	ldr	r0, [pc, #100]	@ (8000cc0 <_Z11measure_NOxv+0x118>)
 8000c5c:	f006 ffb6 	bl	8007bcc <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c60:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <_Z11measure_NOxv+0x118>)
 8000c62:	f7ff fb3d 	bl	80002e0 <strlen>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	4914      	ldr	r1, [pc, #80]	@ (8000cc0 <_Z11measure_NOxv+0x118>)
 8000c70:	4814      	ldr	r0, [pc, #80]	@ (8000cc4 <_Z11measure_NOxv+0x11c>)
 8000c72:	f004 fd03 	bl	800567c <HAL_UART_Transmit>
	memset(buffer, 0, sizeof(buffer));
 8000c76:	2210      	movs	r2, #16
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <_Z11measure_NOxv+0x118>)
 8000c7c:	f007 f809 	bl	8007c92 <memset>
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	ecbd 8b02 	vpop	{d8}
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	f3af 8000 	nop.w
 8000c90:	00000000 	.word	0x00000000
 8000c94:	408ff800 	.word	0x408ff800
 8000c98:	e9663594 	.word	0xe9663594
 8000c9c:	bf555175 	.word	0xbf555175
 8000ca0:	3758b1c8 	.word	0x3758b1c8
 8000ca4:	3fa3019c 	.word	0x3fa3019c
 8000ca8:	0b71f917 	.word	0x0b71f917
 8000cac:	bfdb24c8 	.word	0xbfdb24c8
 8000cb0:	ffa7c079 	.word	0xffa7c079
 8000cb4:	3f6b07cd 	.word	0x3f6b07cd
 8000cb8:	2000037c 	.word	0x2000037c
 8000cbc:	08009d84 	.word	0x08009d84
 8000cc0:	20000334 	.word	0x20000334
 8000cc4:	20000550 	.word	0x20000550

08000cc8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IDTplcvNS1_IT_XsrSt12__is_integerIS2_E7__valueEE6__typeELi0EcvNS1_IT0_XsrS3_IS7_E7__valueEE6__typeELi0EEXsrS3_ISB_E7__valueEE6__typeES2_S7_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000cd2:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8000cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	ee06 3a90 	vmov	s13, r3
 8000ce2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8000ce6:	eeb0 1b46 	vmov.f64	d1, d6
 8000cea:	eeb0 0b47 	vmov.f64	d0, d7
 8000cee:	f005 fd23 	bl	8006738 <pow>
 8000cf2:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8000cf6:	eeb0 0b47 	vmov.f64	d0, d7
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d04:	f001 f859 	bl	8001dba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d08:	f000 f834 	bl	8000d74 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0c:	f000 fac4 	bl	8001298 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8000d10:	f000 fa5c 	bl	80011cc <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000d14:	f000 fa8e 	bl	8001234 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_UART5_Init();
 8000d18:	f000 f9f0 	bl	80010fc <_ZL13MX_UART5_Initv>
  MX_ADC1_Init();
 8000d1c:	f000 f8aa 	bl	8000e74 <_ZL12MX_ADC1_Initv>
  MX_UART7_Init();
 8000d20:	f000 fa20 	bl	8001164 <_ZL13MX_UART7_Initv>
  MX_I2C1_Init();
 8000d24:	f000 f968 	bl	8000ff8 <_ZL12MX_I2C1_Initv>
  MX_ETH_Init();
 8000d28:	f000 f914 	bl	8000f54 <_ZL11MX_ETH_Initv>
  MX_UART4_Init();
 8000d2c:	f000 f9b2 	bl	8001094 <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */
  oxygenSensor.begin(ADDRESS_3);
 8000d30:	2173      	movs	r1, #115	@ 0x73
 8000d32:	480e      	ldr	r0, [pc, #56]	@ (8000d6c <main+0x6c>)
 8000d34:	f7ff fc7b 	bl	800062e <_ZN20DFRobot_OxygenSensor5beginEh>
    if (scd30.begin()) {
 8000d38:	480d      	ldr	r0, [pc, #52]	@ (8000d70 <main+0x70>)
 8000d3a:	f7ff fdcf 	bl	80008dc <_ZN5SCD305beginEv>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <main+0x52>
        scd30.setMeasurementInterval(2);
 8000d44:	2102      	movs	r1, #2
 8000d46:	480a      	ldr	r0, [pc, #40]	@ (8000d70 <main+0x70>)
 8000d48:	f7ff fdfd 	bl	8000946 <_ZN5SCD3022setMeasurementIntervalEt>
        scd30.startPeriodicMeasurement();
 8000d4c:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <main+0x70>)
 8000d4e:	f7ff fe0b 	bl	8000968 <_ZN5SCD3024startPeriodicMeasurementEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  measure_CO();
 8000d52:	f7ff fe81 	bl	8000a58 <_Z10measure_COv>
	  measure_O2();
 8000d56:	f7ff fef7 	bl	8000b48 <_Z10measure_O2v>
	  measure_NOx();
 8000d5a:	f7ff ff25 	bl	8000ba8 <_Z11measure_NOxv>
//	  measure_CO2();
//	  measure_PMs();

	  HAL_Delay(2000);
 8000d5e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d62:	f001 f887 	bl	8001e74 <HAL_Delay>
	  measure_CO();
 8000d66:	bf00      	nop
 8000d68:	e7f3      	b.n	8000d52 <main+0x52>
 8000d6a:	bf00      	nop
 8000d6c:	20000bc8 	.word	0x20000bc8
 8000d70:	20000d64 	.word	0x20000d64

08000d74 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b094      	sub	sp, #80	@ 0x50
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	2234      	movs	r2, #52	@ 0x34
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f006 ff85 	bl	8007c92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d98:	f003 fac6 	bl	8004328 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9c:	4b33      	ldr	r3, [pc, #204]	@ (8000e6c <_Z18SystemClock_Configv+0xf8>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	4a32      	ldr	r2, [pc, #200]	@ (8000e6c <_Z18SystemClock_Configv+0xf8>)
 8000da2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da8:	4b30      	ldr	r3, [pc, #192]	@ (8000e6c <_Z18SystemClock_Configv+0xf8>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db4:	4b2e      	ldr	r3, [pc, #184]	@ (8000e70 <_Z18SystemClock_Configv+0xfc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dbc:	4a2c      	ldr	r2, [pc, #176]	@ (8000e70 <_Z18SystemClock_Configv+0xfc>)
 8000dbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <_Z18SystemClock_Configv+0xfc>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dd4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000dd8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000de2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de4:	2304      	movs	r3, #4
 8000de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000de8:	2360      	movs	r3, #96	@ 0x60
 8000dea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000df0:	2304      	movs	r3, #4
 8000df2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 faf3 	bl	80043e8 <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf14      	ite	ne
 8000e08:	2301      	movne	r3, #1
 8000e0a:	2300      	moveq	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000e12:	f000 faef 	bl	80013f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e16:	f003 fa97 	bl	8004348 <HAL_PWREx_EnableOverDrive>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	bf14      	ite	ne
 8000e20:	2301      	movne	r3, #1
 8000e22:	2300      	moveq	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000e2a:	f000 fae3 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2e:	230f      	movs	r3, #15
 8000e30:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e32:	2302      	movs	r3, #2
 8000e34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	2103      	movs	r1, #3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 fd7a 	bl	8004944 <HAL_RCC_ClockConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bf14      	ite	ne
 8000e56:	2301      	movne	r3, #1
 8000e58:	2300      	moveq	r3, #0
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <_Z18SystemClock_Configv+0xf0>
  {
    Error_Handler();
 8000e60:	f000 fac8 	bl	80013f4 <Error_Handler>
  }
}
 8000e64:	bf00      	nop
 8000e66:	3750      	adds	r7, #80	@ 0x50
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40007000 	.word	0x40007000

08000e74 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e86:	4b30      	ldr	r3, [pc, #192]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000e88:	4a30      	ldr	r2, [pc, #192]	@ (8000f4c <_ZL12MX_ADC1_Initv+0xd8>)
 8000e8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000e8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e94:	4b2c      	ldr	r3, [pc, #176]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea6:	4b28      	ldr	r3, [pc, #160]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eae:	4b26      	ldr	r3, [pc, #152]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb4:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000eb6:	4a26      	ldr	r2, [pc, #152]	@ (8000f50 <_ZL12MX_ADC1_Initv+0xdc>)
 8000eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eba:	4b23      	ldr	r3, [pc, #140]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ec0:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec6:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed4:	481c      	ldr	r0, [pc, #112]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000ed6:	f000 fff1 	bl	8001ebc <HAL_ADC_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf14      	ite	ne
 8000ee0:	2301      	movne	r3, #1
 8000ee2:	2300      	moveq	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8000eea:	f000 fa83 	bl	80013f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	4619      	mov	r1, r3
 8000efe:	4812      	ldr	r0, [pc, #72]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000f00:	f001 f9ba 	bl	8002278 <HAL_ADC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000f14:	f000 fa6e 	bl	80013f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f18:	2305      	movs	r3, #5
 8000f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	4619      	mov	r1, r3
 8000f24:	4808      	ldr	r0, [pc, #32]	@ (8000f48 <_ZL12MX_ADC1_Initv+0xd4>)
 8000f26:	f001 f9a7 	bl	8002278 <HAL_ADC_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bf14      	ite	ne
 8000f30:	2301      	movne	r3, #1
 8000f32:	2300      	moveq	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <_ZL12MX_ADC1_Initv+0xca>
  {
    Error_Handler();
 8000f3a:	f000 fa5b 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000037c 	.word	0x2000037c
 8000f4c:	40012000 	.word	0x40012000
 8000f50:	0f000001 	.word	0x0f000001

08000f54 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f58:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <_ZL11MX_ETH_Initv+0x8c>)
 8000f5a:	4a22      	ldr	r2, [pc, #136]	@ (8000fe4 <_ZL11MX_ETH_Initv+0x90>)
 8000f5c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f5e:	4b22      	ldr	r3, [pc, #136]	@ (8000fe8 <_ZL11MX_ETH_Initv+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f64:	4b20      	ldr	r3, [pc, #128]	@ (8000fe8 <_ZL11MX_ETH_Initv+0x94>)
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <_ZL11MX_ETH_Initv+0x94>)
 8000f6c:	22e1      	movs	r2, #225	@ 0xe1
 8000f6e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <_ZL11MX_ETH_Initv+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <_ZL11MX_ETH_Initv+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <_ZL11MX_ETH_Initv+0x94>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <_ZL11MX_ETH_Initv+0x8c>)
 8000f84:	4a18      	ldr	r2, [pc, #96]	@ (8000fe8 <_ZL11MX_ETH_Initv+0x94>)
 8000f86:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <_ZL11MX_ETH_Initv+0x8c>)
 8000f8a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f8e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f90:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <_ZL11MX_ETH_Initv+0x8c>)
 8000f92:	4a16      	ldr	r2, [pc, #88]	@ (8000fec <_ZL11MX_ETH_Initv+0x98>)
 8000f94:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f96:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <_ZL11MX_ETH_Initv+0x8c>)
 8000f98:	4a15      	ldr	r2, [pc, #84]	@ (8000ff0 <_ZL11MX_ETH_Initv+0x9c>)
 8000f9a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <_ZL11MX_ETH_Initv+0x8c>)
 8000f9e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000fa2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000fa4:	480e      	ldr	r0, [pc, #56]	@ (8000fe0 <_ZL11MX_ETH_Initv+0x8c>)
 8000fa6:	f001 fc9d 	bl	80028e4 <HAL_ETH_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <_ZL11MX_ETH_Initv+0x6a>
  {
    Error_Handler();
 8000fba:	f000 fa1b 	bl	80013f4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000fbe:	2238      	movs	r2, #56	@ 0x38
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <_ZL11MX_ETH_Initv+0xa0>)
 8000fc4:	f006 fe65 	bl	8007c92 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <_ZL11MX_ETH_Initv+0xa0>)
 8000fca:	2221      	movs	r2, #33	@ 0x21
 8000fcc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <_ZL11MX_ETH_Initv+0xa0>)
 8000fd0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000fd4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <_ZL11MX_ETH_Initv+0xa0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200003c4 	.word	0x200003c4
 8000fe4:	40028000 	.word	0x40028000
 8000fe8:	20000d68 	.word	0x20000d68
 8000fec:	20000274 	.word	0x20000274
 8000ff0:	200001d4 	.word	0x200001d4
 8000ff4:	20000344 	.word	0x20000344

08000ff8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <_ZL12MX_I2C1_Initv+0x90>)
 8000ffe:	4a23      	ldr	r2, [pc, #140]	@ (800108c <_ZL12MX_I2C1_Initv+0x94>)
 8001000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001002:	4b21      	ldr	r3, [pc, #132]	@ (8001088 <_ZL12MX_I2C1_Initv+0x90>)
 8001004:	4a22      	ldr	r2, [pc, #136]	@ (8001090 <_ZL12MX_I2C1_Initv+0x98>)
 8001006:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001008:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <_ZL12MX_I2C1_Initv+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100e:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <_ZL12MX_I2C1_Initv+0x90>)
 8001010:	2201      	movs	r2, #1
 8001012:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001014:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <_ZL12MX_I2C1_Initv+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800101a:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <_ZL12MX_I2C1_Initv+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <_ZL12MX_I2C1_Initv+0x90>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <_ZL12MX_I2C1_Initv+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <_ZL12MX_I2C1_Initv+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001032:	4815      	ldr	r0, [pc, #84]	@ (8001088 <_ZL12MX_I2C1_Initv+0x90>)
 8001034:	f002 f96a 	bl	800330c <HAL_I2C_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	bf14      	ite	ne
 800103e:	2301      	movne	r3, #1
 8001040:	2300      	moveq	r3, #0
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001048:	f000 f9d4 	bl	80013f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800104c:	2100      	movs	r1, #0
 800104e:	480e      	ldr	r0, [pc, #56]	@ (8001088 <_ZL12MX_I2C1_Initv+0x90>)
 8001050:	f002 ff98 	bl	8003f84 <HAL_I2CEx_ConfigAnalogFilter>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	bf14      	ite	ne
 800105a:	2301      	movne	r3, #1
 800105c:	2300      	moveq	r3, #0
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001064:	f000 f9c6 	bl	80013f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001068:	2100      	movs	r1, #0
 800106a:	4807      	ldr	r0, [pc, #28]	@ (8001088 <_ZL12MX_I2C1_Initv+0x90>)
 800106c:	f002 ffd5 	bl	800401a <HAL_I2CEx_ConfigDigitalFilter>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf14      	ite	ne
 8001076:	2301      	movne	r3, #1
 8001078:	2300      	moveq	r3, #0
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001080:	f000 f9b8 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000474 	.word	0x20000474
 800108c:	40005400 	.word	0x40005400
 8001090:	20303e5d 	.word	0x20303e5d

08001094 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <_ZL13MX_UART4_Initv+0x60>)
 800109a:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <_ZL13MX_UART4_Initv+0x64>)
 800109c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <_ZL13MX_UART4_Initv+0x60>)
 80010a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <_ZL13MX_UART4_Initv+0x60>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <_ZL13MX_UART4_Initv+0x60>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <_ZL13MX_UART4_Initv+0x60>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <_ZL13MX_UART4_Initv+0x60>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <_ZL13MX_UART4_Initv+0x60>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <_ZL13MX_UART4_Initv+0x60>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <_ZL13MX_UART4_Initv+0x60>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <_ZL13MX_UART4_Initv+0x60>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010d6:	4807      	ldr	r0, [pc, #28]	@ (80010f4 <_ZL13MX_UART4_Initv+0x60>)
 80010d8:	f004 fa82 	bl	80055e0 <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf14      	ite	ne
 80010e2:	2301      	movne	r3, #1
 80010e4:	2300      	moveq	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 80010ec:	f000 f982 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200004c8 	.word	0x200004c8
 80010f8:	40004c00 	.word	0x40004c00

080010fc <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <_ZL13MX_UART5_Initv+0x60>)
 8001102:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <_ZL13MX_UART5_Initv+0x64>)
 8001104:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <_ZL13MX_UART5_Initv+0x60>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <_ZL13MX_UART5_Initv+0x60>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <_ZL13MX_UART5_Initv+0x60>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <_ZL13MX_UART5_Initv+0x60>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <_ZL13MX_UART5_Initv+0x60>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <_ZL13MX_UART5_Initv+0x60>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <_ZL13MX_UART5_Initv+0x60>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001132:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <_ZL13MX_UART5_Initv+0x60>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <_ZL13MX_UART5_Initv+0x60>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800113e:	4807      	ldr	r0, [pc, #28]	@ (800115c <_ZL13MX_UART5_Initv+0x60>)
 8001140:	f004 fa4e 	bl	80055e0 <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf14      	ite	ne
 800114a:	2301      	movne	r3, #1
 800114c:	2300      	moveq	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <_ZL13MX_UART5_Initv+0x5c>
  {
    Error_Handler();
 8001154:	f000 f94e 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000550 	.word	0x20000550
 8001160:	40005000 	.word	0x40005000

08001164 <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001168:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <_ZL13MX_UART7_Initv+0x60>)
 800116a:	4a17      	ldr	r2, [pc, #92]	@ (80011c8 <_ZL13MX_UART7_Initv+0x64>)
 800116c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <_ZL13MX_UART7_Initv+0x60>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <_ZL13MX_UART7_Initv+0x60>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <_ZL13MX_UART7_Initv+0x60>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <_ZL13MX_UART7_Initv+0x60>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <_ZL13MX_UART7_Initv+0x60>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <_ZL13MX_UART7_Initv+0x60>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <_ZL13MX_UART7_Initv+0x60>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <_ZL13MX_UART7_Initv+0x60>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <_ZL13MX_UART7_Initv+0x60>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80011a6:	4807      	ldr	r0, [pc, #28]	@ (80011c4 <_ZL13MX_UART7_Initv+0x60>)
 80011a8:	f004 fa1a 	bl	80055e0 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf14      	ite	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	2300      	moveq	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <_ZL13MX_UART7_Initv+0x5c>
  {
    Error_Handler();
 80011bc:	f000 f91a 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200005d8 	.word	0x200005d8
 80011c8:	40007800 	.word	0x40007800

080011cc <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <_ZL19MX_USART3_UART_Initv+0x60>)
 80011d2:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <_ZL19MX_USART3_UART_Initv+0x64>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <_ZL19MX_USART3_UART_Initv+0x60>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <_ZL19MX_USART3_UART_Initv+0x60>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <_ZL19MX_USART3_UART_Initv+0x60>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <_ZL19MX_USART3_UART_Initv+0x60>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <_ZL19MX_USART3_UART_Initv+0x60>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <_ZL19MX_USART3_UART_Initv+0x60>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <_ZL19MX_USART3_UART_Initv+0x60>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001208:	4b08      	ldr	r3, [pc, #32]	@ (800122c <_ZL19MX_USART3_UART_Initv+0x60>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800120e:	4807      	ldr	r0, [pc, #28]	@ (800122c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001210:	f004 f9e6 	bl	80055e0 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	bf14      	ite	ne
 800121a:	2301      	movne	r3, #1
 800121c:	2300      	moveq	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8001224:	f000 f8e6 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000660 	.word	0x20000660
 8001230:	40004800 	.word	0x40004800

08001234 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001238:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800123a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800123e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001242:	2206      	movs	r2, #6
 8001244:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001248:	2202      	movs	r2, #2
 800124a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800124e:	2200      	movs	r2, #0
 8001250:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001254:	2202      	movs	r2, #2
 8001256:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800125a:	2201      	movs	r2, #1
 800125c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800125e:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001260:	2200      	movs	r2, #0
 8001262:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001266:	2200      	movs	r2, #0
 8001268:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800126a:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800126c:	2201      	movs	r2, #1
 800126e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001272:	2200      	movs	r2, #0
 8001274:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001276:	4807      	ldr	r0, [pc, #28]	@ (8001294 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001278:	f002 ff1b 	bl	80040b2 <HAL_PCD_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	bf14      	ite	ne
 8001282:	2301      	movne	r3, #1
 8001284:	2300      	moveq	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 800128c:	f000 f8b2 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200006e8 	.word	0x200006e8

08001298 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	@ 0x30
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	4b4d      	ldr	r3, [pc, #308]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a4c      	ldr	r2, [pc, #304]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b4a      	ldr	r3, [pc, #296]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012c6:	4b47      	ldr	r3, [pc, #284]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a46      	ldr	r2, [pc, #280]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 80012cc:	f043 0320 	orr.w	r3, r3, #32
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b44      	ldr	r3, [pc, #272]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012de:	4b41      	ldr	r3, [pc, #260]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a40      	ldr	r2, [pc, #256]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b3e      	ldr	r3, [pc, #248]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b3b      	ldr	r3, [pc, #236]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a3a      	ldr	r2, [pc, #232]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b38      	ldr	r3, [pc, #224]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b35      	ldr	r3, [pc, #212]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a34      	ldr	r2, [pc, #208]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b32      	ldr	r3, [pc, #200]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001326:	4b2f      	ldr	r3, [pc, #188]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a2e      	ldr	r2, [pc, #184]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800133e:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a28      	ldr	r2, [pc, #160]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 8001344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x14c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f244 0181 	movw	r1, #16513	@ 0x4081
 800135c:	4822      	ldr	r0, [pc, #136]	@ (80013e8 <_ZL12MX_GPIO_Initv+0x150>)
 800135e:	f001 ffbb 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2140      	movs	r1, #64	@ 0x40
 8001366:	4821      	ldr	r0, [pc, #132]	@ (80013ec <_ZL12MX_GPIO_Initv+0x154>)
 8001368:	f001 ffb6 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800136c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001372:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	481b      	ldr	r0, [pc, #108]	@ (80013f0 <_ZL12MX_GPIO_Initv+0x158>)
 8001384:	f001 fdfc 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001388:	f244 0381 	movw	r3, #16513	@ 0x4081
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4811      	ldr	r0, [pc, #68]	@ (80013e8 <_ZL12MX_GPIO_Initv+0x150>)
 80013a2:	f001 fded 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013a6:	2340      	movs	r3, #64	@ 0x40
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	480b      	ldr	r0, [pc, #44]	@ (80013ec <_ZL12MX_GPIO_Initv+0x154>)
 80013be:	f001 fddf 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	@ (80013ec <_ZL12MX_GPIO_Initv+0x154>)
 80013d6:	f001 fdd3 	bl	8002f80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013da:	bf00      	nop
 80013dc:	3730      	adds	r7, #48	@ 0x30
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40021800 	.word	0x40021800
 80013f0:	40020800 	.word	0x40020800

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <Error_Handler+0x8>

08001400 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d10c      	bne.n	800142a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001416:	4293      	cmp	r3, r2
 8001418:	d107      	bne.n	800142a <_Z41__static_initialization_and_destruction_0ii+0x2a>
DFRobot_OxygenSensor oxygenSensor(&hi2c1);
 800141a:	490b      	ldr	r1, [pc, #44]	@ (8001448 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800141c:	480b      	ldr	r0, [pc, #44]	@ (800144c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800141e:	f7ff f8df 	bl	80005e0 <_ZN20DFRobot_OxygenSensorC1EP19__I2C_HandleTypeDef>
SCD30 scd30(&hi2c1);
 8001422:	4909      	ldr	r1, [pc, #36]	@ (8001448 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001424:	480a      	ldr	r0, [pc, #40]	@ (8001450 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001426:	f7ff fa4a 	bl	80008be <_ZN5SCD30C1EP19__I2C_HandleTypeDef>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d107      	bne.n	8001440 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001436:	4293      	cmp	r3, r2
 8001438:	d102      	bne.n	8001440 <_Z41__static_initialization_and_destruction_0ii+0x40>
DFRobot_OxygenSensor oxygenSensor(&hi2c1);
 800143a:	4804      	ldr	r0, [pc, #16]	@ (800144c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800143c:	f7ff f8e9 	bl	8000612 <_ZN20DFRobot_OxygenSensorD1Ev>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000474 	.word	0x20000474
 800144c:	20000bc8 	.word	0x20000bc8
 8001450:	20000d64 	.word	0x20000d64

08001454 <_GLOBAL__sub_I_DMARxDscrTab>:
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
 8001458:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff ffcf 	bl	8001400 <_Z41__static_initialization_and_destruction_0ii>
 8001462:	bd80      	pop	{r7, pc}

08001464 <_GLOBAL__sub_D_DMARxDscrTab>:
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
 8001468:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff ffc7 	bl	8001400 <_Z41__static_initialization_and_destruction_0ii>
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <HAL_MspInit+0x44>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <HAL_MspInit+0x44>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	@ 0x40
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_MspInit+0x44>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_MspInit+0x44>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <HAL_MspInit+0x44>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149c:	6453      	str	r3, [r2, #68]	@ 0x44
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_MspInit+0x44>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a15      	ldr	r2, [pc, #84]	@ (8001530 <HAL_ADC_MspInit+0x74>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d123      	bne.n	8001526 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_ADC_MspInit+0x78>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <HAL_ADC_MspInit+0x78>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_ADC_MspInit+0x78>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <HAL_ADC_MspInit+0x78>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001534 <HAL_ADC_MspInit+0x78>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <HAL_ADC_MspInit+0x78>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800150e:	2330      	movs	r3, #48	@ 0x30
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001512:	2303      	movs	r3, #3
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <HAL_ADC_MspInit+0x7c>)
 8001522:	f001 fd2d 	bl	8002f80 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	@ 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40012000 	.word	0x40012000
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000

0800153c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	@ 0x38
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a4e      	ldr	r2, [pc, #312]	@ (8001694 <HAL_ETH_MspInit+0x158>)
 800155a:	4293      	cmp	r3, r2
 800155c:	f040 8096 	bne.w	800168c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001560:	4b4d      	ldr	r3, [pc, #308]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001564:	4a4c      	ldr	r2, [pc, #304]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 8001566:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800156a:	6313      	str	r3, [r2, #48]	@ 0x30
 800156c:	4b4a      	ldr	r3, [pc, #296]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001574:	623b      	str	r3, [r7, #32]
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	4b47      	ldr	r3, [pc, #284]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157c:	4a46      	ldr	r2, [pc, #280]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 800157e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001582:	6313      	str	r3, [r2, #48]	@ 0x30
 8001584:	4b44      	ldr	r3, [pc, #272]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001588:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	4b41      	ldr	r3, [pc, #260]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001594:	4a40      	ldr	r2, [pc, #256]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 8001596:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800159a:	6313      	str	r3, [r2, #48]	@ 0x30
 800159c:	4b3e      	ldr	r3, [pc, #248]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ac:	4a3a      	ldr	r2, [pc, #232]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b4:	4b38      	ldr	r3, [pc, #224]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c4:	4a34      	ldr	r2, [pc, #208]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80015cc:	4b32      	ldr	r3, [pc, #200]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015f0:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 80015f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f4:	4a28      	ldr	r2, [pc, #160]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 80015f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fc:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <HAL_ETH_MspInit+0x15c>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001608:	2332      	movs	r3, #50	@ 0x32
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001618:	230b      	movs	r3, #11
 800161a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	481e      	ldr	r0, [pc, #120]	@ (800169c <HAL_ETH_MspInit+0x160>)
 8001624:	f001 fcac 	bl	8002f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001628:	2386      	movs	r3, #134	@ 0x86
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001638:	230b      	movs	r3, #11
 800163a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001640:	4619      	mov	r1, r3
 8001642:	4817      	ldr	r0, [pc, #92]	@ (80016a0 <HAL_ETH_MspInit+0x164>)
 8001644:	f001 fc9c 	bl	8002f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001648:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800165a:	230b      	movs	r3, #11
 800165c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001662:	4619      	mov	r1, r3
 8001664:	480f      	ldr	r0, [pc, #60]	@ (80016a4 <HAL_ETH_MspInit+0x168>)
 8001666:	f001 fc8b 	bl	8002f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800166a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800167c:	230b      	movs	r3, #11
 800167e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001684:	4619      	mov	r1, r3
 8001686:	4808      	ldr	r0, [pc, #32]	@ (80016a8 <HAL_ETH_MspInit+0x16c>)
 8001688:	f001 fc7a 	bl	8002f80 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800168c:	bf00      	nop
 800168e:	3738      	adds	r7, #56	@ 0x38
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40028000 	.word	0x40028000
 8001698:	40023800 	.word	0x40023800
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40021800 	.word	0x40021800

080016ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b0ae      	sub	sp, #184	@ 0xb8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2290      	movs	r2, #144	@ 0x90
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f006 fae0 	bl	8007c92 <memset>
  if(hi2c->Instance==I2C1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a22      	ldr	r2, [pc, #136]	@ (8001760 <HAL_I2C_MspInit+0xb4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d13c      	bne.n	8001756 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fb50 	bl	8004d90 <HAL_RCCEx_PeriphCLKConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80016f6:	f7ff fe7d 	bl	80013f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <HAL_I2C_MspInit+0xb8>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a19      	ldr	r2, [pc, #100]	@ (8001764 <HAL_I2C_MspInit+0xb8>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_I2C_MspInit+0xb8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001712:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001716:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171a:	2312      	movs	r3, #18
 800171c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800172c:	2304      	movs	r3, #4
 800172e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001736:	4619      	mov	r1, r3
 8001738:	480b      	ldr	r0, [pc, #44]	@ (8001768 <HAL_I2C_MspInit+0xbc>)
 800173a:	f001 fc21 	bl	8002f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <HAL_I2C_MspInit+0xb8>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <HAL_I2C_MspInit+0xb8>)
 8001744:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001748:	6413      	str	r3, [r2, #64]	@ 0x40
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_I2C_MspInit+0xb8>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001756:	bf00      	nop
 8001758:	37b8      	adds	r7, #184	@ 0xb8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40005400 	.word	0x40005400
 8001764:	40023800 	.word	0x40023800
 8001768:	40020400 	.word	0x40020400

0800176c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0b6      	sub	sp, #216	@ 0xd8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001784:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001788:	2290      	movs	r2, #144	@ 0x90
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f006 fa80 	bl	8007c92 <memset>
  if(huart->Instance==UART4)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4aa9      	ldr	r2, [pc, #676]	@ (8001a3c <HAL_UART_MspInit+0x2d0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d15f      	bne.n	800185c <HAL_UART_MspInit+0xf0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800179c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017a0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 faef 	bl	8004d90 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80017b8:	f7ff fe1c 	bl	80013f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017bc:	4ba0      	ldr	r3, [pc, #640]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	4a9f      	ldr	r2, [pc, #636]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80017c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80017d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b9a      	ldr	r3, [pc, #616]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80017d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d8:	4a99      	ldr	r2, [pc, #612]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e0:	4b97      	ldr	r3, [pc, #604]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ec:	4b94      	ldr	r3, [pc, #592]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	4a93      	ldr	r2, [pc, #588]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f8:	4b91      	ldr	r3, [pc, #580]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001804:	2301      	movs	r3, #1
 8001806:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800181c:	2308      	movs	r3, #8
 800181e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001826:	4619      	mov	r1, r3
 8001828:	4886      	ldr	r0, [pc, #536]	@ (8001a44 <HAL_UART_MspInit+0x2d8>)
 800182a:	f001 fba9 	bl	8002f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800182e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001832:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001848:	2308      	movs	r3, #8
 800184a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001852:	4619      	mov	r1, r3
 8001854:	487c      	ldr	r0, [pc, #496]	@ (8001a48 <HAL_UART_MspInit+0x2dc>)
 8001856:	f001 fb93 	bl	8002f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800185a:	e0eb      	b.n	8001a34 <HAL_UART_MspInit+0x2c8>
  else if(huart->Instance==UART5)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a7a      	ldr	r2, [pc, #488]	@ (8001a4c <HAL_UART_MspInit+0x2e0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d160      	bne.n	8001928 <HAL_UART_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800186a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001872:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001876:	4618      	mov	r0, r3
 8001878:	f003 fa8a 	bl	8004d90 <HAL_RCCEx_PeriphCLKConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 8001882:	f7ff fdb7 	bl	80013f4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001886:	4b6e      	ldr	r3, [pc, #440]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a6d      	ldr	r2, [pc, #436]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 800188c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b6b      	ldr	r3, [pc, #428]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	4b68      	ldr	r3, [pc, #416]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a67      	ldr	r2, [pc, #412]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b65      	ldr	r3, [pc, #404]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	623b      	str	r3, [r7, #32]
 80018b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b6:	4b62      	ldr	r3, [pc, #392]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a61      	ldr	r2, [pc, #388]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80018e8:	2308      	movs	r3, #8
 80018ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4856      	ldr	r0, [pc, #344]	@ (8001a50 <HAL_UART_MspInit+0x2e4>)
 80018f6:	f001 fb43 	bl	8002f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001914:	2308      	movs	r3, #8
 8001916:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800191e:	4619      	mov	r1, r3
 8001920:	4849      	ldr	r0, [pc, #292]	@ (8001a48 <HAL_UART_MspInit+0x2dc>)
 8001922:	f001 fb2d 	bl	8002f80 <HAL_GPIO_Init>
}
 8001926:	e085      	b.n	8001a34 <HAL_UART_MspInit+0x2c8>
  else if(huart->Instance==UART7)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a49      	ldr	r2, [pc, #292]	@ (8001a54 <HAL_UART_MspInit+0x2e8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d13d      	bne.n	80019ae <HAL_UART_MspInit+0x242>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001936:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001942:	4618      	mov	r0, r3
 8001944:	f003 fa24 	bl	8004d90 <HAL_RCCEx_PeriphCLKConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_UART_MspInit+0x1e6>
      Error_Handler();
 800194e:	f7ff fd51 	bl	80013f4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001952:	4b3b      	ldr	r3, [pc, #236]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	4a3a      	ldr	r2, [pc, #232]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 8001958:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800195c:	6413      	str	r3, [r2, #64]	@ 0x40
 800195e:	4b38      	ldr	r3, [pc, #224]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800196a:	4b35      	ldr	r3, [pc, #212]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a34      	ldr	r2, [pc, #208]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 8001970:	f043 0320 	orr.w	r3, r3, #32
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b32      	ldr	r3, [pc, #200]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001982:	23c0      	movs	r3, #192	@ 0xc0
 8001984:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800199a:	2308      	movs	r3, #8
 800199c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019a0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80019a4:	4619      	mov	r1, r3
 80019a6:	482c      	ldr	r0, [pc, #176]	@ (8001a58 <HAL_UART_MspInit+0x2ec>)
 80019a8:	f001 faea 	bl	8002f80 <HAL_GPIO_Init>
}
 80019ac:	e042      	b.n	8001a34 <HAL_UART_MspInit+0x2c8>
  else if(huart->Instance==USART3)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a5c <HAL_UART_MspInit+0x2f0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d13d      	bne.n	8001a34 <HAL_UART_MspInit+0x2c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 f9e1 	bl	8004d90 <HAL_RCCEx_PeriphCLKConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80019d4:	f7ff fd0e 	bl	80013f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	4a18      	ldr	r2, [pc, #96]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80019de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e4:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fc:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <HAL_UART_MspInit+0x2d4>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a08:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a22:	2307      	movs	r3, #7
 8001a24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a28:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480c      	ldr	r0, [pc, #48]	@ (8001a60 <HAL_UART_MspInit+0x2f4>)
 8001a30:	f001 faa6 	bl	8002f80 <HAL_GPIO_Init>
}
 8001a34:	bf00      	nop
 8001a36:	37d8      	adds	r7, #216	@ 0xd8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40004c00 	.word	0x40004c00
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40005000 	.word	0x40005000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40007800 	.word	0x40007800
 8001a58:	40021400 	.word	0x40021400
 8001a5c:	40004800 	.word	0x40004800
 8001a60:	40020c00 	.word	0x40020c00

08001a64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0ae      	sub	sp, #184	@ 0xb8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2290      	movs	r2, #144	@ 0x90
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f006 f904 	bl	8007c92 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a92:	d159      	bne.n	8001b48 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001a94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a98:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 f973 	bl	8004d90 <HAL_RCCEx_PeriphCLKConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001ab0:	f7ff fca0 	bl	80013f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <HAL_PCD_MspInit+0xec>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	4a25      	ldr	r2, [pc, #148]	@ (8001b50 <HAL_PCD_MspInit+0xec>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac0:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <HAL_PCD_MspInit+0xec>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001acc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ae6:	230a      	movs	r3, #10
 8001ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4818      	ldr	r0, [pc, #96]	@ (8001b54 <HAL_PCD_MspInit+0xf0>)
 8001af4:	f001 fa44 	bl	8002f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001af8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001afc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4810      	ldr	r0, [pc, #64]	@ (8001b54 <HAL_PCD_MspInit+0xf0>)
 8001b14:	f001 fa34 	bl	8002f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b18:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <HAL_PCD_MspInit+0xec>)
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b50 <HAL_PCD_MspInit+0xec>)
 8001b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b22:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_PCD_MspInit+0xec>)
 8001b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <HAL_PCD_MspInit+0xec>)
 8001b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b34:	4a06      	ldr	r2, [pc, #24]	@ (8001b50 <HAL_PCD_MspInit+0xec>)
 8001b36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b3a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3c:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <HAL_PCD_MspInit+0xec>)
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001b48:	bf00      	nop
 8001b4a:	37b8      	adds	r7, #184	@ 0xb8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020000 	.word	0x40020000

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <NMI_Handler+0x4>

08001b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <MemManage_Handler+0x4>

08001b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bae:	f000 f941 	bl	8001e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  return 1;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_kill>:

int _kill(int pid, int sig)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bd0:	f006 f8b2 	bl	8007d38 <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2216      	movs	r2, #22
 8001bd8:	601a      	str	r2, [r3, #0]
  return -1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_exit>:

void _exit (int status)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bee:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffe7 	bl	8001bc6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <_exit+0x12>

08001bfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	e00a      	b.n	8001c24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c0e:	f3af 8000 	nop.w
 8001c12:	4601      	mov	r1, r0
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	60ba      	str	r2, [r7, #8]
 8001c1a:	b2ca      	uxtb	r2, r1
 8001c1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3301      	adds	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	dbf0      	blt.n	8001c0e <_read+0x12>
  }

  return len;
 8001c2c:	687b      	ldr	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e009      	b.n	8001c5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	60ba      	str	r2, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbf1      	blt.n	8001c48 <_write+0x12>
  }
  return len;
 8001c64:	687b      	ldr	r3, [r7, #4]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_close>:

int _close(int file)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c96:	605a      	str	r2, [r3, #4]
  return 0;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <_isatty>:

int _isatty(int file)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce0:	4a14      	ldr	r2, [pc, #80]	@ (8001d34 <_sbrk+0x5c>)
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <_sbrk+0x60>)
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cec:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <_sbrk+0x64>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <_sbrk+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d207      	bcs.n	8001d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d08:	f006 f816 	bl	8007d38 <__errno>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	220c      	movs	r2, #12
 8001d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	e009      	b.n	8001d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d18:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	@ (8001d3c <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	4a05      	ldr	r2, [pc, #20]	@ (8001d3c <_sbrk+0x64>)
 8001d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20080000 	.word	0x20080000
 8001d38:	00000400 	.word	0x00000400
 8001d3c:	20000d70 	.word	0x20000d70
 8001d40:	20000ec8 	.word	0x20000ec8

08001d44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d48:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <SystemInit+0x20>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d4e:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <SystemInit+0x20>)
 8001d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001da0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d6c:	f7ff ffea 	bl	8001d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d70:	480c      	ldr	r0, [pc, #48]	@ (8001da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d72:	490d      	ldr	r1, [pc, #52]	@ (8001da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d74:	4a0d      	ldr	r2, [pc, #52]	@ (8001dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d88:	4c0a      	ldr	r4, [pc, #40]	@ (8001db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d96:	f005 ffd5 	bl	8007d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9a:	f7fe ffb1 	bl	8000d00 <main>
  bx  lr    
 8001d9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001dac:	0800bda8 	.word	0x0800bda8
  ldr r2, =_sbss
 8001db0:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8001db4:	20000ec4 	.word	0x20000ec4

08001db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC_IRQHandler>

08001dba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbe:	2003      	movs	r0, #3
 8001dc0:	f000 fd5c 	bl	800287c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f000 f805 	bl	8001dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dca:	f7ff fb53 	bl	8001474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ddc:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_InitTick+0x54>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <HAL_InitTick+0x58>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fd69 	bl	80028ca <HAL_SYSTICK_Config>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00e      	b.n	8001e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d80a      	bhi.n	8001e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f000 fd3f 	bl	8002892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e14:	4a06      	ldr	r2, [pc, #24]	@ (8001e30 <HAL_InitTick+0x5c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_IncTick+0x20>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_IncTick+0x24>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <HAL_IncTick+0x24>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000008 	.word	0x20000008
 8001e58:	20000d74 	.word	0x20000d74

08001e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e60:	4b03      	ldr	r3, [pc, #12]	@ (8001e70 <HAL_GetTick+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000d74 	.word	0x20000d74

08001e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff ffee 	bl	8001e5c <HAL_GetTick>
 8001e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d005      	beq.n	8001e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_Delay+0x44>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9a:	bf00      	nop
 8001e9c:	f7ff ffde 	bl	8001e5c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d8f7      	bhi.n	8001e9c <HAL_Delay+0x28>
  {
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000008 	.word	0x20000008

08001ebc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e031      	b.n	8001f36 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff faee 	bl	80014bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d116      	bne.n	8001f28 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001efe:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <HAL_ADC_Init+0x84>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	f043 0202 	orr.w	r2, r3, #2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fb0a 	bl	8002524 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	f043 0201 	orr.w	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f26:	e001      	b.n	8001f2c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	ffffeefd 	.word	0xffffeefd

08001f44 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_Start+0x1a>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e0ad      	b.n	80020ba <HAL_ADC_Start+0x176>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d018      	beq.n	8001fa6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001f84:	4b50      	ldr	r3, [pc, #320]	@ (80020c8 <HAL_ADC_Start+0x184>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a50      	ldr	r2, [pc, #320]	@ (80020cc <HAL_ADC_Start+0x188>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	0c9a      	lsrs	r2, r3, #18
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001f98:	e002      	b.n	8001fa0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f9      	bne.n	8001f9a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d175      	bne.n	80020a0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fb8:	4b45      	ldr	r3, [pc, #276]	@ (80020d0 <HAL_ADC_Start+0x18c>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d007      	beq.n	8001fe2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fda:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fee:	d106      	bne.n	8001ffe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff4:	f023 0206 	bic.w	r2, r3, #6
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ffc:	e002      	b.n	8002004 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002014:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002016:	4b2f      	ldr	r3, [pc, #188]	@ (80020d4 <HAL_ADC_Start+0x190>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10f      	bne.n	8002042 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d143      	bne.n	80020b8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	e03a      	b.n	80020b8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a24      	ldr	r2, [pc, #144]	@ (80020d8 <HAL_ADC_Start+0x194>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d10e      	bne.n	800206a <HAL_ADC_Start+0x126>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d107      	bne.n	800206a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002068:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_ADC_Start+0x190>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d120      	bne.n	80020b8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a18      	ldr	r2, [pc, #96]	@ (80020dc <HAL_ADC_Start+0x198>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d11b      	bne.n	80020b8 <HAL_ADC_Start+0x174>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d114      	bne.n	80020b8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	e00b      	b.n	80020b8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	f043 0210 	orr.w	r2, r3, #16
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000000 	.word	0x20000000
 80020cc:	431bde83 	.word	0x431bde83
 80020d0:	fffff8fe 	.word	0xfffff8fe
 80020d4:	40012300 	.word	0x40012300
 80020d8:	40012000 	.word	0x40012000
 80020dc:	40012200 	.word	0x40012200

080020e0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_Stop+0x16>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e01f      	b.n	8002136 <HAL_ADC_Stop+0x56>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002120:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <HAL_ADC_Stop+0x64>)
 8002122:	4013      	ands	r3, r2
 8002124:	f043 0201 	orr.w	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	ffffeefe 	.word	0xffffeefe

08002148 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002164:	d113      	bne.n	800218e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002174:	d10b      	bne.n	800218e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f043 0220 	orr.w	r2, r3, #32
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e063      	b.n	8002256 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800218e:	f7ff fe65 	bl	8001e5c <HAL_GetTick>
 8002192:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002194:	e021      	b.n	80021da <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d01d      	beq.n	80021da <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <HAL_ADC_PollForConversion+0x6c>
 80021a4:	f7ff fe5a 	bl	8001e5c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d212      	bcs.n	80021da <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d00b      	beq.n	80021da <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f043 0204 	orr.w	r2, r3, #4
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e03d      	b.n	8002256 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d1d6      	bne.n	8002196 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0212 	mvn.w	r2, #18
 80021f0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d123      	bne.n	8002254 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002210:	2b00      	cmp	r3, #0
 8002212:	d11f      	bne.n	8002254 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800221e:	2b00      	cmp	r3, #0
 8002220:	d006      	beq.n	8002230 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800222c:	2b00      	cmp	r3, #0
 800222e:	d111      	bne.n	8002254 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d105      	bne.n	8002254 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1c>
 8002290:	2302      	movs	r3, #2
 8002292:	e136      	b.n	8002502 <HAL_ADC_ConfigChannel+0x28a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b09      	cmp	r3, #9
 80022a2:	d93a      	bls.n	800231a <HAL_ADC_ConfigChannel+0xa2>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022ac:	d035      	beq.n	800231a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68d9      	ldr	r1, [r3, #12]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	3b1e      	subs	r3, #30
 80022c4:	2207      	movs	r2, #7
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43da      	mvns	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	400a      	ands	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a8d      	ldr	r2, [pc, #564]	@ (8002510 <HAL_ADC_ConfigChannel+0x298>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d10a      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68d9      	ldr	r1, [r3, #12]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	061a      	lsls	r2, r3, #24
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022f2:	e035      	b.n	8002360 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68d9      	ldr	r1, [r3, #12]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	4603      	mov	r3, r0
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4403      	add	r3, r0
 800230c:	3b1e      	subs	r3, #30
 800230e:	409a      	lsls	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002318:	e022      	b.n	8002360 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6919      	ldr	r1, [r3, #16]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	2207      	movs	r2, #7
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43da      	mvns	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	400a      	ands	r2, r1
 800233c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6919      	ldr	r1, [r3, #16]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	b29b      	uxth	r3, r3
 800234e:	4618      	mov	r0, r3
 8002350:	4603      	mov	r3, r0
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4403      	add	r3, r0
 8002356:	409a      	lsls	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b06      	cmp	r3, #6
 8002366:	d824      	bhi.n	80023b2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b05      	subs	r3, #5
 800237a:	221f      	movs	r2, #31
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43da      	mvns	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	400a      	ands	r2, r1
 8002388:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	4618      	mov	r0, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	3b05      	subs	r3, #5
 80023a4:	fa00 f203 	lsl.w	r2, r0, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80023b0:	e04c      	b.n	800244c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d824      	bhi.n	8002404 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	3b23      	subs	r3, #35	@ 0x23
 80023cc:	221f      	movs	r2, #31
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	400a      	ands	r2, r1
 80023da:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b23      	subs	r3, #35	@ 0x23
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	631a      	str	r2, [r3, #48]	@ 0x30
 8002402:	e023      	b.n	800244c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	3b41      	subs	r3, #65	@ 0x41
 8002416:	221f      	movs	r2, #31
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43da      	mvns	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	400a      	ands	r2, r1
 8002424:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	b29b      	uxth	r3, r3
 8002432:	4618      	mov	r0, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	3b41      	subs	r3, #65	@ 0x41
 8002440:	fa00 f203 	lsl.w	r2, r0, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a30      	ldr	r2, [pc, #192]	@ (8002514 <HAL_ADC_ConfigChannel+0x29c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d10a      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1f4>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800245e:	d105      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002460:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <HAL_ADC_ConfigChannel+0x2a0>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a2c      	ldr	r2, [pc, #176]	@ (8002518 <HAL_ADC_ConfigChannel+0x2a0>)
 8002466:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800246a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a28      	ldr	r2, [pc, #160]	@ (8002514 <HAL_ADC_ConfigChannel+0x29c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10f      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x21e>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b12      	cmp	r3, #18
 800247c:	d10b      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800247e:	4b26      	ldr	r3, [pc, #152]	@ (8002518 <HAL_ADC_ConfigChannel+0x2a0>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4a25      	ldr	r2, [pc, #148]	@ (8002518 <HAL_ADC_ConfigChannel+0x2a0>)
 8002484:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002488:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800248a:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <HAL_ADC_ConfigChannel+0x2a0>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4a22      	ldr	r2, [pc, #136]	@ (8002518 <HAL_ADC_ConfigChannel+0x2a0>)
 8002490:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002494:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1e      	ldr	r2, [pc, #120]	@ (8002514 <HAL_ADC_ConfigChannel+0x29c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d12b      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x280>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002510 <HAL_ADC_ConfigChannel+0x298>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d003      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x23a>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b11      	cmp	r3, #17
 80024b0:	d122      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80024b2:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <HAL_ADC_ConfigChannel+0x2a0>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4a18      	ldr	r2, [pc, #96]	@ (8002518 <HAL_ADC_ConfigChannel+0x2a0>)
 80024b8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80024bc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80024be:	4b16      	ldr	r3, [pc, #88]	@ (8002518 <HAL_ADC_ConfigChannel+0x2a0>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <HAL_ADC_ConfigChannel+0x2a0>)
 80024c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024c8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a10      	ldr	r2, [pc, #64]	@ (8002510 <HAL_ADC_ConfigChannel+0x298>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d111      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <HAL_ADC_ConfigChannel+0x2a4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a11      	ldr	r2, [pc, #68]	@ (8002520 <HAL_ADC_ConfigChannel+0x2a8>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0c9a      	lsrs	r2, r3, #18
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024ea:	e002      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f9      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	10000012 	.word	0x10000012
 8002514:	40012000 	.word	0x40012000
 8002518:	40012300 	.word	0x40012300
 800251c:	20000000 	.word	0x20000000
 8002520:	431bde83 	.word	0x431bde83

08002524 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800252c:	4b78      	ldr	r3, [pc, #480]	@ (8002710 <ADC_Init+0x1ec>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a77      	ldr	r2, [pc, #476]	@ (8002710 <ADC_Init+0x1ec>)
 8002532:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002536:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002538:	4b75      	ldr	r3, [pc, #468]	@ (8002710 <ADC_Init+0x1ec>)
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4973      	ldr	r1, [pc, #460]	@ (8002710 <ADC_Init+0x1ec>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	021a      	lsls	r2, r3, #8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800259a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6899      	ldr	r1, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b2:	4a58      	ldr	r2, [pc, #352]	@ (8002714 <ADC_Init+0x1f0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d022      	beq.n	80025fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6899      	ldr	r1, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	e00f      	b.n	800261e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800260c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800261c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0202 	bic.w	r2, r2, #2
 800262c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6899      	ldr	r1, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	005a      	lsls	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800265a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800266a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	3b01      	subs	r3, #1
 8002678:	035a      	lsls	r2, r3, #13
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	e007      	b.n	8002694 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002692:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	051a      	lsls	r2, r3, #20
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6899      	ldr	r1, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026d6:	025a      	lsls	r2, r3, #9
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	029a      	lsls	r2, r3, #10
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	609a      	str	r2, [r3, #8]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40012300 	.word	0x40012300
 8002714:	0f000001 	.word	0x0f000001

08002718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <__NVIC_SetPriorityGrouping+0x40>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002740:	4b06      	ldr	r3, [pc, #24]	@ (800275c <__NVIC_SetPriorityGrouping+0x44>)
 8002742:	4313      	orrs	r3, r2
 8002744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002746:	4a04      	ldr	r2, [pc, #16]	@ (8002758 <__NVIC_SetPriorityGrouping+0x40>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00
 800275c:	05fa0000 	.word	0x05fa0000

08002760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <__NVIC_GetPriorityGrouping+0x18>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0307 	and.w	r3, r3, #7
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	db0a      	blt.n	80027a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	490c      	ldr	r1, [pc, #48]	@ (80027c8 <__NVIC_SetPriority+0x4c>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	440b      	add	r3, r1
 80027a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a4:	e00a      	b.n	80027bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4908      	ldr	r1, [pc, #32]	@ (80027cc <__NVIC_SetPriority+0x50>)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3b04      	subs	r3, #4
 80027b4:	0112      	lsls	r2, r2, #4
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	440b      	add	r3, r1
 80027ba:	761a      	strb	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	@ 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f1c3 0307 	rsb	r3, r3, #7
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	bf28      	it	cs
 80027ee:	2304      	movcs	r3, #4
 80027f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d902      	bls.n	8002800 <NVIC_EncodePriority+0x30>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3b03      	subs	r3, #3
 80027fe:	e000      	b.n	8002802 <NVIC_EncodePriority+0x32>
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	401a      	ands	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43d9      	mvns	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	4313      	orrs	r3, r2
         );
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	@ 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002848:	d301      	bcc.n	800284e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284a:	2301      	movs	r3, #1
 800284c:	e00f      	b.n	800286e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284e:	4a0a      	ldr	r2, [pc, #40]	@ (8002878 <SysTick_Config+0x40>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002856:	210f      	movs	r1, #15
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f7ff ff8e 	bl	800277c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002860:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <SysTick_Config+0x40>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002866:	4b04      	ldr	r3, [pc, #16]	@ (8002878 <SysTick_Config+0x40>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff47 	bl	8002718 <__NVIC_SetPriorityGrouping>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a4:	f7ff ff5c 	bl	8002760 <__NVIC_GetPriorityGrouping>
 80028a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff ff8e 	bl	80027d0 <NVIC_EncodePriority>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff5d 	bl	800277c <__NVIC_SetPriority>
}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ffb0 	bl	8002838 <SysTick_Config>
 80028d8:	4603      	mov	r3, r0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e086      	b.n	8002a04 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d106      	bne.n	800290e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2223      	movs	r2, #35	@ 0x23
 8002904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7fe fe17 	bl	800153c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a0c <HAL_ETH_Init+0x128>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	4a3e      	ldr	r2, [pc, #248]	@ (8002a0c <HAL_ETH_Init+0x128>)
 8002914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002918:	6453      	str	r3, [r2, #68]	@ 0x44
 800291a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a0c <HAL_ETH_Init+0x128>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002926:	4b3a      	ldr	r3, [pc, #232]	@ (8002a10 <HAL_ETH_Init+0x12c>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a39      	ldr	r2, [pc, #228]	@ (8002a10 <HAL_ETH_Init+0x12c>)
 800292c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002930:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002932:	4b37      	ldr	r3, [pc, #220]	@ (8002a10 <HAL_ETH_Init+0x12c>)
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	4935      	ldr	r1, [pc, #212]	@ (8002a10 <HAL_ETH_Init+0x12c>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002940:	4b33      	ldr	r3, [pc, #204]	@ (8002a10 <HAL_ETH_Init+0x12c>)
 8002942:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800295a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800295c:	f7ff fa7e 	bl	8001e5c <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002962:	e011      	b.n	8002988 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002964:	f7ff fa7a 	bl	8001e5c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002972:	d909      	bls.n	8002988 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2204      	movs	r2, #4
 8002978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	22e0      	movs	r2, #224	@ 0xe0
 8002980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e03d      	b.n	8002a04 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e4      	bne.n	8002964 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f97a 	bl	8002c94 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fa25 	bl	8002df0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fa7b 	bl	8002ea2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	461a      	mov	r2, r3
 80029b2:	2100      	movs	r1, #0
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f9e3 	bl	8002d80 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80029c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <HAL_ETH_Init+0x130>)
 80029d8:	430b      	orrs	r3, r1
 80029da:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80029ee:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2210      	movs	r2, #16
 80029fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40013800 	.word	0x40013800
 8002a14:	00020060 	.word	0x00020060

08002a18 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <ETH_SetMACConfig+0x164>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	7b9b      	ldrb	r3, [r3, #14]
 8002a36:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	7c12      	ldrb	r2, [r2, #16]
 8002a3c:	2a00      	cmp	r2, #0
 8002a3e:	d102      	bne.n	8002a46 <ETH_SetMACConfig+0x2e>
 8002a40:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a44:	e000      	b.n	8002a48 <ETH_SetMACConfig+0x30>
 8002a46:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a48:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	7c52      	ldrb	r2, [r2, #17]
 8002a4e:	2a00      	cmp	r2, #0
 8002a50:	d102      	bne.n	8002a58 <ETH_SetMACConfig+0x40>
 8002a52:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002a56:	e000      	b.n	8002a5a <ETH_SetMACConfig+0x42>
 8002a58:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a5a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	7fdb      	ldrb	r3, [r3, #31]
 8002a66:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a68:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	7f92      	ldrb	r2, [r2, #30]
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	d102      	bne.n	8002a7e <ETH_SetMACConfig+0x66>
 8002a78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a7c:	e000      	b.n	8002a80 <ETH_SetMACConfig+0x68>
 8002a7e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a80:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	7f1b      	ldrb	r3, [r3, #28]
 8002a86:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a88:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a8e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	791b      	ldrb	r3, [r3, #4]
 8002a94:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002a96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a9e:	2a00      	cmp	r2, #0
 8002aa0:	d102      	bne.n	8002aa8 <ETH_SetMACConfig+0x90>
 8002aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa6:	e000      	b.n	8002aaa <ETH_SetMACConfig+0x92>
 8002aa8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002aaa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	7bdb      	ldrb	r3, [r3, #15]
 8002ab0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ab2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ab8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ac0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f7ff f9ca 	bl	8001e74 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002af6:	4013      	ands	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	d101      	bne.n	8002b0e <ETH_SetMACConfig+0xf6>
 8002b0a:	2280      	movs	r2, #128	@ 0x80
 8002b0c:	e000      	b.n	8002b10 <ETH_SetMACConfig+0xf8>
 8002b0e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b10:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002b1e:	2a01      	cmp	r2, #1
 8002b20:	d101      	bne.n	8002b26 <ETH_SetMACConfig+0x10e>
 8002b22:	2208      	movs	r2, #8
 8002b24:	e000      	b.n	8002b28 <ETH_SetMACConfig+0x110>
 8002b26:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b28:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002b30:	2a01      	cmp	r2, #1
 8002b32:	d101      	bne.n	8002b38 <ETH_SetMACConfig+0x120>
 8002b34:	2204      	movs	r2, #4
 8002b36:	e000      	b.n	8002b3a <ETH_SetMACConfig+0x122>
 8002b38:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002b42:	2a01      	cmp	r2, #1
 8002b44:	d101      	bne.n	8002b4a <ETH_SetMACConfig+0x132>
 8002b46:	2202      	movs	r2, #2
 8002b48:	e000      	b.n	8002b4c <ETH_SetMACConfig+0x134>
 8002b4a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b64:	2001      	movs	r0, #1
 8002b66:	f7ff f985 	bl	8001e74 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	fd20810f 	.word	0xfd20810f

08002b80 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4b3d      	ldr	r3, [pc, #244]	@ (8002c90 <ETH_SetDMAConfig+0x110>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	7b1b      	ldrb	r3, [r3, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <ETH_SetDMAConfig+0x2c>
 8002ba6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002baa:	e000      	b.n	8002bae <ETH_SetDMAConfig+0x2e>
 8002bac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	7b5b      	ldrb	r3, [r3, #13]
 8002bb2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bb4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	7f52      	ldrb	r2, [r2, #29]
 8002bba:	2a00      	cmp	r2, #0
 8002bbc:	d102      	bne.n	8002bc4 <ETH_SetDMAConfig+0x44>
 8002bbe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002bc2:	e000      	b.n	8002bc6 <ETH_SetDMAConfig+0x46>
 8002bc4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bc6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	7b9b      	ldrb	r3, [r3, #14]
 8002bcc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bd4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	7f1b      	ldrb	r3, [r3, #28]
 8002bda:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002bdc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	7f9b      	ldrb	r3, [r3, #30]
 8002be2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002be4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bf2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c04:	461a      	mov	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c16:	2001      	movs	r0, #1
 8002c18:	f7ff f92c 	bl	8001e74 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c24:	461a      	mov	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	791b      	ldrb	r3, [r3, #4]
 8002c2e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c34:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c3a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c40:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c48:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c4a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c52:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c58:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c66:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c74:	2001      	movs	r0, #1
 8002c76:	f7ff f8fd 	bl	8001e74 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	f8de3f23 	.word	0xf8de3f23

08002c94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b0a6      	sub	sp, #152	@ 0x98
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002cfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d00:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d0e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d12:	4619      	mov	r1, r3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff fe7f 	bl	8002a18 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d46:	2301      	movs	r3, #1
 8002d48:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d4e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d50:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d54:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d5a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d6a:	f107 0308 	add.w	r3, r7, #8
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ff05 	bl	8002b80 <ETH_SetDMAConfig>
}
 8002d76:	bf00      	nop
 8002d78:	3798      	adds	r7, #152	@ 0x98
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3305      	adds	r3, #5
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	3204      	adds	r2, #4
 8002d98:	7812      	ldrb	r2, [r2, #0]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <ETH_MACAddressConfig+0x68>)
 8002da2:	4413      	add	r3, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3303      	adds	r3, #3
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	061a      	lsls	r2, r3, #24
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3302      	adds	r3, #2
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	041b      	lsls	r3, r3, #16
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <ETH_MACAddressConfig+0x6c>)
 8002dd2:	4413      	add	r3, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	6013      	str	r3, [r2, #0]
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40028040 	.word	0x40028040
 8002dec:	40028044 	.word	0x40028044

08002df0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e03e      	b.n	8002e7c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68d9      	ldr	r1, [r3, #12]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2200      	movs	r2, #0
 8002e26:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	3206      	adds	r2, #6
 8002e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d80c      	bhi.n	8002e60 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68d9      	ldr	r1, [r3, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	e004      	b.n	8002e6a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d9bd      	bls.n	8002dfe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e94:	611a      	str	r2, [r3, #16]
}
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e048      	b.n	8002f42 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6919      	ldr	r1, [r3, #16]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2200      	movs	r2, #0
 8002ede:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002eec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	3212      	adds	r2, #18
 8002f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d80c      	bhi.n	8002f32 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6919      	ldr	r1, [r3, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	440b      	add	r3, r1
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	60da      	str	r2, [r3, #12]
 8002f30:	e004      	b.n	8002f3c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	461a      	mov	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d9b3      	bls.n	8002eb0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f72:	60da      	str	r2, [r3, #12]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	@ 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	e175      	b.n	800328c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	f040 8164 	bne.w	8003286 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d005      	beq.n	8002fd6 <HAL_GPIO_Init+0x56>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d130      	bne.n	8003038 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800300c:	2201      	movs	r2, #1
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 0201 	and.w	r2, r3, #1
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b03      	cmp	r3, #3
 8003042:	d017      	beq.n	8003074 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d123      	bne.n	80030c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	08da      	lsrs	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3208      	adds	r2, #8
 8003088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	220f      	movs	r2, #15
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	08da      	lsrs	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3208      	adds	r2, #8
 80030c2:	69b9      	ldr	r1, [r7, #24]
 80030c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0203 	and.w	r2, r3, #3
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80be 	beq.w	8003286 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310a:	4b66      	ldr	r3, [pc, #408]	@ (80032a4 <HAL_GPIO_Init+0x324>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	4a65      	ldr	r2, [pc, #404]	@ (80032a4 <HAL_GPIO_Init+0x324>)
 8003110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003114:	6453      	str	r3, [r2, #68]	@ 0x44
 8003116:	4b63      	ldr	r3, [pc, #396]	@ (80032a4 <HAL_GPIO_Init+0x324>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003122:	4a61      	ldr	r2, [pc, #388]	@ (80032a8 <HAL_GPIO_Init+0x328>)
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	3302      	adds	r3, #2
 800312a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	220f      	movs	r2, #15
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a58      	ldr	r2, [pc, #352]	@ (80032ac <HAL_GPIO_Init+0x32c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d037      	beq.n	80031be <HAL_GPIO_Init+0x23e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a57      	ldr	r2, [pc, #348]	@ (80032b0 <HAL_GPIO_Init+0x330>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d031      	beq.n	80031ba <HAL_GPIO_Init+0x23a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a56      	ldr	r2, [pc, #344]	@ (80032b4 <HAL_GPIO_Init+0x334>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d02b      	beq.n	80031b6 <HAL_GPIO_Init+0x236>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a55      	ldr	r2, [pc, #340]	@ (80032b8 <HAL_GPIO_Init+0x338>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d025      	beq.n	80031b2 <HAL_GPIO_Init+0x232>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a54      	ldr	r2, [pc, #336]	@ (80032bc <HAL_GPIO_Init+0x33c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01f      	beq.n	80031ae <HAL_GPIO_Init+0x22e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a53      	ldr	r2, [pc, #332]	@ (80032c0 <HAL_GPIO_Init+0x340>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d019      	beq.n	80031aa <HAL_GPIO_Init+0x22a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a52      	ldr	r2, [pc, #328]	@ (80032c4 <HAL_GPIO_Init+0x344>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_GPIO_Init+0x226>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a51      	ldr	r2, [pc, #324]	@ (80032c8 <HAL_GPIO_Init+0x348>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00d      	beq.n	80031a2 <HAL_GPIO_Init+0x222>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a50      	ldr	r2, [pc, #320]	@ (80032cc <HAL_GPIO_Init+0x34c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <HAL_GPIO_Init+0x21e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4f      	ldr	r2, [pc, #316]	@ (80032d0 <HAL_GPIO_Init+0x350>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_GPIO_Init+0x21a>
 8003196:	2309      	movs	r3, #9
 8003198:	e012      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 800319a:	230a      	movs	r3, #10
 800319c:	e010      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 800319e:	2308      	movs	r3, #8
 80031a0:	e00e      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031a2:	2307      	movs	r3, #7
 80031a4:	e00c      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031a6:	2306      	movs	r3, #6
 80031a8:	e00a      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031aa:	2305      	movs	r3, #5
 80031ac:	e008      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031ae:	2304      	movs	r3, #4
 80031b0:	e006      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031b2:	2303      	movs	r3, #3
 80031b4:	e004      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e002      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031be:	2300      	movs	r3, #0
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	f002 0203 	and.w	r2, r2, #3
 80031c6:	0092      	lsls	r2, r2, #2
 80031c8:	4093      	lsls	r3, r2
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031d0:	4935      	ldr	r1, [pc, #212]	@ (80032a8 <HAL_GPIO_Init+0x328>)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	089b      	lsrs	r3, r3, #2
 80031d6:	3302      	adds	r3, #2
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031de:	4b3d      	ldr	r3, [pc, #244]	@ (80032d4 <HAL_GPIO_Init+0x354>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003202:	4a34      	ldr	r2, [pc, #208]	@ (80032d4 <HAL_GPIO_Init+0x354>)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003208:	4b32      	ldr	r3, [pc, #200]	@ (80032d4 <HAL_GPIO_Init+0x354>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800322c:	4a29      	ldr	r2, [pc, #164]	@ (80032d4 <HAL_GPIO_Init+0x354>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003232:	4b28      	ldr	r3, [pc, #160]	@ (80032d4 <HAL_GPIO_Init+0x354>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003256:	4a1f      	ldr	r2, [pc, #124]	@ (80032d4 <HAL_GPIO_Init+0x354>)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800325c:	4b1d      	ldr	r3, [pc, #116]	@ (80032d4 <HAL_GPIO_Init+0x354>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003280:	4a14      	ldr	r2, [pc, #80]	@ (80032d4 <HAL_GPIO_Init+0x354>)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3301      	adds	r3, #1
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2b0f      	cmp	r3, #15
 8003290:	f67f ae86 	bls.w	8002fa0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3724      	adds	r7, #36	@ 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40013800 	.word	0x40013800
 80032ac:	40020000 	.word	0x40020000
 80032b0:	40020400 	.word	0x40020400
 80032b4:	40020800 	.word	0x40020800
 80032b8:	40020c00 	.word	0x40020c00
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40021400 	.word	0x40021400
 80032c4:	40021800 	.word	0x40021800
 80032c8:	40021c00 	.word	0x40021c00
 80032cc:	40022000 	.word	0x40022000
 80032d0:	40022400 	.word	0x40022400
 80032d4:	40013c00 	.word	0x40013c00

080032d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	807b      	strh	r3, [r7, #2]
 80032e4:	4613      	mov	r3, r2
 80032e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032e8:	787b      	ldrb	r3, [r7, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032f4:	e003      	b.n	80032fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032f6:	887b      	ldrh	r3, [r7, #2]
 80032f8:	041a      	lsls	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	619a      	str	r2, [r3, #24]
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e08b      	b.n	8003436 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe f9ba 	bl	80016ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	@ 0x24
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800335c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800336c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d107      	bne.n	8003386 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	e006      	b.n	8003394 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003392:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d108      	bne.n	80033ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	e007      	b.n	80033be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <HAL_I2C_Init+0x134>)
 80033ca:	430b      	orrs	r3, r1
 80033cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69d9      	ldr	r1, [r3, #28]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1a      	ldr	r2, [r3, #32]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	02008000 	.word	0x02008000

08003444 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	461a      	mov	r2, r3
 8003450:	460b      	mov	r3, r1
 8003452:	817b      	strh	r3, [r7, #10]
 8003454:	4613      	mov	r3, r2
 8003456:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b20      	cmp	r3, #32
 8003462:	f040 80fd 	bne.w	8003660 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_I2C_Master_Transmit+0x30>
 8003470:	2302      	movs	r3, #2
 8003472:	e0f6      	b.n	8003662 <HAL_I2C_Master_Transmit+0x21e>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800347c:	f7fe fcee 	bl	8001e5c <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2319      	movs	r3, #25
 8003488:	2201      	movs	r2, #1
 800348a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 faf6 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0e1      	b.n	8003662 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2221      	movs	r2, #33	@ 0x21
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2210      	movs	r2, #16
 80034aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	893a      	ldrh	r2, [r7, #8]
 80034be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2bff      	cmp	r3, #255	@ 0xff
 80034ce:	d906      	bls.n	80034de <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	22ff      	movs	r2, #255	@ 0xff
 80034d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80034d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e007      	b.n	80034ee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80034e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d024      	beq.n	8003540 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	781a      	ldrb	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352a:	b2db      	uxtb	r3, r3
 800352c:	3301      	adds	r3, #1
 800352e:	b2da      	uxtb	r2, r3
 8003530:	8979      	ldrh	r1, [r7, #10]
 8003532:	4b4e      	ldr	r3, [pc, #312]	@ (800366c <HAL_I2C_Master_Transmit+0x228>)
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fcf1 	bl	8003f20 <I2C_TransferConfig>
 800353e:	e066      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003544:	b2da      	uxtb	r2, r3
 8003546:	8979      	ldrh	r1, [r7, #10]
 8003548:	4b48      	ldr	r3, [pc, #288]	@ (800366c <HAL_I2C_Master_Transmit+0x228>)
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fce6 	bl	8003f20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003554:	e05b      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	6a39      	ldr	r1, [r7, #32]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fae9 	bl	8003b32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e07b      	b.n	8003662 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d034      	beq.n	800360e <HAL_I2C_Master_Transmit+0x1ca>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d130      	bne.n	800360e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	2200      	movs	r2, #0
 80035b4:	2180      	movs	r1, #128	@ 0x80
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fa62 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e04d      	b.n	8003662 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2bff      	cmp	r3, #255	@ 0xff
 80035ce:	d90e      	bls.n	80035ee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	22ff      	movs	r2, #255	@ 0xff
 80035d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	8979      	ldrh	r1, [r7, #10]
 80035de:	2300      	movs	r3, #0
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 fc9a 	bl	8003f20 <I2C_TransferConfig>
 80035ec:	e00f      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	8979      	ldrh	r1, [r7, #10]
 8003600:	2300      	movs	r3, #0
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fc89 	bl	8003f20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d19e      	bne.n	8003556 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	6a39      	ldr	r1, [r7, #32]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 facf 	bl	8003bc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e01a      	b.n	8003662 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2220      	movs	r2, #32
 8003632:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <HAL_I2C_Master_Transmit+0x22c>)
 8003640:	400b      	ands	r3, r1
 8003642:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	80002000 	.word	0x80002000
 8003670:	fe00e800 	.word	0xfe00e800

08003674 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	461a      	mov	r2, r3
 8003680:	460b      	mov	r3, r1
 8003682:	817b      	strh	r3, [r7, #10]
 8003684:	4613      	mov	r3, r2
 8003686:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b20      	cmp	r3, #32
 8003692:	f040 80db 	bne.w	800384c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_I2C_Master_Receive+0x30>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e0d4      	b.n	800384e <HAL_I2C_Master_Receive+0x1da>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036ac:	f7fe fbd6 	bl	8001e5c <HAL_GetTick>
 80036b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2319      	movs	r3, #25
 80036b8:	2201      	movs	r2, #1
 80036ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f9de 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e0bf      	b.n	800384e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2222      	movs	r2, #34	@ 0x22
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2210      	movs	r2, #16
 80036da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	893a      	ldrh	r2, [r7, #8]
 80036ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2bff      	cmp	r3, #255	@ 0xff
 80036fe:	d90e      	bls.n	800371e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370a:	b2da      	uxtb	r2, r3
 800370c:	8979      	ldrh	r1, [r7, #10]
 800370e:	4b52      	ldr	r3, [pc, #328]	@ (8003858 <HAL_I2C_Master_Receive+0x1e4>)
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fc02 	bl	8003f20 <I2C_TransferConfig>
 800371c:	e06d      	b.n	80037fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372c:	b2da      	uxtb	r2, r3
 800372e:	8979      	ldrh	r1, [r7, #10]
 8003730:	4b49      	ldr	r3, [pc, #292]	@ (8003858 <HAL_I2C_Master_Receive+0x1e4>)
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fbf1 	bl	8003f20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800373e:	e05c      	b.n	80037fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	6a39      	ldr	r1, [r7, #32]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fa7f 	bl	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e07c      	b.n	800384e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d034      	beq.n	80037fa <HAL_I2C_Master_Receive+0x186>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003794:	2b00      	cmp	r3, #0
 8003796:	d130      	bne.n	80037fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	2200      	movs	r2, #0
 80037a0:	2180      	movs	r1, #128	@ 0x80
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f96c 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e04d      	b.n	800384e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2bff      	cmp	r3, #255	@ 0xff
 80037ba:	d90e      	bls.n	80037da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	22ff      	movs	r2, #255	@ 0xff
 80037c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	8979      	ldrh	r1, [r7, #10]
 80037ca:	2300      	movs	r3, #0
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fba4 	bl	8003f20 <I2C_TransferConfig>
 80037d8:	e00f      	b.n	80037fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	8979      	ldrh	r1, [r7, #10]
 80037ec:	2300      	movs	r3, #0
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fb93 	bl	8003f20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d19d      	bne.n	8003740 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	6a39      	ldr	r1, [r7, #32]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f9d9 	bl	8003bc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e01a      	b.n	800384e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2220      	movs	r2, #32
 800381e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <HAL_I2C_Master_Receive+0x1e8>)
 800382c:	400b      	ands	r3, r1
 800382e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	80002400 	.word	0x80002400
 800385c:	fe00e800 	.word	0xfe00e800

08003860 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	@ 0x28
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	460b      	mov	r3, r1
 800386e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b20      	cmp	r3, #32
 800387e:	f040 80d2 	bne.w	8003a26 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800388c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003890:	d101      	bne.n	8003896 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003892:	2302      	movs	r3, #2
 8003894:	e0c8      	b.n	8003a28 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_I2C_IsDeviceReady+0x44>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e0c1      	b.n	8003a28 <HAL_I2C_IsDeviceReady+0x1c8>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2224      	movs	r2, #36	@ 0x24
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <HAL_I2C_IsDeviceReady+0x6e>
 80038c2:	897b      	ldrh	r3, [r7, #10]
 80038c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038c8:	4b59      	ldr	r3, [pc, #356]	@ (8003a30 <HAL_I2C_IsDeviceReady+0x1d0>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	e004      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x78>
 80038ce:	897b      	ldrh	r3, [r7, #10]
 80038d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038d4:	4b57      	ldr	r3, [pc, #348]	@ (8003a34 <HAL_I2C_IsDeviceReady+0x1d4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80038de:	f7fe fabd 	bl	8001e5c <HAL_GetTick>
 80038e2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b10      	cmp	r3, #16
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003910:	e034      	b.n	800397c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d01a      	beq.n	8003950 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800391a:	f7fe fa9f 	bl	8001e5c <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d302      	bcc.n	8003930 <HAL_I2C_IsDeviceReady+0xd0>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393c:	f043 0220 	orr.w	r2, r3, #32
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e06b      	b.n	8003a28 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b20      	cmp	r3, #32
 800395c:	bf0c      	ite	eq
 800395e:	2301      	moveq	r3, #1
 8003960:	2300      	movne	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b10      	cmp	r3, #16
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800397c:	7ffb      	ldrb	r3, [r7, #31]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <HAL_I2C_IsDeviceReady+0x128>
 8003982:	7fbb      	ldrb	r3, [r7, #30]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0c4      	beq.n	8003912 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b10      	cmp	r3, #16
 8003994:	d01a      	beq.n	80039cc <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	2120      	movs	r1, #32
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f86d 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e03b      	b.n	8003a28 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2220      	movs	r2, #32
 80039b6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e02d      	b.n	8003a28 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2200      	movs	r2, #0
 80039d4:	2120      	movs	r1, #32
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f852 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e020      	b.n	8003a28 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2210      	movs	r2, #16
 80039ec:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2220      	movs	r2, #32
 80039f4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	3301      	adds	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	f63f af5a 	bhi.w	80038ba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3720      	adds	r7, #32
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	02002000 	.word	0x02002000
 8003a34:	02002800 	.word	0x02002800

08003a38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d103      	bne.n	8003a56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2200      	movs	r2, #0
 8003a54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d007      	beq.n	8003a74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	619a      	str	r2, [r3, #24]
  }
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a90:	e03b      	b.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	6839      	ldr	r1, [r7, #0]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f962 	bl	8003d60 <I2C_IsErrorOccurred>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e041      	b.n	8003b2a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aac:	d02d      	beq.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aae:	f7fe f9d5 	bl	8001e5c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d302      	bcc.n	8003ac4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d122      	bne.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d113      	bne.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae6:	f043 0220 	orr.w	r2, r3, #32
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e00f      	b.n	8003b2a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d0b4      	beq.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b3e:	e033      	b.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f90b 	bl	8003d60 <I2C_IsErrorOccurred>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e031      	b.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d025      	beq.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5c:	f7fe f97e 	bl	8001e5c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d302      	bcc.n	8003b72 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11a      	bne.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d013      	beq.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e007      	b.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d1c4      	bne.n	8003b40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bcc:	e02f      	b.n	8003c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f8c4 	bl	8003d60 <I2C_IsErrorOccurred>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e02d      	b.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be2:	f7fe f93b 	bl	8001e5c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d302      	bcc.n	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d11a      	bne.n	8003c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d013      	beq.n	8003c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e007      	b.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d1c8      	bne.n	8003bce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003c58:	e071      	b.n	8003d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f87e 	bl	8003d60 <I2C_IsErrorOccurred>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d13b      	bne.n	8003cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d138      	bne.n	8003cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d105      	bne.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d121      	bne.n	8003cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2210      	movs	r2, #16
 8003cb0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b24      	ldr	r3, [pc, #144]	@ (8003d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003ccc:	400b      	ands	r3, r1
 8003cce:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	75fb      	strb	r3, [r7, #23]
 8003cec:	e002      	b.n	8003cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003cf4:	f7fe f8b2 	bl	8001e5c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d302      	bcc.n	8003d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d119      	bne.n	8003d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d116      	bne.n	8003d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d00f      	beq.n	8003d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d002      	beq.n	8003d52 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d083      	beq.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	fe00e800 	.word	0xfe00e800

08003d60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	@ 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d068      	beq.n	8003e5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2210      	movs	r2, #16
 8003d92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d94:	e049      	b.n	8003e2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d045      	beq.n	8003e2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d9e:	f7fe f85d 	bl	8001e5c <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d302      	bcc.n	8003db4 <I2C_IsErrorOccurred+0x54>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d13a      	bne.n	8003e2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd6:	d121      	bne.n	8003e1c <I2C_IsErrorOccurred+0xbc>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dde:	d01d      	beq.n	8003e1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003de0:	7cfb      	ldrb	r3, [r7, #19]
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d01a      	beq.n	8003e1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003df4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003df6:	f7fe f831 	bl	8001e5c <HAL_GetTick>
 8003dfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dfc:	e00e      	b.n	8003e1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003dfe:	f7fe f82d 	bl	8001e5c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b19      	cmp	r3, #25
 8003e0a:	d907      	bls.n	8003e1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	f043 0320 	orr.w	r3, r3, #32
 8003e12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003e1a:	e006      	b.n	8003e2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d1e9      	bne.n	8003dfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d003      	beq.n	8003e40 <I2C_IsErrorOccurred+0xe0>
 8003e38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0aa      	beq.n	8003d96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d103      	bne.n	8003e50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00b      	beq.n	8003e88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f043 0308 	orr.w	r3, r3, #8
 8003e98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ea2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00b      	beq.n	8003ecc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	f043 0302 	orr.w	r3, r3, #2
 8003eba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ec4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01c      	beq.n	8003f0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff fdaf 	bl	8003a38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <I2C_IsErrorOccurred+0x1bc>)
 8003ee6:	400b      	ands	r3, r1
 8003ee8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3728      	adds	r7, #40	@ 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	fe00e800 	.word	0xfe00e800

08003f20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	817b      	strh	r3, [r7, #10]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f32:	897b      	ldrh	r3, [r7, #10]
 8003f34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f38:	7a7b      	ldrb	r3, [r7, #9]
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	0d5b      	lsrs	r3, r3, #21
 8003f5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003f5e:	4b08      	ldr	r3, [pc, #32]	@ (8003f80 <I2C_TransferConfig+0x60>)
 8003f60:	430b      	orrs	r3, r1
 8003f62:	43db      	mvns	r3, r3
 8003f64:	ea02 0103 	and.w	r1, r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	03ff63ff 	.word	0x03ff63ff

08003f84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d138      	bne.n	800400c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e032      	b.n	800400e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2224      	movs	r2, #36	@ 0x24
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6819      	ldr	r1, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e000      	b.n	800400e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b20      	cmp	r3, #32
 800402e:	d139      	bne.n	80040a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800403a:	2302      	movs	r3, #2
 800403c:	e033      	b.n	80040a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2224      	movs	r2, #36	@ 0x24
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800406c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af02      	add	r7, sp, #8
 80040b8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e108      	b.n	80042d6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd fcc0 	bl	8001a64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2203      	movs	r2, #3
 80040e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040f2:	d102      	bne.n	80040fa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f002 f820 	bl	8006144 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	7c1a      	ldrb	r2, [r3, #16]
 800410c:	f88d 2000 	strb.w	r2, [sp]
 8004110:	3304      	adds	r3, #4
 8004112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004114:	f001 ffbc 	bl	8006090 <USB_CoreInit>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2202      	movs	r2, #2
 8004122:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e0d5      	b.n	80042d6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f002 f818 	bl	8006166 <USB_SetCurrentMode>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0c6      	b.n	80042d6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004148:	2300      	movs	r3, #0
 800414a:	73fb      	strb	r3, [r7, #15]
 800414c:	e04a      	b.n	80041e4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800414e:	7bfa      	ldrb	r2, [r7, #15]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	3315      	adds	r3, #21
 800415e:	2201      	movs	r2, #1
 8004160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	3314      	adds	r3, #20
 8004172:	7bfa      	ldrb	r2, [r7, #15]
 8004174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004176:	7bfa      	ldrb	r2, [r7, #15]
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	b298      	uxth	r0, r3
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	332e      	adds	r3, #46	@ 0x2e
 800418a:	4602      	mov	r2, r0
 800418c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800418e:	7bfa      	ldrb	r2, [r7, #15]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	3318      	adds	r3, #24
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041a2:	7bfa      	ldrb	r2, [r7, #15]
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	331c      	adds	r3, #28
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041b6:	7bfa      	ldrb	r2, [r7, #15]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	3320      	adds	r3, #32
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041ca:	7bfa      	ldrb	r2, [r7, #15]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	3324      	adds	r3, #36	@ 0x24
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	3301      	adds	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	791b      	ldrb	r3, [r3, #4]
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d3af      	bcc.n	800414e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]
 80041f2:	e044      	b.n	800427e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041f4:	7bfa      	ldrb	r2, [r7, #15]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004206:	2200      	movs	r2, #0
 8004208:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800420a:	7bfa      	ldrb	r2, [r7, #15]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	440b      	add	r3, r1
 8004218:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004220:	7bfa      	ldrb	r2, [r7, #15]
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004262:	7bfa      	ldrb	r2, [r7, #15]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	3301      	adds	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	791b      	ldrb	r3, [r3, #4]
 8004282:	7bfa      	ldrb	r2, [r7, #15]
 8004284:	429a      	cmp	r2, r3
 8004286:	d3b5      	bcc.n	80041f4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	7c1a      	ldrb	r2, [r3, #16]
 8004290:	f88d 2000 	strb.w	r2, [sp]
 8004294:	3304      	adds	r3, #4
 8004296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004298:	f001 ffb2 	bl	8006200 <USB_DevInit>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2202      	movs	r2, #2
 80042a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e013      	b.n	80042d6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	7b1b      	ldrb	r3, [r3, #12]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d102      	bne.n	80042ca <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f80b 	bl	80042e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f002 f96d 	bl	80065ae <USB_DevDisconnect>

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800430e:	4b05      	ldr	r3, [pc, #20]	@ (8004324 <HAL_PCDEx_ActivateLPM+0x44>)
 8004310:	4313      	orrs	r3, r2
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	10000003 	.word	0x10000003

08004328 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800432c:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a04      	ldr	r2, [pc, #16]	@ (8004344 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004336:	6013      	str	r3, [r2, #0]
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40007000 	.word	0x40007000

08004348 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004352:	4b23      	ldr	r3, [pc, #140]	@ (80043e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	4a22      	ldr	r2, [pc, #136]	@ (80043e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800435c:	6413      	str	r3, [r2, #64]	@ 0x40
 800435e:	4b20      	ldr	r3, [pc, #128]	@ (80043e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800436a:	4b1e      	ldr	r3, [pc, #120]	@ (80043e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1d      	ldr	r2, [pc, #116]	@ (80043e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004374:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004376:	f7fd fd71 	bl	8001e5c <HAL_GetTick>
 800437a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800437c:	e009      	b.n	8004392 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800437e:	f7fd fd6d 	bl	8001e5c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800438c:	d901      	bls.n	8004392 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e022      	b.n	80043d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004392:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800439a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800439e:	d1ee      	bne.n	800437e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043a0:	4b10      	ldr	r3, [pc, #64]	@ (80043e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a0f      	ldr	r2, [pc, #60]	@ (80043e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043ac:	f7fd fd56 	bl	8001e5c <HAL_GetTick>
 80043b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043b2:	e009      	b.n	80043c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043b4:	f7fd fd52 	bl	8001e5c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043c2:	d901      	bls.n	80043c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e007      	b.n	80043d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043c8:	4b06      	ldr	r3, [pc, #24]	@ (80043e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043d4:	d1ee      	bne.n	80043b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40007000 	.word	0x40007000

080043e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80043f0:	2300      	movs	r3, #0
 80043f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e29b      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 8087 	beq.w	800451a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800440c:	4b96      	ldr	r3, [pc, #600]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 030c 	and.w	r3, r3, #12
 8004414:	2b04      	cmp	r3, #4
 8004416:	d00c      	beq.n	8004432 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004418:	4b93      	ldr	r3, [pc, #588]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b08      	cmp	r3, #8
 8004422:	d112      	bne.n	800444a <HAL_RCC_OscConfig+0x62>
 8004424:	4b90      	ldr	r3, [pc, #576]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800442c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004430:	d10b      	bne.n	800444a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004432:	4b8d      	ldr	r3, [pc, #564]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d06c      	beq.n	8004518 <HAL_RCC_OscConfig+0x130>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d168      	bne.n	8004518 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e275      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004452:	d106      	bne.n	8004462 <HAL_RCC_OscConfig+0x7a>
 8004454:	4b84      	ldr	r3, [pc, #528]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a83      	ldr	r2, [pc, #524]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 800445a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	e02e      	b.n	80044c0 <HAL_RCC_OscConfig+0xd8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10c      	bne.n	8004484 <HAL_RCC_OscConfig+0x9c>
 800446a:	4b7f      	ldr	r3, [pc, #508]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a7e      	ldr	r2, [pc, #504]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b7c      	ldr	r3, [pc, #496]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a7b      	ldr	r2, [pc, #492]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 800447c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e01d      	b.n	80044c0 <HAL_RCC_OscConfig+0xd8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800448c:	d10c      	bne.n	80044a8 <HAL_RCC_OscConfig+0xc0>
 800448e:	4b76      	ldr	r3, [pc, #472]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a75      	ldr	r2, [pc, #468]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b73      	ldr	r3, [pc, #460]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a72      	ldr	r2, [pc, #456]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e00b      	b.n	80044c0 <HAL_RCC_OscConfig+0xd8>
 80044a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 80044ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b6c      	ldr	r3, [pc, #432]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a6b      	ldr	r2, [pc, #428]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 80044ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d013      	beq.n	80044f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fd fcc8 	bl	8001e5c <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d0:	f7fd fcc4 	bl	8001e5c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	@ 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e229      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b61      	ldr	r3, [pc, #388]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0xe8>
 80044ee:	e014      	b.n	800451a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fd fcb4 	bl	8001e5c <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f8:	f7fd fcb0 	bl	8001e5c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	@ 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e215      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450a:	4b57      	ldr	r3, [pc, #348]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x110>
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d069      	beq.n	80045fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004526:	4b50      	ldr	r3, [pc, #320]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004532:	4b4d      	ldr	r3, [pc, #308]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b08      	cmp	r3, #8
 800453c:	d11c      	bne.n	8004578 <HAL_RCC_OscConfig+0x190>
 800453e:	4b4a      	ldr	r3, [pc, #296]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454a:	4b47      	ldr	r3, [pc, #284]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_RCC_OscConfig+0x17a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d001      	beq.n	8004562 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e1e9      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004562:	4b41      	ldr	r3, [pc, #260]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	493d      	ldr	r1, [pc, #244]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004572:	4313      	orrs	r3, r2
 8004574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004576:	e040      	b.n	80045fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d023      	beq.n	80045c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004580:	4b39      	ldr	r3, [pc, #228]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a38      	ldr	r2, [pc, #224]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7fd fc66 	bl	8001e5c <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004594:	f7fd fc62 	bl	8001e5c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e1c7      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a6:	4b30      	ldr	r3, [pc, #192]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4929      	ldr	r1, [pc, #164]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	600b      	str	r3, [r1, #0]
 80045c6:	e018      	b.n	80045fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045c8:	4b27      	ldr	r3, [pc, #156]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a26      	ldr	r2, [pc, #152]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd fc42 	bl	8001e5c <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045dc:	f7fd fc3e 	bl	8001e5c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e1a3      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d038      	beq.n	8004678 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d019      	beq.n	8004642 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800460e:	4b16      	ldr	r3, [pc, #88]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004612:	4a15      	ldr	r2, [pc, #84]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461a:	f7fd fc1f 	bl	8001e5c <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004622:	f7fd fc1b 	bl	8001e5c <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e180      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004634:	4b0c      	ldr	r3, [pc, #48]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x23a>
 8004640:	e01a      	b.n	8004678 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004642:	4b09      	ldr	r3, [pc, #36]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004646:	4a08      	ldr	r2, [pc, #32]	@ (8004668 <HAL_RCC_OscConfig+0x280>)
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464e:	f7fd fc05 	bl	8001e5c <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004654:	e00a      	b.n	800466c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004656:	f7fd fc01 	bl	8001e5c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d903      	bls.n	800466c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e166      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
 8004668:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466c:	4b92      	ldr	r3, [pc, #584]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 800466e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1ee      	bne.n	8004656 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80a4 	beq.w	80047ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004686:	4b8c      	ldr	r3, [pc, #560]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10d      	bne.n	80046ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004692:	4b89      	ldr	r3, [pc, #548]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	4a88      	ldr	r2, [pc, #544]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800469c:	6413      	str	r3, [r2, #64]	@ 0x40
 800469e:	4b86      	ldr	r3, [pc, #536]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046aa:	2301      	movs	r3, #1
 80046ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ae:	4b83      	ldr	r3, [pc, #524]	@ (80048bc <HAL_RCC_OscConfig+0x4d4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d118      	bne.n	80046ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046ba:	4b80      	ldr	r3, [pc, #512]	@ (80048bc <HAL_RCC_OscConfig+0x4d4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a7f      	ldr	r2, [pc, #508]	@ (80048bc <HAL_RCC_OscConfig+0x4d4>)
 80046c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c6:	f7fd fbc9 	bl	8001e5c <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ce:	f7fd fbc5 	bl	8001e5c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b64      	cmp	r3, #100	@ 0x64
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e12a      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e0:	4b76      	ldr	r3, [pc, #472]	@ (80048bc <HAL_RCC_OscConfig+0x4d4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d106      	bne.n	8004702 <HAL_RCC_OscConfig+0x31a>
 80046f4:	4b70      	ldr	r3, [pc, #448]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f8:	4a6f      	ldr	r2, [pc, #444]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004700:	e02d      	b.n	800475e <HAL_RCC_OscConfig+0x376>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10c      	bne.n	8004724 <HAL_RCC_OscConfig+0x33c>
 800470a:	4b6b      	ldr	r3, [pc, #428]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470e:	4a6a      	ldr	r2, [pc, #424]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	6713      	str	r3, [r2, #112]	@ 0x70
 8004716:	4b68      	ldr	r3, [pc, #416]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	4a67      	ldr	r2, [pc, #412]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 800471c:	f023 0304 	bic.w	r3, r3, #4
 8004720:	6713      	str	r3, [r2, #112]	@ 0x70
 8004722:	e01c      	b.n	800475e <HAL_RCC_OscConfig+0x376>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b05      	cmp	r3, #5
 800472a:	d10c      	bne.n	8004746 <HAL_RCC_OscConfig+0x35e>
 800472c:	4b62      	ldr	r3, [pc, #392]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004730:	4a61      	ldr	r2, [pc, #388]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004732:	f043 0304 	orr.w	r3, r3, #4
 8004736:	6713      	str	r3, [r2, #112]	@ 0x70
 8004738:	4b5f      	ldr	r3, [pc, #380]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473c:	4a5e      	ldr	r2, [pc, #376]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	@ 0x70
 8004744:	e00b      	b.n	800475e <HAL_RCC_OscConfig+0x376>
 8004746:	4b5c      	ldr	r3, [pc, #368]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474a:	4a5b      	ldr	r2, [pc, #364]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	6713      	str	r3, [r2, #112]	@ 0x70
 8004752:	4b59      	ldr	r3, [pc, #356]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004756:	4a58      	ldr	r2, [pc, #352]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004758:	f023 0304 	bic.w	r3, r3, #4
 800475c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d015      	beq.n	8004792 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004766:	f7fd fb79 	bl	8001e5c <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	e00a      	b.n	8004784 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476e:	f7fd fb75 	bl	8001e5c <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e0d8      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	4b4c      	ldr	r3, [pc, #304]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ee      	beq.n	800476e <HAL_RCC_OscConfig+0x386>
 8004790:	e014      	b.n	80047bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7fd fb63 	bl	8001e5c <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004798:	e00a      	b.n	80047b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fd fb5f 	bl	8001e5c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e0c2      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b0:	4b41      	ldr	r3, [pc, #260]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ee      	bne.n	800479a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d105      	bne.n	80047ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c2:	4b3d      	ldr	r3, [pc, #244]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c6:	4a3c      	ldr	r2, [pc, #240]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 80047c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80ae 	beq.w	8004934 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047d8:	4b37      	ldr	r3, [pc, #220]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d06d      	beq.n	80048c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d14b      	bne.n	8004884 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ec:	4b32      	ldr	r3, [pc, #200]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a31      	ldr	r2, [pc, #196]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 80047f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd fb30 	bl	8001e5c <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004800:	f7fd fb2c 	bl	8001e5c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e091      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004812:	4b29      	ldr	r3, [pc, #164]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69da      	ldr	r2, [r3, #28]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	019b      	lsls	r3, r3, #6
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	3b01      	subs	r3, #1
 8004838:	041b      	lsls	r3, r3, #16
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	061b      	lsls	r3, r3, #24
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	071b      	lsls	r3, r3, #28
 800484a:	491b      	ldr	r1, [pc, #108]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 800484c:	4313      	orrs	r3, r2
 800484e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004850:	4b19      	ldr	r3, [pc, #100]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800485a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fd fafe 	bl	8001e5c <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004864:	f7fd fafa 	bl	8001e5c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e05f      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004876:	4b10      	ldr	r3, [pc, #64]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0x47c>
 8004882:	e057      	b.n	8004934 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004884:	4b0c      	ldr	r3, [pc, #48]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a0b      	ldr	r2, [pc, #44]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 800488a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800488e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fd fae4 	bl	8001e5c <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004898:	f7fd fae0 	bl	8001e5c <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e045      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048aa:	4b03      	ldr	r3, [pc, #12]	@ (80048b8 <HAL_RCC_OscConfig+0x4d0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x4b0>
 80048b6:	e03d      	b.n	8004934 <HAL_RCC_OscConfig+0x54c>
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004940 <HAL_RCC_OscConfig+0x558>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d030      	beq.n	8004930 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d129      	bne.n	8004930 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d122      	bne.n	8004930 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048f0:	4013      	ands	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d119      	bne.n	8004930 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	3b01      	subs	r3, #1
 800490a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d10f      	bne.n	8004930 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d107      	bne.n	8004930 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d001      	beq.n	8004934 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40023800 	.word	0x40023800

08004944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0d0      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800495c:	4b6a      	ldr	r3, [pc, #424]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d910      	bls.n	800498c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b67      	ldr	r3, [pc, #412]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 020f 	bic.w	r2, r3, #15
 8004972:	4965      	ldr	r1, [pc, #404]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4313      	orrs	r3, r2
 8004978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b63      	ldr	r3, [pc, #396]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0b8      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d020      	beq.n	80049da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a4:	4b59      	ldr	r3, [pc, #356]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4a58      	ldr	r2, [pc, #352]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049bc:	4b53      	ldr	r3, [pc, #332]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	4a52      	ldr	r2, [pc, #328]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c8:	4b50      	ldr	r3, [pc, #320]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	494d      	ldr	r1, [pc, #308]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d040      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d107      	bne.n	80049fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ee:	4b47      	ldr	r3, [pc, #284]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d115      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e07f      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d107      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a06:	4b41      	ldr	r3, [pc, #260]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e073      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a16:	4b3d      	ldr	r3, [pc, #244]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e06b      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a26:	4b39      	ldr	r3, [pc, #228]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f023 0203 	bic.w	r2, r3, #3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	4936      	ldr	r1, [pc, #216]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a38:	f7fd fa10 	bl	8001e5c <HAL_GetTick>
 8004a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a40:	f7fd fa0c 	bl	8001e5c <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e053      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a56:	4b2d      	ldr	r3, [pc, #180]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 020c 	and.w	r2, r3, #12
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d1eb      	bne.n	8004a40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a68:	4b27      	ldr	r3, [pc, #156]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d210      	bcs.n	8004a98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b24      	ldr	r3, [pc, #144]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 020f 	bic.w	r2, r3, #15
 8004a7e:	4922      	ldr	r1, [pc, #136]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b20      	ldr	r3, [pc, #128]	@ (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e032      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa4:	4b19      	ldr	r3, [pc, #100]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4916      	ldr	r1, [pc, #88]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ac2:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	490e      	ldr	r1, [pc, #56]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ad6:	f000 f821 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8004ada:	4602      	mov	r2, r0
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	490a      	ldr	r1, [pc, #40]	@ (8004b10 <HAL_RCC_ClockConfig+0x1cc>)
 8004ae8:	5ccb      	ldrb	r3, [r1, r3]
 8004aea:	fa22 f303 	lsr.w	r3, r2, r3
 8004aee:	4a09      	ldr	r2, [pc, #36]	@ (8004b14 <HAL_RCC_ClockConfig+0x1d0>)
 8004af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004af2:	4b09      	ldr	r3, [pc, #36]	@ (8004b18 <HAL_RCC_ClockConfig+0x1d4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fd f96c 	bl	8001dd4 <HAL_InitTick>

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40023c00 	.word	0x40023c00
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	08009dc0 	.word	0x08009dc0
 8004b14:	20000000 	.word	0x20000000
 8004b18:	20000004 	.word	0x20000004

08004b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b20:	b094      	sub	sp, #80	@ 0x50
 8004b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b28:	2300      	movs	r3, #0
 8004b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b34:	4b79      	ldr	r3, [pc, #484]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d00d      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x40>
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	f200 80e1 	bhi.w	8004d08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0x34>
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b4e:	e0db      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b50:	4b73      	ldr	r3, [pc, #460]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b54:	e0db      	b.n	8004d0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b56:	4b73      	ldr	r3, [pc, #460]	@ (8004d24 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b5a:	e0d8      	b.n	8004d0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b5c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b64:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b66:	4b6d      	ldr	r3, [pc, #436]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d063      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b72:	4b6a      	ldr	r3, [pc, #424]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	099b      	lsrs	r3, r3, #6
 8004b78:	2200      	movs	r2, #0
 8004b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b86:	2300      	movs	r3, #0
 8004b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b8e:	4622      	mov	r2, r4
 8004b90:	462b      	mov	r3, r5
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f04f 0100 	mov.w	r1, #0
 8004b9a:	0159      	lsls	r1, r3, #5
 8004b9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba0:	0150      	lsls	r0, r2, #5
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	1a51      	subs	r1, r2, r1
 8004baa:	6139      	str	r1, [r7, #16]
 8004bac:	4629      	mov	r1, r5
 8004bae:	eb63 0301 	sbc.w	r3, r3, r1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bc0:	4659      	mov	r1, fp
 8004bc2:	018b      	lsls	r3, r1, #6
 8004bc4:	4651      	mov	r1, sl
 8004bc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bca:	4651      	mov	r1, sl
 8004bcc:	018a      	lsls	r2, r1, #6
 8004bce:	4651      	mov	r1, sl
 8004bd0:	ebb2 0801 	subs.w	r8, r2, r1
 8004bd4:	4659      	mov	r1, fp
 8004bd6:	eb63 0901 	sbc.w	r9, r3, r1
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004be6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bee:	4690      	mov	r8, r2
 8004bf0:	4699      	mov	r9, r3
 8004bf2:	4623      	mov	r3, r4
 8004bf4:	eb18 0303 	adds.w	r3, r8, r3
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	462b      	mov	r3, r5
 8004bfc:	eb49 0303 	adc.w	r3, r9, r3
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c0e:	4629      	mov	r1, r5
 8004c10:	024b      	lsls	r3, r1, #9
 8004c12:	4621      	mov	r1, r4
 8004c14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c18:	4621      	mov	r1, r4
 8004c1a:	024a      	lsls	r2, r1, #9
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c22:	2200      	movs	r2, #0
 8004c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c2c:	f7fb fb60 	bl	80002f0 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4613      	mov	r3, r2
 8004c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c38:	e058      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3a:	4b38      	ldr	r3, [pc, #224]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	099b      	lsrs	r3, r3, #6
 8004c40:	2200      	movs	r2, #0
 8004c42:	4618      	mov	r0, r3
 8004c44:	4611      	mov	r1, r2
 8004c46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c4a:	623b      	str	r3, [r7, #32]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c54:	4642      	mov	r2, r8
 8004c56:	464b      	mov	r3, r9
 8004c58:	f04f 0000 	mov.w	r0, #0
 8004c5c:	f04f 0100 	mov.w	r1, #0
 8004c60:	0159      	lsls	r1, r3, #5
 8004c62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c66:	0150      	lsls	r0, r2, #5
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c72:	4649      	mov	r1, r9
 8004c74:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c8c:	ebb2 040a 	subs.w	r4, r2, sl
 8004c90:	eb63 050b 	sbc.w	r5, r3, fp
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	f04f 0300 	mov.w	r3, #0
 8004c9c:	00eb      	lsls	r3, r5, #3
 8004c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ca2:	00e2      	lsls	r2, r4, #3
 8004ca4:	4614      	mov	r4, r2
 8004ca6:	461d      	mov	r5, r3
 8004ca8:	4643      	mov	r3, r8
 8004caa:	18e3      	adds	r3, r4, r3
 8004cac:	603b      	str	r3, [r7, #0]
 8004cae:	464b      	mov	r3, r9
 8004cb0:	eb45 0303 	adc.w	r3, r5, r3
 8004cb4:	607b      	str	r3, [r7, #4]
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	028b      	lsls	r3, r1, #10
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ccc:	4621      	mov	r1, r4
 8004cce:	028a      	lsls	r2, r1, #10
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	61fa      	str	r2, [r7, #28]
 8004cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce0:	f7fb fb06 	bl	80002f0 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4613      	mov	r3, r2
 8004cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004cec:	4b0b      	ldr	r3, [pc, #44]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	0c1b      	lsrs	r3, r3, #16
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004cfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d06:	e002      	b.n	8004d0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3750      	adds	r7, #80	@ 0x50
 8004d14:	46bd      	mov	sp, r7
 8004d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	00f42400 	.word	0x00f42400
 8004d24:	007a1200 	.word	0x007a1200

08004d28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d2c:	4b03      	ldr	r3, [pc, #12]	@ (8004d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000000 	.word	0x20000000

08004d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d44:	f7ff fff0 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	0a9b      	lsrs	r3, r3, #10
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	4903      	ldr	r1, [pc, #12]	@ (8004d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d56:	5ccb      	ldrb	r3, [r1, r3]
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40023800 	.word	0x40023800
 8004d64:	08009dd0 	.word	0x08009dd0

08004d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d6c:	f7ff ffdc 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0b5b      	lsrs	r3, r3, #13
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4903      	ldr	r1, [pc, #12]	@ (8004d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	08009dd0 	.word	0x08009dd0

08004d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d012      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004db8:	4b69      	ldr	r3, [pc, #420]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4a68      	ldr	r2, [pc, #416]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dbe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004dc2:	6093      	str	r3, [r2, #8]
 8004dc4:	4b66      	ldr	r3, [pc, #408]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dcc:	4964      	ldr	r1, [pc, #400]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d017      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dea:	4b5d      	ldr	r3, [pc, #372]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004df0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df8:	4959      	ldr	r1, [pc, #356]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e08:	d101      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d017      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e26:	4b4e      	ldr	r3, [pc, #312]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e2c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e34:	494a      	ldr	r1, [pc, #296]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e44:	d101      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e46:	2301      	movs	r3, #1
 8004e48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e52:	2301      	movs	r3, #1
 8004e54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 808b 	beq.w	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e74:	4b3a      	ldr	r3, [pc, #232]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	4a39      	ldr	r2, [pc, #228]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e80:	4b37      	ldr	r3, [pc, #220]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e8c:	4b35      	ldr	r3, [pc, #212]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a34      	ldr	r2, [pc, #208]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e98:	f7fc ffe0 	bl	8001e5c <HAL_GetTick>
 8004e9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea0:	f7fc ffdc 	bl	8001e5c <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	@ 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e38f      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ebe:	4b28      	ldr	r3, [pc, #160]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ec6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d035      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d02e      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004edc:	4b20      	ldr	r3, [pc, #128]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eea:	4a1d      	ldr	r2, [pc, #116]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004efc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004efe:	4a18      	ldr	r2, [pc, #96]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f04:	4b16      	ldr	r3, [pc, #88]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d114      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fc ffa4 	bl	8001e5c <HAL_GetTick>
 8004f14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f16:	e00a      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f18:	f7fc ffa0 	bl	8001e5c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e351      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0ee      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f46:	d111      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f54:	4b04      	ldr	r3, [pc, #16]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f56:	400b      	ands	r3, r1
 8004f58:	4901      	ldr	r1, [pc, #4]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
 8004f5e:	e00b      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f60:	40023800 	.word	0x40023800
 8004f64:	40007000 	.word	0x40007000
 8004f68:	0ffffcff 	.word	0x0ffffcff
 8004f6c:	4bac      	ldr	r3, [pc, #688]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4aab      	ldr	r2, [pc, #684]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f72:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f76:	6093      	str	r3, [r2, #8]
 8004f78:	4ba9      	ldr	r3, [pc, #676]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f84:	49a6      	ldr	r1, [pc, #664]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d010      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f96:	4ba2      	ldr	r3, [pc, #648]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f9c:	4aa0      	ldr	r2, [pc, #640]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fa2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004fa6:	4b9e      	ldr	r3, [pc, #632]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb0:	499b      	ldr	r1, [pc, #620]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fc4:	4b96      	ldr	r3, [pc, #600]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fd2:	4993      	ldr	r1, [pc, #588]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fe6:	4b8e      	ldr	r3, [pc, #568]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ff4:	498a      	ldr	r1, [pc, #552]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005008:	4b85      	ldr	r3, [pc, #532]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005016:	4982      	ldr	r1, [pc, #520]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800502a:	4b7d      	ldr	r3, [pc, #500]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005030:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005038:	4979      	ldr	r1, [pc, #484]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800504c:	4b74      	ldr	r3, [pc, #464]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005052:	f023 0203 	bic.w	r2, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505a:	4971      	ldr	r1, [pc, #452]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800506e:	4b6c      	ldr	r3, [pc, #432]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005074:	f023 020c 	bic.w	r2, r3, #12
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800507c:	4968      	ldr	r1, [pc, #416]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005090:	4b63      	ldr	r3, [pc, #396]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005096:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509e:	4960      	ldr	r1, [pc, #384]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c0:	4957      	ldr	r1, [pc, #348]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050d4:	4b52      	ldr	r3, [pc, #328]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e2:	494f      	ldr	r1, [pc, #316]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005104:	4946      	ldr	r1, [pc, #280]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005118:	4b41      	ldr	r3, [pc, #260]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005126:	493e      	ldr	r1, [pc, #248]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800513a:	4b39      	ldr	r3, [pc, #228]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005140:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005148:	4935      	ldr	r1, [pc, #212]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800515c:	4b30      	ldr	r3, [pc, #192]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005162:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800516a:	492d      	ldr	r1, [pc, #180]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d011      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800517e:	4b28      	ldr	r3, [pc, #160]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005184:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800518c:	4924      	ldr	r1, [pc, #144]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005198:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800519c:	d101      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800519e:	2301      	movs	r3, #1
 80051a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051ae:	2301      	movs	r3, #1
 80051b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051be:	4b18      	ldr	r3, [pc, #96]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051cc:	4914      	ldr	r1, [pc, #80]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f0:	490b      	ldr	r1, [pc, #44]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00f      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005204:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005214:	4902      	ldr	r1, [pc, #8]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800521c:	e002      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800521e:	bf00      	nop
 8005220:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005230:	4b8a      	ldr	r3, [pc, #552]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005232:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005236:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005240:	4986      	ldr	r1, [pc, #536]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005254:	4b81      	ldr	r3, [pc, #516]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005256:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800525a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005264:	497d      	ldr	r1, [pc, #500]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d006      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 80d6 	beq.w	800542c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005280:	4b76      	ldr	r3, [pc, #472]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a75      	ldr	r2, [pc, #468]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005286:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800528a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528c:	f7fc fde6 	bl	8001e5c <HAL_GetTick>
 8005290:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005294:	f7fc fde2 	bl	8001e5c <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	@ 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e195      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052a6:	4b6d      	ldr	r3, [pc, #436]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d021      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d11d      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052c6:	4b65      	ldr	r3, [pc, #404]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052d4:	4b61      	ldr	r3, [pc, #388]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052da:	0e1b      	lsrs	r3, r3, #24
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	019a      	lsls	r2, r3, #6
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	431a      	orrs	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	061b      	lsls	r3, r3, #24
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	071b      	lsls	r3, r3, #28
 80052fa:	4958      	ldr	r1, [pc, #352]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005316:	d00a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005320:	2b00      	cmp	r3, #0
 8005322:	d02e      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800532c:	d129      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800532e:	4b4b      	ldr	r3, [pc, #300]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800533c:	4b47      	ldr	r3, [pc, #284]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800533e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005342:	0f1b      	lsrs	r3, r3, #28
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	019a      	lsls	r2, r3, #6
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	041b      	lsls	r3, r3, #16
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	061b      	lsls	r3, r3, #24
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	071b      	lsls	r3, r3, #28
 8005362:	493e      	ldr	r1, [pc, #248]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800536a:	4b3c      	ldr	r3, [pc, #240]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800536c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005370:	f023 021f 	bic.w	r2, r3, #31
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	3b01      	subs	r3, #1
 800537a:	4938      	ldr	r1, [pc, #224]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01d      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800538e:	4b33      	ldr	r3, [pc, #204]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005394:	0e1b      	lsrs	r3, r3, #24
 8005396:	f003 030f 	and.w	r3, r3, #15
 800539a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800539c:	4b2f      	ldr	r3, [pc, #188]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800539e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a2:	0f1b      	lsrs	r3, r3, #28
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	019a      	lsls	r2, r3, #6
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	041b      	lsls	r3, r3, #16
 80053b6:	431a      	orrs	r2, r3
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	061b      	lsls	r3, r3, #24
 80053bc:	431a      	orrs	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	071b      	lsls	r3, r3, #28
 80053c2:	4926      	ldr	r1, [pc, #152]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d011      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	019a      	lsls	r2, r3, #6
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	061b      	lsls	r3, r3, #24
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	071b      	lsls	r3, r3, #28
 80053f2:	491a      	ldr	r1, [pc, #104]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053fa:	4b18      	ldr	r3, [pc, #96]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a17      	ldr	r2, [pc, #92]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005400:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005406:	f7fc fd29 	bl	8001e5c <HAL_GetTick>
 800540a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800540c:	e008      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800540e:	f7fc fd25 	bl	8001e5c <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b64      	cmp	r3, #100	@ 0x64
 800541a:	d901      	bls.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e0d8      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005420:	4b0e      	ldr	r3, [pc, #56]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2b01      	cmp	r3, #1
 8005430:	f040 80ce 	bne.w	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005434:	4b09      	ldr	r3, [pc, #36]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a08      	ldr	r2, [pc, #32]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800543a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800543e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005440:	f7fc fd0c 	bl	8001e5c <HAL_GetTick>
 8005444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005446:	e00b      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005448:	f7fc fd08 	bl	8001e5c <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	@ 0x64
 8005454:	d904      	bls.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0bb      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005460:	4b5e      	ldr	r3, [pc, #376]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800546c:	d0ec      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800548a:	2b00      	cmp	r3, #0
 800548c:	d02e      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d12a      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005496:	4b51      	ldr	r3, [pc, #324]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054a4:	4b4d      	ldr	r3, [pc, #308]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054aa:	0f1b      	lsrs	r3, r3, #28
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	019a      	lsls	r2, r3, #6
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	041b      	lsls	r3, r3, #16
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	061b      	lsls	r3, r3, #24
 80054c4:	431a      	orrs	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	071b      	lsls	r3, r3, #28
 80054ca:	4944      	ldr	r1, [pc, #272]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054d2:	4b42      	ldr	r3, [pc, #264]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e0:	3b01      	subs	r3, #1
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	493d      	ldr	r1, [pc, #244]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d022      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005500:	d11d      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005502:	4b36      	ldr	r3, [pc, #216]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005508:	0e1b      	lsrs	r3, r3, #24
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005510:	4b32      	ldr	r3, [pc, #200]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005516:	0f1b      	lsrs	r3, r3, #28
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	019a      	lsls	r2, r3, #6
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	041b      	lsls	r3, r3, #16
 800552a:	431a      	orrs	r2, r3
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	061b      	lsls	r3, r3, #24
 8005530:	431a      	orrs	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	071b      	lsls	r3, r3, #28
 8005536:	4929      	ldr	r1, [pc, #164]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d028      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800554a:	4b24      	ldr	r3, [pc, #144]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005550:	0e1b      	lsrs	r3, r3, #24
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005558:	4b20      	ldr	r3, [pc, #128]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	019a      	lsls	r2, r3, #6
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	431a      	orrs	r2, r3
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	061b      	lsls	r3, r3, #24
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	071b      	lsls	r3, r3, #28
 800557e:	4917      	ldr	r1, [pc, #92]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005586:	4b15      	ldr	r3, [pc, #84]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800558c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005594:	4911      	ldr	r1, [pc, #68]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800559c:	4b0f      	ldr	r3, [pc, #60]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a0e      	ldr	r2, [pc, #56]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a8:	f7fc fc58 	bl	8001e5c <HAL_GetTick>
 80055ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055b0:	f7fc fc54 	bl	8001e5c <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b64      	cmp	r3, #100	@ 0x64
 80055bc:	d901      	bls.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e007      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055c2:	4b06      	ldr	r3, [pc, #24]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055ce:	d1ef      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3720      	adds	r7, #32
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40023800 	.word	0x40023800

080055e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e040      	b.n	8005674 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fc f8b2 	bl	800176c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	@ 0x24
 800560c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0201 	bic.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fb16 	bl	8005c58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f8af 	bl	8005790 <UART_SetConfig>
 8005632:	4603      	mov	r3, r0
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e01b      	b.n	8005674 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800564a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800565a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fb95 	bl	8005d9c <UART_CheckIdleState>
 8005672:	4603      	mov	r3, r0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	@ 0x28
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005690:	2b20      	cmp	r3, #32
 8005692:	d177      	bne.n	8005784 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_UART_Transmit+0x24>
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e070      	b.n	8005786 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2221      	movs	r2, #33	@ 0x21
 80056b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056b2:	f7fc fbd3 	bl	8001e5c <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d0:	d108      	bne.n	80056e4 <HAL_UART_Transmit+0x68>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d104      	bne.n	80056e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	e003      	b.n	80056ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056ec:	e02f      	b.n	800574e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2180      	movs	r1, #128	@ 0x80
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fbf7 	bl	8005eec <UART_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e03b      	b.n	8005786 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10b      	bne.n	800572c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005722:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	3302      	adds	r3, #2
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	e007      	b.n	800573c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3301      	adds	r3, #1
 800573a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1c9      	bne.n	80056ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2200      	movs	r2, #0
 8005762:	2140      	movs	r1, #64	@ 0x40
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 fbc1 	bl	8005eec <UART_WaitOnFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e005      	b.n	8005786 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4ba6      	ldr	r3, [pc, #664]	@ (8005a54 <UART_SetConfig+0x2c4>)
 80057bc:	4013      	ands	r3, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6812      	ldr	r2, [r2, #0]
 80057c2:	6979      	ldr	r1, [r7, #20]
 80057c4:	430b      	orrs	r3, r1
 80057c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	430a      	orrs	r2, r1
 8005800:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a94      	ldr	r2, [pc, #592]	@ (8005a58 <UART_SetConfig+0x2c8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d120      	bne.n	800584e <UART_SetConfig+0xbe>
 800580c:	4b93      	ldr	r3, [pc, #588]	@ (8005a5c <UART_SetConfig+0x2cc>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	2b03      	cmp	r3, #3
 8005818:	d816      	bhi.n	8005848 <UART_SetConfig+0xb8>
 800581a:	a201      	add	r2, pc, #4	@ (adr r2, 8005820 <UART_SetConfig+0x90>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005831 	.word	0x08005831
 8005824:	0800583d 	.word	0x0800583d
 8005828:	08005837 	.word	0x08005837
 800582c:	08005843 	.word	0x08005843
 8005830:	2301      	movs	r3, #1
 8005832:	77fb      	strb	r3, [r7, #31]
 8005834:	e150      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005836:	2302      	movs	r3, #2
 8005838:	77fb      	strb	r3, [r7, #31]
 800583a:	e14d      	b.n	8005ad8 <UART_SetConfig+0x348>
 800583c:	2304      	movs	r3, #4
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	e14a      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005842:	2308      	movs	r3, #8
 8005844:	77fb      	strb	r3, [r7, #31]
 8005846:	e147      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005848:	2310      	movs	r3, #16
 800584a:	77fb      	strb	r3, [r7, #31]
 800584c:	e144      	b.n	8005ad8 <UART_SetConfig+0x348>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a83      	ldr	r2, [pc, #524]	@ (8005a60 <UART_SetConfig+0x2d0>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d132      	bne.n	80058be <UART_SetConfig+0x12e>
 8005858:	4b80      	ldr	r3, [pc, #512]	@ (8005a5c <UART_SetConfig+0x2cc>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b0c      	cmp	r3, #12
 8005864:	d828      	bhi.n	80058b8 <UART_SetConfig+0x128>
 8005866:	a201      	add	r2, pc, #4	@ (adr r2, 800586c <UART_SetConfig+0xdc>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	080058a1 	.word	0x080058a1
 8005870:	080058b9 	.word	0x080058b9
 8005874:	080058b9 	.word	0x080058b9
 8005878:	080058b9 	.word	0x080058b9
 800587c:	080058ad 	.word	0x080058ad
 8005880:	080058b9 	.word	0x080058b9
 8005884:	080058b9 	.word	0x080058b9
 8005888:	080058b9 	.word	0x080058b9
 800588c:	080058a7 	.word	0x080058a7
 8005890:	080058b9 	.word	0x080058b9
 8005894:	080058b9 	.word	0x080058b9
 8005898:	080058b9 	.word	0x080058b9
 800589c:	080058b3 	.word	0x080058b3
 80058a0:	2300      	movs	r3, #0
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e118      	b.n	8005ad8 <UART_SetConfig+0x348>
 80058a6:	2302      	movs	r3, #2
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e115      	b.n	8005ad8 <UART_SetConfig+0x348>
 80058ac:	2304      	movs	r3, #4
 80058ae:	77fb      	strb	r3, [r7, #31]
 80058b0:	e112      	b.n	8005ad8 <UART_SetConfig+0x348>
 80058b2:	2308      	movs	r3, #8
 80058b4:	77fb      	strb	r3, [r7, #31]
 80058b6:	e10f      	b.n	8005ad8 <UART_SetConfig+0x348>
 80058b8:	2310      	movs	r3, #16
 80058ba:	77fb      	strb	r3, [r7, #31]
 80058bc:	e10c      	b.n	8005ad8 <UART_SetConfig+0x348>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a68      	ldr	r2, [pc, #416]	@ (8005a64 <UART_SetConfig+0x2d4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d120      	bne.n	800590a <UART_SetConfig+0x17a>
 80058c8:	4b64      	ldr	r3, [pc, #400]	@ (8005a5c <UART_SetConfig+0x2cc>)
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80058d2:	2b30      	cmp	r3, #48	@ 0x30
 80058d4:	d013      	beq.n	80058fe <UART_SetConfig+0x16e>
 80058d6:	2b30      	cmp	r3, #48	@ 0x30
 80058d8:	d814      	bhi.n	8005904 <UART_SetConfig+0x174>
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d009      	beq.n	80058f2 <UART_SetConfig+0x162>
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d810      	bhi.n	8005904 <UART_SetConfig+0x174>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <UART_SetConfig+0x15c>
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d006      	beq.n	80058f8 <UART_SetConfig+0x168>
 80058ea:	e00b      	b.n	8005904 <UART_SetConfig+0x174>
 80058ec:	2300      	movs	r3, #0
 80058ee:	77fb      	strb	r3, [r7, #31]
 80058f0:	e0f2      	b.n	8005ad8 <UART_SetConfig+0x348>
 80058f2:	2302      	movs	r3, #2
 80058f4:	77fb      	strb	r3, [r7, #31]
 80058f6:	e0ef      	b.n	8005ad8 <UART_SetConfig+0x348>
 80058f8:	2304      	movs	r3, #4
 80058fa:	77fb      	strb	r3, [r7, #31]
 80058fc:	e0ec      	b.n	8005ad8 <UART_SetConfig+0x348>
 80058fe:	2308      	movs	r3, #8
 8005900:	77fb      	strb	r3, [r7, #31]
 8005902:	e0e9      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005904:	2310      	movs	r3, #16
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e0e6      	b.n	8005ad8 <UART_SetConfig+0x348>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a56      	ldr	r2, [pc, #344]	@ (8005a68 <UART_SetConfig+0x2d8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d120      	bne.n	8005956 <UART_SetConfig+0x1c6>
 8005914:	4b51      	ldr	r3, [pc, #324]	@ (8005a5c <UART_SetConfig+0x2cc>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800591e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005920:	d013      	beq.n	800594a <UART_SetConfig+0x1ba>
 8005922:	2bc0      	cmp	r3, #192	@ 0xc0
 8005924:	d814      	bhi.n	8005950 <UART_SetConfig+0x1c0>
 8005926:	2b80      	cmp	r3, #128	@ 0x80
 8005928:	d009      	beq.n	800593e <UART_SetConfig+0x1ae>
 800592a:	2b80      	cmp	r3, #128	@ 0x80
 800592c:	d810      	bhi.n	8005950 <UART_SetConfig+0x1c0>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <UART_SetConfig+0x1a8>
 8005932:	2b40      	cmp	r3, #64	@ 0x40
 8005934:	d006      	beq.n	8005944 <UART_SetConfig+0x1b4>
 8005936:	e00b      	b.n	8005950 <UART_SetConfig+0x1c0>
 8005938:	2300      	movs	r3, #0
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e0cc      	b.n	8005ad8 <UART_SetConfig+0x348>
 800593e:	2302      	movs	r3, #2
 8005940:	77fb      	strb	r3, [r7, #31]
 8005942:	e0c9      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005944:	2304      	movs	r3, #4
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e0c6      	b.n	8005ad8 <UART_SetConfig+0x348>
 800594a:	2308      	movs	r3, #8
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e0c3      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005950:	2310      	movs	r3, #16
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	e0c0      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a44      	ldr	r2, [pc, #272]	@ (8005a6c <UART_SetConfig+0x2dc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d125      	bne.n	80059ac <UART_SetConfig+0x21c>
 8005960:	4b3e      	ldr	r3, [pc, #248]	@ (8005a5c <UART_SetConfig+0x2cc>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800596a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800596e:	d017      	beq.n	80059a0 <UART_SetConfig+0x210>
 8005970:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005974:	d817      	bhi.n	80059a6 <UART_SetConfig+0x216>
 8005976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800597a:	d00b      	beq.n	8005994 <UART_SetConfig+0x204>
 800597c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005980:	d811      	bhi.n	80059a6 <UART_SetConfig+0x216>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <UART_SetConfig+0x1fe>
 8005986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800598a:	d006      	beq.n	800599a <UART_SetConfig+0x20a>
 800598c:	e00b      	b.n	80059a6 <UART_SetConfig+0x216>
 800598e:	2300      	movs	r3, #0
 8005990:	77fb      	strb	r3, [r7, #31]
 8005992:	e0a1      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005994:	2302      	movs	r3, #2
 8005996:	77fb      	strb	r3, [r7, #31]
 8005998:	e09e      	b.n	8005ad8 <UART_SetConfig+0x348>
 800599a:	2304      	movs	r3, #4
 800599c:	77fb      	strb	r3, [r7, #31]
 800599e:	e09b      	b.n	8005ad8 <UART_SetConfig+0x348>
 80059a0:	2308      	movs	r3, #8
 80059a2:	77fb      	strb	r3, [r7, #31]
 80059a4:	e098      	b.n	8005ad8 <UART_SetConfig+0x348>
 80059a6:	2310      	movs	r3, #16
 80059a8:	77fb      	strb	r3, [r7, #31]
 80059aa:	e095      	b.n	8005ad8 <UART_SetConfig+0x348>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005a70 <UART_SetConfig+0x2e0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d125      	bne.n	8005a02 <UART_SetConfig+0x272>
 80059b6:	4b29      	ldr	r3, [pc, #164]	@ (8005a5c <UART_SetConfig+0x2cc>)
 80059b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80059c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059c4:	d017      	beq.n	80059f6 <UART_SetConfig+0x266>
 80059c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059ca:	d817      	bhi.n	80059fc <UART_SetConfig+0x26c>
 80059cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d0:	d00b      	beq.n	80059ea <UART_SetConfig+0x25a>
 80059d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d6:	d811      	bhi.n	80059fc <UART_SetConfig+0x26c>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <UART_SetConfig+0x254>
 80059dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059e0:	d006      	beq.n	80059f0 <UART_SetConfig+0x260>
 80059e2:	e00b      	b.n	80059fc <UART_SetConfig+0x26c>
 80059e4:	2301      	movs	r3, #1
 80059e6:	77fb      	strb	r3, [r7, #31]
 80059e8:	e076      	b.n	8005ad8 <UART_SetConfig+0x348>
 80059ea:	2302      	movs	r3, #2
 80059ec:	77fb      	strb	r3, [r7, #31]
 80059ee:	e073      	b.n	8005ad8 <UART_SetConfig+0x348>
 80059f0:	2304      	movs	r3, #4
 80059f2:	77fb      	strb	r3, [r7, #31]
 80059f4:	e070      	b.n	8005ad8 <UART_SetConfig+0x348>
 80059f6:	2308      	movs	r3, #8
 80059f8:	77fb      	strb	r3, [r7, #31]
 80059fa:	e06d      	b.n	8005ad8 <UART_SetConfig+0x348>
 80059fc:	2310      	movs	r3, #16
 80059fe:	77fb      	strb	r3, [r7, #31]
 8005a00:	e06a      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a1b      	ldr	r2, [pc, #108]	@ (8005a74 <UART_SetConfig+0x2e4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d138      	bne.n	8005a7e <UART_SetConfig+0x2ee>
 8005a0c:	4b13      	ldr	r3, [pc, #76]	@ (8005a5c <UART_SetConfig+0x2cc>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005a16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a1a:	d017      	beq.n	8005a4c <UART_SetConfig+0x2bc>
 8005a1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a20:	d82a      	bhi.n	8005a78 <UART_SetConfig+0x2e8>
 8005a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a26:	d00b      	beq.n	8005a40 <UART_SetConfig+0x2b0>
 8005a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a2c:	d824      	bhi.n	8005a78 <UART_SetConfig+0x2e8>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <UART_SetConfig+0x2aa>
 8005a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a36:	d006      	beq.n	8005a46 <UART_SetConfig+0x2b6>
 8005a38:	e01e      	b.n	8005a78 <UART_SetConfig+0x2e8>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	77fb      	strb	r3, [r7, #31]
 8005a3e:	e04b      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005a40:	2302      	movs	r3, #2
 8005a42:	77fb      	strb	r3, [r7, #31]
 8005a44:	e048      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005a46:	2304      	movs	r3, #4
 8005a48:	77fb      	strb	r3, [r7, #31]
 8005a4a:	e045      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	77fb      	strb	r3, [r7, #31]
 8005a50:	e042      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005a52:	bf00      	nop
 8005a54:	efff69f3 	.word	0xefff69f3
 8005a58:	40011000 	.word	0x40011000
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	40004400 	.word	0x40004400
 8005a64:	40004800 	.word	0x40004800
 8005a68:	40004c00 	.word	0x40004c00
 8005a6c:	40005000 	.word	0x40005000
 8005a70:	40011400 	.word	0x40011400
 8005a74:	40007800 	.word	0x40007800
 8005a78:	2310      	movs	r3, #16
 8005a7a:	77fb      	strb	r3, [r7, #31]
 8005a7c:	e02c      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a72      	ldr	r2, [pc, #456]	@ (8005c4c <UART_SetConfig+0x4bc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d125      	bne.n	8005ad4 <UART_SetConfig+0x344>
 8005a88:	4b71      	ldr	r3, [pc, #452]	@ (8005c50 <UART_SetConfig+0x4c0>)
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005a92:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005a96:	d017      	beq.n	8005ac8 <UART_SetConfig+0x338>
 8005a98:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005a9c:	d817      	bhi.n	8005ace <UART_SetConfig+0x33e>
 8005a9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aa2:	d00b      	beq.n	8005abc <UART_SetConfig+0x32c>
 8005aa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aa8:	d811      	bhi.n	8005ace <UART_SetConfig+0x33e>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <UART_SetConfig+0x326>
 8005aae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ab2:	d006      	beq.n	8005ac2 <UART_SetConfig+0x332>
 8005ab4:	e00b      	b.n	8005ace <UART_SetConfig+0x33e>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	77fb      	strb	r3, [r7, #31]
 8005aba:	e00d      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005abc:	2302      	movs	r3, #2
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e00a      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	77fb      	strb	r3, [r7, #31]
 8005ac6:	e007      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005ac8:	2308      	movs	r3, #8
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e004      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005ace:	2310      	movs	r3, #16
 8005ad0:	77fb      	strb	r3, [r7, #31]
 8005ad2:	e001      	b.n	8005ad8 <UART_SetConfig+0x348>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ae0:	d15b      	bne.n	8005b9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005ae2:	7ffb      	ldrb	r3, [r7, #31]
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d828      	bhi.n	8005b3a <UART_SetConfig+0x3aa>
 8005ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8005af0 <UART_SetConfig+0x360>)
 8005aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aee:	bf00      	nop
 8005af0:	08005b15 	.word	0x08005b15
 8005af4:	08005b1d 	.word	0x08005b1d
 8005af8:	08005b25 	.word	0x08005b25
 8005afc:	08005b3b 	.word	0x08005b3b
 8005b00:	08005b2b 	.word	0x08005b2b
 8005b04:	08005b3b 	.word	0x08005b3b
 8005b08:	08005b3b 	.word	0x08005b3b
 8005b0c:	08005b3b 	.word	0x08005b3b
 8005b10:	08005b33 	.word	0x08005b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b14:	f7ff f914 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 8005b18:	61b8      	str	r0, [r7, #24]
        break;
 8005b1a:	e013      	b.n	8005b44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b1c:	f7ff f924 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8005b20:	61b8      	str	r0, [r7, #24]
        break;
 8005b22:	e00f      	b.n	8005b44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b24:	4b4b      	ldr	r3, [pc, #300]	@ (8005c54 <UART_SetConfig+0x4c4>)
 8005b26:	61bb      	str	r3, [r7, #24]
        break;
 8005b28:	e00c      	b.n	8005b44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b2a:	f7fe fff7 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8005b2e:	61b8      	str	r0, [r7, #24]
        break;
 8005b30:	e008      	b.n	8005b44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b36:	61bb      	str	r3, [r7, #24]
        break;
 8005b38:	e004      	b.n	8005b44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	77bb      	strb	r3, [r7, #30]
        break;
 8005b42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d074      	beq.n	8005c34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	005a      	lsls	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	441a      	add	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	2b0f      	cmp	r3, #15
 8005b64:	d916      	bls.n	8005b94 <UART_SetConfig+0x404>
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b6c:	d212      	bcs.n	8005b94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	f023 030f 	bic.w	r3, r3, #15
 8005b76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	89fb      	ldrh	r3, [r7, #14]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	89fa      	ldrh	r2, [r7, #14]
 8005b90:	60da      	str	r2, [r3, #12]
 8005b92:	e04f      	b.n	8005c34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	77bb      	strb	r3, [r7, #30]
 8005b98:	e04c      	b.n	8005c34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b9a:	7ffb      	ldrb	r3, [r7, #31]
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d828      	bhi.n	8005bf2 <UART_SetConfig+0x462>
 8005ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba8 <UART_SetConfig+0x418>)
 8005ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba6:	bf00      	nop
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005bd5 	.word	0x08005bd5
 8005bb0:	08005bdd 	.word	0x08005bdd
 8005bb4:	08005bf3 	.word	0x08005bf3
 8005bb8:	08005be3 	.word	0x08005be3
 8005bbc:	08005bf3 	.word	0x08005bf3
 8005bc0:	08005bf3 	.word	0x08005bf3
 8005bc4:	08005bf3 	.word	0x08005bf3
 8005bc8:	08005beb 	.word	0x08005beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bcc:	f7ff f8b8 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 8005bd0:	61b8      	str	r0, [r7, #24]
        break;
 8005bd2:	e013      	b.n	8005bfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bd4:	f7ff f8c8 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8005bd8:	61b8      	str	r0, [r7, #24]
        break;
 8005bda:	e00f      	b.n	8005bfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c54 <UART_SetConfig+0x4c4>)
 8005bde:	61bb      	str	r3, [r7, #24]
        break;
 8005be0:	e00c      	b.n	8005bfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005be2:	f7fe ff9b 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8005be6:	61b8      	str	r0, [r7, #24]
        break;
 8005be8:	e008      	b.n	8005bfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bee:	61bb      	str	r3, [r7, #24]
        break;
 8005bf0:	e004      	b.n	8005bfc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	77bb      	strb	r3, [r7, #30]
        break;
 8005bfa:	bf00      	nop
    }

    if (pclk != 0U)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d018      	beq.n	8005c34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	085a      	lsrs	r2, r3, #1
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	441a      	add	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b0f      	cmp	r3, #15
 8005c1a:	d909      	bls.n	8005c30 <UART_SetConfig+0x4a0>
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c22:	d205      	bcs.n	8005c30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60da      	str	r2, [r3, #12]
 8005c2e:	e001      	b.n	8005c34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c40:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40007c00 	.word	0x40007c00
 8005c50:	40023800 	.word	0x40023800
 8005c54:	00f42400 	.word	0x00f42400

08005c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00a      	beq.n	8005cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01a      	beq.n	8005d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d56:	d10a      	bne.n	8005d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	605a      	str	r2, [r3, #4]
  }
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b098      	sub	sp, #96	@ 0x60
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dac:	f7fc f856 	bl	8001e5c <HAL_GetTick>
 8005db0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d12e      	bne.n	8005e1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f88c 	bl	8005eec <UART_WaitOnFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d021      	beq.n	8005e1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dee:	653b      	str	r3, [r7, #80]	@ 0x50
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dfa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e6      	bne.n	8005dda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e062      	b.n	8005ee4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d149      	bne.n	8005ec0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e34:	2200      	movs	r2, #0
 8005e36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f856 	bl	8005eec <UART_WaitOnFlagUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d03c      	beq.n	8005ec0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	e853 3f00 	ldrex	r3, [r3]
 8005e52:	623b      	str	r3, [r7, #32]
   return(result);
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e6      	bne.n	8005e46 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e98:	61fa      	str	r2, [r7, #28]
 8005e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	69b9      	ldr	r1, [r7, #24]
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e5      	bne.n	8005e78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e011      	b.n	8005ee4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3758      	adds	r7, #88	@ 0x58
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005efc:	e04f      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d04b      	beq.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f06:	f7fb ffa9 	bl	8001e5c <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d302      	bcc.n	8005f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e04e      	b.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d037      	beq.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b80      	cmp	r3, #128	@ 0x80
 8005f32:	d034      	beq.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b40      	cmp	r3, #64	@ 0x40
 8005f38:	d031      	beq.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d110      	bne.n	8005f6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f838 	bl	8005fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e029      	b.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f78:	d111      	bne.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f81e 	bl	8005fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e00f      	b.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69da      	ldr	r2, [r3, #28]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	bf0c      	ite	eq
 8005fae:	2301      	moveq	r3, #1
 8005fb0:	2300      	movne	r3, #0
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d0a0      	beq.n	8005efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b095      	sub	sp, #84	@ 0x54
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ff2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e6      	bne.n	8005fce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3308      	adds	r3, #8
 8006006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f023 0301 	bic.w	r3, r3, #1
 8006016:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3308      	adds	r3, #8
 800601e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006020:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006022:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e5      	bne.n	8006000 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006038:	2b01      	cmp	r3, #1
 800603a:	d118      	bne.n	800606e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	60bb      	str	r3, [r7, #8]
   return(result);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f023 0310 	bic.w	r3, r3, #16
 8006050:	647b      	str	r3, [r7, #68]	@ 0x44
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	6979      	ldr	r1, [r7, #20]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	613b      	str	r3, [r7, #16]
   return(result);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e6      	bne.n	800603c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006082:	bf00      	nop
 8006084:	3754      	adds	r7, #84	@ 0x54
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006090:	b084      	sub	sp, #16
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	f107 001c 	add.w	r0, r7, #28
 800609e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d121      	bne.n	80060ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	4b21      	ldr	r3, [pc, #132]	@ (8006140 <USB_CoreInit+0xb0>)
 80060bc:	4013      	ands	r3, r2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d105      	bne.n	80060e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fa92 	bl	800660c <USB_CoreReset>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
 80060ec:	e010      	b.n	8006110 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fa86 	bl	800660c <USB_CoreReset>
 8006100:	4603      	mov	r3, r0
 8006102:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006108:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006110:	7fbb      	ldrb	r3, [r7, #30]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d10b      	bne.n	800612e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f043 0206 	orr.w	r2, r3, #6
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f043 0220 	orr.w	r2, r3, #32
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800612e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800613a:	b004      	add	sp, #16
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	ffbdffbf 	.word	0xffbdffbf

08006144 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f023 0201 	bic.w	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	460b      	mov	r3, r1
 8006170:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d115      	bne.n	80061b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006194:	200a      	movs	r0, #10
 8006196:	f7fb fe6d 	bl	8001e74 <HAL_Delay>
      ms += 10U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	330a      	adds	r3, #10
 800619e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fa25 	bl	80065f0 <USB_GetMode>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d01e      	beq.n	80061ea <USB_SetCurrentMode+0x84>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80061b0:	d9f0      	bls.n	8006194 <USB_SetCurrentMode+0x2e>
 80061b2:	e01a      	b.n	80061ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d115      	bne.n	80061e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061c6:	200a      	movs	r0, #10
 80061c8:	f7fb fe54 	bl	8001e74 <HAL_Delay>
      ms += 10U;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	330a      	adds	r3, #10
 80061d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa0c 	bl	80065f0 <USB_GetMode>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <USB_SetCurrentMode+0x84>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80061e2:	d9f0      	bls.n	80061c6 <USB_SetCurrentMode+0x60>
 80061e4:	e001      	b.n	80061ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e005      	b.n	80061f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2bc8      	cmp	r3, #200	@ 0xc8
 80061ee:	d101      	bne.n	80061f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006200:	b084      	sub	sp, #16
 8006202:	b580      	push	{r7, lr}
 8006204:	b086      	sub	sp, #24
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800620e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800621a:	2300      	movs	r3, #0
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	e009      	b.n	8006234 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	3340      	adds	r3, #64	@ 0x40
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	2200      	movs	r2, #0
 800622c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	3301      	adds	r3, #1
 8006232:	613b      	str	r3, [r7, #16]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	2b0e      	cmp	r3, #14
 8006238:	d9f2      	bls.n	8006220 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800623a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800623e:	2b00      	cmp	r3, #0
 8006240:	d11c      	bne.n	800627c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006250:	f043 0302 	orr.w	r3, r3, #2
 8006254:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	e005      	b.n	8006288 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006280:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800628e:	461a      	mov	r2, r3
 8006290:	2300      	movs	r3, #0
 8006292:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006294:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006298:	2b01      	cmp	r3, #1
 800629a:	d10d      	bne.n	80062b8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800629c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d104      	bne.n	80062ae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062a4:	2100      	movs	r1, #0
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f968 	bl	800657c <USB_SetDevSpeed>
 80062ac:	e008      	b.n	80062c0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062ae:	2101      	movs	r1, #1
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f963 	bl	800657c <USB_SetDevSpeed>
 80062b6:	e003      	b.n	80062c0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062b8:	2103      	movs	r1, #3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f95e 	bl	800657c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062c0:	2110      	movs	r1, #16
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f8fa 	bl	80064bc <USB_FlushTxFifo>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f924 	bl	8006520 <USB_FlushRxFifo>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e8:	461a      	mov	r2, r3
 80062ea:	2300      	movs	r3, #0
 80062ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f4:	461a      	mov	r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006300:	461a      	mov	r2, r3
 8006302:	2300      	movs	r3, #0
 8006304:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006306:	2300      	movs	r3, #0
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	e043      	b.n	8006394 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800631e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006322:	d118      	bne.n	8006356 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10a      	bne.n	8006340 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006336:	461a      	mov	r2, r3
 8006338:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e013      	b.n	8006368 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634c:	461a      	mov	r2, r3
 800634e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	e008      	b.n	8006368 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006362:	461a      	mov	r2, r3
 8006364:	2300      	movs	r3, #0
 8006366:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	2300      	movs	r3, #0
 8006378:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006386:	461a      	mov	r2, r3
 8006388:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800638c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3301      	adds	r3, #1
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006398:	461a      	mov	r2, r3
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	4293      	cmp	r3, r2
 800639e:	d3b5      	bcc.n	800630c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	e043      	b.n	800642e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063bc:	d118      	bne.n	80063f0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d0:	461a      	mov	r2, r3
 80063d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	e013      	b.n	8006402 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e6:	461a      	mov	r2, r3
 80063e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e008      	b.n	8006402 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fc:	461a      	mov	r2, r3
 80063fe:	2300      	movs	r3, #0
 8006400:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640e:	461a      	mov	r2, r3
 8006410:	2300      	movs	r3, #0
 8006412:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006420:	461a      	mov	r2, r3
 8006422:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006426:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	3301      	adds	r3, #1
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006432:	461a      	mov	r2, r3
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	4293      	cmp	r3, r2
 8006438:	d3b5      	bcc.n	80063a6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800644c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800645a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800645c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006460:	2b00      	cmp	r3, #0
 8006462:	d105      	bne.n	8006470 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	f043 0210 	orr.w	r2, r3, #16
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699a      	ldr	r2, [r3, #24]
 8006474:	4b0f      	ldr	r3, [pc, #60]	@ (80064b4 <USB_DevInit+0x2b4>)
 8006476:	4313      	orrs	r3, r2
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800647c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f043 0208 	orr.w	r2, r3, #8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006490:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006494:	2b01      	cmp	r3, #1
 8006496:	d105      	bne.n	80064a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699a      	ldr	r2, [r3, #24]
 800649c:	4b06      	ldr	r3, [pc, #24]	@ (80064b8 <USB_DevInit+0x2b8>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064b0:	b004      	add	sp, #16
 80064b2:	4770      	bx	lr
 80064b4:	803c3800 	.word	0x803c3800
 80064b8:	40000004 	.word	0x40000004

080064bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064d6:	d901      	bls.n	80064dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e01b      	b.n	8006514 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	daf2      	bge.n	80064ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	019b      	lsls	r3, r3, #6
 80064ec:	f043 0220 	orr.w	r2, r3, #32
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006500:	d901      	bls.n	8006506 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e006      	b.n	8006514 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b20      	cmp	r3, #32
 8006510:	d0f0      	beq.n	80064f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3301      	adds	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006538:	d901      	bls.n	800653e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e018      	b.n	8006570 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	daf2      	bge.n	800652c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2210      	movs	r2, #16
 800654e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800655c:	d901      	bls.n	8006562 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e006      	b.n	8006570 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b10      	cmp	r3, #16
 800656c:	d0f0      	beq.n	8006550 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	68f9      	ldr	r1, [r7, #12]
 8006598:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800659c:	4313      	orrs	r3, r2
 800659e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065c8:	f023 0303 	bic.w	r3, r3, #3
 80065cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065dc:	f043 0302 	orr.w	r3, r3, #2
 80065e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	f003 0301 	and.w	r3, r3, #1
}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006624:	d901      	bls.n	800662a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e01b      	b.n	8006662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	daf2      	bge.n	8006618 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f043 0201 	orr.w	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3301      	adds	r3, #1
 8006646:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800664e:	d901      	bls.n	8006654 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e006      	b.n	8006662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b01      	cmp	r3, #1
 800665e:	d0f0      	beq.n	8006642 <USB_CoreReset+0x36>

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
	...

08006670 <log10f>:
 8006670:	b508      	push	{r3, lr}
 8006672:	ed2d 8b02 	vpush	{d8}
 8006676:	eeb0 8a40 	vmov.f32	s16, s0
 800667a:	f000 fc7b 	bl	8006f74 <__ieee754_log10f>
 800667e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006686:	d60f      	bvs.n	80066a8 <log10f+0x38>
 8006688:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800668c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006690:	d80a      	bhi.n	80066a8 <log10f+0x38>
 8006692:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669a:	d108      	bne.n	80066ae <log10f+0x3e>
 800669c:	f001 fb4c 	bl	8007d38 <__errno>
 80066a0:	2322      	movs	r3, #34	@ 0x22
 80066a2:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80066c4 <log10f+0x54>
 80066a6:	6003      	str	r3, [r0, #0]
 80066a8:	ecbd 8b02 	vpop	{d8}
 80066ac:	bd08      	pop	{r3, pc}
 80066ae:	f001 fb43 	bl	8007d38 <__errno>
 80066b2:	ecbd 8b02 	vpop	{d8}
 80066b6:	2321      	movs	r3, #33	@ 0x21
 80066b8:	6003      	str	r3, [r0, #0]
 80066ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066be:	4802      	ldr	r0, [pc, #8]	@ (80066c8 <log10f+0x58>)
 80066c0:	f000 ba8a 	b.w	8006bd8 <nanf>
 80066c4:	ff800000 	.word	0xff800000
 80066c8:	0800bc8e 	.word	0x0800bc8e

080066cc <checkint>:
 80066cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066d0:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80066d4:	429a      	cmp	r2, r3
 80066d6:	b570      	push	{r4, r5, r6, lr}
 80066d8:	dd2a      	ble.n	8006730 <checkint+0x64>
 80066da:	f240 4333 	movw	r3, #1075	@ 0x433
 80066de:	429a      	cmp	r2, r3
 80066e0:	dc24      	bgt.n	800672c <checkint+0x60>
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	f1a3 0620 	sub.w	r6, r3, #32
 80066e8:	f04f 32ff 	mov.w	r2, #4294967295
 80066ec:	fa02 f403 	lsl.w	r4, r2, r3
 80066f0:	fa02 f606 	lsl.w	r6, r2, r6
 80066f4:	f1c3 0520 	rsb	r5, r3, #32
 80066f8:	fa22 f505 	lsr.w	r5, r2, r5
 80066fc:	4334      	orrs	r4, r6
 80066fe:	432c      	orrs	r4, r5
 8006700:	409a      	lsls	r2, r3
 8006702:	ea20 0202 	bic.w	r2, r0, r2
 8006706:	ea21 0404 	bic.w	r4, r1, r4
 800670a:	4322      	orrs	r2, r4
 800670c:	f1a3 0420 	sub.w	r4, r3, #32
 8006710:	f1c3 0220 	rsb	r2, r3, #32
 8006714:	d10c      	bne.n	8006730 <checkint+0x64>
 8006716:	40d8      	lsrs	r0, r3
 8006718:	fa01 f302 	lsl.w	r3, r1, r2
 800671c:	4318      	orrs	r0, r3
 800671e:	40e1      	lsrs	r1, r4
 8006720:	4308      	orrs	r0, r1
 8006722:	f000 0001 	and.w	r0, r0, #1
 8006726:	f1d0 0002 	rsbs	r0, r0, #2
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	2002      	movs	r0, #2
 800672e:	e7fc      	b.n	800672a <checkint+0x5e>
 8006730:	2000      	movs	r0, #0
 8006732:	e7fa      	b.n	800672a <checkint+0x5e>
 8006734:	0000      	movs	r0, r0
	...

08006738 <pow>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	ee10 4a90 	vmov	r4, s1
 8006740:	ed2d 8b0a 	vpush	{d8-d12}
 8006744:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8006748:	ee11 aa90 	vmov	sl, s3
 800674c:	f108 32ff 	add.w	r2, r8, #4294967295
 8006750:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8006754:	429a      	cmp	r2, r3
 8006756:	ee10 5a10 	vmov	r5, s0
 800675a:	ee11 0a10 	vmov	r0, s2
 800675e:	b087      	sub	sp, #28
 8006760:	46c4      	mov	ip, r8
 8006762:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8006766:	d806      	bhi.n	8006776 <pow+0x3e>
 8006768:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800676c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8006770:	2b7f      	cmp	r3, #127	@ 0x7f
 8006772:	f240 8157 	bls.w	8006a24 <pow+0x2ec>
 8006776:	1802      	adds	r2, r0, r0
 8006778:	eb4a 010a 	adc.w	r1, sl, sl
 800677c:	f06f 0b01 	mvn.w	fp, #1
 8006780:	1e57      	subs	r7, r2, #1
 8006782:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006786:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800678a:	45bb      	cmp	fp, r7
 800678c:	eb7e 0303 	sbcs.w	r3, lr, r3
 8006790:	d242      	bcs.n	8006818 <pow+0xe0>
 8006792:	ea52 0301 	orrs.w	r3, r2, r1
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	d10c      	bne.n	80067b6 <pow+0x7e>
 800679c:	196d      	adds	r5, r5, r5
 800679e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 80067a2:	4164      	adcs	r4, r4
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80067aa:	41a3      	sbcs	r3, r4
 80067ac:	f0c0 808f 	bcc.w	80068ce <pow+0x196>
 80067b0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80067b4:	e02b      	b.n	800680e <pow+0xd6>
 80067b6:	4ed4      	ldr	r6, [pc, #848]	@ (8006b08 <pow+0x3d0>)
 80067b8:	42b4      	cmp	r4, r6
 80067ba:	bf08      	it	eq
 80067bc:	429d      	cmpeq	r5, r3
 80067be:	d109      	bne.n	80067d4 <pow+0x9c>
 80067c0:	1800      	adds	r0, r0, r0
 80067c2:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 80067c6:	eb4a 0a0a 	adc.w	sl, sl, sl
 80067ca:	4283      	cmp	r3, r0
 80067cc:	4bcf      	ldr	r3, [pc, #828]	@ (8006b0c <pow+0x3d4>)
 80067ce:	eb73 030a 	sbcs.w	r3, r3, sl
 80067d2:	e7eb      	b.n	80067ac <pow+0x74>
 80067d4:	196d      	adds	r5, r5, r5
 80067d6:	48ce      	ldr	r0, [pc, #824]	@ (8006b10 <pow+0x3d8>)
 80067d8:	4164      	adcs	r4, r4
 80067da:	42ab      	cmp	r3, r5
 80067dc:	eb70 0604 	sbcs.w	r6, r0, r4
 80067e0:	d375      	bcc.n	80068ce <pow+0x196>
 80067e2:	4281      	cmp	r1, r0
 80067e4:	bf08      	it	eq
 80067e6:	429a      	cmpeq	r2, r3
 80067e8:	d171      	bne.n	80068ce <pow+0x196>
 80067ea:	4aca      	ldr	r2, [pc, #808]	@ (8006b14 <pow+0x3dc>)
 80067ec:	4294      	cmp	r4, r2
 80067ee:	bf08      	it	eq
 80067f0:	429d      	cmpeq	r5, r3
 80067f2:	d0dd      	beq.n	80067b0 <pow+0x78>
 80067f4:	4294      	cmp	r4, r2
 80067f6:	ea6f 0a0a 	mvn.w	sl, sl
 80067fa:	bf34      	ite	cc
 80067fc:	2400      	movcc	r4, #0
 80067fe:	2401      	movcs	r4, #1
 8006800:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8006804:	4554      	cmp	r4, sl
 8006806:	f040 81dc 	bne.w	8006bc2 <pow+0x48a>
 800680a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800680e:	b007      	add	sp, #28
 8006810:	ecbd 8b0a 	vpop	{d8-d12}
 8006814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006818:	196f      	adds	r7, r5, r5
 800681a:	eb44 0904 	adc.w	r9, r4, r4
 800681e:	1e7a      	subs	r2, r7, #1
 8006820:	f169 0300 	sbc.w	r3, r9, #0
 8006824:	4593      	cmp	fp, r2
 8006826:	eb7e 0303 	sbcs.w	r3, lr, r3
 800682a:	d225      	bcs.n	8006878 <pow+0x140>
 800682c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8006830:	2c00      	cmp	r4, #0
 8006832:	da13      	bge.n	800685c <pow+0x124>
 8006834:	4651      	mov	r1, sl
 8006836:	f7ff ff49 	bl	80066cc <checkint>
 800683a:	2801      	cmp	r0, #1
 800683c:	d10e      	bne.n	800685c <pow+0x124>
 800683e:	eeb1 0b40 	vneg.f64	d0, d0
 8006842:	ea57 0909 	orrs.w	r9, r7, r9
 8006846:	d10b      	bne.n	8006860 <pow+0x128>
 8006848:	f1ba 0f00 	cmp.w	sl, #0
 800684c:	dadf      	bge.n	800680e <pow+0xd6>
 800684e:	b007      	add	sp, #28
 8006850:	ecbd 8b0a 	vpop	{d8-d12}
 8006854:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	f000 bc16 	b.w	8007088 <__math_divzero>
 800685c:	2000      	movs	r0, #0
 800685e:	e7f0      	b.n	8006842 <pow+0x10a>
 8006860:	f1ba 0f00 	cmp.w	sl, #0
 8006864:	dad3      	bge.n	800680e <pow+0xd6>
 8006866:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800686a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800686e:	ed8d 7b00 	vstr	d7, [sp]
 8006872:	ed9d 0b00 	vldr	d0, [sp]
 8006876:	e7ca      	b.n	800680e <pow+0xd6>
 8006878:	2c00      	cmp	r4, #0
 800687a:	da2b      	bge.n	80068d4 <pow+0x19c>
 800687c:	4651      	mov	r1, sl
 800687e:	f7ff ff25 	bl	80066cc <checkint>
 8006882:	b930      	cbnz	r0, 8006892 <pow+0x15a>
 8006884:	b007      	add	sp, #28
 8006886:	ecbd 8b0a 	vpop	{d8-d12}
 800688a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688e:	f000 bc13 	b.w	80070b8 <__math_invalid>
 8006892:	1e41      	subs	r1, r0, #1
 8006894:	4248      	negs	r0, r1
 8006896:	4148      	adcs	r0, r1
 8006898:	0480      	lsls	r0, r0, #18
 800689a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800689e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 80068a2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 80068a6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 80068aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80068ac:	d92d      	bls.n	800690a <pow+0x1d2>
 80068ae:	4b96      	ldr	r3, [pc, #600]	@ (8006b08 <pow+0x3d0>)
 80068b0:	2000      	movs	r0, #0
 80068b2:	429c      	cmp	r4, r3
 80068b4:	bf08      	it	eq
 80068b6:	4285      	cmpeq	r5, r0
 80068b8:	f43f af7a 	beq.w	80067b0 <pow+0x78>
 80068bc:	f240 31bd 	movw	r1, #957	@ 0x3bd
 80068c0:	428a      	cmp	r2, r1
 80068c2:	d80c      	bhi.n	80068de <pow+0x1a6>
 80068c4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80068c8:	42a8      	cmp	r0, r5
 80068ca:	41a3      	sbcs	r3, r4
 80068cc:	d204      	bcs.n	80068d8 <pow+0x1a0>
 80068ce:	ee31 0b00 	vadd.f64	d0, d1, d0
 80068d2:	e79c      	b.n	800680e <pow+0xd6>
 80068d4:	2000      	movs	r0, #0
 80068d6:	e7e4      	b.n	80068a2 <pow+0x16a>
 80068d8:	ee30 0b41 	vsub.f64	d0, d0, d1
 80068dc:	e797      	b.n	800680e <pow+0xd6>
 80068de:	2d01      	cmp	r5, #1
 80068e0:	eb74 0303 	sbcs.w	r3, r4, r3
 80068e4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80068e8:	bf34      	ite	cc
 80068ea:	2301      	movcc	r3, #1
 80068ec:	2300      	movcs	r3, #0
 80068ee:	4296      	cmp	r6, r2
 80068f0:	bf8c      	ite	hi
 80068f2:	2600      	movhi	r6, #0
 80068f4:	2601      	movls	r6, #1
 80068f6:	42b3      	cmp	r3, r6
 80068f8:	f000 809c 	beq.w	8006a34 <pow+0x2fc>
 80068fc:	b007      	add	sp, #28
 80068fe:	ecbd 8b0a 	vpop	{d8-d12}
 8006902:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006906:	f000 bbb7 	b.w	8007078 <__math_oflow>
 800690a:	f1bc 0f00 	cmp.w	ip, #0
 800690e:	d10a      	bne.n	8006926 <pow+0x1ee>
 8006910:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8006af8 <pow+0x3c0>
 8006914:	ee20 7b07 	vmul.f64	d7, d0, d7
 8006918:	ec53 2b17 	vmov	r2, r3, d7
 800691c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8006920:	4615      	mov	r5, r2
 8006922:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8006926:	4a7c      	ldr	r2, [pc, #496]	@ (8006b18 <pow+0x3e0>)
 8006928:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800692c:	4422      	add	r2, r4
 800692e:	1513      	asrs	r3, r2, #20
 8006930:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8006934:	ee03 3a10 	vmov	s6, r3
 8006938:	0d12      	lsrs	r2, r2, #20
 800693a:	4b78      	ldr	r3, [pc, #480]	@ (8006b1c <pow+0x3e4>)
 800693c:	0512      	lsls	r2, r2, #20
 800693e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8006942:	1aa7      	subs	r7, r4, r2
 8006944:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8006948:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800694c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8006950:	1e2e      	subs	r6, r5, #0
 8006952:	ec47 6b14 	vmov	d4, r6, r7
 8006956:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800695a:	eea4 6b05 	vfma.f64	d6, d4, d5
 800695e:	ed93 5b00 	vldr	d5, [r3]
 8006962:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8006966:	eea3 2b05 	vfma.f64	d2, d3, d5
 800696a:	ed93 5b02 	vldr	d5, [r3, #8]
 800696e:	ee36 4b02 	vadd.f64	d4, d6, d2
 8006972:	ee32 2b44 	vsub.f64	d2, d2, d4
 8006976:	eea3 7b05 	vfma.f64	d7, d3, d5
 800697a:	ed93 5b04 	vldr	d5, [r3, #16]
 800697e:	ee32 2b06 	vadd.f64	d2, d2, d6
 8006982:	ee37 7b02 	vadd.f64	d7, d7, d2
 8006986:	ee26 5b05 	vmul.f64	d5, d6, d5
 800698a:	ee26 0b05 	vmul.f64	d0, d6, d5
 800698e:	ee34 8b00 	vadd.f64	d8, d4, d0
 8006992:	eeb0 9b40 	vmov.f64	d9, d0
 8006996:	ee34 4b48 	vsub.f64	d4, d4, d8
 800699a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800699e:	ee34 ab00 	vadd.f64	d10, d4, d0
 80069a2:	ed93 5b06 	vldr	d5, [r3, #24]
 80069a6:	ee26 bb00 	vmul.f64	d11, d6, d0
 80069aa:	ee37 7b09 	vadd.f64	d7, d7, d9
 80069ae:	ed93 4b08 	vldr	d4, [r3, #32]
 80069b2:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80069b6:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 80069ba:	eea6 5b04 	vfma.f64	d5, d6, d4
 80069be:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 80069c2:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 80069c6:	eea6 4b03 	vfma.f64	d4, d6, d3
 80069ca:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 80069ce:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80069d2:	eea0 4b03 	vfma.f64	d4, d0, d3
 80069d6:	eea0 5b04 	vfma.f64	d5, d0, d4
 80069da:	eeab 7b05 	vfma.f64	d7, d11, d5
 80069de:	ee38 4b07 	vadd.f64	d4, d8, d7
 80069e2:	ee21 6b04 	vmul.f64	d6, d1, d4
 80069e6:	ee16 3a90 	vmov	r3, s13
 80069ea:	eeb0 5b46 	vmov.f64	d5, d6
 80069ee:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80069f2:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 80069f6:	18b2      	adds	r2, r6, r2
 80069f8:	2a3e      	cmp	r2, #62	@ 0x3e
 80069fa:	ee91 5b04 	vfnms.f64	d5, d1, d4
 80069fe:	ee38 8b44 	vsub.f64	d8, d8, d4
 8006a02:	ee38 8b07 	vadd.f64	d8, d8, d7
 8006a06:	eea1 5b08 	vfma.f64	d5, d1, d8
 8006a0a:	d91b      	bls.n	8006a44 <pow+0x30c>
 8006a0c:	2a00      	cmp	r2, #0
 8006a0e:	da0b      	bge.n	8006a28 <pow+0x2f0>
 8006a10:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006a14:	ee36 0b00 	vadd.f64	d0, d6, d0
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	f43f aef8 	beq.w	800680e <pow+0xd6>
 8006a1e:	eeb1 0b40 	vneg.f64	d0, d0
 8006a22:	e6f4      	b.n	800680e <pow+0xd6>
 8006a24:	2000      	movs	r0, #0
 8006a26:	e77e      	b.n	8006926 <pow+0x1ee>
 8006a28:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8006a2c:	d909      	bls.n	8006a42 <pow+0x30a>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f6bf af64 	bge.w	80068fc <pow+0x1c4>
 8006a34:	b007      	add	sp, #28
 8006a36:	ecbd 8b0a 	vpop	{d8-d12}
 8006a3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3e:	f000 bb13 	b.w	8007068 <__math_uflow>
 8006a42:	2600      	movs	r6, #0
 8006a44:	4936      	ldr	r1, [pc, #216]	@ (8006b20 <pow+0x3e8>)
 8006a46:	ed91 4b02 	vldr	d4, [r1, #8]
 8006a4a:	ed91 3b00 	vldr	d3, [r1]
 8006a4e:	eeb0 7b44 	vmov.f64	d7, d4
 8006a52:	eea6 7b03 	vfma.f64	d7, d6, d3
 8006a56:	ee17 5a10 	vmov	r5, s14
 8006a5a:	ee37 7b44 	vsub.f64	d7, d7, d4
 8006a5e:	ed91 4b04 	vldr	d4, [r1, #16]
 8006a62:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8006a66:	eea7 6b04 	vfma.f64	d6, d7, d4
 8006a6a:	ed91 4b06 	vldr	d4, [r1, #24]
 8006a6e:	18dc      	adds	r4, r3, r3
 8006a70:	f104 030f 	add.w	r3, r4, #15
 8006a74:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8006a78:	eea7 6b04 	vfma.f64	d6, d7, d4
 8006a7c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8006a80:	ee35 5b06 	vadd.f64	d5, d5, d6
 8006a84:	ee25 6b05 	vmul.f64	d6, d5, d5
 8006a88:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8006a8c:	ed91 4b08 	vldr	d4, [r1, #32]
 8006a90:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006a94:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8006a98:	eea5 4b03 	vfma.f64	d4, d5, d3
 8006a9c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8006aa0:	eea6 7b04 	vfma.f64	d7, d6, d4
 8006aa4:	ee26 6b06 	vmul.f64	d6, d6, d6
 8006aa8:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8006aac:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8006ab0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8006ab4:	eea5 4b03 	vfma.f64	d4, d5, d3
 8006ab8:	1940      	adds	r0, r0, r5
 8006aba:	2700      	movs	r7, #0
 8006abc:	eb17 020c 	adds.w	r2, r7, ip
 8006ac0:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8006ac4:	eea6 7b04 	vfma.f64	d7, d6, d4
 8006ac8:	2e00      	cmp	r6, #0
 8006aca:	d175      	bne.n	8006bb8 <pow+0x480>
 8006acc:	42bd      	cmp	r5, r7
 8006ace:	db29      	blt.n	8006b24 <pow+0x3ec>
 8006ad0:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8006ad4:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8006ad8:	4610      	mov	r0, r2
 8006ada:	ec41 0b10 	vmov	d0, r0, r1
 8006ade:	eea7 0b00 	vfma.f64	d0, d7, d0
 8006ae2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8006b00 <pow+0x3c8>
 8006ae6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006aea:	b007      	add	sp, #28
 8006aec:	ecbd 8b0a 	vpop	{d8-d12}
 8006af0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	f000 baf8 	b.w	80070e8 <__math_check_oflow>
 8006af8:	00000000 	.word	0x00000000
 8006afc:	43300000 	.word	0x43300000
 8006b00:	00000000 	.word	0x00000000
 8006b04:	7f000000 	.word	0x7f000000
 8006b08:	3ff00000 	.word	0x3ff00000
 8006b0c:	fff00000 	.word	0xfff00000
 8006b10:	ffe00000 	.word	0xffe00000
 8006b14:	7fe00000 	.word	0x7fe00000
 8006b18:	c0196aab 	.word	0xc0196aab
 8006b1c:	08009dd8 	.word	0x08009dd8
 8006b20:	0800ae20 	.word	0x0800ae20
 8006b24:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8006b28:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	ec41 0b15 	vmov	d5, r0, r1
 8006b32:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8006b36:	ee27 6b05 	vmul.f64	d6, d7, d5
 8006b3a:	ee35 7b06 	vadd.f64	d7, d5, d6
 8006b3e:	eeb0 4bc7 	vabs.f64	d4, d7
 8006b42:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8006b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8006bc8 <pow+0x490>
 8006b4e:	d52a      	bpl.n	8006ba6 <pow+0x46e>
 8006b50:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006b54:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8006b60:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8006b64:	bf58      	it	pl
 8006b66:	eeb0 4b43 	vmovpl.f64	d4, d3
 8006b6a:	ee37 3b04 	vadd.f64	d3, d7, d4
 8006b6e:	ee34 6b43 	vsub.f64	d6, d4, d3
 8006b72:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006b76:	ee36 6b05 	vadd.f64	d6, d6, d5
 8006b7a:	ee36 6b03 	vadd.f64	d6, d6, d3
 8006b7e:	ee36 7b44 	vsub.f64	d7, d6, d4
 8006b82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8a:	d104      	bne.n	8006b96 <pow+0x45e>
 8006b8c:	4632      	mov	r2, r6
 8006b8e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8006b92:	ec43 2b17 	vmov	d7, r2, r3
 8006b96:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b9a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006b9e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8006ba2:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006ba6:	ee27 0b00 	vmul.f64	d0, d7, d0
 8006baa:	b007      	add	sp, #28
 8006bac:	ecbd 8b0a 	vpop	{d8-d12}
 8006bb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	f000 ba8f 	b.w	80070d6 <__math_check_uflow>
 8006bb8:	ec43 2b10 	vmov	d0, r2, r3
 8006bbc:	eea7 0b00 	vfma.f64	d0, d7, d0
 8006bc0:	e625      	b.n	800680e <pow+0xd6>
 8006bc2:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8006bd0 <pow+0x498>
 8006bc6:	e622      	b.n	800680e <pow+0xd6>
 8006bc8:	00000000 	.word	0x00000000
 8006bcc:	00100000 	.word	0x00100000
	...

08006bd8 <nanf>:
 8006bd8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006be0 <nanf+0x8>
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	7fc00000 	.word	0x7fc00000

08006be4 <checkint>:
 8006be4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006be8:	2b7e      	cmp	r3, #126	@ 0x7e
 8006bea:	d910      	bls.n	8006c0e <checkint+0x2a>
 8006bec:	2b96      	cmp	r3, #150	@ 0x96
 8006bee:	d80c      	bhi.n	8006c0a <checkint+0x26>
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8006bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfa:	1e5a      	subs	r2, r3, #1
 8006bfc:	4202      	tst	r2, r0
 8006bfe:	d106      	bne.n	8006c0e <checkint+0x2a>
 8006c00:	4203      	tst	r3, r0
 8006c02:	bf0c      	ite	eq
 8006c04:	2002      	moveq	r0, #2
 8006c06:	2001      	movne	r0, #1
 8006c08:	4770      	bx	lr
 8006c0a:	2002      	movs	r0, #2
 8006c0c:	4770      	bx	lr
 8006c0e:	2000      	movs	r0, #0
 8006c10:	4770      	bx	lr
 8006c12:	0000      	movs	r0, r0
 8006c14:	0000      	movs	r0, r0
	...

08006c18 <powf>:
 8006c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c1a:	ee10 1a10 	vmov	r1, s0
 8006c1e:	ee10 4a90 	vmov	r4, s1
 8006c22:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 8006c26:	0063      	lsls	r3, r4, #1
 8006c28:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8006c2c:	eef0 7a40 	vmov.f32	s15, s0
 8006c30:	eeb0 7a60 	vmov.f32	s14, s1
 8006c34:	f103 30ff 	add.w	r0, r3, #4294967295
 8006c38:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 8006c3c:	d252      	bcs.n	8006ce4 <powf+0xcc>
 8006c3e:	4290      	cmp	r0, r2
 8006c40:	d258      	bcs.n	8006cf4 <powf+0xdc>
 8006c42:	2000      	movs	r0, #0
 8006c44:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8006c48:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 8006c4c:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8006c50:	0ddb      	lsrs	r3, r3, #23
 8006c52:	4a9d      	ldr	r2, [pc, #628]	@ (8006ec8 <powf+0x2b0>)
 8006c54:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8006c58:	05db      	lsls	r3, r3, #23
 8006c5a:	1ac9      	subs	r1, r1, r3
 8006c5c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8006c60:	ee07 1a90 	vmov	s15, r1
 8006c64:	ed94 5b02 	vldr	d5, [r4, #8]
 8006c68:	ed94 4b00 	vldr	d4, [r4]
 8006c6c:	15db      	asrs	r3, r3, #23
 8006c6e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eea4 2b06 	vfma.f64	d2, d4, d6
 8006c7a:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 8006c7e:	ee22 4b02 	vmul.f64	d4, d2, d2
 8006c82:	ee24 0b04 	vmul.f64	d0, d4, d4
 8006c86:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006c8a:	ee36 6b05 	vadd.f64	d6, d6, d5
 8006c8e:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 8006c92:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 8006c96:	eea2 1b05 	vfma.f64	d1, d2, d5
 8006c9a:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 8006c9e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8006ca2:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 8006ca6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8006caa:	eea2 6b03 	vfma.f64	d6, d2, d3
 8006cae:	eea4 6b05 	vfma.f64	d6, d4, d5
 8006cb2:	eea1 6b00 	vfma.f64	d6, d1, d0
 8006cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006cba:	ee17 3a90 	vmov	r3, s15
 8006cbe:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8006cc2:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	f0c0 80b8 	bcc.w	8006e3c <powf+0x224>
 8006ccc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8006ea8 <powf+0x290>
 8006cd0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd8:	dd79      	ble.n	8006dce <powf+0x1b6>
 8006cda:	b003      	add	sp, #12
 8006cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ce0:	f000 b920 	b.w	8006f24 <__math_oflowf>
 8006ce4:	4290      	cmp	r0, r2
 8006ce6:	d330      	bcc.n	8006d4a <powf+0x132>
 8006ce8:	b12b      	cbz	r3, 8006cf6 <powf+0xde>
 8006cea:	0049      	lsls	r1, r1, #1
 8006cec:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 8006cf0:	d808      	bhi.n	8006d04 <powf+0xec>
 8006cf2:	e015      	b.n	8006d20 <powf+0x108>
 8006cf4:	b953      	cbnz	r3, 8006d0c <powf+0xf4>
 8006cf6:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 8006cfa:	0049      	lsls	r1, r1, #1
 8006cfc:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 8006d00:	f240 80ca 	bls.w	8006e98 <powf+0x280>
 8006d04:	ee37 0a87 	vadd.f32	s0, s15, s14
 8006d08:	b003      	add	sp, #12
 8006d0a:	bd30      	pop	{r4, r5, pc}
 8006d0c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8006d10:	d105      	bne.n	8006d1e <powf+0x106>
 8006d12:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8006d16:	0064      	lsls	r4, r4, #1
 8006d18:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8006d1c:	e7f0      	b.n	8006d00 <powf+0xe8>
 8006d1e:	0049      	lsls	r1, r1, #1
 8006d20:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 8006d24:	d1ee      	bne.n	8006d04 <powf+0xec>
 8006d26:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8006d2a:	f000 80b5 	beq.w	8006e98 <powf+0x280>
 8006d2e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8006d32:	ea6f 0404 	mvn.w	r4, r4
 8006d36:	bf34      	ite	cc
 8006d38:	2100      	movcc	r1, #0
 8006d3a:	2101      	movcs	r1, #1
 8006d3c:	0fe4      	lsrs	r4, r4, #31
 8006d3e:	42a1      	cmp	r1, r4
 8006d40:	f040 80ad 	bne.w	8006e9e <powf+0x286>
 8006d44:	ee27 0a07 	vmul.f32	s0, s14, s14
 8006d48:	e7de      	b.n	8006d08 <powf+0xf0>
 8006d4a:	004d      	lsls	r5, r1, #1
 8006d4c:	1e6b      	subs	r3, r5, #1
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d31b      	bcc.n	8006d8a <powf+0x172>
 8006d52:	2900      	cmp	r1, #0
 8006d54:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006d58:	da0e      	bge.n	8006d78 <powf+0x160>
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f7ff ff42 	bl	8006be4 <checkint>
 8006d60:	2801      	cmp	r0, #1
 8006d62:	d109      	bne.n	8006d78 <powf+0x160>
 8006d64:	eeb1 0a40 	vneg.f32	s0, s0
 8006d68:	b945      	cbnz	r5, 8006d7c <powf+0x164>
 8006d6a:	2c00      	cmp	r4, #0
 8006d6c:	dacc      	bge.n	8006d08 <powf+0xf0>
 8006d6e:	b003      	add	sp, #12
 8006d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d74:	f000 b8dc 	b.w	8006f30 <__math_divzerof>
 8006d78:	2000      	movs	r0, #0
 8006d7a:	e7f5      	b.n	8006d68 <powf+0x150>
 8006d7c:	2c00      	cmp	r4, #0
 8006d7e:	dac3      	bge.n	8006d08 <powf+0xf0>
 8006d80:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006d84:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006d88:	e7be      	b.n	8006d08 <powf+0xf0>
 8006d8a:	2900      	cmp	r1, #0
 8006d8c:	da1d      	bge.n	8006dca <powf+0x1b2>
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f7ff ff28 	bl	8006be4 <checkint>
 8006d94:	b920      	cbnz	r0, 8006da0 <powf+0x188>
 8006d96:	b003      	add	sp, #12
 8006d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d9c:	f000 b8da 	b.w	8006f54 <__math_invalidf>
 8006da0:	1e43      	subs	r3, r0, #1
 8006da2:	4258      	negs	r0, r3
 8006da4:	4158      	adcs	r0, r3
 8006da6:	0400      	lsls	r0, r0, #16
 8006da8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006dac:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8006db0:	f4bf af48 	bcs.w	8006c44 <powf+0x2c>
 8006db4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8006ecc <powf+0x2b4>
 8006db8:	ee27 0aa6 	vmul.f32	s0, s15, s13
 8006dbc:	ee10 3a10 	vmov	r3, s0
 8006dc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006dc4:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 8006dc8:	e73c      	b.n	8006c44 <powf+0x2c>
 8006dca:	2000      	movs	r0, #0
 8006dcc:	e7ee      	b.n	8006dac <powf+0x194>
 8006dce:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8006eb0 <powf+0x298>
 8006dd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dda:	dd0f      	ble.n	8006dfc <powf+0x1e4>
 8006ddc:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 8006de0:	b1c0      	cbz	r0, 8006e14 <powf+0x1fc>
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	eddd 6a01 	vldr	s13, [sp, #4]
 8006de8:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 8006dec:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006df0:	eef4 6a46 	vcmp.f32	s13, s12
 8006df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df8:	f47f af6f 	bne.w	8006cda <powf+0xc2>
 8006dfc:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8006eb8 <powf+0x2a0>
 8006e00:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e08:	d80c      	bhi.n	8006e24 <powf+0x20c>
 8006e0a:	b003      	add	sp, #12
 8006e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e10:	f000 b87c 	b.w	8006f0c <__math_uflowf>
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	eddd 6a00 	vldr	s13, [sp]
 8006e1a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006e1e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006e22:	e7e5      	b.n	8006df0 <powf+0x1d8>
 8006e24:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8006ec0 <powf+0x2a8>
 8006e28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e30:	d504      	bpl.n	8006e3c <powf+0x224>
 8006e32:	b003      	add	sp, #12
 8006e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e38:	f000 b86e 	b.w	8006f18 <__math_may_uflowf>
 8006e3c:	4b24      	ldr	r3, [pc, #144]	@ (8006ed0 <powf+0x2b8>)
 8006e3e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006e42:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 8006e46:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006e4a:	ee16 2a10 	vmov	r2, s12
 8006e4e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006e52:	f002 011f 	and.w	r1, r2, #31
 8006e56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006e5a:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 8006e5e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006e62:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 8006e66:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8006e6a:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8006e6e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006e72:	686d      	ldr	r5, [r5, #4]
 8006e74:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8006e78:	1880      	adds	r0, r0, r2
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	190a      	adds	r2, r1, r4
 8006e7e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8006e82:	eea7 0b05 	vfma.f64	d0, d7, d5
 8006e86:	ec43 2b17 	vmov	d7, r2, r3
 8006e8a:	eea6 0b04 	vfma.f64	d0, d6, d4
 8006e8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006e92:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006e96:	e737      	b.n	8006d08 <powf+0xf0>
 8006e98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006e9c:	e734      	b.n	8006d08 <powf+0xf0>
 8006e9e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8006ed4 <powf+0x2bc>
 8006ea2:	e731      	b.n	8006d08 <powf+0xf0>
 8006ea4:	f3af 8000 	nop.w
 8006ea8:	ffd1d571 	.word	0xffd1d571
 8006eac:	405fffff 	.word	0x405fffff
 8006eb0:	ffa3aae2 	.word	0xffa3aae2
 8006eb4:	405fffff 	.word	0x405fffff
 8006eb8:	00000000 	.word	0x00000000
 8006ebc:	c062c000 	.word	0xc062c000
 8006ec0:	00000000 	.word	0x00000000
 8006ec4:	c062a000 	.word	0xc062a000
 8006ec8:	0800b8f8 	.word	0x0800b8f8
 8006ecc:	4b000000 	.word	0x4b000000
 8006ed0:	0800b690 	.word	0x0800b690
 8006ed4:	00000000 	.word	0x00000000

08006ed8 <with_errnof>:
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	ed2d 8b02 	vpush	{d8}
 8006ede:	eeb0 8a40 	vmov.f32	s16, s0
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	f000 ff28 	bl	8007d38 <__errno>
 8006ee8:	eeb0 0a48 	vmov.f32	s0, s16
 8006eec:	ecbd 8b02 	vpop	{d8}
 8006ef0:	6004      	str	r4, [r0, #0]
 8006ef2:	bd10      	pop	{r4, pc}

08006ef4 <xflowf>:
 8006ef4:	b130      	cbz	r0, 8006f04 <xflowf+0x10>
 8006ef6:	eef1 7a40 	vneg.f32	s15, s0
 8006efa:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006efe:	2022      	movs	r0, #34	@ 0x22
 8006f00:	f7ff bfea 	b.w	8006ed8 <with_errnof>
 8006f04:	eef0 7a40 	vmov.f32	s15, s0
 8006f08:	e7f7      	b.n	8006efa <xflowf+0x6>
	...

08006f0c <__math_uflowf>:
 8006f0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006f14 <__math_uflowf+0x8>
 8006f10:	f7ff bff0 	b.w	8006ef4 <xflowf>
 8006f14:	10000000 	.word	0x10000000

08006f18 <__math_may_uflowf>:
 8006f18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006f20 <__math_may_uflowf+0x8>
 8006f1c:	f7ff bfea 	b.w	8006ef4 <xflowf>
 8006f20:	1a200000 	.word	0x1a200000

08006f24 <__math_oflowf>:
 8006f24:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006f2c <__math_oflowf+0x8>
 8006f28:	f7ff bfe4 	b.w	8006ef4 <xflowf>
 8006f2c:	70000000 	.word	0x70000000

08006f30 <__math_divzerof>:
 8006f30:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8006f50 <__math_divzerof+0x20>
 8006f34:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006f38:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f04f 0022 	mov.w	r0, #34	@ 0x22
 8006f42:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8006f46:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006f4a:	f7ff bfc5 	b.w	8006ed8 <with_errnof>
 8006f4e:	bf00      	nop
 8006f50:	00000000 	.word	0x00000000

08006f54 <__math_invalidf>:
 8006f54:	eef0 7a40 	vmov.f32	s15, s0
 8006f58:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006f5c:	eef4 7a67 	vcmp.f32	s15, s15
 8006f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f64:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8006f68:	d602      	bvs.n	8006f70 <__math_invalidf+0x1c>
 8006f6a:	2021      	movs	r0, #33	@ 0x21
 8006f6c:	f7ff bfb4 	b.w	8006ed8 <with_errnof>
 8006f70:	4770      	bx	lr
	...

08006f74 <__ieee754_log10f>:
 8006f74:	b508      	push	{r3, lr}
 8006f76:	ee10 3a10 	vmov	r3, s0
 8006f7a:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006f7e:	ed2d 8b02 	vpush	{d8}
 8006f82:	d108      	bne.n	8006f96 <__ieee754_log10f+0x22>
 8006f84:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800700c <__ieee754_log10f+0x98>
 8006f88:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8007010 <__ieee754_log10f+0x9c>
 8006f8c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006f90:	ecbd 8b02 	vpop	{d8}
 8006f94:	bd08      	pop	{r3, pc}
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	461a      	mov	r2, r3
 8006f9a:	da02      	bge.n	8006fa2 <__ieee754_log10f+0x2e>
 8006f9c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006fa0:	e7f2      	b.n	8006f88 <__ieee754_log10f+0x14>
 8006fa2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006fa6:	db02      	blt.n	8006fae <__ieee754_log10f+0x3a>
 8006fa8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006fac:	e7f0      	b.n	8006f90 <__ieee754_log10f+0x1c>
 8006fae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fb2:	bfbf      	itttt	lt
 8006fb4:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8007014 <__ieee754_log10f+0xa0>
 8006fb8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006fbc:	f06f 0118 	mvnlt.w	r1, #24
 8006fc0:	ee17 2a90 	vmovlt	r2, s15
 8006fc4:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8006fc8:	bfa8      	it	ge
 8006fca:	2100      	movge	r1, #0
 8006fcc:	3b7f      	subs	r3, #127	@ 0x7f
 8006fce:	440b      	add	r3, r1
 8006fd0:	0fd9      	lsrs	r1, r3, #31
 8006fd2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006fde:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8006fe2:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006fe6:	ee00 3a10 	vmov	s0, r3
 8006fea:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006fee:	f000 f88f 	bl	8007110 <logf>
 8006ff2:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8007018 <__ieee754_log10f+0xa4>
 8006ff6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006ffa:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800701c <__ieee754_log10f+0xa8>
 8006ffe:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007002:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8007020 <__ieee754_log10f+0xac>
 8007006:	eea8 0a27 	vfma.f32	s0, s16, s15
 800700a:	e7c1      	b.n	8006f90 <__ieee754_log10f+0x1c>
 800700c:	cc000000 	.word	0xcc000000
 8007010:	00000000 	.word	0x00000000
 8007014:	4c000000 	.word	0x4c000000
 8007018:	3ede5bd9 	.word	0x3ede5bd9
 800701c:	355427db 	.word	0x355427db
 8007020:	3e9a2080 	.word	0x3e9a2080

08007024 <with_errno>:
 8007024:	b510      	push	{r4, lr}
 8007026:	ed2d 8b02 	vpush	{d8}
 800702a:	eeb0 8b40 	vmov.f64	d8, d0
 800702e:	4604      	mov	r4, r0
 8007030:	f000 fe82 	bl	8007d38 <__errno>
 8007034:	eeb0 0b48 	vmov.f64	d0, d8
 8007038:	ecbd 8b02 	vpop	{d8}
 800703c:	6004      	str	r4, [r0, #0]
 800703e:	bd10      	pop	{r4, pc}

08007040 <xflow>:
 8007040:	b082      	sub	sp, #8
 8007042:	b158      	cbz	r0, 800705c <xflow+0x1c>
 8007044:	eeb1 7b40 	vneg.f64	d7, d0
 8007048:	ed8d 7b00 	vstr	d7, [sp]
 800704c:	ed9d 7b00 	vldr	d7, [sp]
 8007050:	2022      	movs	r0, #34	@ 0x22
 8007052:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007056:	b002      	add	sp, #8
 8007058:	f7ff bfe4 	b.w	8007024 <with_errno>
 800705c:	eeb0 7b40 	vmov.f64	d7, d0
 8007060:	e7f2      	b.n	8007048 <xflow+0x8>
 8007062:	0000      	movs	r0, r0
 8007064:	0000      	movs	r0, r0
	...

08007068 <__math_uflow>:
 8007068:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007070 <__math_uflow+0x8>
 800706c:	f7ff bfe8 	b.w	8007040 <xflow>
 8007070:	00000000 	.word	0x00000000
 8007074:	10000000 	.word	0x10000000

08007078 <__math_oflow>:
 8007078:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007080 <__math_oflow+0x8>
 800707c:	f7ff bfe0 	b.w	8007040 <xflow>
 8007080:	00000000 	.word	0x00000000
 8007084:	70000000 	.word	0x70000000

08007088 <__math_divzero>:
 8007088:	b082      	sub	sp, #8
 800708a:	2800      	cmp	r0, #0
 800708c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8007090:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8007094:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8007098:	ed8d 7b00 	vstr	d7, [sp]
 800709c:	ed9d 0b00 	vldr	d0, [sp]
 80070a0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80070b0 <__math_divzero+0x28>
 80070a4:	2022      	movs	r0, #34	@ 0x22
 80070a6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80070aa:	b002      	add	sp, #8
 80070ac:	f7ff bfba 	b.w	8007024 <with_errno>
	...

080070b8 <__math_invalid>:
 80070b8:	eeb0 7b40 	vmov.f64	d7, d0
 80070bc:	eeb4 7b47 	vcmp.f64	d7, d7
 80070c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80070c8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80070cc:	d602      	bvs.n	80070d4 <__math_invalid+0x1c>
 80070ce:	2021      	movs	r0, #33	@ 0x21
 80070d0:	f7ff bfa8 	b.w	8007024 <with_errno>
 80070d4:	4770      	bx	lr

080070d6 <__math_check_uflow>:
 80070d6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80070da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070de:	d102      	bne.n	80070e6 <__math_check_uflow+0x10>
 80070e0:	2022      	movs	r0, #34	@ 0x22
 80070e2:	f7ff bf9f 	b.w	8007024 <with_errno>
 80070e6:	4770      	bx	lr

080070e8 <__math_check_oflow>:
 80070e8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8007108 <__math_check_oflow+0x20>
 80070ec:	eeb0 7bc0 	vabs.f64	d7, d0
 80070f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80070f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f8:	dd02      	ble.n	8007100 <__math_check_oflow+0x18>
 80070fa:	2022      	movs	r0, #34	@ 0x22
 80070fc:	f7ff bf92 	b.w	8007024 <with_errno>
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	f3af 8000 	nop.w
 8007108:	ffffffff 	.word	0xffffffff
 800710c:	7fefffff 	.word	0x7fefffff

08007110 <logf>:
 8007110:	ee10 3a10 	vmov	r3, s0
 8007114:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8007118:	b410      	push	{r4}
 800711a:	d055      	beq.n	80071c8 <logf+0xb8>
 800711c:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
 8007120:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8007124:	d31a      	bcc.n	800715c <logf+0x4c>
 8007126:	005a      	lsls	r2, r3, #1
 8007128:	d104      	bne.n	8007134 <logf+0x24>
 800712a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800712e:	2001      	movs	r0, #1
 8007130:	f7ff befe 	b.w	8006f30 <__math_divzerof>
 8007134:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007138:	d043      	beq.n	80071c2 <logf+0xb2>
 800713a:	2b00      	cmp	r3, #0
 800713c:	db02      	blt.n	8007144 <logf+0x34>
 800713e:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
 8007142:	d303      	bcc.n	800714c <logf+0x3c>
 8007144:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007148:	f7ff bf04 	b.w	8006f54 <__math_invalidf>
 800714c:	eddf 7a20 	vldr	s15, [pc, #128]	@ 80071d0 <logf+0xc0>
 8007150:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007154:	ee10 3a10 	vmov	r3, s0
 8007158:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
 800715c:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
 8007160:	491c      	ldr	r1, [pc, #112]	@ (80071d4 <logf+0xc4>)
 8007162:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 8007166:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
 800716a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800716e:	0dd4      	lsrs	r4, r2, #23
 8007170:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8007174:	05e4      	lsls	r4, r4, #23
 8007176:	ed90 5b00 	vldr	d5, [r0]
 800717a:	1b1b      	subs	r3, r3, r4
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	ed90 6b02 	vldr	d6, [r0, #8]
 8007184:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007188:	15d2      	asrs	r2, r2, #23
 800718a:	eea5 0b07 	vfma.f64	d0, d5, d7
 800718e:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
 8007192:	ee20 4b00 	vmul.f64	d4, d0, d0
 8007196:	ee07 2a90 	vmov	s15, r2
 800719a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800719e:	eea7 6b05 	vfma.f64	d6, d7, d5
 80071a2:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 80071a6:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 80071aa:	eea5 7b00 	vfma.f64	d7, d5, d0
 80071ae:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
 80071b2:	ee30 0b06 	vadd.f64	d0, d0, d6
 80071b6:	eea5 7b04 	vfma.f64	d7, d5, d4
 80071ba:	eea4 0b07 	vfma.f64	d0, d4, d7
 80071be:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80071c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80071d8 <logf+0xc8>
 80071cc:	e7f9      	b.n	80071c2 <logf+0xb2>
 80071ce:	bf00      	nop
 80071d0:	4b000000 	.word	0x4b000000
 80071d4:	0800b7d8 	.word	0x0800b7d8
 80071d8:	00000000 	.word	0x00000000

080071dc <__cvt>:
 80071dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071de:	ed2d 8b02 	vpush	{d8}
 80071e2:	eeb0 8b40 	vmov.f64	d8, d0
 80071e6:	b085      	sub	sp, #20
 80071e8:	4617      	mov	r7, r2
 80071ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80071ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071ee:	ee18 2a90 	vmov	r2, s17
 80071f2:	f025 0520 	bic.w	r5, r5, #32
 80071f6:	2a00      	cmp	r2, #0
 80071f8:	bfb6      	itet	lt
 80071fa:	222d      	movlt	r2, #45	@ 0x2d
 80071fc:	2200      	movge	r2, #0
 80071fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8007202:	2d46      	cmp	r5, #70	@ 0x46
 8007204:	460c      	mov	r4, r1
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	d004      	beq.n	8007214 <__cvt+0x38>
 800720a:	2d45      	cmp	r5, #69	@ 0x45
 800720c:	d100      	bne.n	8007210 <__cvt+0x34>
 800720e:	3401      	adds	r4, #1
 8007210:	2102      	movs	r1, #2
 8007212:	e000      	b.n	8007216 <__cvt+0x3a>
 8007214:	2103      	movs	r1, #3
 8007216:	ab03      	add	r3, sp, #12
 8007218:	9301      	str	r3, [sp, #4]
 800721a:	ab02      	add	r3, sp, #8
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4622      	mov	r2, r4
 8007220:	4633      	mov	r3, r6
 8007222:	eeb0 0b48 	vmov.f64	d0, d8
 8007226:	f000 fe3f 	bl	8007ea8 <_dtoa_r>
 800722a:	2d47      	cmp	r5, #71	@ 0x47
 800722c:	d114      	bne.n	8007258 <__cvt+0x7c>
 800722e:	07fb      	lsls	r3, r7, #31
 8007230:	d50a      	bpl.n	8007248 <__cvt+0x6c>
 8007232:	1902      	adds	r2, r0, r4
 8007234:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723c:	bf08      	it	eq
 800723e:	9203      	streq	r2, [sp, #12]
 8007240:	2130      	movs	r1, #48	@ 0x30
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	4293      	cmp	r3, r2
 8007246:	d319      	bcc.n	800727c <__cvt+0xa0>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800724c:	1a1b      	subs	r3, r3, r0
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	b005      	add	sp, #20
 8007252:	ecbd 8b02 	vpop	{d8}
 8007256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007258:	2d46      	cmp	r5, #70	@ 0x46
 800725a:	eb00 0204 	add.w	r2, r0, r4
 800725e:	d1e9      	bne.n	8007234 <__cvt+0x58>
 8007260:	7803      	ldrb	r3, [r0, #0]
 8007262:	2b30      	cmp	r3, #48	@ 0x30
 8007264:	d107      	bne.n	8007276 <__cvt+0x9a>
 8007266:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726e:	bf1c      	itt	ne
 8007270:	f1c4 0401 	rsbne	r4, r4, #1
 8007274:	6034      	strne	r4, [r6, #0]
 8007276:	6833      	ldr	r3, [r6, #0]
 8007278:	441a      	add	r2, r3
 800727a:	e7db      	b.n	8007234 <__cvt+0x58>
 800727c:	1c5c      	adds	r4, r3, #1
 800727e:	9403      	str	r4, [sp, #12]
 8007280:	7019      	strb	r1, [r3, #0]
 8007282:	e7de      	b.n	8007242 <__cvt+0x66>

08007284 <__exponent>:
 8007284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007286:	2900      	cmp	r1, #0
 8007288:	bfba      	itte	lt
 800728a:	4249      	neglt	r1, r1
 800728c:	232d      	movlt	r3, #45	@ 0x2d
 800728e:	232b      	movge	r3, #43	@ 0x2b
 8007290:	2909      	cmp	r1, #9
 8007292:	7002      	strb	r2, [r0, #0]
 8007294:	7043      	strb	r3, [r0, #1]
 8007296:	dd29      	ble.n	80072ec <__exponent+0x68>
 8007298:	f10d 0307 	add.w	r3, sp, #7
 800729c:	461d      	mov	r5, r3
 800729e:	270a      	movs	r7, #10
 80072a0:	461a      	mov	r2, r3
 80072a2:	fbb1 f6f7 	udiv	r6, r1, r7
 80072a6:	fb07 1416 	mls	r4, r7, r6, r1
 80072aa:	3430      	adds	r4, #48	@ 0x30
 80072ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80072b0:	460c      	mov	r4, r1
 80072b2:	2c63      	cmp	r4, #99	@ 0x63
 80072b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80072b8:	4631      	mov	r1, r6
 80072ba:	dcf1      	bgt.n	80072a0 <__exponent+0x1c>
 80072bc:	3130      	adds	r1, #48	@ 0x30
 80072be:	1e94      	subs	r4, r2, #2
 80072c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80072c4:	1c41      	adds	r1, r0, #1
 80072c6:	4623      	mov	r3, r4
 80072c8:	42ab      	cmp	r3, r5
 80072ca:	d30a      	bcc.n	80072e2 <__exponent+0x5e>
 80072cc:	f10d 0309 	add.w	r3, sp, #9
 80072d0:	1a9b      	subs	r3, r3, r2
 80072d2:	42ac      	cmp	r4, r5
 80072d4:	bf88      	it	hi
 80072d6:	2300      	movhi	r3, #0
 80072d8:	3302      	adds	r3, #2
 80072da:	4403      	add	r3, r0
 80072dc:	1a18      	subs	r0, r3, r0
 80072de:	b003      	add	sp, #12
 80072e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80072e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80072ea:	e7ed      	b.n	80072c8 <__exponent+0x44>
 80072ec:	2330      	movs	r3, #48	@ 0x30
 80072ee:	3130      	adds	r1, #48	@ 0x30
 80072f0:	7083      	strb	r3, [r0, #2]
 80072f2:	70c1      	strb	r1, [r0, #3]
 80072f4:	1d03      	adds	r3, r0, #4
 80072f6:	e7f1      	b.n	80072dc <__exponent+0x58>

080072f8 <_printf_float>:
 80072f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	b08d      	sub	sp, #52	@ 0x34
 80072fe:	460c      	mov	r4, r1
 8007300:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007304:	4616      	mov	r6, r2
 8007306:	461f      	mov	r7, r3
 8007308:	4605      	mov	r5, r0
 800730a:	f000 fccb 	bl	8007ca4 <_localeconv_r>
 800730e:	f8d0 b000 	ldr.w	fp, [r0]
 8007312:	4658      	mov	r0, fp
 8007314:	f7f8 ffe4 	bl	80002e0 <strlen>
 8007318:	2300      	movs	r3, #0
 800731a:	930a      	str	r3, [sp, #40]	@ 0x28
 800731c:	f8d8 3000 	ldr.w	r3, [r8]
 8007320:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007324:	6822      	ldr	r2, [r4, #0]
 8007326:	9005      	str	r0, [sp, #20]
 8007328:	3307      	adds	r3, #7
 800732a:	f023 0307 	bic.w	r3, r3, #7
 800732e:	f103 0108 	add.w	r1, r3, #8
 8007332:	f8c8 1000 	str.w	r1, [r8]
 8007336:	ed93 0b00 	vldr	d0, [r3]
 800733a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007598 <_printf_float+0x2a0>
 800733e:	eeb0 7bc0 	vabs.f64	d7, d0
 8007342:	eeb4 7b46 	vcmp.f64	d7, d6
 8007346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800734a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800734e:	dd24      	ble.n	800739a <_printf_float+0xa2>
 8007350:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007358:	d502      	bpl.n	8007360 <_printf_float+0x68>
 800735a:	232d      	movs	r3, #45	@ 0x2d
 800735c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007360:	498f      	ldr	r1, [pc, #572]	@ (80075a0 <_printf_float+0x2a8>)
 8007362:	4b90      	ldr	r3, [pc, #576]	@ (80075a4 <_printf_float+0x2ac>)
 8007364:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007368:	bf94      	ite	ls
 800736a:	4688      	movls	r8, r1
 800736c:	4698      	movhi	r8, r3
 800736e:	f022 0204 	bic.w	r2, r2, #4
 8007372:	2303      	movs	r3, #3
 8007374:	6123      	str	r3, [r4, #16]
 8007376:	6022      	str	r2, [r4, #0]
 8007378:	f04f 0a00 	mov.w	sl, #0
 800737c:	9700      	str	r7, [sp, #0]
 800737e:	4633      	mov	r3, r6
 8007380:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007382:	4621      	mov	r1, r4
 8007384:	4628      	mov	r0, r5
 8007386:	f000 f9d1 	bl	800772c <_printf_common>
 800738a:	3001      	adds	r0, #1
 800738c:	f040 8089 	bne.w	80074a2 <_printf_float+0x1aa>
 8007390:	f04f 30ff 	mov.w	r0, #4294967295
 8007394:	b00d      	add	sp, #52	@ 0x34
 8007396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739a:	eeb4 0b40 	vcmp.f64	d0, d0
 800739e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a2:	d709      	bvc.n	80073b8 <_printf_float+0xc0>
 80073a4:	ee10 3a90 	vmov	r3, s1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	bfbc      	itt	lt
 80073ac:	232d      	movlt	r3, #45	@ 0x2d
 80073ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80073b2:	497d      	ldr	r1, [pc, #500]	@ (80075a8 <_printf_float+0x2b0>)
 80073b4:	4b7d      	ldr	r3, [pc, #500]	@ (80075ac <_printf_float+0x2b4>)
 80073b6:	e7d5      	b.n	8007364 <_printf_float+0x6c>
 80073b8:	6863      	ldr	r3, [r4, #4]
 80073ba:	1c59      	adds	r1, r3, #1
 80073bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80073c0:	d139      	bne.n	8007436 <_printf_float+0x13e>
 80073c2:	2306      	movs	r3, #6
 80073c4:	6063      	str	r3, [r4, #4]
 80073c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073ca:	2300      	movs	r3, #0
 80073cc:	6022      	str	r2, [r4, #0]
 80073ce:	9303      	str	r3, [sp, #12]
 80073d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80073d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80073d6:	ab09      	add	r3, sp, #36	@ 0x24
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	6861      	ldr	r1, [r4, #4]
 80073dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80073e0:	4628      	mov	r0, r5
 80073e2:	f7ff fefb 	bl	80071dc <__cvt>
 80073e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80073ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073ec:	4680      	mov	r8, r0
 80073ee:	d129      	bne.n	8007444 <_printf_float+0x14c>
 80073f0:	1cc8      	adds	r0, r1, #3
 80073f2:	db02      	blt.n	80073fa <_printf_float+0x102>
 80073f4:	6863      	ldr	r3, [r4, #4]
 80073f6:	4299      	cmp	r1, r3
 80073f8:	dd41      	ble.n	800747e <_printf_float+0x186>
 80073fa:	f1a9 0902 	sub.w	r9, r9, #2
 80073fe:	fa5f f989 	uxtb.w	r9, r9
 8007402:	3901      	subs	r1, #1
 8007404:	464a      	mov	r2, r9
 8007406:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800740a:	9109      	str	r1, [sp, #36]	@ 0x24
 800740c:	f7ff ff3a 	bl	8007284 <__exponent>
 8007410:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007412:	1813      	adds	r3, r2, r0
 8007414:	2a01      	cmp	r2, #1
 8007416:	4682      	mov	sl, r0
 8007418:	6123      	str	r3, [r4, #16]
 800741a:	dc02      	bgt.n	8007422 <_printf_float+0x12a>
 800741c:	6822      	ldr	r2, [r4, #0]
 800741e:	07d2      	lsls	r2, r2, #31
 8007420:	d501      	bpl.n	8007426 <_printf_float+0x12e>
 8007422:	3301      	adds	r3, #1
 8007424:	6123      	str	r3, [r4, #16]
 8007426:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0a6      	beq.n	800737c <_printf_float+0x84>
 800742e:	232d      	movs	r3, #45	@ 0x2d
 8007430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007434:	e7a2      	b.n	800737c <_printf_float+0x84>
 8007436:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800743a:	d1c4      	bne.n	80073c6 <_printf_float+0xce>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1c2      	bne.n	80073c6 <_printf_float+0xce>
 8007440:	2301      	movs	r3, #1
 8007442:	e7bf      	b.n	80073c4 <_printf_float+0xcc>
 8007444:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007448:	d9db      	bls.n	8007402 <_printf_float+0x10a>
 800744a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800744e:	d118      	bne.n	8007482 <_printf_float+0x18a>
 8007450:	2900      	cmp	r1, #0
 8007452:	6863      	ldr	r3, [r4, #4]
 8007454:	dd0b      	ble.n	800746e <_printf_float+0x176>
 8007456:	6121      	str	r1, [r4, #16]
 8007458:	b913      	cbnz	r3, 8007460 <_printf_float+0x168>
 800745a:	6822      	ldr	r2, [r4, #0]
 800745c:	07d0      	lsls	r0, r2, #31
 800745e:	d502      	bpl.n	8007466 <_printf_float+0x16e>
 8007460:	3301      	adds	r3, #1
 8007462:	440b      	add	r3, r1
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007468:	f04f 0a00 	mov.w	sl, #0
 800746c:	e7db      	b.n	8007426 <_printf_float+0x12e>
 800746e:	b913      	cbnz	r3, 8007476 <_printf_float+0x17e>
 8007470:	6822      	ldr	r2, [r4, #0]
 8007472:	07d2      	lsls	r2, r2, #31
 8007474:	d501      	bpl.n	800747a <_printf_float+0x182>
 8007476:	3302      	adds	r3, #2
 8007478:	e7f4      	b.n	8007464 <_printf_float+0x16c>
 800747a:	2301      	movs	r3, #1
 800747c:	e7f2      	b.n	8007464 <_printf_float+0x16c>
 800747e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8007482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007484:	4299      	cmp	r1, r3
 8007486:	db05      	blt.n	8007494 <_printf_float+0x19c>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	6121      	str	r1, [r4, #16]
 800748c:	07d8      	lsls	r0, r3, #31
 800748e:	d5ea      	bpl.n	8007466 <_printf_float+0x16e>
 8007490:	1c4b      	adds	r3, r1, #1
 8007492:	e7e7      	b.n	8007464 <_printf_float+0x16c>
 8007494:	2900      	cmp	r1, #0
 8007496:	bfd4      	ite	le
 8007498:	f1c1 0202 	rsble	r2, r1, #2
 800749c:	2201      	movgt	r2, #1
 800749e:	4413      	add	r3, r2
 80074a0:	e7e0      	b.n	8007464 <_printf_float+0x16c>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	055a      	lsls	r2, r3, #21
 80074a6:	d407      	bmi.n	80074b8 <_printf_float+0x1c0>
 80074a8:	6923      	ldr	r3, [r4, #16]
 80074aa:	4642      	mov	r2, r8
 80074ac:	4631      	mov	r1, r6
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b8      	blx	r7
 80074b2:	3001      	adds	r0, #1
 80074b4:	d12a      	bne.n	800750c <_printf_float+0x214>
 80074b6:	e76b      	b.n	8007390 <_printf_float+0x98>
 80074b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80074bc:	f240 80e0 	bls.w	8007680 <_printf_float+0x388>
 80074c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80074c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074cc:	d133      	bne.n	8007536 <_printf_float+0x23e>
 80074ce:	4a38      	ldr	r2, [pc, #224]	@ (80075b0 <_printf_float+0x2b8>)
 80074d0:	2301      	movs	r3, #1
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	f43f af59 	beq.w	8007390 <_printf_float+0x98>
 80074de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80074e2:	4543      	cmp	r3, r8
 80074e4:	db02      	blt.n	80074ec <_printf_float+0x1f4>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	07d8      	lsls	r0, r3, #31
 80074ea:	d50f      	bpl.n	800750c <_printf_float+0x214>
 80074ec:	9b05      	ldr	r3, [sp, #20]
 80074ee:	465a      	mov	r2, fp
 80074f0:	4631      	mov	r1, r6
 80074f2:	4628      	mov	r0, r5
 80074f4:	47b8      	blx	r7
 80074f6:	3001      	adds	r0, #1
 80074f8:	f43f af4a 	beq.w	8007390 <_printf_float+0x98>
 80074fc:	f04f 0900 	mov.w	r9, #0
 8007500:	f108 38ff 	add.w	r8, r8, #4294967295
 8007504:	f104 0a1a 	add.w	sl, r4, #26
 8007508:	45c8      	cmp	r8, r9
 800750a:	dc09      	bgt.n	8007520 <_printf_float+0x228>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	079b      	lsls	r3, r3, #30
 8007510:	f100 8107 	bmi.w	8007722 <_printf_float+0x42a>
 8007514:	68e0      	ldr	r0, [r4, #12]
 8007516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007518:	4298      	cmp	r0, r3
 800751a:	bfb8      	it	lt
 800751c:	4618      	movlt	r0, r3
 800751e:	e739      	b.n	8007394 <_printf_float+0x9c>
 8007520:	2301      	movs	r3, #1
 8007522:	4652      	mov	r2, sl
 8007524:	4631      	mov	r1, r6
 8007526:	4628      	mov	r0, r5
 8007528:	47b8      	blx	r7
 800752a:	3001      	adds	r0, #1
 800752c:	f43f af30 	beq.w	8007390 <_printf_float+0x98>
 8007530:	f109 0901 	add.w	r9, r9, #1
 8007534:	e7e8      	b.n	8007508 <_printf_float+0x210>
 8007536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007538:	2b00      	cmp	r3, #0
 800753a:	dc3b      	bgt.n	80075b4 <_printf_float+0x2bc>
 800753c:	4a1c      	ldr	r2, [pc, #112]	@ (80075b0 <_printf_float+0x2b8>)
 800753e:	2301      	movs	r3, #1
 8007540:	4631      	mov	r1, r6
 8007542:	4628      	mov	r0, r5
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	f43f af22 	beq.w	8007390 <_printf_float+0x98>
 800754c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007550:	ea59 0303 	orrs.w	r3, r9, r3
 8007554:	d102      	bne.n	800755c <_printf_float+0x264>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	07d9      	lsls	r1, r3, #31
 800755a:	d5d7      	bpl.n	800750c <_printf_float+0x214>
 800755c:	9b05      	ldr	r3, [sp, #20]
 800755e:	465a      	mov	r2, fp
 8007560:	4631      	mov	r1, r6
 8007562:	4628      	mov	r0, r5
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	f43f af12 	beq.w	8007390 <_printf_float+0x98>
 800756c:	f04f 0a00 	mov.w	sl, #0
 8007570:	f104 0b1a 	add.w	fp, r4, #26
 8007574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007576:	425b      	negs	r3, r3
 8007578:	4553      	cmp	r3, sl
 800757a:	dc01      	bgt.n	8007580 <_printf_float+0x288>
 800757c:	464b      	mov	r3, r9
 800757e:	e794      	b.n	80074aa <_printf_float+0x1b2>
 8007580:	2301      	movs	r3, #1
 8007582:	465a      	mov	r2, fp
 8007584:	4631      	mov	r1, r6
 8007586:	4628      	mov	r0, r5
 8007588:	47b8      	blx	r7
 800758a:	3001      	adds	r0, #1
 800758c:	f43f af00 	beq.w	8007390 <_printf_float+0x98>
 8007590:	f10a 0a01 	add.w	sl, sl, #1
 8007594:	e7ee      	b.n	8007574 <_printf_float+0x27c>
 8007596:	bf00      	nop
 8007598:	ffffffff 	.word	0xffffffff
 800759c:	7fefffff 	.word	0x7fefffff
 80075a0:	0800ba20 	.word	0x0800ba20
 80075a4:	0800ba24 	.word	0x0800ba24
 80075a8:	0800ba28 	.word	0x0800ba28
 80075ac:	0800ba2c 	.word	0x0800ba2c
 80075b0:	0800ba30 	.word	0x0800ba30
 80075b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80075ba:	4553      	cmp	r3, sl
 80075bc:	bfa8      	it	ge
 80075be:	4653      	movge	r3, sl
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	4699      	mov	r9, r3
 80075c4:	dc37      	bgt.n	8007636 <_printf_float+0x33e>
 80075c6:	2300      	movs	r3, #0
 80075c8:	9307      	str	r3, [sp, #28]
 80075ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075ce:	f104 021a 	add.w	r2, r4, #26
 80075d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075d4:	9907      	ldr	r1, [sp, #28]
 80075d6:	9306      	str	r3, [sp, #24]
 80075d8:	eba3 0309 	sub.w	r3, r3, r9
 80075dc:	428b      	cmp	r3, r1
 80075de:	dc31      	bgt.n	8007644 <_printf_float+0x34c>
 80075e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e2:	459a      	cmp	sl, r3
 80075e4:	dc3b      	bgt.n	800765e <_printf_float+0x366>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	07da      	lsls	r2, r3, #31
 80075ea:	d438      	bmi.n	800765e <_printf_float+0x366>
 80075ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ee:	ebaa 0903 	sub.w	r9, sl, r3
 80075f2:	9b06      	ldr	r3, [sp, #24]
 80075f4:	ebaa 0303 	sub.w	r3, sl, r3
 80075f8:	4599      	cmp	r9, r3
 80075fa:	bfa8      	it	ge
 80075fc:	4699      	movge	r9, r3
 80075fe:	f1b9 0f00 	cmp.w	r9, #0
 8007602:	dc34      	bgt.n	800766e <_printf_float+0x376>
 8007604:	f04f 0800 	mov.w	r8, #0
 8007608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800760c:	f104 0b1a 	add.w	fp, r4, #26
 8007610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007612:	ebaa 0303 	sub.w	r3, sl, r3
 8007616:	eba3 0309 	sub.w	r3, r3, r9
 800761a:	4543      	cmp	r3, r8
 800761c:	f77f af76 	ble.w	800750c <_printf_float+0x214>
 8007620:	2301      	movs	r3, #1
 8007622:	465a      	mov	r2, fp
 8007624:	4631      	mov	r1, r6
 8007626:	4628      	mov	r0, r5
 8007628:	47b8      	blx	r7
 800762a:	3001      	adds	r0, #1
 800762c:	f43f aeb0 	beq.w	8007390 <_printf_float+0x98>
 8007630:	f108 0801 	add.w	r8, r8, #1
 8007634:	e7ec      	b.n	8007610 <_printf_float+0x318>
 8007636:	4642      	mov	r2, r8
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	d1c1      	bne.n	80075c6 <_printf_float+0x2ce>
 8007642:	e6a5      	b.n	8007390 <_printf_float+0x98>
 8007644:	2301      	movs	r3, #1
 8007646:	4631      	mov	r1, r6
 8007648:	4628      	mov	r0, r5
 800764a:	9206      	str	r2, [sp, #24]
 800764c:	47b8      	blx	r7
 800764e:	3001      	adds	r0, #1
 8007650:	f43f ae9e 	beq.w	8007390 <_printf_float+0x98>
 8007654:	9b07      	ldr	r3, [sp, #28]
 8007656:	9a06      	ldr	r2, [sp, #24]
 8007658:	3301      	adds	r3, #1
 800765a:	9307      	str	r3, [sp, #28]
 800765c:	e7b9      	b.n	80075d2 <_printf_float+0x2da>
 800765e:	9b05      	ldr	r3, [sp, #20]
 8007660:	465a      	mov	r2, fp
 8007662:	4631      	mov	r1, r6
 8007664:	4628      	mov	r0, r5
 8007666:	47b8      	blx	r7
 8007668:	3001      	adds	r0, #1
 800766a:	d1bf      	bne.n	80075ec <_printf_float+0x2f4>
 800766c:	e690      	b.n	8007390 <_printf_float+0x98>
 800766e:	9a06      	ldr	r2, [sp, #24]
 8007670:	464b      	mov	r3, r9
 8007672:	4442      	add	r2, r8
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	47b8      	blx	r7
 800767a:	3001      	adds	r0, #1
 800767c:	d1c2      	bne.n	8007604 <_printf_float+0x30c>
 800767e:	e687      	b.n	8007390 <_printf_float+0x98>
 8007680:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007684:	f1b9 0f01 	cmp.w	r9, #1
 8007688:	dc01      	bgt.n	800768e <_printf_float+0x396>
 800768a:	07db      	lsls	r3, r3, #31
 800768c:	d536      	bpl.n	80076fc <_printf_float+0x404>
 800768e:	2301      	movs	r3, #1
 8007690:	4642      	mov	r2, r8
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	f43f ae79 	beq.w	8007390 <_printf_float+0x98>
 800769e:	9b05      	ldr	r3, [sp, #20]
 80076a0:	465a      	mov	r2, fp
 80076a2:	4631      	mov	r1, r6
 80076a4:	4628      	mov	r0, r5
 80076a6:	47b8      	blx	r7
 80076a8:	3001      	adds	r0, #1
 80076aa:	f43f ae71 	beq.w	8007390 <_printf_float+0x98>
 80076ae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80076b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80076be:	d018      	beq.n	80076f2 <_printf_float+0x3fa>
 80076c0:	464b      	mov	r3, r9
 80076c2:	f108 0201 	add.w	r2, r8, #1
 80076c6:	4631      	mov	r1, r6
 80076c8:	4628      	mov	r0, r5
 80076ca:	47b8      	blx	r7
 80076cc:	3001      	adds	r0, #1
 80076ce:	d10c      	bne.n	80076ea <_printf_float+0x3f2>
 80076d0:	e65e      	b.n	8007390 <_printf_float+0x98>
 80076d2:	2301      	movs	r3, #1
 80076d4:	465a      	mov	r2, fp
 80076d6:	4631      	mov	r1, r6
 80076d8:	4628      	mov	r0, r5
 80076da:	47b8      	blx	r7
 80076dc:	3001      	adds	r0, #1
 80076de:	f43f ae57 	beq.w	8007390 <_printf_float+0x98>
 80076e2:	f108 0801 	add.w	r8, r8, #1
 80076e6:	45c8      	cmp	r8, r9
 80076e8:	dbf3      	blt.n	80076d2 <_printf_float+0x3da>
 80076ea:	4653      	mov	r3, sl
 80076ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80076f0:	e6dc      	b.n	80074ac <_printf_float+0x1b4>
 80076f2:	f04f 0800 	mov.w	r8, #0
 80076f6:	f104 0b1a 	add.w	fp, r4, #26
 80076fa:	e7f4      	b.n	80076e6 <_printf_float+0x3ee>
 80076fc:	2301      	movs	r3, #1
 80076fe:	4642      	mov	r2, r8
 8007700:	e7e1      	b.n	80076c6 <_printf_float+0x3ce>
 8007702:	2301      	movs	r3, #1
 8007704:	464a      	mov	r2, r9
 8007706:	4631      	mov	r1, r6
 8007708:	4628      	mov	r0, r5
 800770a:	47b8      	blx	r7
 800770c:	3001      	adds	r0, #1
 800770e:	f43f ae3f 	beq.w	8007390 <_printf_float+0x98>
 8007712:	f108 0801 	add.w	r8, r8, #1
 8007716:	68e3      	ldr	r3, [r4, #12]
 8007718:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800771a:	1a5b      	subs	r3, r3, r1
 800771c:	4543      	cmp	r3, r8
 800771e:	dcf0      	bgt.n	8007702 <_printf_float+0x40a>
 8007720:	e6f8      	b.n	8007514 <_printf_float+0x21c>
 8007722:	f04f 0800 	mov.w	r8, #0
 8007726:	f104 0919 	add.w	r9, r4, #25
 800772a:	e7f4      	b.n	8007716 <_printf_float+0x41e>

0800772c <_printf_common>:
 800772c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007730:	4616      	mov	r6, r2
 8007732:	4698      	mov	r8, r3
 8007734:	688a      	ldr	r2, [r1, #8]
 8007736:	690b      	ldr	r3, [r1, #16]
 8007738:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800773c:	4293      	cmp	r3, r2
 800773e:	bfb8      	it	lt
 8007740:	4613      	movlt	r3, r2
 8007742:	6033      	str	r3, [r6, #0]
 8007744:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007748:	4607      	mov	r7, r0
 800774a:	460c      	mov	r4, r1
 800774c:	b10a      	cbz	r2, 8007752 <_printf_common+0x26>
 800774e:	3301      	adds	r3, #1
 8007750:	6033      	str	r3, [r6, #0]
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	0699      	lsls	r1, r3, #26
 8007756:	bf42      	ittt	mi
 8007758:	6833      	ldrmi	r3, [r6, #0]
 800775a:	3302      	addmi	r3, #2
 800775c:	6033      	strmi	r3, [r6, #0]
 800775e:	6825      	ldr	r5, [r4, #0]
 8007760:	f015 0506 	ands.w	r5, r5, #6
 8007764:	d106      	bne.n	8007774 <_printf_common+0x48>
 8007766:	f104 0a19 	add.w	sl, r4, #25
 800776a:	68e3      	ldr	r3, [r4, #12]
 800776c:	6832      	ldr	r2, [r6, #0]
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	42ab      	cmp	r3, r5
 8007772:	dc26      	bgt.n	80077c2 <_printf_common+0x96>
 8007774:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007778:	6822      	ldr	r2, [r4, #0]
 800777a:	3b00      	subs	r3, #0
 800777c:	bf18      	it	ne
 800777e:	2301      	movne	r3, #1
 8007780:	0692      	lsls	r2, r2, #26
 8007782:	d42b      	bmi.n	80077dc <_printf_common+0xb0>
 8007784:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007788:	4641      	mov	r1, r8
 800778a:	4638      	mov	r0, r7
 800778c:	47c8      	blx	r9
 800778e:	3001      	adds	r0, #1
 8007790:	d01e      	beq.n	80077d0 <_printf_common+0xa4>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	6922      	ldr	r2, [r4, #16]
 8007796:	f003 0306 	and.w	r3, r3, #6
 800779a:	2b04      	cmp	r3, #4
 800779c:	bf02      	ittt	eq
 800779e:	68e5      	ldreq	r5, [r4, #12]
 80077a0:	6833      	ldreq	r3, [r6, #0]
 80077a2:	1aed      	subeq	r5, r5, r3
 80077a4:	68a3      	ldr	r3, [r4, #8]
 80077a6:	bf0c      	ite	eq
 80077a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077ac:	2500      	movne	r5, #0
 80077ae:	4293      	cmp	r3, r2
 80077b0:	bfc4      	itt	gt
 80077b2:	1a9b      	subgt	r3, r3, r2
 80077b4:	18ed      	addgt	r5, r5, r3
 80077b6:	2600      	movs	r6, #0
 80077b8:	341a      	adds	r4, #26
 80077ba:	42b5      	cmp	r5, r6
 80077bc:	d11a      	bne.n	80077f4 <_printf_common+0xc8>
 80077be:	2000      	movs	r0, #0
 80077c0:	e008      	b.n	80077d4 <_printf_common+0xa8>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4652      	mov	r2, sl
 80077c6:	4641      	mov	r1, r8
 80077c8:	4638      	mov	r0, r7
 80077ca:	47c8      	blx	r9
 80077cc:	3001      	adds	r0, #1
 80077ce:	d103      	bne.n	80077d8 <_printf_common+0xac>
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295
 80077d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d8:	3501      	adds	r5, #1
 80077da:	e7c6      	b.n	800776a <_printf_common+0x3e>
 80077dc:	18e1      	adds	r1, r4, r3
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	2030      	movs	r0, #48	@ 0x30
 80077e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077e6:	4422      	add	r2, r4
 80077e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077f0:	3302      	adds	r3, #2
 80077f2:	e7c7      	b.n	8007784 <_printf_common+0x58>
 80077f4:	2301      	movs	r3, #1
 80077f6:	4622      	mov	r2, r4
 80077f8:	4641      	mov	r1, r8
 80077fa:	4638      	mov	r0, r7
 80077fc:	47c8      	blx	r9
 80077fe:	3001      	adds	r0, #1
 8007800:	d0e6      	beq.n	80077d0 <_printf_common+0xa4>
 8007802:	3601      	adds	r6, #1
 8007804:	e7d9      	b.n	80077ba <_printf_common+0x8e>
	...

08007808 <_printf_i>:
 8007808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800780c:	7e0f      	ldrb	r7, [r1, #24]
 800780e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007810:	2f78      	cmp	r7, #120	@ 0x78
 8007812:	4691      	mov	r9, r2
 8007814:	4680      	mov	r8, r0
 8007816:	460c      	mov	r4, r1
 8007818:	469a      	mov	sl, r3
 800781a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800781e:	d807      	bhi.n	8007830 <_printf_i+0x28>
 8007820:	2f62      	cmp	r7, #98	@ 0x62
 8007822:	d80a      	bhi.n	800783a <_printf_i+0x32>
 8007824:	2f00      	cmp	r7, #0
 8007826:	f000 80d2 	beq.w	80079ce <_printf_i+0x1c6>
 800782a:	2f58      	cmp	r7, #88	@ 0x58
 800782c:	f000 80b9 	beq.w	80079a2 <_printf_i+0x19a>
 8007830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007834:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007838:	e03a      	b.n	80078b0 <_printf_i+0xa8>
 800783a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800783e:	2b15      	cmp	r3, #21
 8007840:	d8f6      	bhi.n	8007830 <_printf_i+0x28>
 8007842:	a101      	add	r1, pc, #4	@ (adr r1, 8007848 <_printf_i+0x40>)
 8007844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007848:	080078a1 	.word	0x080078a1
 800784c:	080078b5 	.word	0x080078b5
 8007850:	08007831 	.word	0x08007831
 8007854:	08007831 	.word	0x08007831
 8007858:	08007831 	.word	0x08007831
 800785c:	08007831 	.word	0x08007831
 8007860:	080078b5 	.word	0x080078b5
 8007864:	08007831 	.word	0x08007831
 8007868:	08007831 	.word	0x08007831
 800786c:	08007831 	.word	0x08007831
 8007870:	08007831 	.word	0x08007831
 8007874:	080079b5 	.word	0x080079b5
 8007878:	080078df 	.word	0x080078df
 800787c:	0800796f 	.word	0x0800796f
 8007880:	08007831 	.word	0x08007831
 8007884:	08007831 	.word	0x08007831
 8007888:	080079d7 	.word	0x080079d7
 800788c:	08007831 	.word	0x08007831
 8007890:	080078df 	.word	0x080078df
 8007894:	08007831 	.word	0x08007831
 8007898:	08007831 	.word	0x08007831
 800789c:	08007977 	.word	0x08007977
 80078a0:	6833      	ldr	r3, [r6, #0]
 80078a2:	1d1a      	adds	r2, r3, #4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6032      	str	r2, [r6, #0]
 80078a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078b0:	2301      	movs	r3, #1
 80078b2:	e09d      	b.n	80079f0 <_printf_i+0x1e8>
 80078b4:	6833      	ldr	r3, [r6, #0]
 80078b6:	6820      	ldr	r0, [r4, #0]
 80078b8:	1d19      	adds	r1, r3, #4
 80078ba:	6031      	str	r1, [r6, #0]
 80078bc:	0606      	lsls	r6, r0, #24
 80078be:	d501      	bpl.n	80078c4 <_printf_i+0xbc>
 80078c0:	681d      	ldr	r5, [r3, #0]
 80078c2:	e003      	b.n	80078cc <_printf_i+0xc4>
 80078c4:	0645      	lsls	r5, r0, #25
 80078c6:	d5fb      	bpl.n	80078c0 <_printf_i+0xb8>
 80078c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078cc:	2d00      	cmp	r5, #0
 80078ce:	da03      	bge.n	80078d8 <_printf_i+0xd0>
 80078d0:	232d      	movs	r3, #45	@ 0x2d
 80078d2:	426d      	negs	r5, r5
 80078d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078d8:	4859      	ldr	r0, [pc, #356]	@ (8007a40 <_printf_i+0x238>)
 80078da:	230a      	movs	r3, #10
 80078dc:	e011      	b.n	8007902 <_printf_i+0xfa>
 80078de:	6821      	ldr	r1, [r4, #0]
 80078e0:	6833      	ldr	r3, [r6, #0]
 80078e2:	0608      	lsls	r0, r1, #24
 80078e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80078e8:	d402      	bmi.n	80078f0 <_printf_i+0xe8>
 80078ea:	0649      	lsls	r1, r1, #25
 80078ec:	bf48      	it	mi
 80078ee:	b2ad      	uxthmi	r5, r5
 80078f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80078f2:	4853      	ldr	r0, [pc, #332]	@ (8007a40 <_printf_i+0x238>)
 80078f4:	6033      	str	r3, [r6, #0]
 80078f6:	bf14      	ite	ne
 80078f8:	230a      	movne	r3, #10
 80078fa:	2308      	moveq	r3, #8
 80078fc:	2100      	movs	r1, #0
 80078fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007902:	6866      	ldr	r6, [r4, #4]
 8007904:	60a6      	str	r6, [r4, #8]
 8007906:	2e00      	cmp	r6, #0
 8007908:	bfa2      	ittt	ge
 800790a:	6821      	ldrge	r1, [r4, #0]
 800790c:	f021 0104 	bicge.w	r1, r1, #4
 8007910:	6021      	strge	r1, [r4, #0]
 8007912:	b90d      	cbnz	r5, 8007918 <_printf_i+0x110>
 8007914:	2e00      	cmp	r6, #0
 8007916:	d04b      	beq.n	80079b0 <_printf_i+0x1a8>
 8007918:	4616      	mov	r6, r2
 800791a:	fbb5 f1f3 	udiv	r1, r5, r3
 800791e:	fb03 5711 	mls	r7, r3, r1, r5
 8007922:	5dc7      	ldrb	r7, [r0, r7]
 8007924:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007928:	462f      	mov	r7, r5
 800792a:	42bb      	cmp	r3, r7
 800792c:	460d      	mov	r5, r1
 800792e:	d9f4      	bls.n	800791a <_printf_i+0x112>
 8007930:	2b08      	cmp	r3, #8
 8007932:	d10b      	bne.n	800794c <_printf_i+0x144>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	07df      	lsls	r7, r3, #31
 8007938:	d508      	bpl.n	800794c <_printf_i+0x144>
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	6861      	ldr	r1, [r4, #4]
 800793e:	4299      	cmp	r1, r3
 8007940:	bfde      	ittt	le
 8007942:	2330      	movle	r3, #48	@ 0x30
 8007944:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007948:	f106 36ff 	addle.w	r6, r6, #4294967295
 800794c:	1b92      	subs	r2, r2, r6
 800794e:	6122      	str	r2, [r4, #16]
 8007950:	f8cd a000 	str.w	sl, [sp]
 8007954:	464b      	mov	r3, r9
 8007956:	aa03      	add	r2, sp, #12
 8007958:	4621      	mov	r1, r4
 800795a:	4640      	mov	r0, r8
 800795c:	f7ff fee6 	bl	800772c <_printf_common>
 8007960:	3001      	adds	r0, #1
 8007962:	d14a      	bne.n	80079fa <_printf_i+0x1f2>
 8007964:	f04f 30ff 	mov.w	r0, #4294967295
 8007968:	b004      	add	sp, #16
 800796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	f043 0320 	orr.w	r3, r3, #32
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	4833      	ldr	r0, [pc, #204]	@ (8007a44 <_printf_i+0x23c>)
 8007978:	2778      	movs	r7, #120	@ 0x78
 800797a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	6831      	ldr	r1, [r6, #0]
 8007982:	061f      	lsls	r7, r3, #24
 8007984:	f851 5b04 	ldr.w	r5, [r1], #4
 8007988:	d402      	bmi.n	8007990 <_printf_i+0x188>
 800798a:	065f      	lsls	r7, r3, #25
 800798c:	bf48      	it	mi
 800798e:	b2ad      	uxthmi	r5, r5
 8007990:	6031      	str	r1, [r6, #0]
 8007992:	07d9      	lsls	r1, r3, #31
 8007994:	bf44      	itt	mi
 8007996:	f043 0320 	orrmi.w	r3, r3, #32
 800799a:	6023      	strmi	r3, [r4, #0]
 800799c:	b11d      	cbz	r5, 80079a6 <_printf_i+0x19e>
 800799e:	2310      	movs	r3, #16
 80079a0:	e7ac      	b.n	80078fc <_printf_i+0xf4>
 80079a2:	4827      	ldr	r0, [pc, #156]	@ (8007a40 <_printf_i+0x238>)
 80079a4:	e7e9      	b.n	800797a <_printf_i+0x172>
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	f023 0320 	bic.w	r3, r3, #32
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	e7f6      	b.n	800799e <_printf_i+0x196>
 80079b0:	4616      	mov	r6, r2
 80079b2:	e7bd      	b.n	8007930 <_printf_i+0x128>
 80079b4:	6833      	ldr	r3, [r6, #0]
 80079b6:	6825      	ldr	r5, [r4, #0]
 80079b8:	6961      	ldr	r1, [r4, #20]
 80079ba:	1d18      	adds	r0, r3, #4
 80079bc:	6030      	str	r0, [r6, #0]
 80079be:	062e      	lsls	r6, r5, #24
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	d501      	bpl.n	80079c8 <_printf_i+0x1c0>
 80079c4:	6019      	str	r1, [r3, #0]
 80079c6:	e002      	b.n	80079ce <_printf_i+0x1c6>
 80079c8:	0668      	lsls	r0, r5, #25
 80079ca:	d5fb      	bpl.n	80079c4 <_printf_i+0x1bc>
 80079cc:	8019      	strh	r1, [r3, #0]
 80079ce:	2300      	movs	r3, #0
 80079d0:	6123      	str	r3, [r4, #16]
 80079d2:	4616      	mov	r6, r2
 80079d4:	e7bc      	b.n	8007950 <_printf_i+0x148>
 80079d6:	6833      	ldr	r3, [r6, #0]
 80079d8:	1d1a      	adds	r2, r3, #4
 80079da:	6032      	str	r2, [r6, #0]
 80079dc:	681e      	ldr	r6, [r3, #0]
 80079de:	6862      	ldr	r2, [r4, #4]
 80079e0:	2100      	movs	r1, #0
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7f8 fc2c 	bl	8000240 <memchr>
 80079e8:	b108      	cbz	r0, 80079ee <_printf_i+0x1e6>
 80079ea:	1b80      	subs	r0, r0, r6
 80079ec:	6060      	str	r0, [r4, #4]
 80079ee:	6863      	ldr	r3, [r4, #4]
 80079f0:	6123      	str	r3, [r4, #16]
 80079f2:	2300      	movs	r3, #0
 80079f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079f8:	e7aa      	b.n	8007950 <_printf_i+0x148>
 80079fa:	6923      	ldr	r3, [r4, #16]
 80079fc:	4632      	mov	r2, r6
 80079fe:	4649      	mov	r1, r9
 8007a00:	4640      	mov	r0, r8
 8007a02:	47d0      	blx	sl
 8007a04:	3001      	adds	r0, #1
 8007a06:	d0ad      	beq.n	8007964 <_printf_i+0x15c>
 8007a08:	6823      	ldr	r3, [r4, #0]
 8007a0a:	079b      	lsls	r3, r3, #30
 8007a0c:	d413      	bmi.n	8007a36 <_printf_i+0x22e>
 8007a0e:	68e0      	ldr	r0, [r4, #12]
 8007a10:	9b03      	ldr	r3, [sp, #12]
 8007a12:	4298      	cmp	r0, r3
 8007a14:	bfb8      	it	lt
 8007a16:	4618      	movlt	r0, r3
 8007a18:	e7a6      	b.n	8007968 <_printf_i+0x160>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	4649      	mov	r1, r9
 8007a20:	4640      	mov	r0, r8
 8007a22:	47d0      	blx	sl
 8007a24:	3001      	adds	r0, #1
 8007a26:	d09d      	beq.n	8007964 <_printf_i+0x15c>
 8007a28:	3501      	adds	r5, #1
 8007a2a:	68e3      	ldr	r3, [r4, #12]
 8007a2c:	9903      	ldr	r1, [sp, #12]
 8007a2e:	1a5b      	subs	r3, r3, r1
 8007a30:	42ab      	cmp	r3, r5
 8007a32:	dcf2      	bgt.n	8007a1a <_printf_i+0x212>
 8007a34:	e7eb      	b.n	8007a0e <_printf_i+0x206>
 8007a36:	2500      	movs	r5, #0
 8007a38:	f104 0619 	add.w	r6, r4, #25
 8007a3c:	e7f5      	b.n	8007a2a <_printf_i+0x222>
 8007a3e:	bf00      	nop
 8007a40:	0800ba32 	.word	0x0800ba32
 8007a44:	0800ba43 	.word	0x0800ba43

08007a48 <std>:
 8007a48:	2300      	movs	r3, #0
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a56:	6083      	str	r3, [r0, #8]
 8007a58:	8181      	strh	r1, [r0, #12]
 8007a5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a5c:	81c2      	strh	r2, [r0, #14]
 8007a5e:	6183      	str	r3, [r0, #24]
 8007a60:	4619      	mov	r1, r3
 8007a62:	2208      	movs	r2, #8
 8007a64:	305c      	adds	r0, #92	@ 0x5c
 8007a66:	f000 f914 	bl	8007c92 <memset>
 8007a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa0 <std+0x58>)
 8007a6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa4 <std+0x5c>)
 8007a70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a72:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa8 <std+0x60>)
 8007a74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a76:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <std+0x64>)
 8007a78:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <std+0x68>)
 8007a7c:	6224      	str	r4, [r4, #32]
 8007a7e:	429c      	cmp	r4, r3
 8007a80:	d006      	beq.n	8007a90 <std+0x48>
 8007a82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a86:	4294      	cmp	r4, r2
 8007a88:	d002      	beq.n	8007a90 <std+0x48>
 8007a8a:	33d0      	adds	r3, #208	@ 0xd0
 8007a8c:	429c      	cmp	r4, r3
 8007a8e:	d105      	bne.n	8007a9c <std+0x54>
 8007a90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a98:	f000 b978 	b.w	8007d8c <__retarget_lock_init_recursive>
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	bf00      	nop
 8007aa0:	08007c0d 	.word	0x08007c0d
 8007aa4:	08007c2f 	.word	0x08007c2f
 8007aa8:	08007c67 	.word	0x08007c67
 8007aac:	08007c8b 	.word	0x08007c8b
 8007ab0:	20000d78 	.word	0x20000d78

08007ab4 <stdio_exit_handler>:
 8007ab4:	4a02      	ldr	r2, [pc, #8]	@ (8007ac0 <stdio_exit_handler+0xc>)
 8007ab6:	4903      	ldr	r1, [pc, #12]	@ (8007ac4 <stdio_exit_handler+0x10>)
 8007ab8:	4803      	ldr	r0, [pc, #12]	@ (8007ac8 <stdio_exit_handler+0x14>)
 8007aba:	f000 b869 	b.w	8007b90 <_fwalk_sglue>
 8007abe:	bf00      	nop
 8007ac0:	2000000c 	.word	0x2000000c
 8007ac4:	08009611 	.word	0x08009611
 8007ac8:	2000001c 	.word	0x2000001c

08007acc <cleanup_stdio>:
 8007acc:	6841      	ldr	r1, [r0, #4]
 8007ace:	4b0c      	ldr	r3, [pc, #48]	@ (8007b00 <cleanup_stdio+0x34>)
 8007ad0:	4299      	cmp	r1, r3
 8007ad2:	b510      	push	{r4, lr}
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	d001      	beq.n	8007adc <cleanup_stdio+0x10>
 8007ad8:	f001 fd9a 	bl	8009610 <_fflush_r>
 8007adc:	68a1      	ldr	r1, [r4, #8]
 8007ade:	4b09      	ldr	r3, [pc, #36]	@ (8007b04 <cleanup_stdio+0x38>)
 8007ae0:	4299      	cmp	r1, r3
 8007ae2:	d002      	beq.n	8007aea <cleanup_stdio+0x1e>
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f001 fd93 	bl	8009610 <_fflush_r>
 8007aea:	68e1      	ldr	r1, [r4, #12]
 8007aec:	4b06      	ldr	r3, [pc, #24]	@ (8007b08 <cleanup_stdio+0x3c>)
 8007aee:	4299      	cmp	r1, r3
 8007af0:	d004      	beq.n	8007afc <cleanup_stdio+0x30>
 8007af2:	4620      	mov	r0, r4
 8007af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af8:	f001 bd8a 	b.w	8009610 <_fflush_r>
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	bf00      	nop
 8007b00:	20000d78 	.word	0x20000d78
 8007b04:	20000de0 	.word	0x20000de0
 8007b08:	20000e48 	.word	0x20000e48

08007b0c <global_stdio_init.part.0>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b3c <global_stdio_init.part.0+0x30>)
 8007b10:	4c0b      	ldr	r4, [pc, #44]	@ (8007b40 <global_stdio_init.part.0+0x34>)
 8007b12:	4a0c      	ldr	r2, [pc, #48]	@ (8007b44 <global_stdio_init.part.0+0x38>)
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	4620      	mov	r0, r4
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2104      	movs	r1, #4
 8007b1c:	f7ff ff94 	bl	8007a48 <std>
 8007b20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b24:	2201      	movs	r2, #1
 8007b26:	2109      	movs	r1, #9
 8007b28:	f7ff ff8e 	bl	8007a48 <std>
 8007b2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b30:	2202      	movs	r2, #2
 8007b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b36:	2112      	movs	r1, #18
 8007b38:	f7ff bf86 	b.w	8007a48 <std>
 8007b3c:	20000eb0 	.word	0x20000eb0
 8007b40:	20000d78 	.word	0x20000d78
 8007b44:	08007ab5 	.word	0x08007ab5

08007b48 <__sfp_lock_acquire>:
 8007b48:	4801      	ldr	r0, [pc, #4]	@ (8007b50 <__sfp_lock_acquire+0x8>)
 8007b4a:	f000 b920 	b.w	8007d8e <__retarget_lock_acquire_recursive>
 8007b4e:	bf00      	nop
 8007b50:	20000eb9 	.word	0x20000eb9

08007b54 <__sfp_lock_release>:
 8007b54:	4801      	ldr	r0, [pc, #4]	@ (8007b5c <__sfp_lock_release+0x8>)
 8007b56:	f000 b91b 	b.w	8007d90 <__retarget_lock_release_recursive>
 8007b5a:	bf00      	nop
 8007b5c:	20000eb9 	.word	0x20000eb9

08007b60 <__sinit>:
 8007b60:	b510      	push	{r4, lr}
 8007b62:	4604      	mov	r4, r0
 8007b64:	f7ff fff0 	bl	8007b48 <__sfp_lock_acquire>
 8007b68:	6a23      	ldr	r3, [r4, #32]
 8007b6a:	b11b      	cbz	r3, 8007b74 <__sinit+0x14>
 8007b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b70:	f7ff bff0 	b.w	8007b54 <__sfp_lock_release>
 8007b74:	4b04      	ldr	r3, [pc, #16]	@ (8007b88 <__sinit+0x28>)
 8007b76:	6223      	str	r3, [r4, #32]
 8007b78:	4b04      	ldr	r3, [pc, #16]	@ (8007b8c <__sinit+0x2c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1f5      	bne.n	8007b6c <__sinit+0xc>
 8007b80:	f7ff ffc4 	bl	8007b0c <global_stdio_init.part.0>
 8007b84:	e7f2      	b.n	8007b6c <__sinit+0xc>
 8007b86:	bf00      	nop
 8007b88:	08007acd 	.word	0x08007acd
 8007b8c:	20000eb0 	.word	0x20000eb0

08007b90 <_fwalk_sglue>:
 8007b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b94:	4607      	mov	r7, r0
 8007b96:	4688      	mov	r8, r1
 8007b98:	4614      	mov	r4, r2
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ba0:	f1b9 0901 	subs.w	r9, r9, #1
 8007ba4:	d505      	bpl.n	8007bb2 <_fwalk_sglue+0x22>
 8007ba6:	6824      	ldr	r4, [r4, #0]
 8007ba8:	2c00      	cmp	r4, #0
 8007baa:	d1f7      	bne.n	8007b9c <_fwalk_sglue+0xc>
 8007bac:	4630      	mov	r0, r6
 8007bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bb2:	89ab      	ldrh	r3, [r5, #12]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d907      	bls.n	8007bc8 <_fwalk_sglue+0x38>
 8007bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	d003      	beq.n	8007bc8 <_fwalk_sglue+0x38>
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	47c0      	blx	r8
 8007bc6:	4306      	orrs	r6, r0
 8007bc8:	3568      	adds	r5, #104	@ 0x68
 8007bca:	e7e9      	b.n	8007ba0 <_fwalk_sglue+0x10>

08007bcc <siprintf>:
 8007bcc:	b40e      	push	{r1, r2, r3}
 8007bce:	b500      	push	{lr}
 8007bd0:	b09c      	sub	sp, #112	@ 0x70
 8007bd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8007bd4:	9002      	str	r0, [sp, #8]
 8007bd6:	9006      	str	r0, [sp, #24]
 8007bd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007bdc:	4809      	ldr	r0, [pc, #36]	@ (8007c04 <siprintf+0x38>)
 8007bde:	9107      	str	r1, [sp, #28]
 8007be0:	9104      	str	r1, [sp, #16]
 8007be2:	4909      	ldr	r1, [pc, #36]	@ (8007c08 <siprintf+0x3c>)
 8007be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be8:	9105      	str	r1, [sp, #20]
 8007bea:	6800      	ldr	r0, [r0, #0]
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	a902      	add	r1, sp, #8
 8007bf0:	f001 fb8e 	bl	8009310 <_svfiprintf_r>
 8007bf4:	9b02      	ldr	r3, [sp, #8]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
 8007bfa:	b01c      	add	sp, #112	@ 0x70
 8007bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c00:	b003      	add	sp, #12
 8007c02:	4770      	bx	lr
 8007c04:	20000018 	.word	0x20000018
 8007c08:	ffff0208 	.word	0xffff0208

08007c0c <__sread>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	460c      	mov	r4, r1
 8007c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c14:	f000 f86c 	bl	8007cf0 <_read_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	bfab      	itete	ge
 8007c1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c20:	181b      	addge	r3, r3, r0
 8007c22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c26:	bfac      	ite	ge
 8007c28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c2a:	81a3      	strhlt	r3, [r4, #12]
 8007c2c:	bd10      	pop	{r4, pc}

08007c2e <__swrite>:
 8007c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c32:	461f      	mov	r7, r3
 8007c34:	898b      	ldrh	r3, [r1, #12]
 8007c36:	05db      	lsls	r3, r3, #23
 8007c38:	4605      	mov	r5, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	4616      	mov	r6, r2
 8007c3e:	d505      	bpl.n	8007c4c <__swrite+0x1e>
 8007c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c44:	2302      	movs	r3, #2
 8007c46:	2200      	movs	r2, #0
 8007c48:	f000 f840 	bl	8007ccc <_lseek_r>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c56:	81a3      	strh	r3, [r4, #12]
 8007c58:	4632      	mov	r2, r6
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c62:	f000 b857 	b.w	8007d14 <_write_r>

08007c66 <__sseek>:
 8007c66:	b510      	push	{r4, lr}
 8007c68:	460c      	mov	r4, r1
 8007c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c6e:	f000 f82d 	bl	8007ccc <_lseek_r>
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	bf15      	itete	ne
 8007c78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c82:	81a3      	strheq	r3, [r4, #12]
 8007c84:	bf18      	it	ne
 8007c86:	81a3      	strhne	r3, [r4, #12]
 8007c88:	bd10      	pop	{r4, pc}

08007c8a <__sclose>:
 8007c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8e:	f000 b80d 	b.w	8007cac <_close_r>

08007c92 <memset>:
 8007c92:	4402      	add	r2, r0
 8007c94:	4603      	mov	r3, r0
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d100      	bne.n	8007c9c <memset+0xa>
 8007c9a:	4770      	bx	lr
 8007c9c:	f803 1b01 	strb.w	r1, [r3], #1
 8007ca0:	e7f9      	b.n	8007c96 <memset+0x4>
	...

08007ca4 <_localeconv_r>:
 8007ca4:	4800      	ldr	r0, [pc, #0]	@ (8007ca8 <_localeconv_r+0x4>)
 8007ca6:	4770      	bx	lr
 8007ca8:	20000158 	.word	0x20000158

08007cac <_close_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4d06      	ldr	r5, [pc, #24]	@ (8007cc8 <_close_r+0x1c>)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	602b      	str	r3, [r5, #0]
 8007cb8:	f7f9 ffd9 	bl	8001c6e <_close>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_close_r+0x1a>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_close_r+0x1a>
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	20000eb4 	.word	0x20000eb4

08007ccc <_lseek_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4d07      	ldr	r5, [pc, #28]	@ (8007cec <_lseek_r+0x20>)
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	4608      	mov	r0, r1
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	602a      	str	r2, [r5, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f7f9 ffee 	bl	8001cbc <_lseek>
 8007ce0:	1c43      	adds	r3, r0, #1
 8007ce2:	d102      	bne.n	8007cea <_lseek_r+0x1e>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	b103      	cbz	r3, 8007cea <_lseek_r+0x1e>
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	20000eb4 	.word	0x20000eb4

08007cf0 <_read_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d07      	ldr	r5, [pc, #28]	@ (8007d10 <_read_r+0x20>)
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	4608      	mov	r0, r1
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	602a      	str	r2, [r5, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f7f9 ff7c 	bl	8001bfc <_read>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_read_r+0x1e>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_read_r+0x1e>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	20000eb4 	.word	0x20000eb4

08007d14 <_write_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d07      	ldr	r5, [pc, #28]	@ (8007d34 <_write_r+0x20>)
 8007d18:	4604      	mov	r4, r0
 8007d1a:	4608      	mov	r0, r1
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	2200      	movs	r2, #0
 8007d20:	602a      	str	r2, [r5, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	f7f9 ff87 	bl	8001c36 <_write>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_write_r+0x1e>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_write_r+0x1e>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	20000eb4 	.word	0x20000eb4

08007d38 <__errno>:
 8007d38:	4b01      	ldr	r3, [pc, #4]	@ (8007d40 <__errno+0x8>)
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	20000018 	.word	0x20000018

08007d44 <__libc_init_array>:
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	4d0d      	ldr	r5, [pc, #52]	@ (8007d7c <__libc_init_array+0x38>)
 8007d48:	4c0d      	ldr	r4, [pc, #52]	@ (8007d80 <__libc_init_array+0x3c>)
 8007d4a:	1b64      	subs	r4, r4, r5
 8007d4c:	10a4      	asrs	r4, r4, #2
 8007d4e:	2600      	movs	r6, #0
 8007d50:	42a6      	cmp	r6, r4
 8007d52:	d109      	bne.n	8007d68 <__libc_init_array+0x24>
 8007d54:	4d0b      	ldr	r5, [pc, #44]	@ (8007d84 <__libc_init_array+0x40>)
 8007d56:	4c0c      	ldr	r4, [pc, #48]	@ (8007d88 <__libc_init_array+0x44>)
 8007d58:	f001 fff8 	bl	8009d4c <_init>
 8007d5c:	1b64      	subs	r4, r4, r5
 8007d5e:	10a4      	asrs	r4, r4, #2
 8007d60:	2600      	movs	r6, #0
 8007d62:	42a6      	cmp	r6, r4
 8007d64:	d105      	bne.n	8007d72 <__libc_init_array+0x2e>
 8007d66:	bd70      	pop	{r4, r5, r6, pc}
 8007d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d6c:	4798      	blx	r3
 8007d6e:	3601      	adds	r6, #1
 8007d70:	e7ee      	b.n	8007d50 <__libc_init_array+0xc>
 8007d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d76:	4798      	blx	r3
 8007d78:	3601      	adds	r6, #1
 8007d7a:	e7f2      	b.n	8007d62 <__libc_init_array+0x1e>
 8007d7c:	0800bd98 	.word	0x0800bd98
 8007d80:	0800bd98 	.word	0x0800bd98
 8007d84:	0800bd98 	.word	0x0800bd98
 8007d88:	0800bda0 	.word	0x0800bda0

08007d8c <__retarget_lock_init_recursive>:
 8007d8c:	4770      	bx	lr

08007d8e <__retarget_lock_acquire_recursive>:
 8007d8e:	4770      	bx	lr

08007d90 <__retarget_lock_release_recursive>:
 8007d90:	4770      	bx	lr

08007d92 <quorem>:
 8007d92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d96:	6903      	ldr	r3, [r0, #16]
 8007d98:	690c      	ldr	r4, [r1, #16]
 8007d9a:	42a3      	cmp	r3, r4
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	db7e      	blt.n	8007e9e <quorem+0x10c>
 8007da0:	3c01      	subs	r4, #1
 8007da2:	f101 0814 	add.w	r8, r1, #20
 8007da6:	00a3      	lsls	r3, r4, #2
 8007da8:	f100 0514 	add.w	r5, r0, #20
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007db2:	9301      	str	r3, [sp, #4]
 8007db4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007db8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007dc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007dc8:	d32e      	bcc.n	8007e28 <quorem+0x96>
 8007dca:	f04f 0a00 	mov.w	sl, #0
 8007dce:	46c4      	mov	ip, r8
 8007dd0:	46ae      	mov	lr, r5
 8007dd2:	46d3      	mov	fp, sl
 8007dd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007dd8:	b298      	uxth	r0, r3
 8007dda:	fb06 a000 	mla	r0, r6, r0, sl
 8007dde:	0c02      	lsrs	r2, r0, #16
 8007de0:	0c1b      	lsrs	r3, r3, #16
 8007de2:	fb06 2303 	mla	r3, r6, r3, r2
 8007de6:	f8de 2000 	ldr.w	r2, [lr]
 8007dea:	b280      	uxth	r0, r0
 8007dec:	b292      	uxth	r2, r2
 8007dee:	1a12      	subs	r2, r2, r0
 8007df0:	445a      	add	r2, fp
 8007df2:	f8de 0000 	ldr.w	r0, [lr]
 8007df6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e00:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e04:	b292      	uxth	r2, r2
 8007e06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e0a:	45e1      	cmp	r9, ip
 8007e0c:	f84e 2b04 	str.w	r2, [lr], #4
 8007e10:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e14:	d2de      	bcs.n	8007dd4 <quorem+0x42>
 8007e16:	9b00      	ldr	r3, [sp, #0]
 8007e18:	58eb      	ldr	r3, [r5, r3]
 8007e1a:	b92b      	cbnz	r3, 8007e28 <quorem+0x96>
 8007e1c:	9b01      	ldr	r3, [sp, #4]
 8007e1e:	3b04      	subs	r3, #4
 8007e20:	429d      	cmp	r5, r3
 8007e22:	461a      	mov	r2, r3
 8007e24:	d32f      	bcc.n	8007e86 <quorem+0xf4>
 8007e26:	613c      	str	r4, [r7, #16]
 8007e28:	4638      	mov	r0, r7
 8007e2a:	f001 f90d 	bl	8009048 <__mcmp>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	db25      	blt.n	8007e7e <quorem+0xec>
 8007e32:	4629      	mov	r1, r5
 8007e34:	2000      	movs	r0, #0
 8007e36:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e3a:	f8d1 c000 	ldr.w	ip, [r1]
 8007e3e:	fa1f fe82 	uxth.w	lr, r2
 8007e42:	fa1f f38c 	uxth.w	r3, ip
 8007e46:	eba3 030e 	sub.w	r3, r3, lr
 8007e4a:	4403      	add	r3, r0
 8007e4c:	0c12      	lsrs	r2, r2, #16
 8007e4e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e52:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e5c:	45c1      	cmp	r9, r8
 8007e5e:	f841 3b04 	str.w	r3, [r1], #4
 8007e62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e66:	d2e6      	bcs.n	8007e36 <quorem+0xa4>
 8007e68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e70:	b922      	cbnz	r2, 8007e7c <quorem+0xea>
 8007e72:	3b04      	subs	r3, #4
 8007e74:	429d      	cmp	r5, r3
 8007e76:	461a      	mov	r2, r3
 8007e78:	d30b      	bcc.n	8007e92 <quorem+0x100>
 8007e7a:	613c      	str	r4, [r7, #16]
 8007e7c:	3601      	adds	r6, #1
 8007e7e:	4630      	mov	r0, r6
 8007e80:	b003      	add	sp, #12
 8007e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e86:	6812      	ldr	r2, [r2, #0]
 8007e88:	3b04      	subs	r3, #4
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	d1cb      	bne.n	8007e26 <quorem+0x94>
 8007e8e:	3c01      	subs	r4, #1
 8007e90:	e7c6      	b.n	8007e20 <quorem+0x8e>
 8007e92:	6812      	ldr	r2, [r2, #0]
 8007e94:	3b04      	subs	r3, #4
 8007e96:	2a00      	cmp	r2, #0
 8007e98:	d1ef      	bne.n	8007e7a <quorem+0xe8>
 8007e9a:	3c01      	subs	r4, #1
 8007e9c:	e7ea      	b.n	8007e74 <quorem+0xe2>
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	e7ee      	b.n	8007e80 <quorem+0xee>
 8007ea2:	0000      	movs	r0, r0
 8007ea4:	0000      	movs	r0, r0
	...

08007ea8 <_dtoa_r>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	ed2d 8b02 	vpush	{d8}
 8007eb0:	69c7      	ldr	r7, [r0, #28]
 8007eb2:	b091      	sub	sp, #68	@ 0x44
 8007eb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007eb8:	ec55 4b10 	vmov	r4, r5, d0
 8007ebc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007ebe:	9107      	str	r1, [sp, #28]
 8007ec0:	4681      	mov	r9, r0
 8007ec2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ec4:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ec6:	b97f      	cbnz	r7, 8007ee8 <_dtoa_r+0x40>
 8007ec8:	2010      	movs	r0, #16
 8007eca:	f000 fd8d 	bl	80089e8 <malloc>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	f8c9 001c 	str.w	r0, [r9, #28]
 8007ed4:	b920      	cbnz	r0, 8007ee0 <_dtoa_r+0x38>
 8007ed6:	4ba0      	ldr	r3, [pc, #640]	@ (8008158 <_dtoa_r+0x2b0>)
 8007ed8:	21ef      	movs	r1, #239	@ 0xef
 8007eda:	48a0      	ldr	r0, [pc, #640]	@ (800815c <_dtoa_r+0x2b4>)
 8007edc:	f001 fbf8 	bl	80096d0 <__assert_func>
 8007ee0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ee4:	6007      	str	r7, [r0, #0]
 8007ee6:	60c7      	str	r7, [r0, #12]
 8007ee8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007eec:	6819      	ldr	r1, [r3, #0]
 8007eee:	b159      	cbz	r1, 8007f08 <_dtoa_r+0x60>
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	604a      	str	r2, [r1, #4]
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	4093      	lsls	r3, r2
 8007ef8:	608b      	str	r3, [r1, #8]
 8007efa:	4648      	mov	r0, r9
 8007efc:	f000 fe6a 	bl	8008bd4 <_Bfree>
 8007f00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	1e2b      	subs	r3, r5, #0
 8007f0a:	bfbb      	ittet	lt
 8007f0c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f10:	9303      	strlt	r3, [sp, #12]
 8007f12:	2300      	movge	r3, #0
 8007f14:	2201      	movlt	r2, #1
 8007f16:	bfac      	ite	ge
 8007f18:	6033      	strge	r3, [r6, #0]
 8007f1a:	6032      	strlt	r2, [r6, #0]
 8007f1c:	4b90      	ldr	r3, [pc, #576]	@ (8008160 <_dtoa_r+0x2b8>)
 8007f1e:	9e03      	ldr	r6, [sp, #12]
 8007f20:	43b3      	bics	r3, r6
 8007f22:	d110      	bne.n	8007f46 <_dtoa_r+0x9e>
 8007f24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f26:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007f30:	4323      	orrs	r3, r4
 8007f32:	f000 84de 	beq.w	80088f2 <_dtoa_r+0xa4a>
 8007f36:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f38:	4f8a      	ldr	r7, [pc, #552]	@ (8008164 <_dtoa_r+0x2bc>)
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 84e0 	beq.w	8008900 <_dtoa_r+0xa58>
 8007f40:	1cfb      	adds	r3, r7, #3
 8007f42:	f000 bcdb 	b.w	80088fc <_dtoa_r+0xa54>
 8007f46:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007f4a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f52:	d10a      	bne.n	8007f6a <_dtoa_r+0xc2>
 8007f54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f56:	2301      	movs	r3, #1
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f5c:	b113      	cbz	r3, 8007f64 <_dtoa_r+0xbc>
 8007f5e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007f60:	4b81      	ldr	r3, [pc, #516]	@ (8008168 <_dtoa_r+0x2c0>)
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	4f81      	ldr	r7, [pc, #516]	@ (800816c <_dtoa_r+0x2c4>)
 8007f66:	f000 bccb 	b.w	8008900 <_dtoa_r+0xa58>
 8007f6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f6c:	a90f      	add	r1, sp, #60	@ 0x3c
 8007f6e:	4648      	mov	r0, r9
 8007f70:	eeb0 0b48 	vmov.f64	d0, d8
 8007f74:	f001 f918 	bl	80091a8 <__d2b>
 8007f78:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007f7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f7e:	9001      	str	r0, [sp, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d045      	beq.n	8008010 <_dtoa_r+0x168>
 8007f84:	eeb0 7b48 	vmov.f64	d7, d8
 8007f88:	ee18 1a90 	vmov	r1, s17
 8007f8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007f90:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007f94:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007f98:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007f9c:	2500      	movs	r5, #0
 8007f9e:	ee07 1a90 	vmov	s15, r1
 8007fa2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007fa6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008140 <_dtoa_r+0x298>
 8007faa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007fae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008148 <_dtoa_r+0x2a0>
 8007fb2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007fb6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008150 <_dtoa_r+0x2a8>
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007fc2:	eeb0 7b46 	vmov.f64	d7, d6
 8007fc6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007fca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007fce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd6:	ee16 8a90 	vmov	r8, s13
 8007fda:	d508      	bpl.n	8007fee <_dtoa_r+0x146>
 8007fdc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007fe0:	eeb4 6b47 	vcmp.f64	d6, d7
 8007fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe8:	bf18      	it	ne
 8007fea:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007fee:	f1b8 0f16 	cmp.w	r8, #22
 8007ff2:	d82b      	bhi.n	800804c <_dtoa_r+0x1a4>
 8007ff4:	495e      	ldr	r1, [pc, #376]	@ (8008170 <_dtoa_r+0x2c8>)
 8007ff6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007ffa:	ed91 7b00 	vldr	d7, [r1]
 8007ffe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008006:	d501      	bpl.n	800800c <_dtoa_r+0x164>
 8008008:	f108 38ff 	add.w	r8, r8, #4294967295
 800800c:	2100      	movs	r1, #0
 800800e:	e01e      	b.n	800804e <_dtoa_r+0x1a6>
 8008010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008012:	4413      	add	r3, r2
 8008014:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008018:	2920      	cmp	r1, #32
 800801a:	bfc1      	itttt	gt
 800801c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8008020:	408e      	lslgt	r6, r1
 8008022:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8008026:	fa24 f101 	lsrgt.w	r1, r4, r1
 800802a:	bfd6      	itet	le
 800802c:	f1c1 0120 	rsble	r1, r1, #32
 8008030:	4331      	orrgt	r1, r6
 8008032:	fa04 f101 	lslle.w	r1, r4, r1
 8008036:	ee07 1a90 	vmov	s15, r1
 800803a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800803e:	3b01      	subs	r3, #1
 8008040:	ee17 1a90 	vmov	r1, s15
 8008044:	2501      	movs	r5, #1
 8008046:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800804a:	e7a8      	b.n	8007f9e <_dtoa_r+0xf6>
 800804c:	2101      	movs	r1, #1
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	1e53      	subs	r3, r2, #1
 8008052:	9306      	str	r3, [sp, #24]
 8008054:	bf45      	ittet	mi
 8008056:	f1c2 0301 	rsbmi	r3, r2, #1
 800805a:	9305      	strmi	r3, [sp, #20]
 800805c:	2300      	movpl	r3, #0
 800805e:	2300      	movmi	r3, #0
 8008060:	bf4c      	ite	mi
 8008062:	9306      	strmi	r3, [sp, #24]
 8008064:	9305      	strpl	r3, [sp, #20]
 8008066:	f1b8 0f00 	cmp.w	r8, #0
 800806a:	910c      	str	r1, [sp, #48]	@ 0x30
 800806c:	db18      	blt.n	80080a0 <_dtoa_r+0x1f8>
 800806e:	9b06      	ldr	r3, [sp, #24]
 8008070:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008074:	4443      	add	r3, r8
 8008076:	9306      	str	r3, [sp, #24]
 8008078:	2300      	movs	r3, #0
 800807a:	9a07      	ldr	r2, [sp, #28]
 800807c:	2a09      	cmp	r2, #9
 800807e:	d849      	bhi.n	8008114 <_dtoa_r+0x26c>
 8008080:	2a05      	cmp	r2, #5
 8008082:	bfc4      	itt	gt
 8008084:	3a04      	subgt	r2, #4
 8008086:	9207      	strgt	r2, [sp, #28]
 8008088:	9a07      	ldr	r2, [sp, #28]
 800808a:	f1a2 0202 	sub.w	r2, r2, #2
 800808e:	bfcc      	ite	gt
 8008090:	2400      	movgt	r4, #0
 8008092:	2401      	movle	r4, #1
 8008094:	2a03      	cmp	r2, #3
 8008096:	d848      	bhi.n	800812a <_dtoa_r+0x282>
 8008098:	e8df f002 	tbb	[pc, r2]
 800809c:	3a2c2e0b 	.word	0x3a2c2e0b
 80080a0:	9b05      	ldr	r3, [sp, #20]
 80080a2:	2200      	movs	r2, #0
 80080a4:	eba3 0308 	sub.w	r3, r3, r8
 80080a8:	9305      	str	r3, [sp, #20]
 80080aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80080ac:	f1c8 0300 	rsb	r3, r8, #0
 80080b0:	e7e3      	b.n	800807a <_dtoa_r+0x1d2>
 80080b2:	2200      	movs	r2, #0
 80080b4:	9208      	str	r2, [sp, #32]
 80080b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080b8:	2a00      	cmp	r2, #0
 80080ba:	dc39      	bgt.n	8008130 <_dtoa_r+0x288>
 80080bc:	f04f 0b01 	mov.w	fp, #1
 80080c0:	46da      	mov	sl, fp
 80080c2:	465a      	mov	r2, fp
 80080c4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80080c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80080cc:	2100      	movs	r1, #0
 80080ce:	2004      	movs	r0, #4
 80080d0:	f100 0614 	add.w	r6, r0, #20
 80080d4:	4296      	cmp	r6, r2
 80080d6:	d930      	bls.n	800813a <_dtoa_r+0x292>
 80080d8:	6079      	str	r1, [r7, #4]
 80080da:	4648      	mov	r0, r9
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	f000 fd39 	bl	8008b54 <_Balloc>
 80080e2:	9b04      	ldr	r3, [sp, #16]
 80080e4:	4607      	mov	r7, r0
 80080e6:	2800      	cmp	r0, #0
 80080e8:	d146      	bne.n	8008178 <_dtoa_r+0x2d0>
 80080ea:	4b22      	ldr	r3, [pc, #136]	@ (8008174 <_dtoa_r+0x2cc>)
 80080ec:	4602      	mov	r2, r0
 80080ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80080f2:	e6f2      	b.n	8007eda <_dtoa_r+0x32>
 80080f4:	2201      	movs	r2, #1
 80080f6:	e7dd      	b.n	80080b4 <_dtoa_r+0x20c>
 80080f8:	2200      	movs	r2, #0
 80080fa:	9208      	str	r2, [sp, #32]
 80080fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080fe:	eb08 0b02 	add.w	fp, r8, r2
 8008102:	f10b 0a01 	add.w	sl, fp, #1
 8008106:	4652      	mov	r2, sl
 8008108:	2a01      	cmp	r2, #1
 800810a:	bfb8      	it	lt
 800810c:	2201      	movlt	r2, #1
 800810e:	e7db      	b.n	80080c8 <_dtoa_r+0x220>
 8008110:	2201      	movs	r2, #1
 8008112:	e7f2      	b.n	80080fa <_dtoa_r+0x252>
 8008114:	2401      	movs	r4, #1
 8008116:	2200      	movs	r2, #0
 8008118:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800811c:	f04f 3bff 	mov.w	fp, #4294967295
 8008120:	2100      	movs	r1, #0
 8008122:	46da      	mov	sl, fp
 8008124:	2212      	movs	r2, #18
 8008126:	9109      	str	r1, [sp, #36]	@ 0x24
 8008128:	e7ce      	b.n	80080c8 <_dtoa_r+0x220>
 800812a:	2201      	movs	r2, #1
 800812c:	9208      	str	r2, [sp, #32]
 800812e:	e7f5      	b.n	800811c <_dtoa_r+0x274>
 8008130:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8008134:	46da      	mov	sl, fp
 8008136:	465a      	mov	r2, fp
 8008138:	e7c6      	b.n	80080c8 <_dtoa_r+0x220>
 800813a:	3101      	adds	r1, #1
 800813c:	0040      	lsls	r0, r0, #1
 800813e:	e7c7      	b.n	80080d0 <_dtoa_r+0x228>
 8008140:	636f4361 	.word	0x636f4361
 8008144:	3fd287a7 	.word	0x3fd287a7
 8008148:	8b60c8b3 	.word	0x8b60c8b3
 800814c:	3fc68a28 	.word	0x3fc68a28
 8008150:	509f79fb 	.word	0x509f79fb
 8008154:	3fd34413 	.word	0x3fd34413
 8008158:	0800ba61 	.word	0x0800ba61
 800815c:	0800ba78 	.word	0x0800ba78
 8008160:	7ff00000 	.word	0x7ff00000
 8008164:	0800ba5d 	.word	0x0800ba5d
 8008168:	0800ba31 	.word	0x0800ba31
 800816c:	0800ba30 	.word	0x0800ba30
 8008170:	0800bb70 	.word	0x0800bb70
 8008174:	0800bad0 	.word	0x0800bad0
 8008178:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800817c:	f1ba 0f0e 	cmp.w	sl, #14
 8008180:	6010      	str	r0, [r2, #0]
 8008182:	d86f      	bhi.n	8008264 <_dtoa_r+0x3bc>
 8008184:	2c00      	cmp	r4, #0
 8008186:	d06d      	beq.n	8008264 <_dtoa_r+0x3bc>
 8008188:	f1b8 0f00 	cmp.w	r8, #0
 800818c:	f340 80c2 	ble.w	8008314 <_dtoa_r+0x46c>
 8008190:	4aca      	ldr	r2, [pc, #808]	@ (80084bc <_dtoa_r+0x614>)
 8008192:	f008 010f 	and.w	r1, r8, #15
 8008196:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800819a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800819e:	ed92 7b00 	vldr	d7, [r2]
 80081a2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80081a6:	f000 80a9 	beq.w	80082fc <_dtoa_r+0x454>
 80081aa:	4ac5      	ldr	r2, [pc, #788]	@ (80084c0 <_dtoa_r+0x618>)
 80081ac:	ed92 6b08 	vldr	d6, [r2, #32]
 80081b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80081b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80081b8:	f001 010f 	and.w	r1, r1, #15
 80081bc:	2203      	movs	r2, #3
 80081be:	48c0      	ldr	r0, [pc, #768]	@ (80084c0 <_dtoa_r+0x618>)
 80081c0:	2900      	cmp	r1, #0
 80081c2:	f040 809d 	bne.w	8008300 <_dtoa_r+0x458>
 80081c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80081ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80081ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80081d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80081d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081d8:	2900      	cmp	r1, #0
 80081da:	f000 80c1 	beq.w	8008360 <_dtoa_r+0x4b8>
 80081de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80081e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80081e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ea:	f140 80b9 	bpl.w	8008360 <_dtoa_r+0x4b8>
 80081ee:	f1ba 0f00 	cmp.w	sl, #0
 80081f2:	f000 80b5 	beq.w	8008360 <_dtoa_r+0x4b8>
 80081f6:	f1bb 0f00 	cmp.w	fp, #0
 80081fa:	dd31      	ble.n	8008260 <_dtoa_r+0x3b8>
 80081fc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008200:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008204:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008208:	f108 31ff 	add.w	r1, r8, #4294967295
 800820c:	9104      	str	r1, [sp, #16]
 800820e:	3201      	adds	r2, #1
 8008210:	465c      	mov	r4, fp
 8008212:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008216:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800821a:	ee07 2a90 	vmov	s15, r2
 800821e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008222:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008226:	ee15 2a90 	vmov	r2, s11
 800822a:	ec51 0b15 	vmov	r0, r1, d5
 800822e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8008232:	2c00      	cmp	r4, #0
 8008234:	f040 8098 	bne.w	8008368 <_dtoa_r+0x4c0>
 8008238:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800823c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008240:	ec41 0b17 	vmov	d7, r0, r1
 8008244:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800824c:	f300 8261 	bgt.w	8008712 <_dtoa_r+0x86a>
 8008250:	eeb1 7b47 	vneg.f64	d7, d7
 8008254:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800825c:	f100 80f5 	bmi.w	800844a <_dtoa_r+0x5a2>
 8008260:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008264:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008266:	2a00      	cmp	r2, #0
 8008268:	f2c0 812c 	blt.w	80084c4 <_dtoa_r+0x61c>
 800826c:	f1b8 0f0e 	cmp.w	r8, #14
 8008270:	f300 8128 	bgt.w	80084c4 <_dtoa_r+0x61c>
 8008274:	4b91      	ldr	r3, [pc, #580]	@ (80084bc <_dtoa_r+0x614>)
 8008276:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800827a:	ed93 6b00 	vldr	d6, [r3]
 800827e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	da03      	bge.n	800828c <_dtoa_r+0x3e4>
 8008284:	f1ba 0f00 	cmp.w	sl, #0
 8008288:	f340 80d2 	ble.w	8008430 <_dtoa_r+0x588>
 800828c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008290:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008294:	463e      	mov	r6, r7
 8008296:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800829a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800829e:	ee15 3a10 	vmov	r3, s10
 80082a2:	3330      	adds	r3, #48	@ 0x30
 80082a4:	f806 3b01 	strb.w	r3, [r6], #1
 80082a8:	1bf3      	subs	r3, r6, r7
 80082aa:	459a      	cmp	sl, r3
 80082ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80082b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80082b4:	f040 80f8 	bne.w	80084a8 <_dtoa_r+0x600>
 80082b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80082bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c4:	f300 80dd 	bgt.w	8008482 <_dtoa_r+0x5da>
 80082c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80082cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d0:	d104      	bne.n	80082dc <_dtoa_r+0x434>
 80082d2:	ee15 3a10 	vmov	r3, s10
 80082d6:	07db      	lsls	r3, r3, #31
 80082d8:	f100 80d3 	bmi.w	8008482 <_dtoa_r+0x5da>
 80082dc:	9901      	ldr	r1, [sp, #4]
 80082de:	4648      	mov	r0, r9
 80082e0:	f000 fc78 	bl	8008bd4 <_Bfree>
 80082e4:	2300      	movs	r3, #0
 80082e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082e8:	7033      	strb	r3, [r6, #0]
 80082ea:	f108 0301 	add.w	r3, r8, #1
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 8304 	beq.w	8008900 <_dtoa_r+0xa58>
 80082f8:	601e      	str	r6, [r3, #0]
 80082fa:	e301      	b.n	8008900 <_dtoa_r+0xa58>
 80082fc:	2202      	movs	r2, #2
 80082fe:	e75e      	b.n	80081be <_dtoa_r+0x316>
 8008300:	07cc      	lsls	r4, r1, #31
 8008302:	d504      	bpl.n	800830e <_dtoa_r+0x466>
 8008304:	ed90 6b00 	vldr	d6, [r0]
 8008308:	3201      	adds	r2, #1
 800830a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800830e:	1049      	asrs	r1, r1, #1
 8008310:	3008      	adds	r0, #8
 8008312:	e755      	b.n	80081c0 <_dtoa_r+0x318>
 8008314:	d022      	beq.n	800835c <_dtoa_r+0x4b4>
 8008316:	f1c8 0100 	rsb	r1, r8, #0
 800831a:	4a68      	ldr	r2, [pc, #416]	@ (80084bc <_dtoa_r+0x614>)
 800831c:	f001 000f 	and.w	r0, r1, #15
 8008320:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008324:	ed92 7b00 	vldr	d7, [r2]
 8008328:	ee28 7b07 	vmul.f64	d7, d8, d7
 800832c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008330:	4863      	ldr	r0, [pc, #396]	@ (80084c0 <_dtoa_r+0x618>)
 8008332:	1109      	asrs	r1, r1, #4
 8008334:	2400      	movs	r4, #0
 8008336:	2202      	movs	r2, #2
 8008338:	b929      	cbnz	r1, 8008346 <_dtoa_r+0x49e>
 800833a:	2c00      	cmp	r4, #0
 800833c:	f43f af49 	beq.w	80081d2 <_dtoa_r+0x32a>
 8008340:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008344:	e745      	b.n	80081d2 <_dtoa_r+0x32a>
 8008346:	07ce      	lsls	r6, r1, #31
 8008348:	d505      	bpl.n	8008356 <_dtoa_r+0x4ae>
 800834a:	ed90 6b00 	vldr	d6, [r0]
 800834e:	3201      	adds	r2, #1
 8008350:	2401      	movs	r4, #1
 8008352:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008356:	1049      	asrs	r1, r1, #1
 8008358:	3008      	adds	r0, #8
 800835a:	e7ed      	b.n	8008338 <_dtoa_r+0x490>
 800835c:	2202      	movs	r2, #2
 800835e:	e738      	b.n	80081d2 <_dtoa_r+0x32a>
 8008360:	f8cd 8010 	str.w	r8, [sp, #16]
 8008364:	4654      	mov	r4, sl
 8008366:	e754      	b.n	8008212 <_dtoa_r+0x36a>
 8008368:	4a54      	ldr	r2, [pc, #336]	@ (80084bc <_dtoa_r+0x614>)
 800836a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800836e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008372:	9a08      	ldr	r2, [sp, #32]
 8008374:	ec41 0b17 	vmov	d7, r0, r1
 8008378:	443c      	add	r4, r7
 800837a:	b34a      	cbz	r2, 80083d0 <_dtoa_r+0x528>
 800837c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008380:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008384:	463e      	mov	r6, r7
 8008386:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800838a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800838e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008392:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008396:	ee14 2a90 	vmov	r2, s9
 800839a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800839e:	3230      	adds	r2, #48	@ 0x30
 80083a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80083a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ac:	f806 2b01 	strb.w	r2, [r6], #1
 80083b0:	d438      	bmi.n	8008424 <_dtoa_r+0x57c>
 80083b2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80083b6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80083ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083be:	d462      	bmi.n	8008486 <_dtoa_r+0x5de>
 80083c0:	42a6      	cmp	r6, r4
 80083c2:	f43f af4d 	beq.w	8008260 <_dtoa_r+0x3b8>
 80083c6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80083ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80083ce:	e7e0      	b.n	8008392 <_dtoa_r+0x4ea>
 80083d0:	4621      	mov	r1, r4
 80083d2:	463e      	mov	r6, r7
 80083d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80083d8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80083dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80083e0:	ee14 2a90 	vmov	r2, s9
 80083e4:	3230      	adds	r2, #48	@ 0x30
 80083e6:	f806 2b01 	strb.w	r2, [r6], #1
 80083ea:	42a6      	cmp	r6, r4
 80083ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80083f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80083f4:	d119      	bne.n	800842a <_dtoa_r+0x582>
 80083f6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80083fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80083fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008406:	dc3e      	bgt.n	8008486 <_dtoa_r+0x5de>
 8008408:	ee35 5b47 	vsub.f64	d5, d5, d7
 800840c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008414:	f57f af24 	bpl.w	8008260 <_dtoa_r+0x3b8>
 8008418:	460e      	mov	r6, r1
 800841a:	3901      	subs	r1, #1
 800841c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008420:	2b30      	cmp	r3, #48	@ 0x30
 8008422:	d0f9      	beq.n	8008418 <_dtoa_r+0x570>
 8008424:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008428:	e758      	b.n	80082dc <_dtoa_r+0x434>
 800842a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800842e:	e7d5      	b.n	80083dc <_dtoa_r+0x534>
 8008430:	d10b      	bne.n	800844a <_dtoa_r+0x5a2>
 8008432:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008436:	ee26 6b07 	vmul.f64	d6, d6, d7
 800843a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800843e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008446:	f2c0 8161 	blt.w	800870c <_dtoa_r+0x864>
 800844a:	2400      	movs	r4, #0
 800844c:	4625      	mov	r5, r4
 800844e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008450:	43db      	mvns	r3, r3
 8008452:	9304      	str	r3, [sp, #16]
 8008454:	463e      	mov	r6, r7
 8008456:	f04f 0800 	mov.w	r8, #0
 800845a:	4621      	mov	r1, r4
 800845c:	4648      	mov	r0, r9
 800845e:	f000 fbb9 	bl	8008bd4 <_Bfree>
 8008462:	2d00      	cmp	r5, #0
 8008464:	d0de      	beq.n	8008424 <_dtoa_r+0x57c>
 8008466:	f1b8 0f00 	cmp.w	r8, #0
 800846a:	d005      	beq.n	8008478 <_dtoa_r+0x5d0>
 800846c:	45a8      	cmp	r8, r5
 800846e:	d003      	beq.n	8008478 <_dtoa_r+0x5d0>
 8008470:	4641      	mov	r1, r8
 8008472:	4648      	mov	r0, r9
 8008474:	f000 fbae 	bl	8008bd4 <_Bfree>
 8008478:	4629      	mov	r1, r5
 800847a:	4648      	mov	r0, r9
 800847c:	f000 fbaa 	bl	8008bd4 <_Bfree>
 8008480:	e7d0      	b.n	8008424 <_dtoa_r+0x57c>
 8008482:	f8cd 8010 	str.w	r8, [sp, #16]
 8008486:	4633      	mov	r3, r6
 8008488:	461e      	mov	r6, r3
 800848a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800848e:	2a39      	cmp	r2, #57	@ 0x39
 8008490:	d106      	bne.n	80084a0 <_dtoa_r+0x5f8>
 8008492:	429f      	cmp	r7, r3
 8008494:	d1f8      	bne.n	8008488 <_dtoa_r+0x5e0>
 8008496:	9a04      	ldr	r2, [sp, #16]
 8008498:	3201      	adds	r2, #1
 800849a:	9204      	str	r2, [sp, #16]
 800849c:	2230      	movs	r2, #48	@ 0x30
 800849e:	703a      	strb	r2, [r7, #0]
 80084a0:	781a      	ldrb	r2, [r3, #0]
 80084a2:	3201      	adds	r2, #1
 80084a4:	701a      	strb	r2, [r3, #0]
 80084a6:	e7bd      	b.n	8008424 <_dtoa_r+0x57c>
 80084a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80084ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80084b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b4:	f47f aeef 	bne.w	8008296 <_dtoa_r+0x3ee>
 80084b8:	e710      	b.n	80082dc <_dtoa_r+0x434>
 80084ba:	bf00      	nop
 80084bc:	0800bb70 	.word	0x0800bb70
 80084c0:	0800bb48 	.word	0x0800bb48
 80084c4:	9908      	ldr	r1, [sp, #32]
 80084c6:	2900      	cmp	r1, #0
 80084c8:	f000 80e3 	beq.w	8008692 <_dtoa_r+0x7ea>
 80084cc:	9907      	ldr	r1, [sp, #28]
 80084ce:	2901      	cmp	r1, #1
 80084d0:	f300 80c8 	bgt.w	8008664 <_dtoa_r+0x7bc>
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	f000 80c1 	beq.w	800865c <_dtoa_r+0x7b4>
 80084da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80084de:	9e05      	ldr	r6, [sp, #20]
 80084e0:	461c      	mov	r4, r3
 80084e2:	9304      	str	r3, [sp, #16]
 80084e4:	9b05      	ldr	r3, [sp, #20]
 80084e6:	4413      	add	r3, r2
 80084e8:	9305      	str	r3, [sp, #20]
 80084ea:	9b06      	ldr	r3, [sp, #24]
 80084ec:	2101      	movs	r1, #1
 80084ee:	4413      	add	r3, r2
 80084f0:	4648      	mov	r0, r9
 80084f2:	9306      	str	r3, [sp, #24]
 80084f4:	f000 fc22 	bl	8008d3c <__i2b>
 80084f8:	9b04      	ldr	r3, [sp, #16]
 80084fa:	4605      	mov	r5, r0
 80084fc:	b166      	cbz	r6, 8008518 <_dtoa_r+0x670>
 80084fe:	9a06      	ldr	r2, [sp, #24]
 8008500:	2a00      	cmp	r2, #0
 8008502:	dd09      	ble.n	8008518 <_dtoa_r+0x670>
 8008504:	42b2      	cmp	r2, r6
 8008506:	9905      	ldr	r1, [sp, #20]
 8008508:	bfa8      	it	ge
 800850a:	4632      	movge	r2, r6
 800850c:	1a89      	subs	r1, r1, r2
 800850e:	9105      	str	r1, [sp, #20]
 8008510:	9906      	ldr	r1, [sp, #24]
 8008512:	1ab6      	subs	r6, r6, r2
 8008514:	1a8a      	subs	r2, r1, r2
 8008516:	9206      	str	r2, [sp, #24]
 8008518:	b1fb      	cbz	r3, 800855a <_dtoa_r+0x6b2>
 800851a:	9a08      	ldr	r2, [sp, #32]
 800851c:	2a00      	cmp	r2, #0
 800851e:	f000 80bc 	beq.w	800869a <_dtoa_r+0x7f2>
 8008522:	b19c      	cbz	r4, 800854c <_dtoa_r+0x6a4>
 8008524:	4629      	mov	r1, r5
 8008526:	4622      	mov	r2, r4
 8008528:	4648      	mov	r0, r9
 800852a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800852c:	f000 fcc6 	bl	8008ebc <__pow5mult>
 8008530:	9a01      	ldr	r2, [sp, #4]
 8008532:	4601      	mov	r1, r0
 8008534:	4605      	mov	r5, r0
 8008536:	4648      	mov	r0, r9
 8008538:	f000 fc16 	bl	8008d68 <__multiply>
 800853c:	9901      	ldr	r1, [sp, #4]
 800853e:	9004      	str	r0, [sp, #16]
 8008540:	4648      	mov	r0, r9
 8008542:	f000 fb47 	bl	8008bd4 <_Bfree>
 8008546:	9a04      	ldr	r2, [sp, #16]
 8008548:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800854a:	9201      	str	r2, [sp, #4]
 800854c:	1b1a      	subs	r2, r3, r4
 800854e:	d004      	beq.n	800855a <_dtoa_r+0x6b2>
 8008550:	9901      	ldr	r1, [sp, #4]
 8008552:	4648      	mov	r0, r9
 8008554:	f000 fcb2 	bl	8008ebc <__pow5mult>
 8008558:	9001      	str	r0, [sp, #4]
 800855a:	2101      	movs	r1, #1
 800855c:	4648      	mov	r0, r9
 800855e:	f000 fbed 	bl	8008d3c <__i2b>
 8008562:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008564:	4604      	mov	r4, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 81d0 	beq.w	800890c <_dtoa_r+0xa64>
 800856c:	461a      	mov	r2, r3
 800856e:	4601      	mov	r1, r0
 8008570:	4648      	mov	r0, r9
 8008572:	f000 fca3 	bl	8008ebc <__pow5mult>
 8008576:	9b07      	ldr	r3, [sp, #28]
 8008578:	2b01      	cmp	r3, #1
 800857a:	4604      	mov	r4, r0
 800857c:	f300 8095 	bgt.w	80086aa <_dtoa_r+0x802>
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f040 808b 	bne.w	800869e <_dtoa_r+0x7f6>
 8008588:	9b03      	ldr	r3, [sp, #12]
 800858a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800858e:	2a00      	cmp	r2, #0
 8008590:	f040 8087 	bne.w	80086a2 <_dtoa_r+0x7fa>
 8008594:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008598:	0d12      	lsrs	r2, r2, #20
 800859a:	0512      	lsls	r2, r2, #20
 800859c:	2a00      	cmp	r2, #0
 800859e:	f000 8082 	beq.w	80086a6 <_dtoa_r+0x7fe>
 80085a2:	9b05      	ldr	r3, [sp, #20]
 80085a4:	3301      	adds	r3, #1
 80085a6:	9305      	str	r3, [sp, #20]
 80085a8:	9b06      	ldr	r3, [sp, #24]
 80085aa:	3301      	adds	r3, #1
 80085ac:	9306      	str	r3, [sp, #24]
 80085ae:	2301      	movs	r3, #1
 80085b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 81af 	beq.w	8008918 <_dtoa_r+0xa70>
 80085ba:	6922      	ldr	r2, [r4, #16]
 80085bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80085c0:	6910      	ldr	r0, [r2, #16]
 80085c2:	f000 fb6f 	bl	8008ca4 <__hi0bits>
 80085c6:	f1c0 0020 	rsb	r0, r0, #32
 80085ca:	9b06      	ldr	r3, [sp, #24]
 80085cc:	4418      	add	r0, r3
 80085ce:	f010 001f 	ands.w	r0, r0, #31
 80085d2:	d076      	beq.n	80086c2 <_dtoa_r+0x81a>
 80085d4:	f1c0 0220 	rsb	r2, r0, #32
 80085d8:	2a04      	cmp	r2, #4
 80085da:	dd69      	ble.n	80086b0 <_dtoa_r+0x808>
 80085dc:	9b05      	ldr	r3, [sp, #20]
 80085de:	f1c0 001c 	rsb	r0, r0, #28
 80085e2:	4403      	add	r3, r0
 80085e4:	9305      	str	r3, [sp, #20]
 80085e6:	9b06      	ldr	r3, [sp, #24]
 80085e8:	4406      	add	r6, r0
 80085ea:	4403      	add	r3, r0
 80085ec:	9306      	str	r3, [sp, #24]
 80085ee:	9b05      	ldr	r3, [sp, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dd05      	ble.n	8008600 <_dtoa_r+0x758>
 80085f4:	9901      	ldr	r1, [sp, #4]
 80085f6:	461a      	mov	r2, r3
 80085f8:	4648      	mov	r0, r9
 80085fa:	f000 fcb9 	bl	8008f70 <__lshift>
 80085fe:	9001      	str	r0, [sp, #4]
 8008600:	9b06      	ldr	r3, [sp, #24]
 8008602:	2b00      	cmp	r3, #0
 8008604:	dd05      	ble.n	8008612 <_dtoa_r+0x76a>
 8008606:	4621      	mov	r1, r4
 8008608:	461a      	mov	r2, r3
 800860a:	4648      	mov	r0, r9
 800860c:	f000 fcb0 	bl	8008f70 <__lshift>
 8008610:	4604      	mov	r4, r0
 8008612:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008614:	2b00      	cmp	r3, #0
 8008616:	d056      	beq.n	80086c6 <_dtoa_r+0x81e>
 8008618:	9801      	ldr	r0, [sp, #4]
 800861a:	4621      	mov	r1, r4
 800861c:	f000 fd14 	bl	8009048 <__mcmp>
 8008620:	2800      	cmp	r0, #0
 8008622:	da50      	bge.n	80086c6 <_dtoa_r+0x81e>
 8008624:	f108 33ff 	add.w	r3, r8, #4294967295
 8008628:	9304      	str	r3, [sp, #16]
 800862a:	9901      	ldr	r1, [sp, #4]
 800862c:	2300      	movs	r3, #0
 800862e:	220a      	movs	r2, #10
 8008630:	4648      	mov	r0, r9
 8008632:	f000 faf1 	bl	8008c18 <__multadd>
 8008636:	9b08      	ldr	r3, [sp, #32]
 8008638:	9001      	str	r0, [sp, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f000 816e 	beq.w	800891c <_dtoa_r+0xa74>
 8008640:	4629      	mov	r1, r5
 8008642:	2300      	movs	r3, #0
 8008644:	220a      	movs	r2, #10
 8008646:	4648      	mov	r0, r9
 8008648:	f000 fae6 	bl	8008c18 <__multadd>
 800864c:	f1bb 0f00 	cmp.w	fp, #0
 8008650:	4605      	mov	r5, r0
 8008652:	dc64      	bgt.n	800871e <_dtoa_r+0x876>
 8008654:	9b07      	ldr	r3, [sp, #28]
 8008656:	2b02      	cmp	r3, #2
 8008658:	dc3e      	bgt.n	80086d8 <_dtoa_r+0x830>
 800865a:	e060      	b.n	800871e <_dtoa_r+0x876>
 800865c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800865e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008662:	e73c      	b.n	80084de <_dtoa_r+0x636>
 8008664:	f10a 34ff 	add.w	r4, sl, #4294967295
 8008668:	42a3      	cmp	r3, r4
 800866a:	bfbf      	itttt	lt
 800866c:	1ae2      	sublt	r2, r4, r3
 800866e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008670:	189b      	addlt	r3, r3, r2
 8008672:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8008674:	bfae      	itee	ge
 8008676:	1b1c      	subge	r4, r3, r4
 8008678:	4623      	movlt	r3, r4
 800867a:	2400      	movlt	r4, #0
 800867c:	f1ba 0f00 	cmp.w	sl, #0
 8008680:	bfb5      	itete	lt
 8008682:	9a05      	ldrlt	r2, [sp, #20]
 8008684:	9e05      	ldrge	r6, [sp, #20]
 8008686:	eba2 060a 	sublt.w	r6, r2, sl
 800868a:	4652      	movge	r2, sl
 800868c:	bfb8      	it	lt
 800868e:	2200      	movlt	r2, #0
 8008690:	e727      	b.n	80084e2 <_dtoa_r+0x63a>
 8008692:	9e05      	ldr	r6, [sp, #20]
 8008694:	9d08      	ldr	r5, [sp, #32]
 8008696:	461c      	mov	r4, r3
 8008698:	e730      	b.n	80084fc <_dtoa_r+0x654>
 800869a:	461a      	mov	r2, r3
 800869c:	e758      	b.n	8008550 <_dtoa_r+0x6a8>
 800869e:	2300      	movs	r3, #0
 80086a0:	e786      	b.n	80085b0 <_dtoa_r+0x708>
 80086a2:	9b02      	ldr	r3, [sp, #8]
 80086a4:	e784      	b.n	80085b0 <_dtoa_r+0x708>
 80086a6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80086a8:	e783      	b.n	80085b2 <_dtoa_r+0x70a>
 80086aa:	2300      	movs	r3, #0
 80086ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086ae:	e784      	b.n	80085ba <_dtoa_r+0x712>
 80086b0:	d09d      	beq.n	80085ee <_dtoa_r+0x746>
 80086b2:	9b05      	ldr	r3, [sp, #20]
 80086b4:	321c      	adds	r2, #28
 80086b6:	4413      	add	r3, r2
 80086b8:	9305      	str	r3, [sp, #20]
 80086ba:	9b06      	ldr	r3, [sp, #24]
 80086bc:	4416      	add	r6, r2
 80086be:	4413      	add	r3, r2
 80086c0:	e794      	b.n	80085ec <_dtoa_r+0x744>
 80086c2:	4602      	mov	r2, r0
 80086c4:	e7f5      	b.n	80086b2 <_dtoa_r+0x80a>
 80086c6:	f1ba 0f00 	cmp.w	sl, #0
 80086ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80086ce:	46d3      	mov	fp, sl
 80086d0:	dc21      	bgt.n	8008716 <_dtoa_r+0x86e>
 80086d2:	9b07      	ldr	r3, [sp, #28]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	dd1e      	ble.n	8008716 <_dtoa_r+0x86e>
 80086d8:	f1bb 0f00 	cmp.w	fp, #0
 80086dc:	f47f aeb7 	bne.w	800844e <_dtoa_r+0x5a6>
 80086e0:	4621      	mov	r1, r4
 80086e2:	465b      	mov	r3, fp
 80086e4:	2205      	movs	r2, #5
 80086e6:	4648      	mov	r0, r9
 80086e8:	f000 fa96 	bl	8008c18 <__multadd>
 80086ec:	4601      	mov	r1, r0
 80086ee:	4604      	mov	r4, r0
 80086f0:	9801      	ldr	r0, [sp, #4]
 80086f2:	f000 fca9 	bl	8009048 <__mcmp>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	f77f aea9 	ble.w	800844e <_dtoa_r+0x5a6>
 80086fc:	463e      	mov	r6, r7
 80086fe:	2331      	movs	r3, #49	@ 0x31
 8008700:	f806 3b01 	strb.w	r3, [r6], #1
 8008704:	9b04      	ldr	r3, [sp, #16]
 8008706:	3301      	adds	r3, #1
 8008708:	9304      	str	r3, [sp, #16]
 800870a:	e6a4      	b.n	8008456 <_dtoa_r+0x5ae>
 800870c:	f8cd 8010 	str.w	r8, [sp, #16]
 8008710:	4654      	mov	r4, sl
 8008712:	4625      	mov	r5, r4
 8008714:	e7f2      	b.n	80086fc <_dtoa_r+0x854>
 8008716:	9b08      	ldr	r3, [sp, #32]
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 8103 	beq.w	8008924 <_dtoa_r+0xa7c>
 800871e:	2e00      	cmp	r6, #0
 8008720:	dd05      	ble.n	800872e <_dtoa_r+0x886>
 8008722:	4629      	mov	r1, r5
 8008724:	4632      	mov	r2, r6
 8008726:	4648      	mov	r0, r9
 8008728:	f000 fc22 	bl	8008f70 <__lshift>
 800872c:	4605      	mov	r5, r0
 800872e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008730:	2b00      	cmp	r3, #0
 8008732:	d058      	beq.n	80087e6 <_dtoa_r+0x93e>
 8008734:	6869      	ldr	r1, [r5, #4]
 8008736:	4648      	mov	r0, r9
 8008738:	f000 fa0c 	bl	8008b54 <_Balloc>
 800873c:	4606      	mov	r6, r0
 800873e:	b928      	cbnz	r0, 800874c <_dtoa_r+0x8a4>
 8008740:	4b82      	ldr	r3, [pc, #520]	@ (800894c <_dtoa_r+0xaa4>)
 8008742:	4602      	mov	r2, r0
 8008744:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008748:	f7ff bbc7 	b.w	8007eda <_dtoa_r+0x32>
 800874c:	692a      	ldr	r2, [r5, #16]
 800874e:	3202      	adds	r2, #2
 8008750:	0092      	lsls	r2, r2, #2
 8008752:	f105 010c 	add.w	r1, r5, #12
 8008756:	300c      	adds	r0, #12
 8008758:	f000 ffac 	bl	80096b4 <memcpy>
 800875c:	2201      	movs	r2, #1
 800875e:	4631      	mov	r1, r6
 8008760:	4648      	mov	r0, r9
 8008762:	f000 fc05 	bl	8008f70 <__lshift>
 8008766:	1c7b      	adds	r3, r7, #1
 8008768:	9305      	str	r3, [sp, #20]
 800876a:	eb07 030b 	add.w	r3, r7, fp
 800876e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008770:	9b02      	ldr	r3, [sp, #8]
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	46a8      	mov	r8, r5
 8008778:	9308      	str	r3, [sp, #32]
 800877a:	4605      	mov	r5, r0
 800877c:	9b05      	ldr	r3, [sp, #20]
 800877e:	9801      	ldr	r0, [sp, #4]
 8008780:	4621      	mov	r1, r4
 8008782:	f103 3bff 	add.w	fp, r3, #4294967295
 8008786:	f7ff fb04 	bl	8007d92 <quorem>
 800878a:	4641      	mov	r1, r8
 800878c:	9002      	str	r0, [sp, #8]
 800878e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008792:	9801      	ldr	r0, [sp, #4]
 8008794:	f000 fc58 	bl	8009048 <__mcmp>
 8008798:	462a      	mov	r2, r5
 800879a:	9006      	str	r0, [sp, #24]
 800879c:	4621      	mov	r1, r4
 800879e:	4648      	mov	r0, r9
 80087a0:	f000 fc6e 	bl	8009080 <__mdiff>
 80087a4:	68c2      	ldr	r2, [r0, #12]
 80087a6:	4606      	mov	r6, r0
 80087a8:	b9fa      	cbnz	r2, 80087ea <_dtoa_r+0x942>
 80087aa:	4601      	mov	r1, r0
 80087ac:	9801      	ldr	r0, [sp, #4]
 80087ae:	f000 fc4b 	bl	8009048 <__mcmp>
 80087b2:	4602      	mov	r2, r0
 80087b4:	4631      	mov	r1, r6
 80087b6:	4648      	mov	r0, r9
 80087b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80087ba:	f000 fa0b 	bl	8008bd4 <_Bfree>
 80087be:	9b07      	ldr	r3, [sp, #28]
 80087c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087c2:	9e05      	ldr	r6, [sp, #20]
 80087c4:	ea43 0102 	orr.w	r1, r3, r2
 80087c8:	9b08      	ldr	r3, [sp, #32]
 80087ca:	4319      	orrs	r1, r3
 80087cc:	d10f      	bne.n	80087ee <_dtoa_r+0x946>
 80087ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80087d2:	d028      	beq.n	8008826 <_dtoa_r+0x97e>
 80087d4:	9b06      	ldr	r3, [sp, #24]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	dd02      	ble.n	80087e0 <_dtoa_r+0x938>
 80087da:	9b02      	ldr	r3, [sp, #8]
 80087dc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80087e0:	f88b a000 	strb.w	sl, [fp]
 80087e4:	e639      	b.n	800845a <_dtoa_r+0x5b2>
 80087e6:	4628      	mov	r0, r5
 80087e8:	e7bd      	b.n	8008766 <_dtoa_r+0x8be>
 80087ea:	2201      	movs	r2, #1
 80087ec:	e7e2      	b.n	80087b4 <_dtoa_r+0x90c>
 80087ee:	9b06      	ldr	r3, [sp, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	db04      	blt.n	80087fe <_dtoa_r+0x956>
 80087f4:	9907      	ldr	r1, [sp, #28]
 80087f6:	430b      	orrs	r3, r1
 80087f8:	9908      	ldr	r1, [sp, #32]
 80087fa:	430b      	orrs	r3, r1
 80087fc:	d120      	bne.n	8008840 <_dtoa_r+0x998>
 80087fe:	2a00      	cmp	r2, #0
 8008800:	ddee      	ble.n	80087e0 <_dtoa_r+0x938>
 8008802:	9901      	ldr	r1, [sp, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	4648      	mov	r0, r9
 8008808:	f000 fbb2 	bl	8008f70 <__lshift>
 800880c:	4621      	mov	r1, r4
 800880e:	9001      	str	r0, [sp, #4]
 8008810:	f000 fc1a 	bl	8009048 <__mcmp>
 8008814:	2800      	cmp	r0, #0
 8008816:	dc03      	bgt.n	8008820 <_dtoa_r+0x978>
 8008818:	d1e2      	bne.n	80087e0 <_dtoa_r+0x938>
 800881a:	f01a 0f01 	tst.w	sl, #1
 800881e:	d0df      	beq.n	80087e0 <_dtoa_r+0x938>
 8008820:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008824:	d1d9      	bne.n	80087da <_dtoa_r+0x932>
 8008826:	2339      	movs	r3, #57	@ 0x39
 8008828:	f88b 3000 	strb.w	r3, [fp]
 800882c:	4633      	mov	r3, r6
 800882e:	461e      	mov	r6, r3
 8008830:	3b01      	subs	r3, #1
 8008832:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008836:	2a39      	cmp	r2, #57	@ 0x39
 8008838:	d053      	beq.n	80088e2 <_dtoa_r+0xa3a>
 800883a:	3201      	adds	r2, #1
 800883c:	701a      	strb	r2, [r3, #0]
 800883e:	e60c      	b.n	800845a <_dtoa_r+0x5b2>
 8008840:	2a00      	cmp	r2, #0
 8008842:	dd07      	ble.n	8008854 <_dtoa_r+0x9ac>
 8008844:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008848:	d0ed      	beq.n	8008826 <_dtoa_r+0x97e>
 800884a:	f10a 0301 	add.w	r3, sl, #1
 800884e:	f88b 3000 	strb.w	r3, [fp]
 8008852:	e602      	b.n	800845a <_dtoa_r+0x5b2>
 8008854:	9b05      	ldr	r3, [sp, #20]
 8008856:	9a05      	ldr	r2, [sp, #20]
 8008858:	f803 ac01 	strb.w	sl, [r3, #-1]
 800885c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800885e:	4293      	cmp	r3, r2
 8008860:	d029      	beq.n	80088b6 <_dtoa_r+0xa0e>
 8008862:	9901      	ldr	r1, [sp, #4]
 8008864:	2300      	movs	r3, #0
 8008866:	220a      	movs	r2, #10
 8008868:	4648      	mov	r0, r9
 800886a:	f000 f9d5 	bl	8008c18 <__multadd>
 800886e:	45a8      	cmp	r8, r5
 8008870:	9001      	str	r0, [sp, #4]
 8008872:	f04f 0300 	mov.w	r3, #0
 8008876:	f04f 020a 	mov.w	r2, #10
 800887a:	4641      	mov	r1, r8
 800887c:	4648      	mov	r0, r9
 800887e:	d107      	bne.n	8008890 <_dtoa_r+0x9e8>
 8008880:	f000 f9ca 	bl	8008c18 <__multadd>
 8008884:	4680      	mov	r8, r0
 8008886:	4605      	mov	r5, r0
 8008888:	9b05      	ldr	r3, [sp, #20]
 800888a:	3301      	adds	r3, #1
 800888c:	9305      	str	r3, [sp, #20]
 800888e:	e775      	b.n	800877c <_dtoa_r+0x8d4>
 8008890:	f000 f9c2 	bl	8008c18 <__multadd>
 8008894:	4629      	mov	r1, r5
 8008896:	4680      	mov	r8, r0
 8008898:	2300      	movs	r3, #0
 800889a:	220a      	movs	r2, #10
 800889c:	4648      	mov	r0, r9
 800889e:	f000 f9bb 	bl	8008c18 <__multadd>
 80088a2:	4605      	mov	r5, r0
 80088a4:	e7f0      	b.n	8008888 <_dtoa_r+0x9e0>
 80088a6:	f1bb 0f00 	cmp.w	fp, #0
 80088aa:	bfcc      	ite	gt
 80088ac:	465e      	movgt	r6, fp
 80088ae:	2601      	movle	r6, #1
 80088b0:	443e      	add	r6, r7
 80088b2:	f04f 0800 	mov.w	r8, #0
 80088b6:	9901      	ldr	r1, [sp, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	4648      	mov	r0, r9
 80088bc:	f000 fb58 	bl	8008f70 <__lshift>
 80088c0:	4621      	mov	r1, r4
 80088c2:	9001      	str	r0, [sp, #4]
 80088c4:	f000 fbc0 	bl	8009048 <__mcmp>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	dcaf      	bgt.n	800882c <_dtoa_r+0x984>
 80088cc:	d102      	bne.n	80088d4 <_dtoa_r+0xa2c>
 80088ce:	f01a 0f01 	tst.w	sl, #1
 80088d2:	d1ab      	bne.n	800882c <_dtoa_r+0x984>
 80088d4:	4633      	mov	r3, r6
 80088d6:	461e      	mov	r6, r3
 80088d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088dc:	2a30      	cmp	r2, #48	@ 0x30
 80088de:	d0fa      	beq.n	80088d6 <_dtoa_r+0xa2e>
 80088e0:	e5bb      	b.n	800845a <_dtoa_r+0x5b2>
 80088e2:	429f      	cmp	r7, r3
 80088e4:	d1a3      	bne.n	800882e <_dtoa_r+0x986>
 80088e6:	9b04      	ldr	r3, [sp, #16]
 80088e8:	3301      	adds	r3, #1
 80088ea:	9304      	str	r3, [sp, #16]
 80088ec:	2331      	movs	r3, #49	@ 0x31
 80088ee:	703b      	strb	r3, [r7, #0]
 80088f0:	e5b3      	b.n	800845a <_dtoa_r+0x5b2>
 80088f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088f4:	4f16      	ldr	r7, [pc, #88]	@ (8008950 <_dtoa_r+0xaa8>)
 80088f6:	b11b      	cbz	r3, 8008900 <_dtoa_r+0xa58>
 80088f8:	f107 0308 	add.w	r3, r7, #8
 80088fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	4638      	mov	r0, r7
 8008902:	b011      	add	sp, #68	@ 0x44
 8008904:	ecbd 8b02 	vpop	{d8}
 8008908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890c:	9b07      	ldr	r3, [sp, #28]
 800890e:	2b01      	cmp	r3, #1
 8008910:	f77f ae36 	ble.w	8008580 <_dtoa_r+0x6d8>
 8008914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008916:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008918:	2001      	movs	r0, #1
 800891a:	e656      	b.n	80085ca <_dtoa_r+0x722>
 800891c:	f1bb 0f00 	cmp.w	fp, #0
 8008920:	f77f aed7 	ble.w	80086d2 <_dtoa_r+0x82a>
 8008924:	463e      	mov	r6, r7
 8008926:	9801      	ldr	r0, [sp, #4]
 8008928:	4621      	mov	r1, r4
 800892a:	f7ff fa32 	bl	8007d92 <quorem>
 800892e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008932:	f806 ab01 	strb.w	sl, [r6], #1
 8008936:	1bf2      	subs	r2, r6, r7
 8008938:	4593      	cmp	fp, r2
 800893a:	ddb4      	ble.n	80088a6 <_dtoa_r+0x9fe>
 800893c:	9901      	ldr	r1, [sp, #4]
 800893e:	2300      	movs	r3, #0
 8008940:	220a      	movs	r2, #10
 8008942:	4648      	mov	r0, r9
 8008944:	f000 f968 	bl	8008c18 <__multadd>
 8008948:	9001      	str	r0, [sp, #4]
 800894a:	e7ec      	b.n	8008926 <_dtoa_r+0xa7e>
 800894c:	0800bad0 	.word	0x0800bad0
 8008950:	0800ba54 	.word	0x0800ba54

08008954 <_free_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4605      	mov	r5, r0
 8008958:	2900      	cmp	r1, #0
 800895a:	d041      	beq.n	80089e0 <_free_r+0x8c>
 800895c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008960:	1f0c      	subs	r4, r1, #4
 8008962:	2b00      	cmp	r3, #0
 8008964:	bfb8      	it	lt
 8008966:	18e4      	addlt	r4, r4, r3
 8008968:	f000 f8e8 	bl	8008b3c <__malloc_lock>
 800896c:	4a1d      	ldr	r2, [pc, #116]	@ (80089e4 <_free_r+0x90>)
 800896e:	6813      	ldr	r3, [r2, #0]
 8008970:	b933      	cbnz	r3, 8008980 <_free_r+0x2c>
 8008972:	6063      	str	r3, [r4, #4]
 8008974:	6014      	str	r4, [r2, #0]
 8008976:	4628      	mov	r0, r5
 8008978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800897c:	f000 b8e4 	b.w	8008b48 <__malloc_unlock>
 8008980:	42a3      	cmp	r3, r4
 8008982:	d908      	bls.n	8008996 <_free_r+0x42>
 8008984:	6820      	ldr	r0, [r4, #0]
 8008986:	1821      	adds	r1, r4, r0
 8008988:	428b      	cmp	r3, r1
 800898a:	bf01      	itttt	eq
 800898c:	6819      	ldreq	r1, [r3, #0]
 800898e:	685b      	ldreq	r3, [r3, #4]
 8008990:	1809      	addeq	r1, r1, r0
 8008992:	6021      	streq	r1, [r4, #0]
 8008994:	e7ed      	b.n	8008972 <_free_r+0x1e>
 8008996:	461a      	mov	r2, r3
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	b10b      	cbz	r3, 80089a0 <_free_r+0x4c>
 800899c:	42a3      	cmp	r3, r4
 800899e:	d9fa      	bls.n	8008996 <_free_r+0x42>
 80089a0:	6811      	ldr	r1, [r2, #0]
 80089a2:	1850      	adds	r0, r2, r1
 80089a4:	42a0      	cmp	r0, r4
 80089a6:	d10b      	bne.n	80089c0 <_free_r+0x6c>
 80089a8:	6820      	ldr	r0, [r4, #0]
 80089aa:	4401      	add	r1, r0
 80089ac:	1850      	adds	r0, r2, r1
 80089ae:	4283      	cmp	r3, r0
 80089b0:	6011      	str	r1, [r2, #0]
 80089b2:	d1e0      	bne.n	8008976 <_free_r+0x22>
 80089b4:	6818      	ldr	r0, [r3, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	6053      	str	r3, [r2, #4]
 80089ba:	4408      	add	r0, r1
 80089bc:	6010      	str	r0, [r2, #0]
 80089be:	e7da      	b.n	8008976 <_free_r+0x22>
 80089c0:	d902      	bls.n	80089c8 <_free_r+0x74>
 80089c2:	230c      	movs	r3, #12
 80089c4:	602b      	str	r3, [r5, #0]
 80089c6:	e7d6      	b.n	8008976 <_free_r+0x22>
 80089c8:	6820      	ldr	r0, [r4, #0]
 80089ca:	1821      	adds	r1, r4, r0
 80089cc:	428b      	cmp	r3, r1
 80089ce:	bf04      	itt	eq
 80089d0:	6819      	ldreq	r1, [r3, #0]
 80089d2:	685b      	ldreq	r3, [r3, #4]
 80089d4:	6063      	str	r3, [r4, #4]
 80089d6:	bf04      	itt	eq
 80089d8:	1809      	addeq	r1, r1, r0
 80089da:	6021      	streq	r1, [r4, #0]
 80089dc:	6054      	str	r4, [r2, #4]
 80089de:	e7ca      	b.n	8008976 <_free_r+0x22>
 80089e0:	bd38      	pop	{r3, r4, r5, pc}
 80089e2:	bf00      	nop
 80089e4:	20000ec0 	.word	0x20000ec0

080089e8 <malloc>:
 80089e8:	4b02      	ldr	r3, [pc, #8]	@ (80089f4 <malloc+0xc>)
 80089ea:	4601      	mov	r1, r0
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	f000 b825 	b.w	8008a3c <_malloc_r>
 80089f2:	bf00      	nop
 80089f4:	20000018 	.word	0x20000018

080089f8 <sbrk_aligned>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	4e0f      	ldr	r6, [pc, #60]	@ (8008a38 <sbrk_aligned+0x40>)
 80089fc:	460c      	mov	r4, r1
 80089fe:	6831      	ldr	r1, [r6, #0]
 8008a00:	4605      	mov	r5, r0
 8008a02:	b911      	cbnz	r1, 8008a0a <sbrk_aligned+0x12>
 8008a04:	f000 fe46 	bl	8009694 <_sbrk_r>
 8008a08:	6030      	str	r0, [r6, #0]
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f000 fe41 	bl	8009694 <_sbrk_r>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	d103      	bne.n	8008a1e <sbrk_aligned+0x26>
 8008a16:	f04f 34ff 	mov.w	r4, #4294967295
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	bd70      	pop	{r4, r5, r6, pc}
 8008a1e:	1cc4      	adds	r4, r0, #3
 8008a20:	f024 0403 	bic.w	r4, r4, #3
 8008a24:	42a0      	cmp	r0, r4
 8008a26:	d0f8      	beq.n	8008a1a <sbrk_aligned+0x22>
 8008a28:	1a21      	subs	r1, r4, r0
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f000 fe32 	bl	8009694 <_sbrk_r>
 8008a30:	3001      	adds	r0, #1
 8008a32:	d1f2      	bne.n	8008a1a <sbrk_aligned+0x22>
 8008a34:	e7ef      	b.n	8008a16 <sbrk_aligned+0x1e>
 8008a36:	bf00      	nop
 8008a38:	20000ebc 	.word	0x20000ebc

08008a3c <_malloc_r>:
 8008a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a40:	1ccd      	adds	r5, r1, #3
 8008a42:	f025 0503 	bic.w	r5, r5, #3
 8008a46:	3508      	adds	r5, #8
 8008a48:	2d0c      	cmp	r5, #12
 8008a4a:	bf38      	it	cc
 8008a4c:	250c      	movcc	r5, #12
 8008a4e:	2d00      	cmp	r5, #0
 8008a50:	4606      	mov	r6, r0
 8008a52:	db01      	blt.n	8008a58 <_malloc_r+0x1c>
 8008a54:	42a9      	cmp	r1, r5
 8008a56:	d904      	bls.n	8008a62 <_malloc_r+0x26>
 8008a58:	230c      	movs	r3, #12
 8008a5a:	6033      	str	r3, [r6, #0]
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b38 <_malloc_r+0xfc>
 8008a66:	f000 f869 	bl	8008b3c <__malloc_lock>
 8008a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a6e:	461c      	mov	r4, r3
 8008a70:	bb44      	cbnz	r4, 8008ac4 <_malloc_r+0x88>
 8008a72:	4629      	mov	r1, r5
 8008a74:	4630      	mov	r0, r6
 8008a76:	f7ff ffbf 	bl	80089f8 <sbrk_aligned>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	d158      	bne.n	8008b32 <_malloc_r+0xf6>
 8008a80:	f8d8 4000 	ldr.w	r4, [r8]
 8008a84:	4627      	mov	r7, r4
 8008a86:	2f00      	cmp	r7, #0
 8008a88:	d143      	bne.n	8008b12 <_malloc_r+0xd6>
 8008a8a:	2c00      	cmp	r4, #0
 8008a8c:	d04b      	beq.n	8008b26 <_malloc_r+0xea>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	4639      	mov	r1, r7
 8008a92:	4630      	mov	r0, r6
 8008a94:	eb04 0903 	add.w	r9, r4, r3
 8008a98:	f000 fdfc 	bl	8009694 <_sbrk_r>
 8008a9c:	4581      	cmp	r9, r0
 8008a9e:	d142      	bne.n	8008b26 <_malloc_r+0xea>
 8008aa0:	6821      	ldr	r1, [r4, #0]
 8008aa2:	1a6d      	subs	r5, r5, r1
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7ff ffa6 	bl	80089f8 <sbrk_aligned>
 8008aac:	3001      	adds	r0, #1
 8008aae:	d03a      	beq.n	8008b26 <_malloc_r+0xea>
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	442b      	add	r3, r5
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	bb62      	cbnz	r2, 8008b18 <_malloc_r+0xdc>
 8008abe:	f8c8 7000 	str.w	r7, [r8]
 8008ac2:	e00f      	b.n	8008ae4 <_malloc_r+0xa8>
 8008ac4:	6822      	ldr	r2, [r4, #0]
 8008ac6:	1b52      	subs	r2, r2, r5
 8008ac8:	d420      	bmi.n	8008b0c <_malloc_r+0xd0>
 8008aca:	2a0b      	cmp	r2, #11
 8008acc:	d917      	bls.n	8008afe <_malloc_r+0xc2>
 8008ace:	1961      	adds	r1, r4, r5
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	6025      	str	r5, [r4, #0]
 8008ad4:	bf18      	it	ne
 8008ad6:	6059      	strne	r1, [r3, #4]
 8008ad8:	6863      	ldr	r3, [r4, #4]
 8008ada:	bf08      	it	eq
 8008adc:	f8c8 1000 	streq.w	r1, [r8]
 8008ae0:	5162      	str	r2, [r4, r5]
 8008ae2:	604b      	str	r3, [r1, #4]
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	f000 f82f 	bl	8008b48 <__malloc_unlock>
 8008aea:	f104 000b 	add.w	r0, r4, #11
 8008aee:	1d23      	adds	r3, r4, #4
 8008af0:	f020 0007 	bic.w	r0, r0, #7
 8008af4:	1ac2      	subs	r2, r0, r3
 8008af6:	bf1c      	itt	ne
 8008af8:	1a1b      	subne	r3, r3, r0
 8008afa:	50a3      	strne	r3, [r4, r2]
 8008afc:	e7af      	b.n	8008a5e <_malloc_r+0x22>
 8008afe:	6862      	ldr	r2, [r4, #4]
 8008b00:	42a3      	cmp	r3, r4
 8008b02:	bf0c      	ite	eq
 8008b04:	f8c8 2000 	streq.w	r2, [r8]
 8008b08:	605a      	strne	r2, [r3, #4]
 8008b0a:	e7eb      	b.n	8008ae4 <_malloc_r+0xa8>
 8008b0c:	4623      	mov	r3, r4
 8008b0e:	6864      	ldr	r4, [r4, #4]
 8008b10:	e7ae      	b.n	8008a70 <_malloc_r+0x34>
 8008b12:	463c      	mov	r4, r7
 8008b14:	687f      	ldr	r7, [r7, #4]
 8008b16:	e7b6      	b.n	8008a86 <_malloc_r+0x4a>
 8008b18:	461a      	mov	r2, r3
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	d1fb      	bne.n	8008b18 <_malloc_r+0xdc>
 8008b20:	2300      	movs	r3, #0
 8008b22:	6053      	str	r3, [r2, #4]
 8008b24:	e7de      	b.n	8008ae4 <_malloc_r+0xa8>
 8008b26:	230c      	movs	r3, #12
 8008b28:	6033      	str	r3, [r6, #0]
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f000 f80c 	bl	8008b48 <__malloc_unlock>
 8008b30:	e794      	b.n	8008a5c <_malloc_r+0x20>
 8008b32:	6005      	str	r5, [r0, #0]
 8008b34:	e7d6      	b.n	8008ae4 <_malloc_r+0xa8>
 8008b36:	bf00      	nop
 8008b38:	20000ec0 	.word	0x20000ec0

08008b3c <__malloc_lock>:
 8008b3c:	4801      	ldr	r0, [pc, #4]	@ (8008b44 <__malloc_lock+0x8>)
 8008b3e:	f7ff b926 	b.w	8007d8e <__retarget_lock_acquire_recursive>
 8008b42:	bf00      	nop
 8008b44:	20000eb8 	.word	0x20000eb8

08008b48 <__malloc_unlock>:
 8008b48:	4801      	ldr	r0, [pc, #4]	@ (8008b50 <__malloc_unlock+0x8>)
 8008b4a:	f7ff b921 	b.w	8007d90 <__retarget_lock_release_recursive>
 8008b4e:	bf00      	nop
 8008b50:	20000eb8 	.word	0x20000eb8

08008b54 <_Balloc>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	69c6      	ldr	r6, [r0, #28]
 8008b58:	4604      	mov	r4, r0
 8008b5a:	460d      	mov	r5, r1
 8008b5c:	b976      	cbnz	r6, 8008b7c <_Balloc+0x28>
 8008b5e:	2010      	movs	r0, #16
 8008b60:	f7ff ff42 	bl	80089e8 <malloc>
 8008b64:	4602      	mov	r2, r0
 8008b66:	61e0      	str	r0, [r4, #28]
 8008b68:	b920      	cbnz	r0, 8008b74 <_Balloc+0x20>
 8008b6a:	4b18      	ldr	r3, [pc, #96]	@ (8008bcc <_Balloc+0x78>)
 8008b6c:	4818      	ldr	r0, [pc, #96]	@ (8008bd0 <_Balloc+0x7c>)
 8008b6e:	216b      	movs	r1, #107	@ 0x6b
 8008b70:	f000 fdae 	bl	80096d0 <__assert_func>
 8008b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b78:	6006      	str	r6, [r0, #0]
 8008b7a:	60c6      	str	r6, [r0, #12]
 8008b7c:	69e6      	ldr	r6, [r4, #28]
 8008b7e:	68f3      	ldr	r3, [r6, #12]
 8008b80:	b183      	cbz	r3, 8008ba4 <_Balloc+0x50>
 8008b82:	69e3      	ldr	r3, [r4, #28]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b8a:	b9b8      	cbnz	r0, 8008bbc <_Balloc+0x68>
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8008b92:	1d72      	adds	r2, r6, #5
 8008b94:	0092      	lsls	r2, r2, #2
 8008b96:	4620      	mov	r0, r4
 8008b98:	f000 fdb8 	bl	800970c <_calloc_r>
 8008b9c:	b160      	cbz	r0, 8008bb8 <_Balloc+0x64>
 8008b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ba2:	e00e      	b.n	8008bc2 <_Balloc+0x6e>
 8008ba4:	2221      	movs	r2, #33	@ 0x21
 8008ba6:	2104      	movs	r1, #4
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 fdaf 	bl	800970c <_calloc_r>
 8008bae:	69e3      	ldr	r3, [r4, #28]
 8008bb0:	60f0      	str	r0, [r6, #12]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e4      	bne.n	8008b82 <_Balloc+0x2e>
 8008bb8:	2000      	movs	r0, #0
 8008bba:	bd70      	pop	{r4, r5, r6, pc}
 8008bbc:	6802      	ldr	r2, [r0, #0]
 8008bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bc8:	e7f7      	b.n	8008bba <_Balloc+0x66>
 8008bca:	bf00      	nop
 8008bcc:	0800ba61 	.word	0x0800ba61
 8008bd0:	0800bae1 	.word	0x0800bae1

08008bd4 <_Bfree>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	69c6      	ldr	r6, [r0, #28]
 8008bd8:	4605      	mov	r5, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	b976      	cbnz	r6, 8008bfc <_Bfree+0x28>
 8008bde:	2010      	movs	r0, #16
 8008be0:	f7ff ff02 	bl	80089e8 <malloc>
 8008be4:	4602      	mov	r2, r0
 8008be6:	61e8      	str	r0, [r5, #28]
 8008be8:	b920      	cbnz	r0, 8008bf4 <_Bfree+0x20>
 8008bea:	4b09      	ldr	r3, [pc, #36]	@ (8008c10 <_Bfree+0x3c>)
 8008bec:	4809      	ldr	r0, [pc, #36]	@ (8008c14 <_Bfree+0x40>)
 8008bee:	218f      	movs	r1, #143	@ 0x8f
 8008bf0:	f000 fd6e 	bl	80096d0 <__assert_func>
 8008bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bf8:	6006      	str	r6, [r0, #0]
 8008bfa:	60c6      	str	r6, [r0, #12]
 8008bfc:	b13c      	cbz	r4, 8008c0e <_Bfree+0x3a>
 8008bfe:	69eb      	ldr	r3, [r5, #28]
 8008c00:	6862      	ldr	r2, [r4, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c08:	6021      	str	r1, [r4, #0]
 8008c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	0800ba61 	.word	0x0800ba61
 8008c14:	0800bae1 	.word	0x0800bae1

08008c18 <__multadd>:
 8008c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1c:	690d      	ldr	r5, [r1, #16]
 8008c1e:	4607      	mov	r7, r0
 8008c20:	460c      	mov	r4, r1
 8008c22:	461e      	mov	r6, r3
 8008c24:	f101 0c14 	add.w	ip, r1, #20
 8008c28:	2000      	movs	r0, #0
 8008c2a:	f8dc 3000 	ldr.w	r3, [ip]
 8008c2e:	b299      	uxth	r1, r3
 8008c30:	fb02 6101 	mla	r1, r2, r1, r6
 8008c34:	0c1e      	lsrs	r6, r3, #16
 8008c36:	0c0b      	lsrs	r3, r1, #16
 8008c38:	fb02 3306 	mla	r3, r2, r6, r3
 8008c3c:	b289      	uxth	r1, r1
 8008c3e:	3001      	adds	r0, #1
 8008c40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c44:	4285      	cmp	r5, r0
 8008c46:	f84c 1b04 	str.w	r1, [ip], #4
 8008c4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c4e:	dcec      	bgt.n	8008c2a <__multadd+0x12>
 8008c50:	b30e      	cbz	r6, 8008c96 <__multadd+0x7e>
 8008c52:	68a3      	ldr	r3, [r4, #8]
 8008c54:	42ab      	cmp	r3, r5
 8008c56:	dc19      	bgt.n	8008c8c <__multadd+0x74>
 8008c58:	6861      	ldr	r1, [r4, #4]
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	3101      	adds	r1, #1
 8008c5e:	f7ff ff79 	bl	8008b54 <_Balloc>
 8008c62:	4680      	mov	r8, r0
 8008c64:	b928      	cbnz	r0, 8008c72 <__multadd+0x5a>
 8008c66:	4602      	mov	r2, r0
 8008c68:	4b0c      	ldr	r3, [pc, #48]	@ (8008c9c <__multadd+0x84>)
 8008c6a:	480d      	ldr	r0, [pc, #52]	@ (8008ca0 <__multadd+0x88>)
 8008c6c:	21ba      	movs	r1, #186	@ 0xba
 8008c6e:	f000 fd2f 	bl	80096d0 <__assert_func>
 8008c72:	6922      	ldr	r2, [r4, #16]
 8008c74:	3202      	adds	r2, #2
 8008c76:	f104 010c 	add.w	r1, r4, #12
 8008c7a:	0092      	lsls	r2, r2, #2
 8008c7c:	300c      	adds	r0, #12
 8008c7e:	f000 fd19 	bl	80096b4 <memcpy>
 8008c82:	4621      	mov	r1, r4
 8008c84:	4638      	mov	r0, r7
 8008c86:	f7ff ffa5 	bl	8008bd4 <_Bfree>
 8008c8a:	4644      	mov	r4, r8
 8008c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c90:	3501      	adds	r5, #1
 8008c92:	615e      	str	r6, [r3, #20]
 8008c94:	6125      	str	r5, [r4, #16]
 8008c96:	4620      	mov	r0, r4
 8008c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c9c:	0800bad0 	.word	0x0800bad0
 8008ca0:	0800bae1 	.word	0x0800bae1

08008ca4 <__hi0bits>:
 8008ca4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ca8:	4603      	mov	r3, r0
 8008caa:	bf36      	itet	cc
 8008cac:	0403      	lslcc	r3, r0, #16
 8008cae:	2000      	movcs	r0, #0
 8008cb0:	2010      	movcc	r0, #16
 8008cb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cb6:	bf3c      	itt	cc
 8008cb8:	021b      	lslcc	r3, r3, #8
 8008cba:	3008      	addcc	r0, #8
 8008cbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cc0:	bf3c      	itt	cc
 8008cc2:	011b      	lslcc	r3, r3, #4
 8008cc4:	3004      	addcc	r0, #4
 8008cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cca:	bf3c      	itt	cc
 8008ccc:	009b      	lslcc	r3, r3, #2
 8008cce:	3002      	addcc	r0, #2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	db05      	blt.n	8008ce0 <__hi0bits+0x3c>
 8008cd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008cd8:	f100 0001 	add.w	r0, r0, #1
 8008cdc:	bf08      	it	eq
 8008cde:	2020      	moveq	r0, #32
 8008ce0:	4770      	bx	lr

08008ce2 <__lo0bits>:
 8008ce2:	6803      	ldr	r3, [r0, #0]
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	f013 0007 	ands.w	r0, r3, #7
 8008cea:	d00b      	beq.n	8008d04 <__lo0bits+0x22>
 8008cec:	07d9      	lsls	r1, r3, #31
 8008cee:	d421      	bmi.n	8008d34 <__lo0bits+0x52>
 8008cf0:	0798      	lsls	r0, r3, #30
 8008cf2:	bf49      	itett	mi
 8008cf4:	085b      	lsrmi	r3, r3, #1
 8008cf6:	089b      	lsrpl	r3, r3, #2
 8008cf8:	2001      	movmi	r0, #1
 8008cfa:	6013      	strmi	r3, [r2, #0]
 8008cfc:	bf5c      	itt	pl
 8008cfe:	6013      	strpl	r3, [r2, #0]
 8008d00:	2002      	movpl	r0, #2
 8008d02:	4770      	bx	lr
 8008d04:	b299      	uxth	r1, r3
 8008d06:	b909      	cbnz	r1, 8008d0c <__lo0bits+0x2a>
 8008d08:	0c1b      	lsrs	r3, r3, #16
 8008d0a:	2010      	movs	r0, #16
 8008d0c:	b2d9      	uxtb	r1, r3
 8008d0e:	b909      	cbnz	r1, 8008d14 <__lo0bits+0x32>
 8008d10:	3008      	adds	r0, #8
 8008d12:	0a1b      	lsrs	r3, r3, #8
 8008d14:	0719      	lsls	r1, r3, #28
 8008d16:	bf04      	itt	eq
 8008d18:	091b      	lsreq	r3, r3, #4
 8008d1a:	3004      	addeq	r0, #4
 8008d1c:	0799      	lsls	r1, r3, #30
 8008d1e:	bf04      	itt	eq
 8008d20:	089b      	lsreq	r3, r3, #2
 8008d22:	3002      	addeq	r0, #2
 8008d24:	07d9      	lsls	r1, r3, #31
 8008d26:	d403      	bmi.n	8008d30 <__lo0bits+0x4e>
 8008d28:	085b      	lsrs	r3, r3, #1
 8008d2a:	f100 0001 	add.w	r0, r0, #1
 8008d2e:	d003      	beq.n	8008d38 <__lo0bits+0x56>
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	4770      	bx	lr
 8008d34:	2000      	movs	r0, #0
 8008d36:	4770      	bx	lr
 8008d38:	2020      	movs	r0, #32
 8008d3a:	4770      	bx	lr

08008d3c <__i2b>:
 8008d3c:	b510      	push	{r4, lr}
 8008d3e:	460c      	mov	r4, r1
 8008d40:	2101      	movs	r1, #1
 8008d42:	f7ff ff07 	bl	8008b54 <_Balloc>
 8008d46:	4602      	mov	r2, r0
 8008d48:	b928      	cbnz	r0, 8008d56 <__i2b+0x1a>
 8008d4a:	4b05      	ldr	r3, [pc, #20]	@ (8008d60 <__i2b+0x24>)
 8008d4c:	4805      	ldr	r0, [pc, #20]	@ (8008d64 <__i2b+0x28>)
 8008d4e:	f240 1145 	movw	r1, #325	@ 0x145
 8008d52:	f000 fcbd 	bl	80096d0 <__assert_func>
 8008d56:	2301      	movs	r3, #1
 8008d58:	6144      	str	r4, [r0, #20]
 8008d5a:	6103      	str	r3, [r0, #16]
 8008d5c:	bd10      	pop	{r4, pc}
 8008d5e:	bf00      	nop
 8008d60:	0800bad0 	.word	0x0800bad0
 8008d64:	0800bae1 	.word	0x0800bae1

08008d68 <__multiply>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	4614      	mov	r4, r2
 8008d6e:	690a      	ldr	r2, [r1, #16]
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	bfa8      	it	ge
 8008d76:	4623      	movge	r3, r4
 8008d78:	460f      	mov	r7, r1
 8008d7a:	bfa4      	itt	ge
 8008d7c:	460c      	movge	r4, r1
 8008d7e:	461f      	movge	r7, r3
 8008d80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008d84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008d88:	68a3      	ldr	r3, [r4, #8]
 8008d8a:	6861      	ldr	r1, [r4, #4]
 8008d8c:	eb0a 0609 	add.w	r6, sl, r9
 8008d90:	42b3      	cmp	r3, r6
 8008d92:	b085      	sub	sp, #20
 8008d94:	bfb8      	it	lt
 8008d96:	3101      	addlt	r1, #1
 8008d98:	f7ff fedc 	bl	8008b54 <_Balloc>
 8008d9c:	b930      	cbnz	r0, 8008dac <__multiply+0x44>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	4b44      	ldr	r3, [pc, #272]	@ (8008eb4 <__multiply+0x14c>)
 8008da2:	4845      	ldr	r0, [pc, #276]	@ (8008eb8 <__multiply+0x150>)
 8008da4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008da8:	f000 fc92 	bl	80096d0 <__assert_func>
 8008dac:	f100 0514 	add.w	r5, r0, #20
 8008db0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008db4:	462b      	mov	r3, r5
 8008db6:	2200      	movs	r2, #0
 8008db8:	4543      	cmp	r3, r8
 8008dba:	d321      	bcc.n	8008e00 <__multiply+0x98>
 8008dbc:	f107 0114 	add.w	r1, r7, #20
 8008dc0:	f104 0214 	add.w	r2, r4, #20
 8008dc4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008dc8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008dcc:	9302      	str	r3, [sp, #8]
 8008dce:	1b13      	subs	r3, r2, r4
 8008dd0:	3b15      	subs	r3, #21
 8008dd2:	f023 0303 	bic.w	r3, r3, #3
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	f104 0715 	add.w	r7, r4, #21
 8008ddc:	42ba      	cmp	r2, r7
 8008dde:	bf38      	it	cc
 8008de0:	2304      	movcc	r3, #4
 8008de2:	9301      	str	r3, [sp, #4]
 8008de4:	9b02      	ldr	r3, [sp, #8]
 8008de6:	9103      	str	r1, [sp, #12]
 8008de8:	428b      	cmp	r3, r1
 8008dea:	d80c      	bhi.n	8008e06 <__multiply+0x9e>
 8008dec:	2e00      	cmp	r6, #0
 8008dee:	dd03      	ble.n	8008df8 <__multiply+0x90>
 8008df0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d05b      	beq.n	8008eb0 <__multiply+0x148>
 8008df8:	6106      	str	r6, [r0, #16]
 8008dfa:	b005      	add	sp, #20
 8008dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e00:	f843 2b04 	str.w	r2, [r3], #4
 8008e04:	e7d8      	b.n	8008db8 <__multiply+0x50>
 8008e06:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e0a:	f1ba 0f00 	cmp.w	sl, #0
 8008e0e:	d024      	beq.n	8008e5a <__multiply+0xf2>
 8008e10:	f104 0e14 	add.w	lr, r4, #20
 8008e14:	46a9      	mov	r9, r5
 8008e16:	f04f 0c00 	mov.w	ip, #0
 8008e1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e1e:	f8d9 3000 	ldr.w	r3, [r9]
 8008e22:	fa1f fb87 	uxth.w	fp, r7
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	fb0a 330b 	mla	r3, sl, fp, r3
 8008e2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008e30:	f8d9 7000 	ldr.w	r7, [r9]
 8008e34:	4463      	add	r3, ip
 8008e36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008e3a:	fb0a c70b 	mla	r7, sl, fp, ip
 8008e3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e48:	4572      	cmp	r2, lr
 8008e4a:	f849 3b04 	str.w	r3, [r9], #4
 8008e4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008e52:	d8e2      	bhi.n	8008e1a <__multiply+0xb2>
 8008e54:	9b01      	ldr	r3, [sp, #4]
 8008e56:	f845 c003 	str.w	ip, [r5, r3]
 8008e5a:	9b03      	ldr	r3, [sp, #12]
 8008e5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008e60:	3104      	adds	r1, #4
 8008e62:	f1b9 0f00 	cmp.w	r9, #0
 8008e66:	d021      	beq.n	8008eac <__multiply+0x144>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	f104 0c14 	add.w	ip, r4, #20
 8008e6e:	46ae      	mov	lr, r5
 8008e70:	f04f 0a00 	mov.w	sl, #0
 8008e74:	f8bc b000 	ldrh.w	fp, [ip]
 8008e78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008e7c:	fb09 770b 	mla	r7, r9, fp, r7
 8008e80:	4457      	add	r7, sl
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e88:	f84e 3b04 	str.w	r3, [lr], #4
 8008e8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e94:	f8be 3000 	ldrh.w	r3, [lr]
 8008e98:	fb09 330a 	mla	r3, r9, sl, r3
 8008e9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008ea0:	4562      	cmp	r2, ip
 8008ea2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ea6:	d8e5      	bhi.n	8008e74 <__multiply+0x10c>
 8008ea8:	9f01      	ldr	r7, [sp, #4]
 8008eaa:	51eb      	str	r3, [r5, r7]
 8008eac:	3504      	adds	r5, #4
 8008eae:	e799      	b.n	8008de4 <__multiply+0x7c>
 8008eb0:	3e01      	subs	r6, #1
 8008eb2:	e79b      	b.n	8008dec <__multiply+0x84>
 8008eb4:	0800bad0 	.word	0x0800bad0
 8008eb8:	0800bae1 	.word	0x0800bae1

08008ebc <__pow5mult>:
 8008ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ec0:	4615      	mov	r5, r2
 8008ec2:	f012 0203 	ands.w	r2, r2, #3
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	460e      	mov	r6, r1
 8008eca:	d007      	beq.n	8008edc <__pow5mult+0x20>
 8008ecc:	4c25      	ldr	r4, [pc, #148]	@ (8008f64 <__pow5mult+0xa8>)
 8008ece:	3a01      	subs	r2, #1
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ed6:	f7ff fe9f 	bl	8008c18 <__multadd>
 8008eda:	4606      	mov	r6, r0
 8008edc:	10ad      	asrs	r5, r5, #2
 8008ede:	d03d      	beq.n	8008f5c <__pow5mult+0xa0>
 8008ee0:	69fc      	ldr	r4, [r7, #28]
 8008ee2:	b97c      	cbnz	r4, 8008f04 <__pow5mult+0x48>
 8008ee4:	2010      	movs	r0, #16
 8008ee6:	f7ff fd7f 	bl	80089e8 <malloc>
 8008eea:	4602      	mov	r2, r0
 8008eec:	61f8      	str	r0, [r7, #28]
 8008eee:	b928      	cbnz	r0, 8008efc <__pow5mult+0x40>
 8008ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8008f68 <__pow5mult+0xac>)
 8008ef2:	481e      	ldr	r0, [pc, #120]	@ (8008f6c <__pow5mult+0xb0>)
 8008ef4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ef8:	f000 fbea 	bl	80096d0 <__assert_func>
 8008efc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f00:	6004      	str	r4, [r0, #0]
 8008f02:	60c4      	str	r4, [r0, #12]
 8008f04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f0c:	b94c      	cbnz	r4, 8008f22 <__pow5mult+0x66>
 8008f0e:	f240 2171 	movw	r1, #625	@ 0x271
 8008f12:	4638      	mov	r0, r7
 8008f14:	f7ff ff12 	bl	8008d3c <__i2b>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f1e:	4604      	mov	r4, r0
 8008f20:	6003      	str	r3, [r0, #0]
 8008f22:	f04f 0900 	mov.w	r9, #0
 8008f26:	07eb      	lsls	r3, r5, #31
 8008f28:	d50a      	bpl.n	8008f40 <__pow5mult+0x84>
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	4638      	mov	r0, r7
 8008f30:	f7ff ff1a 	bl	8008d68 <__multiply>
 8008f34:	4631      	mov	r1, r6
 8008f36:	4680      	mov	r8, r0
 8008f38:	4638      	mov	r0, r7
 8008f3a:	f7ff fe4b 	bl	8008bd4 <_Bfree>
 8008f3e:	4646      	mov	r6, r8
 8008f40:	106d      	asrs	r5, r5, #1
 8008f42:	d00b      	beq.n	8008f5c <__pow5mult+0xa0>
 8008f44:	6820      	ldr	r0, [r4, #0]
 8008f46:	b938      	cbnz	r0, 8008f58 <__pow5mult+0x9c>
 8008f48:	4622      	mov	r2, r4
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f7ff ff0b 	bl	8008d68 <__multiply>
 8008f52:	6020      	str	r0, [r4, #0]
 8008f54:	f8c0 9000 	str.w	r9, [r0]
 8008f58:	4604      	mov	r4, r0
 8008f5a:	e7e4      	b.n	8008f26 <__pow5mult+0x6a>
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f62:	bf00      	nop
 8008f64:	0800bb3c 	.word	0x0800bb3c
 8008f68:	0800ba61 	.word	0x0800ba61
 8008f6c:	0800bae1 	.word	0x0800bae1

08008f70 <__lshift>:
 8008f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f74:	460c      	mov	r4, r1
 8008f76:	6849      	ldr	r1, [r1, #4]
 8008f78:	6923      	ldr	r3, [r4, #16]
 8008f7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f7e:	68a3      	ldr	r3, [r4, #8]
 8008f80:	4607      	mov	r7, r0
 8008f82:	4691      	mov	r9, r2
 8008f84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f88:	f108 0601 	add.w	r6, r8, #1
 8008f8c:	42b3      	cmp	r3, r6
 8008f8e:	db0b      	blt.n	8008fa8 <__lshift+0x38>
 8008f90:	4638      	mov	r0, r7
 8008f92:	f7ff fddf 	bl	8008b54 <_Balloc>
 8008f96:	4605      	mov	r5, r0
 8008f98:	b948      	cbnz	r0, 8008fae <__lshift+0x3e>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	4b28      	ldr	r3, [pc, #160]	@ (8009040 <__lshift+0xd0>)
 8008f9e:	4829      	ldr	r0, [pc, #164]	@ (8009044 <__lshift+0xd4>)
 8008fa0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008fa4:	f000 fb94 	bl	80096d0 <__assert_func>
 8008fa8:	3101      	adds	r1, #1
 8008faa:	005b      	lsls	r3, r3, #1
 8008fac:	e7ee      	b.n	8008f8c <__lshift+0x1c>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f100 0114 	add.w	r1, r0, #20
 8008fb4:	f100 0210 	add.w	r2, r0, #16
 8008fb8:	4618      	mov	r0, r3
 8008fba:	4553      	cmp	r3, sl
 8008fbc:	db33      	blt.n	8009026 <__lshift+0xb6>
 8008fbe:	6920      	ldr	r0, [r4, #16]
 8008fc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fc4:	f104 0314 	add.w	r3, r4, #20
 8008fc8:	f019 091f 	ands.w	r9, r9, #31
 8008fcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008fd4:	d02b      	beq.n	800902e <__lshift+0xbe>
 8008fd6:	f1c9 0e20 	rsb	lr, r9, #32
 8008fda:	468a      	mov	sl, r1
 8008fdc:	2200      	movs	r2, #0
 8008fde:	6818      	ldr	r0, [r3, #0]
 8008fe0:	fa00 f009 	lsl.w	r0, r0, r9
 8008fe4:	4310      	orrs	r0, r2
 8008fe6:	f84a 0b04 	str.w	r0, [sl], #4
 8008fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fee:	459c      	cmp	ip, r3
 8008ff0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ff4:	d8f3      	bhi.n	8008fde <__lshift+0x6e>
 8008ff6:	ebac 0304 	sub.w	r3, ip, r4
 8008ffa:	3b15      	subs	r3, #21
 8008ffc:	f023 0303 	bic.w	r3, r3, #3
 8009000:	3304      	adds	r3, #4
 8009002:	f104 0015 	add.w	r0, r4, #21
 8009006:	4584      	cmp	ip, r0
 8009008:	bf38      	it	cc
 800900a:	2304      	movcc	r3, #4
 800900c:	50ca      	str	r2, [r1, r3]
 800900e:	b10a      	cbz	r2, 8009014 <__lshift+0xa4>
 8009010:	f108 0602 	add.w	r6, r8, #2
 8009014:	3e01      	subs	r6, #1
 8009016:	4638      	mov	r0, r7
 8009018:	612e      	str	r6, [r5, #16]
 800901a:	4621      	mov	r1, r4
 800901c:	f7ff fdda 	bl	8008bd4 <_Bfree>
 8009020:	4628      	mov	r0, r5
 8009022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009026:	f842 0f04 	str.w	r0, [r2, #4]!
 800902a:	3301      	adds	r3, #1
 800902c:	e7c5      	b.n	8008fba <__lshift+0x4a>
 800902e:	3904      	subs	r1, #4
 8009030:	f853 2b04 	ldr.w	r2, [r3], #4
 8009034:	f841 2f04 	str.w	r2, [r1, #4]!
 8009038:	459c      	cmp	ip, r3
 800903a:	d8f9      	bhi.n	8009030 <__lshift+0xc0>
 800903c:	e7ea      	b.n	8009014 <__lshift+0xa4>
 800903e:	bf00      	nop
 8009040:	0800bad0 	.word	0x0800bad0
 8009044:	0800bae1 	.word	0x0800bae1

08009048 <__mcmp>:
 8009048:	690a      	ldr	r2, [r1, #16]
 800904a:	4603      	mov	r3, r0
 800904c:	6900      	ldr	r0, [r0, #16]
 800904e:	1a80      	subs	r0, r0, r2
 8009050:	b530      	push	{r4, r5, lr}
 8009052:	d10e      	bne.n	8009072 <__mcmp+0x2a>
 8009054:	3314      	adds	r3, #20
 8009056:	3114      	adds	r1, #20
 8009058:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800905c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009060:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009064:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009068:	4295      	cmp	r5, r2
 800906a:	d003      	beq.n	8009074 <__mcmp+0x2c>
 800906c:	d205      	bcs.n	800907a <__mcmp+0x32>
 800906e:	f04f 30ff 	mov.w	r0, #4294967295
 8009072:	bd30      	pop	{r4, r5, pc}
 8009074:	42a3      	cmp	r3, r4
 8009076:	d3f3      	bcc.n	8009060 <__mcmp+0x18>
 8009078:	e7fb      	b.n	8009072 <__mcmp+0x2a>
 800907a:	2001      	movs	r0, #1
 800907c:	e7f9      	b.n	8009072 <__mcmp+0x2a>
	...

08009080 <__mdiff>:
 8009080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	4689      	mov	r9, r1
 8009086:	4606      	mov	r6, r0
 8009088:	4611      	mov	r1, r2
 800908a:	4648      	mov	r0, r9
 800908c:	4614      	mov	r4, r2
 800908e:	f7ff ffdb 	bl	8009048 <__mcmp>
 8009092:	1e05      	subs	r5, r0, #0
 8009094:	d112      	bne.n	80090bc <__mdiff+0x3c>
 8009096:	4629      	mov	r1, r5
 8009098:	4630      	mov	r0, r6
 800909a:	f7ff fd5b 	bl	8008b54 <_Balloc>
 800909e:	4602      	mov	r2, r0
 80090a0:	b928      	cbnz	r0, 80090ae <__mdiff+0x2e>
 80090a2:	4b3f      	ldr	r3, [pc, #252]	@ (80091a0 <__mdiff+0x120>)
 80090a4:	f240 2137 	movw	r1, #567	@ 0x237
 80090a8:	483e      	ldr	r0, [pc, #248]	@ (80091a4 <__mdiff+0x124>)
 80090aa:	f000 fb11 	bl	80096d0 <__assert_func>
 80090ae:	2301      	movs	r3, #1
 80090b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090b4:	4610      	mov	r0, r2
 80090b6:	b003      	add	sp, #12
 80090b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090bc:	bfbc      	itt	lt
 80090be:	464b      	movlt	r3, r9
 80090c0:	46a1      	movlt	r9, r4
 80090c2:	4630      	mov	r0, r6
 80090c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80090c8:	bfba      	itte	lt
 80090ca:	461c      	movlt	r4, r3
 80090cc:	2501      	movlt	r5, #1
 80090ce:	2500      	movge	r5, #0
 80090d0:	f7ff fd40 	bl	8008b54 <_Balloc>
 80090d4:	4602      	mov	r2, r0
 80090d6:	b918      	cbnz	r0, 80090e0 <__mdiff+0x60>
 80090d8:	4b31      	ldr	r3, [pc, #196]	@ (80091a0 <__mdiff+0x120>)
 80090da:	f240 2145 	movw	r1, #581	@ 0x245
 80090de:	e7e3      	b.n	80090a8 <__mdiff+0x28>
 80090e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80090e4:	6926      	ldr	r6, [r4, #16]
 80090e6:	60c5      	str	r5, [r0, #12]
 80090e8:	f109 0310 	add.w	r3, r9, #16
 80090ec:	f109 0514 	add.w	r5, r9, #20
 80090f0:	f104 0e14 	add.w	lr, r4, #20
 80090f4:	f100 0b14 	add.w	fp, r0, #20
 80090f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80090fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	46d9      	mov	r9, fp
 8009104:	f04f 0c00 	mov.w	ip, #0
 8009108:	9b01      	ldr	r3, [sp, #4]
 800910a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800910e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	fa1f f38a 	uxth.w	r3, sl
 8009118:	4619      	mov	r1, r3
 800911a:	b283      	uxth	r3, r0
 800911c:	1acb      	subs	r3, r1, r3
 800911e:	0c00      	lsrs	r0, r0, #16
 8009120:	4463      	add	r3, ip
 8009122:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009126:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800912a:	b29b      	uxth	r3, r3
 800912c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009130:	4576      	cmp	r6, lr
 8009132:	f849 3b04 	str.w	r3, [r9], #4
 8009136:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800913a:	d8e5      	bhi.n	8009108 <__mdiff+0x88>
 800913c:	1b33      	subs	r3, r6, r4
 800913e:	3b15      	subs	r3, #21
 8009140:	f023 0303 	bic.w	r3, r3, #3
 8009144:	3415      	adds	r4, #21
 8009146:	3304      	adds	r3, #4
 8009148:	42a6      	cmp	r6, r4
 800914a:	bf38      	it	cc
 800914c:	2304      	movcc	r3, #4
 800914e:	441d      	add	r5, r3
 8009150:	445b      	add	r3, fp
 8009152:	461e      	mov	r6, r3
 8009154:	462c      	mov	r4, r5
 8009156:	4544      	cmp	r4, r8
 8009158:	d30e      	bcc.n	8009178 <__mdiff+0xf8>
 800915a:	f108 0103 	add.w	r1, r8, #3
 800915e:	1b49      	subs	r1, r1, r5
 8009160:	f021 0103 	bic.w	r1, r1, #3
 8009164:	3d03      	subs	r5, #3
 8009166:	45a8      	cmp	r8, r5
 8009168:	bf38      	it	cc
 800916a:	2100      	movcc	r1, #0
 800916c:	440b      	add	r3, r1
 800916e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009172:	b191      	cbz	r1, 800919a <__mdiff+0x11a>
 8009174:	6117      	str	r7, [r2, #16]
 8009176:	e79d      	b.n	80090b4 <__mdiff+0x34>
 8009178:	f854 1b04 	ldr.w	r1, [r4], #4
 800917c:	46e6      	mov	lr, ip
 800917e:	0c08      	lsrs	r0, r1, #16
 8009180:	fa1c fc81 	uxtah	ip, ip, r1
 8009184:	4471      	add	r1, lr
 8009186:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800918a:	b289      	uxth	r1, r1
 800918c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009190:	f846 1b04 	str.w	r1, [r6], #4
 8009194:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009198:	e7dd      	b.n	8009156 <__mdiff+0xd6>
 800919a:	3f01      	subs	r7, #1
 800919c:	e7e7      	b.n	800916e <__mdiff+0xee>
 800919e:	bf00      	nop
 80091a0:	0800bad0 	.word	0x0800bad0
 80091a4:	0800bae1 	.word	0x0800bae1

080091a8 <__d2b>:
 80091a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091ac:	460f      	mov	r7, r1
 80091ae:	2101      	movs	r1, #1
 80091b0:	ec59 8b10 	vmov	r8, r9, d0
 80091b4:	4616      	mov	r6, r2
 80091b6:	f7ff fccd 	bl	8008b54 <_Balloc>
 80091ba:	4604      	mov	r4, r0
 80091bc:	b930      	cbnz	r0, 80091cc <__d2b+0x24>
 80091be:	4602      	mov	r2, r0
 80091c0:	4b23      	ldr	r3, [pc, #140]	@ (8009250 <__d2b+0xa8>)
 80091c2:	4824      	ldr	r0, [pc, #144]	@ (8009254 <__d2b+0xac>)
 80091c4:	f240 310f 	movw	r1, #783	@ 0x30f
 80091c8:	f000 fa82 	bl	80096d0 <__assert_func>
 80091cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091d4:	b10d      	cbz	r5, 80091da <__d2b+0x32>
 80091d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	f1b8 0300 	subs.w	r3, r8, #0
 80091e0:	d023      	beq.n	800922a <__d2b+0x82>
 80091e2:	4668      	mov	r0, sp
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	f7ff fd7c 	bl	8008ce2 <__lo0bits>
 80091ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80091ee:	b1d0      	cbz	r0, 8009226 <__d2b+0x7e>
 80091f0:	f1c0 0320 	rsb	r3, r0, #32
 80091f4:	fa02 f303 	lsl.w	r3, r2, r3
 80091f8:	430b      	orrs	r3, r1
 80091fa:	40c2      	lsrs	r2, r0
 80091fc:	6163      	str	r3, [r4, #20]
 80091fe:	9201      	str	r2, [sp, #4]
 8009200:	9b01      	ldr	r3, [sp, #4]
 8009202:	61a3      	str	r3, [r4, #24]
 8009204:	2b00      	cmp	r3, #0
 8009206:	bf0c      	ite	eq
 8009208:	2201      	moveq	r2, #1
 800920a:	2202      	movne	r2, #2
 800920c:	6122      	str	r2, [r4, #16]
 800920e:	b1a5      	cbz	r5, 800923a <__d2b+0x92>
 8009210:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009214:	4405      	add	r5, r0
 8009216:	603d      	str	r5, [r7, #0]
 8009218:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800921c:	6030      	str	r0, [r6, #0]
 800921e:	4620      	mov	r0, r4
 8009220:	b003      	add	sp, #12
 8009222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009226:	6161      	str	r1, [r4, #20]
 8009228:	e7ea      	b.n	8009200 <__d2b+0x58>
 800922a:	a801      	add	r0, sp, #4
 800922c:	f7ff fd59 	bl	8008ce2 <__lo0bits>
 8009230:	9b01      	ldr	r3, [sp, #4]
 8009232:	6163      	str	r3, [r4, #20]
 8009234:	3020      	adds	r0, #32
 8009236:	2201      	movs	r2, #1
 8009238:	e7e8      	b.n	800920c <__d2b+0x64>
 800923a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800923e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009242:	6038      	str	r0, [r7, #0]
 8009244:	6918      	ldr	r0, [r3, #16]
 8009246:	f7ff fd2d 	bl	8008ca4 <__hi0bits>
 800924a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800924e:	e7e5      	b.n	800921c <__d2b+0x74>
 8009250:	0800bad0 	.word	0x0800bad0
 8009254:	0800bae1 	.word	0x0800bae1

08009258 <__ssputs_r>:
 8009258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800925c:	688e      	ldr	r6, [r1, #8]
 800925e:	461f      	mov	r7, r3
 8009260:	42be      	cmp	r6, r7
 8009262:	680b      	ldr	r3, [r1, #0]
 8009264:	4682      	mov	sl, r0
 8009266:	460c      	mov	r4, r1
 8009268:	4690      	mov	r8, r2
 800926a:	d82d      	bhi.n	80092c8 <__ssputs_r+0x70>
 800926c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009270:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009274:	d026      	beq.n	80092c4 <__ssputs_r+0x6c>
 8009276:	6965      	ldr	r5, [r4, #20]
 8009278:	6909      	ldr	r1, [r1, #16]
 800927a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800927e:	eba3 0901 	sub.w	r9, r3, r1
 8009282:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009286:	1c7b      	adds	r3, r7, #1
 8009288:	444b      	add	r3, r9
 800928a:	106d      	asrs	r5, r5, #1
 800928c:	429d      	cmp	r5, r3
 800928e:	bf38      	it	cc
 8009290:	461d      	movcc	r5, r3
 8009292:	0553      	lsls	r3, r2, #21
 8009294:	d527      	bpl.n	80092e6 <__ssputs_r+0x8e>
 8009296:	4629      	mov	r1, r5
 8009298:	f7ff fbd0 	bl	8008a3c <_malloc_r>
 800929c:	4606      	mov	r6, r0
 800929e:	b360      	cbz	r0, 80092fa <__ssputs_r+0xa2>
 80092a0:	6921      	ldr	r1, [r4, #16]
 80092a2:	464a      	mov	r2, r9
 80092a4:	f000 fa06 	bl	80096b4 <memcpy>
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80092ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092b2:	81a3      	strh	r3, [r4, #12]
 80092b4:	6126      	str	r6, [r4, #16]
 80092b6:	6165      	str	r5, [r4, #20]
 80092b8:	444e      	add	r6, r9
 80092ba:	eba5 0509 	sub.w	r5, r5, r9
 80092be:	6026      	str	r6, [r4, #0]
 80092c0:	60a5      	str	r5, [r4, #8]
 80092c2:	463e      	mov	r6, r7
 80092c4:	42be      	cmp	r6, r7
 80092c6:	d900      	bls.n	80092ca <__ssputs_r+0x72>
 80092c8:	463e      	mov	r6, r7
 80092ca:	6820      	ldr	r0, [r4, #0]
 80092cc:	4632      	mov	r2, r6
 80092ce:	4641      	mov	r1, r8
 80092d0:	f000 f9c6 	bl	8009660 <memmove>
 80092d4:	68a3      	ldr	r3, [r4, #8]
 80092d6:	1b9b      	subs	r3, r3, r6
 80092d8:	60a3      	str	r3, [r4, #8]
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	4433      	add	r3, r6
 80092de:	6023      	str	r3, [r4, #0]
 80092e0:	2000      	movs	r0, #0
 80092e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e6:	462a      	mov	r2, r5
 80092e8:	f000 fa36 	bl	8009758 <_realloc_r>
 80092ec:	4606      	mov	r6, r0
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d1e0      	bne.n	80092b4 <__ssputs_r+0x5c>
 80092f2:	6921      	ldr	r1, [r4, #16]
 80092f4:	4650      	mov	r0, sl
 80092f6:	f7ff fb2d 	bl	8008954 <_free_r>
 80092fa:	230c      	movs	r3, #12
 80092fc:	f8ca 3000 	str.w	r3, [sl]
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	f04f 30ff 	mov.w	r0, #4294967295
 800930c:	e7e9      	b.n	80092e2 <__ssputs_r+0x8a>
	...

08009310 <_svfiprintf_r>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	4698      	mov	r8, r3
 8009316:	898b      	ldrh	r3, [r1, #12]
 8009318:	061b      	lsls	r3, r3, #24
 800931a:	b09d      	sub	sp, #116	@ 0x74
 800931c:	4607      	mov	r7, r0
 800931e:	460d      	mov	r5, r1
 8009320:	4614      	mov	r4, r2
 8009322:	d510      	bpl.n	8009346 <_svfiprintf_r+0x36>
 8009324:	690b      	ldr	r3, [r1, #16]
 8009326:	b973      	cbnz	r3, 8009346 <_svfiprintf_r+0x36>
 8009328:	2140      	movs	r1, #64	@ 0x40
 800932a:	f7ff fb87 	bl	8008a3c <_malloc_r>
 800932e:	6028      	str	r0, [r5, #0]
 8009330:	6128      	str	r0, [r5, #16]
 8009332:	b930      	cbnz	r0, 8009342 <_svfiprintf_r+0x32>
 8009334:	230c      	movs	r3, #12
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	f04f 30ff 	mov.w	r0, #4294967295
 800933c:	b01d      	add	sp, #116	@ 0x74
 800933e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009342:	2340      	movs	r3, #64	@ 0x40
 8009344:	616b      	str	r3, [r5, #20]
 8009346:	2300      	movs	r3, #0
 8009348:	9309      	str	r3, [sp, #36]	@ 0x24
 800934a:	2320      	movs	r3, #32
 800934c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009350:	f8cd 800c 	str.w	r8, [sp, #12]
 8009354:	2330      	movs	r3, #48	@ 0x30
 8009356:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80094f4 <_svfiprintf_r+0x1e4>
 800935a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800935e:	f04f 0901 	mov.w	r9, #1
 8009362:	4623      	mov	r3, r4
 8009364:	469a      	mov	sl, r3
 8009366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800936a:	b10a      	cbz	r2, 8009370 <_svfiprintf_r+0x60>
 800936c:	2a25      	cmp	r2, #37	@ 0x25
 800936e:	d1f9      	bne.n	8009364 <_svfiprintf_r+0x54>
 8009370:	ebba 0b04 	subs.w	fp, sl, r4
 8009374:	d00b      	beq.n	800938e <_svfiprintf_r+0x7e>
 8009376:	465b      	mov	r3, fp
 8009378:	4622      	mov	r2, r4
 800937a:	4629      	mov	r1, r5
 800937c:	4638      	mov	r0, r7
 800937e:	f7ff ff6b 	bl	8009258 <__ssputs_r>
 8009382:	3001      	adds	r0, #1
 8009384:	f000 80a7 	beq.w	80094d6 <_svfiprintf_r+0x1c6>
 8009388:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800938a:	445a      	add	r2, fp
 800938c:	9209      	str	r2, [sp, #36]	@ 0x24
 800938e:	f89a 3000 	ldrb.w	r3, [sl]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 809f 	beq.w	80094d6 <_svfiprintf_r+0x1c6>
 8009398:	2300      	movs	r3, #0
 800939a:	f04f 32ff 	mov.w	r2, #4294967295
 800939e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093a2:	f10a 0a01 	add.w	sl, sl, #1
 80093a6:	9304      	str	r3, [sp, #16]
 80093a8:	9307      	str	r3, [sp, #28]
 80093aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80093b0:	4654      	mov	r4, sl
 80093b2:	2205      	movs	r2, #5
 80093b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b8:	484e      	ldr	r0, [pc, #312]	@ (80094f4 <_svfiprintf_r+0x1e4>)
 80093ba:	f7f6 ff41 	bl	8000240 <memchr>
 80093be:	9a04      	ldr	r2, [sp, #16]
 80093c0:	b9d8      	cbnz	r0, 80093fa <_svfiprintf_r+0xea>
 80093c2:	06d0      	lsls	r0, r2, #27
 80093c4:	bf44      	itt	mi
 80093c6:	2320      	movmi	r3, #32
 80093c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093cc:	0711      	lsls	r1, r2, #28
 80093ce:	bf44      	itt	mi
 80093d0:	232b      	movmi	r3, #43	@ 0x2b
 80093d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093d6:	f89a 3000 	ldrb.w	r3, [sl]
 80093da:	2b2a      	cmp	r3, #42	@ 0x2a
 80093dc:	d015      	beq.n	800940a <_svfiprintf_r+0xfa>
 80093de:	9a07      	ldr	r2, [sp, #28]
 80093e0:	4654      	mov	r4, sl
 80093e2:	2000      	movs	r0, #0
 80093e4:	f04f 0c0a 	mov.w	ip, #10
 80093e8:	4621      	mov	r1, r4
 80093ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ee:	3b30      	subs	r3, #48	@ 0x30
 80093f0:	2b09      	cmp	r3, #9
 80093f2:	d94b      	bls.n	800948c <_svfiprintf_r+0x17c>
 80093f4:	b1b0      	cbz	r0, 8009424 <_svfiprintf_r+0x114>
 80093f6:	9207      	str	r2, [sp, #28]
 80093f8:	e014      	b.n	8009424 <_svfiprintf_r+0x114>
 80093fa:	eba0 0308 	sub.w	r3, r0, r8
 80093fe:	fa09 f303 	lsl.w	r3, r9, r3
 8009402:	4313      	orrs	r3, r2
 8009404:	9304      	str	r3, [sp, #16]
 8009406:	46a2      	mov	sl, r4
 8009408:	e7d2      	b.n	80093b0 <_svfiprintf_r+0xa0>
 800940a:	9b03      	ldr	r3, [sp, #12]
 800940c:	1d19      	adds	r1, r3, #4
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	9103      	str	r1, [sp, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	bfbb      	ittet	lt
 8009416:	425b      	neglt	r3, r3
 8009418:	f042 0202 	orrlt.w	r2, r2, #2
 800941c:	9307      	strge	r3, [sp, #28]
 800941e:	9307      	strlt	r3, [sp, #28]
 8009420:	bfb8      	it	lt
 8009422:	9204      	strlt	r2, [sp, #16]
 8009424:	7823      	ldrb	r3, [r4, #0]
 8009426:	2b2e      	cmp	r3, #46	@ 0x2e
 8009428:	d10a      	bne.n	8009440 <_svfiprintf_r+0x130>
 800942a:	7863      	ldrb	r3, [r4, #1]
 800942c:	2b2a      	cmp	r3, #42	@ 0x2a
 800942e:	d132      	bne.n	8009496 <_svfiprintf_r+0x186>
 8009430:	9b03      	ldr	r3, [sp, #12]
 8009432:	1d1a      	adds	r2, r3, #4
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	9203      	str	r2, [sp, #12]
 8009438:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800943c:	3402      	adds	r4, #2
 800943e:	9305      	str	r3, [sp, #20]
 8009440:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009504 <_svfiprintf_r+0x1f4>
 8009444:	7821      	ldrb	r1, [r4, #0]
 8009446:	2203      	movs	r2, #3
 8009448:	4650      	mov	r0, sl
 800944a:	f7f6 fef9 	bl	8000240 <memchr>
 800944e:	b138      	cbz	r0, 8009460 <_svfiprintf_r+0x150>
 8009450:	9b04      	ldr	r3, [sp, #16]
 8009452:	eba0 000a 	sub.w	r0, r0, sl
 8009456:	2240      	movs	r2, #64	@ 0x40
 8009458:	4082      	lsls	r2, r0
 800945a:	4313      	orrs	r3, r2
 800945c:	3401      	adds	r4, #1
 800945e:	9304      	str	r3, [sp, #16]
 8009460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009464:	4824      	ldr	r0, [pc, #144]	@ (80094f8 <_svfiprintf_r+0x1e8>)
 8009466:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800946a:	2206      	movs	r2, #6
 800946c:	f7f6 fee8 	bl	8000240 <memchr>
 8009470:	2800      	cmp	r0, #0
 8009472:	d036      	beq.n	80094e2 <_svfiprintf_r+0x1d2>
 8009474:	4b21      	ldr	r3, [pc, #132]	@ (80094fc <_svfiprintf_r+0x1ec>)
 8009476:	bb1b      	cbnz	r3, 80094c0 <_svfiprintf_r+0x1b0>
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	3307      	adds	r3, #7
 800947c:	f023 0307 	bic.w	r3, r3, #7
 8009480:	3308      	adds	r3, #8
 8009482:	9303      	str	r3, [sp, #12]
 8009484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009486:	4433      	add	r3, r6
 8009488:	9309      	str	r3, [sp, #36]	@ 0x24
 800948a:	e76a      	b.n	8009362 <_svfiprintf_r+0x52>
 800948c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009490:	460c      	mov	r4, r1
 8009492:	2001      	movs	r0, #1
 8009494:	e7a8      	b.n	80093e8 <_svfiprintf_r+0xd8>
 8009496:	2300      	movs	r3, #0
 8009498:	3401      	adds	r4, #1
 800949a:	9305      	str	r3, [sp, #20]
 800949c:	4619      	mov	r1, r3
 800949e:	f04f 0c0a 	mov.w	ip, #10
 80094a2:	4620      	mov	r0, r4
 80094a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094a8:	3a30      	subs	r2, #48	@ 0x30
 80094aa:	2a09      	cmp	r2, #9
 80094ac:	d903      	bls.n	80094b6 <_svfiprintf_r+0x1a6>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0c6      	beq.n	8009440 <_svfiprintf_r+0x130>
 80094b2:	9105      	str	r1, [sp, #20]
 80094b4:	e7c4      	b.n	8009440 <_svfiprintf_r+0x130>
 80094b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80094ba:	4604      	mov	r4, r0
 80094bc:	2301      	movs	r3, #1
 80094be:	e7f0      	b.n	80094a2 <_svfiprintf_r+0x192>
 80094c0:	ab03      	add	r3, sp, #12
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	462a      	mov	r2, r5
 80094c6:	4b0e      	ldr	r3, [pc, #56]	@ (8009500 <_svfiprintf_r+0x1f0>)
 80094c8:	a904      	add	r1, sp, #16
 80094ca:	4638      	mov	r0, r7
 80094cc:	f7fd ff14 	bl	80072f8 <_printf_float>
 80094d0:	1c42      	adds	r2, r0, #1
 80094d2:	4606      	mov	r6, r0
 80094d4:	d1d6      	bne.n	8009484 <_svfiprintf_r+0x174>
 80094d6:	89ab      	ldrh	r3, [r5, #12]
 80094d8:	065b      	lsls	r3, r3, #25
 80094da:	f53f af2d 	bmi.w	8009338 <_svfiprintf_r+0x28>
 80094de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094e0:	e72c      	b.n	800933c <_svfiprintf_r+0x2c>
 80094e2:	ab03      	add	r3, sp, #12
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	462a      	mov	r2, r5
 80094e8:	4b05      	ldr	r3, [pc, #20]	@ (8009500 <_svfiprintf_r+0x1f0>)
 80094ea:	a904      	add	r1, sp, #16
 80094ec:	4638      	mov	r0, r7
 80094ee:	f7fe f98b 	bl	8007808 <_printf_i>
 80094f2:	e7ed      	b.n	80094d0 <_svfiprintf_r+0x1c0>
 80094f4:	0800bc38 	.word	0x0800bc38
 80094f8:	0800bc42 	.word	0x0800bc42
 80094fc:	080072f9 	.word	0x080072f9
 8009500:	08009259 	.word	0x08009259
 8009504:	0800bc3e 	.word	0x0800bc3e

08009508 <__sflush_r>:
 8009508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800950c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009510:	0716      	lsls	r6, r2, #28
 8009512:	4605      	mov	r5, r0
 8009514:	460c      	mov	r4, r1
 8009516:	d454      	bmi.n	80095c2 <__sflush_r+0xba>
 8009518:	684b      	ldr	r3, [r1, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	dc02      	bgt.n	8009524 <__sflush_r+0x1c>
 800951e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009520:	2b00      	cmp	r3, #0
 8009522:	dd48      	ble.n	80095b6 <__sflush_r+0xae>
 8009524:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009526:	2e00      	cmp	r6, #0
 8009528:	d045      	beq.n	80095b6 <__sflush_r+0xae>
 800952a:	2300      	movs	r3, #0
 800952c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009530:	682f      	ldr	r7, [r5, #0]
 8009532:	6a21      	ldr	r1, [r4, #32]
 8009534:	602b      	str	r3, [r5, #0]
 8009536:	d030      	beq.n	800959a <__sflush_r+0x92>
 8009538:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	0759      	lsls	r1, r3, #29
 800953e:	d505      	bpl.n	800954c <__sflush_r+0x44>
 8009540:	6863      	ldr	r3, [r4, #4]
 8009542:	1ad2      	subs	r2, r2, r3
 8009544:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009546:	b10b      	cbz	r3, 800954c <__sflush_r+0x44>
 8009548:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800954a:	1ad2      	subs	r2, r2, r3
 800954c:	2300      	movs	r3, #0
 800954e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009550:	6a21      	ldr	r1, [r4, #32]
 8009552:	4628      	mov	r0, r5
 8009554:	47b0      	blx	r6
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	d106      	bne.n	800956a <__sflush_r+0x62>
 800955c:	6829      	ldr	r1, [r5, #0]
 800955e:	291d      	cmp	r1, #29
 8009560:	d82b      	bhi.n	80095ba <__sflush_r+0xb2>
 8009562:	4a2a      	ldr	r2, [pc, #168]	@ (800960c <__sflush_r+0x104>)
 8009564:	410a      	asrs	r2, r1
 8009566:	07d6      	lsls	r6, r2, #31
 8009568:	d427      	bmi.n	80095ba <__sflush_r+0xb2>
 800956a:	2200      	movs	r2, #0
 800956c:	6062      	str	r2, [r4, #4]
 800956e:	04d9      	lsls	r1, r3, #19
 8009570:	6922      	ldr	r2, [r4, #16]
 8009572:	6022      	str	r2, [r4, #0]
 8009574:	d504      	bpl.n	8009580 <__sflush_r+0x78>
 8009576:	1c42      	adds	r2, r0, #1
 8009578:	d101      	bne.n	800957e <__sflush_r+0x76>
 800957a:	682b      	ldr	r3, [r5, #0]
 800957c:	b903      	cbnz	r3, 8009580 <__sflush_r+0x78>
 800957e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009582:	602f      	str	r7, [r5, #0]
 8009584:	b1b9      	cbz	r1, 80095b6 <__sflush_r+0xae>
 8009586:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800958a:	4299      	cmp	r1, r3
 800958c:	d002      	beq.n	8009594 <__sflush_r+0x8c>
 800958e:	4628      	mov	r0, r5
 8009590:	f7ff f9e0 	bl	8008954 <_free_r>
 8009594:	2300      	movs	r3, #0
 8009596:	6363      	str	r3, [r4, #52]	@ 0x34
 8009598:	e00d      	b.n	80095b6 <__sflush_r+0xae>
 800959a:	2301      	movs	r3, #1
 800959c:	4628      	mov	r0, r5
 800959e:	47b0      	blx	r6
 80095a0:	4602      	mov	r2, r0
 80095a2:	1c50      	adds	r0, r2, #1
 80095a4:	d1c9      	bne.n	800953a <__sflush_r+0x32>
 80095a6:	682b      	ldr	r3, [r5, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0c6      	beq.n	800953a <__sflush_r+0x32>
 80095ac:	2b1d      	cmp	r3, #29
 80095ae:	d001      	beq.n	80095b4 <__sflush_r+0xac>
 80095b0:	2b16      	cmp	r3, #22
 80095b2:	d11e      	bne.n	80095f2 <__sflush_r+0xea>
 80095b4:	602f      	str	r7, [r5, #0]
 80095b6:	2000      	movs	r0, #0
 80095b8:	e022      	b.n	8009600 <__sflush_r+0xf8>
 80095ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095be:	b21b      	sxth	r3, r3
 80095c0:	e01b      	b.n	80095fa <__sflush_r+0xf2>
 80095c2:	690f      	ldr	r7, [r1, #16]
 80095c4:	2f00      	cmp	r7, #0
 80095c6:	d0f6      	beq.n	80095b6 <__sflush_r+0xae>
 80095c8:	0793      	lsls	r3, r2, #30
 80095ca:	680e      	ldr	r6, [r1, #0]
 80095cc:	bf08      	it	eq
 80095ce:	694b      	ldreq	r3, [r1, #20]
 80095d0:	600f      	str	r7, [r1, #0]
 80095d2:	bf18      	it	ne
 80095d4:	2300      	movne	r3, #0
 80095d6:	eba6 0807 	sub.w	r8, r6, r7
 80095da:	608b      	str	r3, [r1, #8]
 80095dc:	f1b8 0f00 	cmp.w	r8, #0
 80095e0:	dde9      	ble.n	80095b6 <__sflush_r+0xae>
 80095e2:	6a21      	ldr	r1, [r4, #32]
 80095e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095e6:	4643      	mov	r3, r8
 80095e8:	463a      	mov	r2, r7
 80095ea:	4628      	mov	r0, r5
 80095ec:	47b0      	blx	r6
 80095ee:	2800      	cmp	r0, #0
 80095f0:	dc08      	bgt.n	8009604 <__sflush_r+0xfc>
 80095f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009604:	4407      	add	r7, r0
 8009606:	eba8 0800 	sub.w	r8, r8, r0
 800960a:	e7e7      	b.n	80095dc <__sflush_r+0xd4>
 800960c:	dfbffffe 	.word	0xdfbffffe

08009610 <_fflush_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	690b      	ldr	r3, [r1, #16]
 8009614:	4605      	mov	r5, r0
 8009616:	460c      	mov	r4, r1
 8009618:	b913      	cbnz	r3, 8009620 <_fflush_r+0x10>
 800961a:	2500      	movs	r5, #0
 800961c:	4628      	mov	r0, r5
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	b118      	cbz	r0, 800962a <_fflush_r+0x1a>
 8009622:	6a03      	ldr	r3, [r0, #32]
 8009624:	b90b      	cbnz	r3, 800962a <_fflush_r+0x1a>
 8009626:	f7fe fa9b 	bl	8007b60 <__sinit>
 800962a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d0f3      	beq.n	800961a <_fflush_r+0xa>
 8009632:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009634:	07d0      	lsls	r0, r2, #31
 8009636:	d404      	bmi.n	8009642 <_fflush_r+0x32>
 8009638:	0599      	lsls	r1, r3, #22
 800963a:	d402      	bmi.n	8009642 <_fflush_r+0x32>
 800963c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800963e:	f7fe fba6 	bl	8007d8e <__retarget_lock_acquire_recursive>
 8009642:	4628      	mov	r0, r5
 8009644:	4621      	mov	r1, r4
 8009646:	f7ff ff5f 	bl	8009508 <__sflush_r>
 800964a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800964c:	07da      	lsls	r2, r3, #31
 800964e:	4605      	mov	r5, r0
 8009650:	d4e4      	bmi.n	800961c <_fflush_r+0xc>
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	059b      	lsls	r3, r3, #22
 8009656:	d4e1      	bmi.n	800961c <_fflush_r+0xc>
 8009658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800965a:	f7fe fb99 	bl	8007d90 <__retarget_lock_release_recursive>
 800965e:	e7dd      	b.n	800961c <_fflush_r+0xc>

08009660 <memmove>:
 8009660:	4288      	cmp	r0, r1
 8009662:	b510      	push	{r4, lr}
 8009664:	eb01 0402 	add.w	r4, r1, r2
 8009668:	d902      	bls.n	8009670 <memmove+0x10>
 800966a:	4284      	cmp	r4, r0
 800966c:	4623      	mov	r3, r4
 800966e:	d807      	bhi.n	8009680 <memmove+0x20>
 8009670:	1e43      	subs	r3, r0, #1
 8009672:	42a1      	cmp	r1, r4
 8009674:	d008      	beq.n	8009688 <memmove+0x28>
 8009676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800967a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800967e:	e7f8      	b.n	8009672 <memmove+0x12>
 8009680:	4402      	add	r2, r0
 8009682:	4601      	mov	r1, r0
 8009684:	428a      	cmp	r2, r1
 8009686:	d100      	bne.n	800968a <memmove+0x2a>
 8009688:	bd10      	pop	{r4, pc}
 800968a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800968e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009692:	e7f7      	b.n	8009684 <memmove+0x24>

08009694 <_sbrk_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	4d06      	ldr	r5, [pc, #24]	@ (80096b0 <_sbrk_r+0x1c>)
 8009698:	2300      	movs	r3, #0
 800969a:	4604      	mov	r4, r0
 800969c:	4608      	mov	r0, r1
 800969e:	602b      	str	r3, [r5, #0]
 80096a0:	f7f8 fb1a 	bl	8001cd8 <_sbrk>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_sbrk_r+0x1a>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_sbrk_r+0x1a>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20000eb4 	.word	0x20000eb4

080096b4 <memcpy>:
 80096b4:	440a      	add	r2, r1
 80096b6:	4291      	cmp	r1, r2
 80096b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80096bc:	d100      	bne.n	80096c0 <memcpy+0xc>
 80096be:	4770      	bx	lr
 80096c0:	b510      	push	{r4, lr}
 80096c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ca:	4291      	cmp	r1, r2
 80096cc:	d1f9      	bne.n	80096c2 <memcpy+0xe>
 80096ce:	bd10      	pop	{r4, pc}

080096d0 <__assert_func>:
 80096d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096d2:	4614      	mov	r4, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	4b09      	ldr	r3, [pc, #36]	@ (80096fc <__assert_func+0x2c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4605      	mov	r5, r0
 80096dc:	68d8      	ldr	r0, [r3, #12]
 80096de:	b954      	cbnz	r4, 80096f6 <__assert_func+0x26>
 80096e0:	4b07      	ldr	r3, [pc, #28]	@ (8009700 <__assert_func+0x30>)
 80096e2:	461c      	mov	r4, r3
 80096e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096e8:	9100      	str	r1, [sp, #0]
 80096ea:	462b      	mov	r3, r5
 80096ec:	4905      	ldr	r1, [pc, #20]	@ (8009704 <__assert_func+0x34>)
 80096ee:	f000 f86f 	bl	80097d0 <fiprintf>
 80096f2:	f000 f87f 	bl	80097f4 <abort>
 80096f6:	4b04      	ldr	r3, [pc, #16]	@ (8009708 <__assert_func+0x38>)
 80096f8:	e7f4      	b.n	80096e4 <__assert_func+0x14>
 80096fa:	bf00      	nop
 80096fc:	20000018 	.word	0x20000018
 8009700:	0800bc8e 	.word	0x0800bc8e
 8009704:	0800bc60 	.word	0x0800bc60
 8009708:	0800bc53 	.word	0x0800bc53

0800970c <_calloc_r>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	fba1 5402 	umull	r5, r4, r1, r2
 8009712:	b93c      	cbnz	r4, 8009724 <_calloc_r+0x18>
 8009714:	4629      	mov	r1, r5
 8009716:	f7ff f991 	bl	8008a3c <_malloc_r>
 800971a:	4606      	mov	r6, r0
 800971c:	b928      	cbnz	r0, 800972a <_calloc_r+0x1e>
 800971e:	2600      	movs	r6, #0
 8009720:	4630      	mov	r0, r6
 8009722:	bd70      	pop	{r4, r5, r6, pc}
 8009724:	220c      	movs	r2, #12
 8009726:	6002      	str	r2, [r0, #0]
 8009728:	e7f9      	b.n	800971e <_calloc_r+0x12>
 800972a:	462a      	mov	r2, r5
 800972c:	4621      	mov	r1, r4
 800972e:	f7fe fab0 	bl	8007c92 <memset>
 8009732:	e7f5      	b.n	8009720 <_calloc_r+0x14>

08009734 <__ascii_mbtowc>:
 8009734:	b082      	sub	sp, #8
 8009736:	b901      	cbnz	r1, 800973a <__ascii_mbtowc+0x6>
 8009738:	a901      	add	r1, sp, #4
 800973a:	b142      	cbz	r2, 800974e <__ascii_mbtowc+0x1a>
 800973c:	b14b      	cbz	r3, 8009752 <__ascii_mbtowc+0x1e>
 800973e:	7813      	ldrb	r3, [r2, #0]
 8009740:	600b      	str	r3, [r1, #0]
 8009742:	7812      	ldrb	r2, [r2, #0]
 8009744:	1e10      	subs	r0, r2, #0
 8009746:	bf18      	it	ne
 8009748:	2001      	movne	r0, #1
 800974a:	b002      	add	sp, #8
 800974c:	4770      	bx	lr
 800974e:	4610      	mov	r0, r2
 8009750:	e7fb      	b.n	800974a <__ascii_mbtowc+0x16>
 8009752:	f06f 0001 	mvn.w	r0, #1
 8009756:	e7f8      	b.n	800974a <__ascii_mbtowc+0x16>

08009758 <_realloc_r>:
 8009758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800975c:	4680      	mov	r8, r0
 800975e:	4615      	mov	r5, r2
 8009760:	460c      	mov	r4, r1
 8009762:	b921      	cbnz	r1, 800976e <_realloc_r+0x16>
 8009764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009768:	4611      	mov	r1, r2
 800976a:	f7ff b967 	b.w	8008a3c <_malloc_r>
 800976e:	b92a      	cbnz	r2, 800977c <_realloc_r+0x24>
 8009770:	f7ff f8f0 	bl	8008954 <_free_r>
 8009774:	2400      	movs	r4, #0
 8009776:	4620      	mov	r0, r4
 8009778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800977c:	f000 f841 	bl	8009802 <_malloc_usable_size_r>
 8009780:	4285      	cmp	r5, r0
 8009782:	4606      	mov	r6, r0
 8009784:	d802      	bhi.n	800978c <_realloc_r+0x34>
 8009786:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800978a:	d8f4      	bhi.n	8009776 <_realloc_r+0x1e>
 800978c:	4629      	mov	r1, r5
 800978e:	4640      	mov	r0, r8
 8009790:	f7ff f954 	bl	8008a3c <_malloc_r>
 8009794:	4607      	mov	r7, r0
 8009796:	2800      	cmp	r0, #0
 8009798:	d0ec      	beq.n	8009774 <_realloc_r+0x1c>
 800979a:	42b5      	cmp	r5, r6
 800979c:	462a      	mov	r2, r5
 800979e:	4621      	mov	r1, r4
 80097a0:	bf28      	it	cs
 80097a2:	4632      	movcs	r2, r6
 80097a4:	f7ff ff86 	bl	80096b4 <memcpy>
 80097a8:	4621      	mov	r1, r4
 80097aa:	4640      	mov	r0, r8
 80097ac:	f7ff f8d2 	bl	8008954 <_free_r>
 80097b0:	463c      	mov	r4, r7
 80097b2:	e7e0      	b.n	8009776 <_realloc_r+0x1e>

080097b4 <__ascii_wctomb>:
 80097b4:	4603      	mov	r3, r0
 80097b6:	4608      	mov	r0, r1
 80097b8:	b141      	cbz	r1, 80097cc <__ascii_wctomb+0x18>
 80097ba:	2aff      	cmp	r2, #255	@ 0xff
 80097bc:	d904      	bls.n	80097c8 <__ascii_wctomb+0x14>
 80097be:	228a      	movs	r2, #138	@ 0x8a
 80097c0:	601a      	str	r2, [r3, #0]
 80097c2:	f04f 30ff 	mov.w	r0, #4294967295
 80097c6:	4770      	bx	lr
 80097c8:	700a      	strb	r2, [r1, #0]
 80097ca:	2001      	movs	r0, #1
 80097cc:	4770      	bx	lr
	...

080097d0 <fiprintf>:
 80097d0:	b40e      	push	{r1, r2, r3}
 80097d2:	b503      	push	{r0, r1, lr}
 80097d4:	4601      	mov	r1, r0
 80097d6:	ab03      	add	r3, sp, #12
 80097d8:	4805      	ldr	r0, [pc, #20]	@ (80097f0 <fiprintf+0x20>)
 80097da:	f853 2b04 	ldr.w	r2, [r3], #4
 80097de:	6800      	ldr	r0, [r0, #0]
 80097e0:	9301      	str	r3, [sp, #4]
 80097e2:	f000 f83f 	bl	8009864 <_vfiprintf_r>
 80097e6:	b002      	add	sp, #8
 80097e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097ec:	b003      	add	sp, #12
 80097ee:	4770      	bx	lr
 80097f0:	20000018 	.word	0x20000018

080097f4 <abort>:
 80097f4:	b508      	push	{r3, lr}
 80097f6:	2006      	movs	r0, #6
 80097f8:	f000 fa08 	bl	8009c0c <raise>
 80097fc:	2001      	movs	r0, #1
 80097fe:	f7f8 f9f2 	bl	8001be6 <_exit>

08009802 <_malloc_usable_size_r>:
 8009802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009806:	1f18      	subs	r0, r3, #4
 8009808:	2b00      	cmp	r3, #0
 800980a:	bfbc      	itt	lt
 800980c:	580b      	ldrlt	r3, [r1, r0]
 800980e:	18c0      	addlt	r0, r0, r3
 8009810:	4770      	bx	lr

08009812 <__sfputc_r>:
 8009812:	6893      	ldr	r3, [r2, #8]
 8009814:	3b01      	subs	r3, #1
 8009816:	2b00      	cmp	r3, #0
 8009818:	b410      	push	{r4}
 800981a:	6093      	str	r3, [r2, #8]
 800981c:	da08      	bge.n	8009830 <__sfputc_r+0x1e>
 800981e:	6994      	ldr	r4, [r2, #24]
 8009820:	42a3      	cmp	r3, r4
 8009822:	db01      	blt.n	8009828 <__sfputc_r+0x16>
 8009824:	290a      	cmp	r1, #10
 8009826:	d103      	bne.n	8009830 <__sfputc_r+0x1e>
 8009828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800982c:	f000 b932 	b.w	8009a94 <__swbuf_r>
 8009830:	6813      	ldr	r3, [r2, #0]
 8009832:	1c58      	adds	r0, r3, #1
 8009834:	6010      	str	r0, [r2, #0]
 8009836:	7019      	strb	r1, [r3, #0]
 8009838:	4608      	mov	r0, r1
 800983a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800983e:	4770      	bx	lr

08009840 <__sfputs_r>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	4606      	mov	r6, r0
 8009844:	460f      	mov	r7, r1
 8009846:	4614      	mov	r4, r2
 8009848:	18d5      	adds	r5, r2, r3
 800984a:	42ac      	cmp	r4, r5
 800984c:	d101      	bne.n	8009852 <__sfputs_r+0x12>
 800984e:	2000      	movs	r0, #0
 8009850:	e007      	b.n	8009862 <__sfputs_r+0x22>
 8009852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009856:	463a      	mov	r2, r7
 8009858:	4630      	mov	r0, r6
 800985a:	f7ff ffda 	bl	8009812 <__sfputc_r>
 800985e:	1c43      	adds	r3, r0, #1
 8009860:	d1f3      	bne.n	800984a <__sfputs_r+0xa>
 8009862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009864 <_vfiprintf_r>:
 8009864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009868:	460d      	mov	r5, r1
 800986a:	b09d      	sub	sp, #116	@ 0x74
 800986c:	4614      	mov	r4, r2
 800986e:	4698      	mov	r8, r3
 8009870:	4606      	mov	r6, r0
 8009872:	b118      	cbz	r0, 800987c <_vfiprintf_r+0x18>
 8009874:	6a03      	ldr	r3, [r0, #32]
 8009876:	b90b      	cbnz	r3, 800987c <_vfiprintf_r+0x18>
 8009878:	f7fe f972 	bl	8007b60 <__sinit>
 800987c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800987e:	07d9      	lsls	r1, r3, #31
 8009880:	d405      	bmi.n	800988e <_vfiprintf_r+0x2a>
 8009882:	89ab      	ldrh	r3, [r5, #12]
 8009884:	059a      	lsls	r2, r3, #22
 8009886:	d402      	bmi.n	800988e <_vfiprintf_r+0x2a>
 8009888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800988a:	f7fe fa80 	bl	8007d8e <__retarget_lock_acquire_recursive>
 800988e:	89ab      	ldrh	r3, [r5, #12]
 8009890:	071b      	lsls	r3, r3, #28
 8009892:	d501      	bpl.n	8009898 <_vfiprintf_r+0x34>
 8009894:	692b      	ldr	r3, [r5, #16]
 8009896:	b99b      	cbnz	r3, 80098c0 <_vfiprintf_r+0x5c>
 8009898:	4629      	mov	r1, r5
 800989a:	4630      	mov	r0, r6
 800989c:	f000 f938 	bl	8009b10 <__swsetup_r>
 80098a0:	b170      	cbz	r0, 80098c0 <_vfiprintf_r+0x5c>
 80098a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098a4:	07dc      	lsls	r4, r3, #31
 80098a6:	d504      	bpl.n	80098b2 <_vfiprintf_r+0x4e>
 80098a8:	f04f 30ff 	mov.w	r0, #4294967295
 80098ac:	b01d      	add	sp, #116	@ 0x74
 80098ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b2:	89ab      	ldrh	r3, [r5, #12]
 80098b4:	0598      	lsls	r0, r3, #22
 80098b6:	d4f7      	bmi.n	80098a8 <_vfiprintf_r+0x44>
 80098b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098ba:	f7fe fa69 	bl	8007d90 <__retarget_lock_release_recursive>
 80098be:	e7f3      	b.n	80098a8 <_vfiprintf_r+0x44>
 80098c0:	2300      	movs	r3, #0
 80098c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80098c4:	2320      	movs	r3, #32
 80098c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80098ce:	2330      	movs	r3, #48	@ 0x30
 80098d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009a80 <_vfiprintf_r+0x21c>
 80098d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098d8:	f04f 0901 	mov.w	r9, #1
 80098dc:	4623      	mov	r3, r4
 80098de:	469a      	mov	sl, r3
 80098e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098e4:	b10a      	cbz	r2, 80098ea <_vfiprintf_r+0x86>
 80098e6:	2a25      	cmp	r2, #37	@ 0x25
 80098e8:	d1f9      	bne.n	80098de <_vfiprintf_r+0x7a>
 80098ea:	ebba 0b04 	subs.w	fp, sl, r4
 80098ee:	d00b      	beq.n	8009908 <_vfiprintf_r+0xa4>
 80098f0:	465b      	mov	r3, fp
 80098f2:	4622      	mov	r2, r4
 80098f4:	4629      	mov	r1, r5
 80098f6:	4630      	mov	r0, r6
 80098f8:	f7ff ffa2 	bl	8009840 <__sfputs_r>
 80098fc:	3001      	adds	r0, #1
 80098fe:	f000 80a7 	beq.w	8009a50 <_vfiprintf_r+0x1ec>
 8009902:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009904:	445a      	add	r2, fp
 8009906:	9209      	str	r2, [sp, #36]	@ 0x24
 8009908:	f89a 3000 	ldrb.w	r3, [sl]
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 809f 	beq.w	8009a50 <_vfiprintf_r+0x1ec>
 8009912:	2300      	movs	r3, #0
 8009914:	f04f 32ff 	mov.w	r2, #4294967295
 8009918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800991c:	f10a 0a01 	add.w	sl, sl, #1
 8009920:	9304      	str	r3, [sp, #16]
 8009922:	9307      	str	r3, [sp, #28]
 8009924:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009928:	931a      	str	r3, [sp, #104]	@ 0x68
 800992a:	4654      	mov	r4, sl
 800992c:	2205      	movs	r2, #5
 800992e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009932:	4853      	ldr	r0, [pc, #332]	@ (8009a80 <_vfiprintf_r+0x21c>)
 8009934:	f7f6 fc84 	bl	8000240 <memchr>
 8009938:	9a04      	ldr	r2, [sp, #16]
 800993a:	b9d8      	cbnz	r0, 8009974 <_vfiprintf_r+0x110>
 800993c:	06d1      	lsls	r1, r2, #27
 800993e:	bf44      	itt	mi
 8009940:	2320      	movmi	r3, #32
 8009942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009946:	0713      	lsls	r3, r2, #28
 8009948:	bf44      	itt	mi
 800994a:	232b      	movmi	r3, #43	@ 0x2b
 800994c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009950:	f89a 3000 	ldrb.w	r3, [sl]
 8009954:	2b2a      	cmp	r3, #42	@ 0x2a
 8009956:	d015      	beq.n	8009984 <_vfiprintf_r+0x120>
 8009958:	9a07      	ldr	r2, [sp, #28]
 800995a:	4654      	mov	r4, sl
 800995c:	2000      	movs	r0, #0
 800995e:	f04f 0c0a 	mov.w	ip, #10
 8009962:	4621      	mov	r1, r4
 8009964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009968:	3b30      	subs	r3, #48	@ 0x30
 800996a:	2b09      	cmp	r3, #9
 800996c:	d94b      	bls.n	8009a06 <_vfiprintf_r+0x1a2>
 800996e:	b1b0      	cbz	r0, 800999e <_vfiprintf_r+0x13a>
 8009970:	9207      	str	r2, [sp, #28]
 8009972:	e014      	b.n	800999e <_vfiprintf_r+0x13a>
 8009974:	eba0 0308 	sub.w	r3, r0, r8
 8009978:	fa09 f303 	lsl.w	r3, r9, r3
 800997c:	4313      	orrs	r3, r2
 800997e:	9304      	str	r3, [sp, #16]
 8009980:	46a2      	mov	sl, r4
 8009982:	e7d2      	b.n	800992a <_vfiprintf_r+0xc6>
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	1d19      	adds	r1, r3, #4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	9103      	str	r1, [sp, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	bfbb      	ittet	lt
 8009990:	425b      	neglt	r3, r3
 8009992:	f042 0202 	orrlt.w	r2, r2, #2
 8009996:	9307      	strge	r3, [sp, #28]
 8009998:	9307      	strlt	r3, [sp, #28]
 800999a:	bfb8      	it	lt
 800999c:	9204      	strlt	r2, [sp, #16]
 800999e:	7823      	ldrb	r3, [r4, #0]
 80099a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80099a2:	d10a      	bne.n	80099ba <_vfiprintf_r+0x156>
 80099a4:	7863      	ldrb	r3, [r4, #1]
 80099a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80099a8:	d132      	bne.n	8009a10 <_vfiprintf_r+0x1ac>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	1d1a      	adds	r2, r3, #4
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	9203      	str	r2, [sp, #12]
 80099b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099b6:	3402      	adds	r4, #2
 80099b8:	9305      	str	r3, [sp, #20]
 80099ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a90 <_vfiprintf_r+0x22c>
 80099be:	7821      	ldrb	r1, [r4, #0]
 80099c0:	2203      	movs	r2, #3
 80099c2:	4650      	mov	r0, sl
 80099c4:	f7f6 fc3c 	bl	8000240 <memchr>
 80099c8:	b138      	cbz	r0, 80099da <_vfiprintf_r+0x176>
 80099ca:	9b04      	ldr	r3, [sp, #16]
 80099cc:	eba0 000a 	sub.w	r0, r0, sl
 80099d0:	2240      	movs	r2, #64	@ 0x40
 80099d2:	4082      	lsls	r2, r0
 80099d4:	4313      	orrs	r3, r2
 80099d6:	3401      	adds	r4, #1
 80099d8:	9304      	str	r3, [sp, #16]
 80099da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099de:	4829      	ldr	r0, [pc, #164]	@ (8009a84 <_vfiprintf_r+0x220>)
 80099e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099e4:	2206      	movs	r2, #6
 80099e6:	f7f6 fc2b 	bl	8000240 <memchr>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d03f      	beq.n	8009a6e <_vfiprintf_r+0x20a>
 80099ee:	4b26      	ldr	r3, [pc, #152]	@ (8009a88 <_vfiprintf_r+0x224>)
 80099f0:	bb1b      	cbnz	r3, 8009a3a <_vfiprintf_r+0x1d6>
 80099f2:	9b03      	ldr	r3, [sp, #12]
 80099f4:	3307      	adds	r3, #7
 80099f6:	f023 0307 	bic.w	r3, r3, #7
 80099fa:	3308      	adds	r3, #8
 80099fc:	9303      	str	r3, [sp, #12]
 80099fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a00:	443b      	add	r3, r7
 8009a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a04:	e76a      	b.n	80098dc <_vfiprintf_r+0x78>
 8009a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	2001      	movs	r0, #1
 8009a0e:	e7a8      	b.n	8009962 <_vfiprintf_r+0xfe>
 8009a10:	2300      	movs	r3, #0
 8009a12:	3401      	adds	r4, #1
 8009a14:	9305      	str	r3, [sp, #20]
 8009a16:	4619      	mov	r1, r3
 8009a18:	f04f 0c0a 	mov.w	ip, #10
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a22:	3a30      	subs	r2, #48	@ 0x30
 8009a24:	2a09      	cmp	r2, #9
 8009a26:	d903      	bls.n	8009a30 <_vfiprintf_r+0x1cc>
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d0c6      	beq.n	80099ba <_vfiprintf_r+0x156>
 8009a2c:	9105      	str	r1, [sp, #20]
 8009a2e:	e7c4      	b.n	80099ba <_vfiprintf_r+0x156>
 8009a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a34:	4604      	mov	r4, r0
 8009a36:	2301      	movs	r3, #1
 8009a38:	e7f0      	b.n	8009a1c <_vfiprintf_r+0x1b8>
 8009a3a:	ab03      	add	r3, sp, #12
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	462a      	mov	r2, r5
 8009a40:	4b12      	ldr	r3, [pc, #72]	@ (8009a8c <_vfiprintf_r+0x228>)
 8009a42:	a904      	add	r1, sp, #16
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7fd fc57 	bl	80072f8 <_printf_float>
 8009a4a:	4607      	mov	r7, r0
 8009a4c:	1c78      	adds	r0, r7, #1
 8009a4e:	d1d6      	bne.n	80099fe <_vfiprintf_r+0x19a>
 8009a50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a52:	07d9      	lsls	r1, r3, #31
 8009a54:	d405      	bmi.n	8009a62 <_vfiprintf_r+0x1fe>
 8009a56:	89ab      	ldrh	r3, [r5, #12]
 8009a58:	059a      	lsls	r2, r3, #22
 8009a5a:	d402      	bmi.n	8009a62 <_vfiprintf_r+0x1fe>
 8009a5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a5e:	f7fe f997 	bl	8007d90 <__retarget_lock_release_recursive>
 8009a62:	89ab      	ldrh	r3, [r5, #12]
 8009a64:	065b      	lsls	r3, r3, #25
 8009a66:	f53f af1f 	bmi.w	80098a8 <_vfiprintf_r+0x44>
 8009a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a6c:	e71e      	b.n	80098ac <_vfiprintf_r+0x48>
 8009a6e:	ab03      	add	r3, sp, #12
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	462a      	mov	r2, r5
 8009a74:	4b05      	ldr	r3, [pc, #20]	@ (8009a8c <_vfiprintf_r+0x228>)
 8009a76:	a904      	add	r1, sp, #16
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f7fd fec5 	bl	8007808 <_printf_i>
 8009a7e:	e7e4      	b.n	8009a4a <_vfiprintf_r+0x1e6>
 8009a80:	0800bc38 	.word	0x0800bc38
 8009a84:	0800bc42 	.word	0x0800bc42
 8009a88:	080072f9 	.word	0x080072f9
 8009a8c:	08009841 	.word	0x08009841
 8009a90:	0800bc3e 	.word	0x0800bc3e

08009a94 <__swbuf_r>:
 8009a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a96:	460e      	mov	r6, r1
 8009a98:	4614      	mov	r4, r2
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	b118      	cbz	r0, 8009aa6 <__swbuf_r+0x12>
 8009a9e:	6a03      	ldr	r3, [r0, #32]
 8009aa0:	b90b      	cbnz	r3, 8009aa6 <__swbuf_r+0x12>
 8009aa2:	f7fe f85d 	bl	8007b60 <__sinit>
 8009aa6:	69a3      	ldr	r3, [r4, #24]
 8009aa8:	60a3      	str	r3, [r4, #8]
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	071a      	lsls	r2, r3, #28
 8009aae:	d501      	bpl.n	8009ab4 <__swbuf_r+0x20>
 8009ab0:	6923      	ldr	r3, [r4, #16]
 8009ab2:	b943      	cbnz	r3, 8009ac6 <__swbuf_r+0x32>
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f000 f82a 	bl	8009b10 <__swsetup_r>
 8009abc:	b118      	cbz	r0, 8009ac6 <__swbuf_r+0x32>
 8009abe:	f04f 37ff 	mov.w	r7, #4294967295
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	6922      	ldr	r2, [r4, #16]
 8009aca:	1a98      	subs	r0, r3, r2
 8009acc:	6963      	ldr	r3, [r4, #20]
 8009ace:	b2f6      	uxtb	r6, r6
 8009ad0:	4283      	cmp	r3, r0
 8009ad2:	4637      	mov	r7, r6
 8009ad4:	dc05      	bgt.n	8009ae2 <__swbuf_r+0x4e>
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	4628      	mov	r0, r5
 8009ada:	f7ff fd99 	bl	8009610 <_fflush_r>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d1ed      	bne.n	8009abe <__swbuf_r+0x2a>
 8009ae2:	68a3      	ldr	r3, [r4, #8]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	60a3      	str	r3, [r4, #8]
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	6022      	str	r2, [r4, #0]
 8009aee:	701e      	strb	r6, [r3, #0]
 8009af0:	6962      	ldr	r2, [r4, #20]
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d004      	beq.n	8009b02 <__swbuf_r+0x6e>
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	07db      	lsls	r3, r3, #31
 8009afc:	d5e1      	bpl.n	8009ac2 <__swbuf_r+0x2e>
 8009afe:	2e0a      	cmp	r6, #10
 8009b00:	d1df      	bne.n	8009ac2 <__swbuf_r+0x2e>
 8009b02:	4621      	mov	r1, r4
 8009b04:	4628      	mov	r0, r5
 8009b06:	f7ff fd83 	bl	8009610 <_fflush_r>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d0d9      	beq.n	8009ac2 <__swbuf_r+0x2e>
 8009b0e:	e7d6      	b.n	8009abe <__swbuf_r+0x2a>

08009b10 <__swsetup_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4b29      	ldr	r3, [pc, #164]	@ (8009bb8 <__swsetup_r+0xa8>)
 8009b14:	4605      	mov	r5, r0
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	460c      	mov	r4, r1
 8009b1a:	b118      	cbz	r0, 8009b24 <__swsetup_r+0x14>
 8009b1c:	6a03      	ldr	r3, [r0, #32]
 8009b1e:	b90b      	cbnz	r3, 8009b24 <__swsetup_r+0x14>
 8009b20:	f7fe f81e 	bl	8007b60 <__sinit>
 8009b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b28:	0719      	lsls	r1, r3, #28
 8009b2a:	d422      	bmi.n	8009b72 <__swsetup_r+0x62>
 8009b2c:	06da      	lsls	r2, r3, #27
 8009b2e:	d407      	bmi.n	8009b40 <__swsetup_r+0x30>
 8009b30:	2209      	movs	r2, #9
 8009b32:	602a      	str	r2, [r5, #0]
 8009b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3e:	e033      	b.n	8009ba8 <__swsetup_r+0x98>
 8009b40:	0758      	lsls	r0, r3, #29
 8009b42:	d512      	bpl.n	8009b6a <__swsetup_r+0x5a>
 8009b44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b46:	b141      	cbz	r1, 8009b5a <__swsetup_r+0x4a>
 8009b48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b4c:	4299      	cmp	r1, r3
 8009b4e:	d002      	beq.n	8009b56 <__swsetup_r+0x46>
 8009b50:	4628      	mov	r0, r5
 8009b52:	f7fe feff 	bl	8008954 <_free_r>
 8009b56:	2300      	movs	r3, #0
 8009b58:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b5a:	89a3      	ldrh	r3, [r4, #12]
 8009b5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b60:	81a3      	strh	r3, [r4, #12]
 8009b62:	2300      	movs	r3, #0
 8009b64:	6063      	str	r3, [r4, #4]
 8009b66:	6923      	ldr	r3, [r4, #16]
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	f043 0308 	orr.w	r3, r3, #8
 8009b70:	81a3      	strh	r3, [r4, #12]
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	b94b      	cbnz	r3, 8009b8a <__swsetup_r+0x7a>
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b80:	d003      	beq.n	8009b8a <__swsetup_r+0x7a>
 8009b82:	4621      	mov	r1, r4
 8009b84:	4628      	mov	r0, r5
 8009b86:	f000 f883 	bl	8009c90 <__smakebuf_r>
 8009b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b8e:	f013 0201 	ands.w	r2, r3, #1
 8009b92:	d00a      	beq.n	8009baa <__swsetup_r+0x9a>
 8009b94:	2200      	movs	r2, #0
 8009b96:	60a2      	str	r2, [r4, #8]
 8009b98:	6962      	ldr	r2, [r4, #20]
 8009b9a:	4252      	negs	r2, r2
 8009b9c:	61a2      	str	r2, [r4, #24]
 8009b9e:	6922      	ldr	r2, [r4, #16]
 8009ba0:	b942      	cbnz	r2, 8009bb4 <__swsetup_r+0xa4>
 8009ba2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ba6:	d1c5      	bne.n	8009b34 <__swsetup_r+0x24>
 8009ba8:	bd38      	pop	{r3, r4, r5, pc}
 8009baa:	0799      	lsls	r1, r3, #30
 8009bac:	bf58      	it	pl
 8009bae:	6962      	ldrpl	r2, [r4, #20]
 8009bb0:	60a2      	str	r2, [r4, #8]
 8009bb2:	e7f4      	b.n	8009b9e <__swsetup_r+0x8e>
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	e7f7      	b.n	8009ba8 <__swsetup_r+0x98>
 8009bb8:	20000018 	.word	0x20000018

08009bbc <_raise_r>:
 8009bbc:	291f      	cmp	r1, #31
 8009bbe:	b538      	push	{r3, r4, r5, lr}
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	d904      	bls.n	8009bd0 <_raise_r+0x14>
 8009bc6:	2316      	movs	r3, #22
 8009bc8:	6003      	str	r3, [r0, #0]
 8009bca:	f04f 30ff 	mov.w	r0, #4294967295
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009bd2:	b112      	cbz	r2, 8009bda <_raise_r+0x1e>
 8009bd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bd8:	b94b      	cbnz	r3, 8009bee <_raise_r+0x32>
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f000 f830 	bl	8009c40 <_getpid_r>
 8009be0:	4622      	mov	r2, r4
 8009be2:	4601      	mov	r1, r0
 8009be4:	4628      	mov	r0, r5
 8009be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bea:	f000 b817 	b.w	8009c1c <_kill_r>
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d00a      	beq.n	8009c08 <_raise_r+0x4c>
 8009bf2:	1c59      	adds	r1, r3, #1
 8009bf4:	d103      	bne.n	8009bfe <_raise_r+0x42>
 8009bf6:	2316      	movs	r3, #22
 8009bf8:	6003      	str	r3, [r0, #0]
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	e7e7      	b.n	8009bce <_raise_r+0x12>
 8009bfe:	2100      	movs	r1, #0
 8009c00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c04:	4620      	mov	r0, r4
 8009c06:	4798      	blx	r3
 8009c08:	2000      	movs	r0, #0
 8009c0a:	e7e0      	b.n	8009bce <_raise_r+0x12>

08009c0c <raise>:
 8009c0c:	4b02      	ldr	r3, [pc, #8]	@ (8009c18 <raise+0xc>)
 8009c0e:	4601      	mov	r1, r0
 8009c10:	6818      	ldr	r0, [r3, #0]
 8009c12:	f7ff bfd3 	b.w	8009bbc <_raise_r>
 8009c16:	bf00      	nop
 8009c18:	20000018 	.word	0x20000018

08009c1c <_kill_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4d07      	ldr	r5, [pc, #28]	@ (8009c3c <_kill_r+0x20>)
 8009c20:	2300      	movs	r3, #0
 8009c22:	4604      	mov	r4, r0
 8009c24:	4608      	mov	r0, r1
 8009c26:	4611      	mov	r1, r2
 8009c28:	602b      	str	r3, [r5, #0]
 8009c2a:	f7f7 ffcc 	bl	8001bc6 <_kill>
 8009c2e:	1c43      	adds	r3, r0, #1
 8009c30:	d102      	bne.n	8009c38 <_kill_r+0x1c>
 8009c32:	682b      	ldr	r3, [r5, #0]
 8009c34:	b103      	cbz	r3, 8009c38 <_kill_r+0x1c>
 8009c36:	6023      	str	r3, [r4, #0]
 8009c38:	bd38      	pop	{r3, r4, r5, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20000eb4 	.word	0x20000eb4

08009c40 <_getpid_r>:
 8009c40:	f7f7 bfb9 	b.w	8001bb6 <_getpid>

08009c44 <__swhatbuf_r>:
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	460c      	mov	r4, r1
 8009c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c4c:	2900      	cmp	r1, #0
 8009c4e:	b096      	sub	sp, #88	@ 0x58
 8009c50:	4615      	mov	r5, r2
 8009c52:	461e      	mov	r6, r3
 8009c54:	da0d      	bge.n	8009c72 <__swhatbuf_r+0x2e>
 8009c56:	89a3      	ldrh	r3, [r4, #12]
 8009c58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c5c:	f04f 0100 	mov.w	r1, #0
 8009c60:	bf14      	ite	ne
 8009c62:	2340      	movne	r3, #64	@ 0x40
 8009c64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c68:	2000      	movs	r0, #0
 8009c6a:	6031      	str	r1, [r6, #0]
 8009c6c:	602b      	str	r3, [r5, #0]
 8009c6e:	b016      	add	sp, #88	@ 0x58
 8009c70:	bd70      	pop	{r4, r5, r6, pc}
 8009c72:	466a      	mov	r2, sp
 8009c74:	f000 f848 	bl	8009d08 <_fstat_r>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	dbec      	blt.n	8009c56 <__swhatbuf_r+0x12>
 8009c7c:	9901      	ldr	r1, [sp, #4]
 8009c7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c86:	4259      	negs	r1, r3
 8009c88:	4159      	adcs	r1, r3
 8009c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c8e:	e7eb      	b.n	8009c68 <__swhatbuf_r+0x24>

08009c90 <__smakebuf_r>:
 8009c90:	898b      	ldrh	r3, [r1, #12]
 8009c92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c94:	079d      	lsls	r5, r3, #30
 8009c96:	4606      	mov	r6, r0
 8009c98:	460c      	mov	r4, r1
 8009c9a:	d507      	bpl.n	8009cac <__smakebuf_r+0x1c>
 8009c9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	6123      	str	r3, [r4, #16]
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	6163      	str	r3, [r4, #20]
 8009ca8:	b003      	add	sp, #12
 8009caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cac:	ab01      	add	r3, sp, #4
 8009cae:	466a      	mov	r2, sp
 8009cb0:	f7ff ffc8 	bl	8009c44 <__swhatbuf_r>
 8009cb4:	9f00      	ldr	r7, [sp, #0]
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	4639      	mov	r1, r7
 8009cba:	4630      	mov	r0, r6
 8009cbc:	f7fe febe 	bl	8008a3c <_malloc_r>
 8009cc0:	b948      	cbnz	r0, 8009cd6 <__smakebuf_r+0x46>
 8009cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cc6:	059a      	lsls	r2, r3, #22
 8009cc8:	d4ee      	bmi.n	8009ca8 <__smakebuf_r+0x18>
 8009cca:	f023 0303 	bic.w	r3, r3, #3
 8009cce:	f043 0302 	orr.w	r3, r3, #2
 8009cd2:	81a3      	strh	r3, [r4, #12]
 8009cd4:	e7e2      	b.n	8009c9c <__smakebuf_r+0xc>
 8009cd6:	89a3      	ldrh	r3, [r4, #12]
 8009cd8:	6020      	str	r0, [r4, #0]
 8009cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cde:	81a3      	strh	r3, [r4, #12]
 8009ce0:	9b01      	ldr	r3, [sp, #4]
 8009ce2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ce6:	b15b      	cbz	r3, 8009d00 <__smakebuf_r+0x70>
 8009ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cec:	4630      	mov	r0, r6
 8009cee:	f000 f81d 	bl	8009d2c <_isatty_r>
 8009cf2:	b128      	cbz	r0, 8009d00 <__smakebuf_r+0x70>
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	f023 0303 	bic.w	r3, r3, #3
 8009cfa:	f043 0301 	orr.w	r3, r3, #1
 8009cfe:	81a3      	strh	r3, [r4, #12]
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	431d      	orrs	r5, r3
 8009d04:	81a5      	strh	r5, [r4, #12]
 8009d06:	e7cf      	b.n	8009ca8 <__smakebuf_r+0x18>

08009d08 <_fstat_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4d07      	ldr	r5, [pc, #28]	@ (8009d28 <_fstat_r+0x20>)
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	4604      	mov	r4, r0
 8009d10:	4608      	mov	r0, r1
 8009d12:	4611      	mov	r1, r2
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	f7f7 ffb6 	bl	8001c86 <_fstat>
 8009d1a:	1c43      	adds	r3, r0, #1
 8009d1c:	d102      	bne.n	8009d24 <_fstat_r+0x1c>
 8009d1e:	682b      	ldr	r3, [r5, #0]
 8009d20:	b103      	cbz	r3, 8009d24 <_fstat_r+0x1c>
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	bd38      	pop	{r3, r4, r5, pc}
 8009d26:	bf00      	nop
 8009d28:	20000eb4 	.word	0x20000eb4

08009d2c <_isatty_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d06      	ldr	r5, [pc, #24]	@ (8009d48 <_isatty_r+0x1c>)
 8009d30:	2300      	movs	r3, #0
 8009d32:	4604      	mov	r4, r0
 8009d34:	4608      	mov	r0, r1
 8009d36:	602b      	str	r3, [r5, #0]
 8009d38:	f7f7 ffb5 	bl	8001ca6 <_isatty>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	d102      	bne.n	8009d46 <_isatty_r+0x1a>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	b103      	cbz	r3, 8009d46 <_isatty_r+0x1a>
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	20000eb4 	.word	0x20000eb4

08009d4c <_init>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	bf00      	nop
 8009d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d52:	bc08      	pop	{r3}
 8009d54:	469e      	mov	lr, r3
 8009d56:	4770      	bx	lr

08009d58 <_fini>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	bf00      	nop
 8009d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5e:	bc08      	pop	{r3}
 8009d60:	469e      	mov	lr, r3
 8009d62:	4770      	bx	lr
