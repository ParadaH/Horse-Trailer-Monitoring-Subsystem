
Horse-Trailer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08009cb8  08009cb8  0000acb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0a0  0800a0a0  0000c314  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0a0  0800a0a0  0000b0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0a8  0800a0a8  0000c314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a0a8  0800a0a8  0000b0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800a0b0  0800a0b0  0000b0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a0b8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  0800a28c  0000c1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  0800a32c  0000c274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000c2c  20000314  0800a3cc  0000c314  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000f40  0800a3cc  0000cf40  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000c314  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001be39  00000000  00000000  0000c342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bb6  00000000  00000000  0002817b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013d0  00000000  00000000  0002bd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f47  00000000  00000000  0002d108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e859  00000000  00000000  0002e04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ac5a  00000000  00000000  0005c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00109529  00000000  00000000  00077502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00180a2b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006218  00000000  00000000  00180a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006e  00000000  00000000  00186c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	08009c9c 	.word	0x08009c9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	08009c9c 	.word	0x08009c9c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <_ZN20DFRobot_OxygenSensorC1EP19__I2C_HandleTypeDef>:
 * @date 2022-08-02
 * @url https://github.com/DFRobot/DFRobot_OxygenSensor
 */
#include "DFRobot_OxygenSensor.h"

DFRobot_OxygenSensor::DFRobot_OxygenSensor(I2C_HandleTypeDef *pI2C) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f04f 0200 	mov.w	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	330c      	adds	r3, #12
 80005f6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f007 faf0 	bl	8007be2 <memset>
	this->_pI2C = pI2C;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	601a      	str	r2, [r3, #0]
}
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <_ZN20DFRobot_OxygenSensorD1Ev>:

DFRobot_OxygenSensor::~DFRobot_OxygenSensor() {
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
	this->_pI2C = NULL;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
}
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <_ZN20DFRobot_OxygenSensor5beginEh>:

bool DFRobot_OxygenSensor::begin(uint8_t addr) {
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	460b      	mov	r3, r1
 8000638:	70fb      	strb	r3, [r7, #3]
	this->_addr = addr;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	78fa      	ldrb	r2, [r7, #3]
 800063e:	711a      	strb	r2, [r3, #4]
	if (HAL_I2C_IsDeviceReady(_pI2C, _addr << 1, 3, HAL_MAX_DELAY) == HAL_OK) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	b299      	uxth	r1, r3
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	2203      	movs	r2, #3
 8000652:	f003 f8e9 	bl	8003828 <HAL_I2C_IsDeviceReady>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	bf0c      	ite	eq
 800065c:	2301      	moveq	r3, #1
 800065e:	2300      	movne	r3, #0
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <_ZN20DFRobot_OxygenSensor5beginEh+0x3c>
		return true;
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <_ZN20DFRobot_OxygenSensor5beginEh+0x3e>
	}
	return false;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <_ZN5SCD30C1EP19__I2C_HandleTypeDef>:
    THE SOFTWARE.
*/

#include "SCD30.h"

SCD30::SCD30(I2C_HandleTypeDef *hi2c) {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
    this->_hi2c = hi2c;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	601a      	str	r2, [r3, #0]
}
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_ZN5SCD305beginEv>:

bool SCD30::begin() {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
    if (HAL_I2C_IsDeviceReady(_hi2c, SCD30_I2C_ADDRESS << 1, 3, HAL_MAX_DELAY) == HAL_OK) {
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	2203      	movs	r2, #3
 80006a4:	21c2      	movs	r1, #194	@ 0xc2
 80006a6:	f003 f8bf 	bl	8003828 <HAL_I2C_IsDeviceReady>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf0c      	ite	eq
 80006b0:	2301      	moveq	r3, #1
 80006b2:	2300      	movne	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d005      	beq.n	80006c6 <_ZN5SCD305beginEv+0x34>
        setAutoSelfCalibration(true);
 80006ba:	2101      	movs	r1, #1
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f000 f807 	bl	80006d0 <_ZN5SCD3022setAutoSelfCalibrationEb>
        return true;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e000      	b.n	80006c8 <_ZN5SCD305beginEv+0x36>
    }
    return false;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_ZN5SCD3022setAutoSelfCalibrationEb>:

bool SCD30::isAvailable() {
    return readRegister(SCD30_GET_DATA_READY);
}

void SCD30::setAutoSelfCalibration(bool enable) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
    writeCommandWithArguments(SCD30_AUTOMATIC_SELF_CALIBRATION, enable ? 1 : 0);
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <_ZN5SCD3022setAutoSelfCalibrationEb+0x16>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <_ZN5SCD3022setAutoSelfCalibrationEb+0x18>
 80006e6:	2300      	movs	r3, #0
 80006e8:	461a      	mov	r2, r3
 80006ea:	f245 3106 	movw	r1, #21254	@ 0x5306
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f822 	bl	8000738 <_ZN5SCD3025writeCommandWithArgumentsEtt>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <_ZN5SCD3022setMeasurementIntervalEt>:

void SCD30::setMeasurementInterval(uint16_t interval) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	807b      	strh	r3, [r7, #2]
    writeCommandWithArguments(SCD30_SET_MEASUREMENT_INTERVAL, interval);
 8000708:	887b      	ldrh	r3, [r7, #2]
 800070a:	461a      	mov	r2, r3
 800070c:	f44f 418c 	mov.w	r1, #17920	@ 0x4600
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 f811 	bl	8000738 <_ZN5SCD3025writeCommandWithArgumentsEtt>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <_ZN5SCD3024startPeriodicMeasurementEv>:

void SCD30::startPeriodicMeasurement() {
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
    writeCommandWithArguments(SCD30_CONTINUOUS_MEASUREMENT, 0x0000);
 8000726:	2200      	movs	r2, #0
 8000728:	2110      	movs	r1, #16
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 f804 	bl	8000738 <_ZN5SCD3025writeCommandWithArgumentsEtt>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <_ZN5SCD3025writeCommandWithArgumentsEtt>:
void SCD30::writeCommand(uint16_t command) {
    uint8_t buf[2] = {static_cast<uint8_t>(command >> 8), static_cast<uint8_t>(command & 0xFF)};
    HAL_I2C_Master_Transmit(_hi2c, SCD30_I2C_ADDRESS << 1, buf, 2, HAL_MAX_DELAY);
}

void SCD30::writeCommandWithArguments(uint16_t command, uint16_t arguments) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af02      	add	r7, sp, #8
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	807b      	strh	r3, [r7, #2]
 8000744:	4613      	mov	r3, r2
 8000746:	803b      	strh	r3, [r7, #0]
    uint8_t buf[5] = {
        static_cast<uint8_t>(command >> 8),
 8000748:	887b      	ldrh	r3, [r7, #2]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
        static_cast<uint8_t>(command & 0xFF),
        static_cast<uint8_t>(arguments >> 8),
        static_cast<uint8_t>(arguments & 0xFF),
        calculateCrc(reinterpret_cast<uint8_t *>(&arguments), 2)
    };
 800074e:	b2db      	uxtb	r3, r3
 8000750:	723b      	strb	r3, [r7, #8]
 8000752:	887b      	ldrh	r3, [r7, #2]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	727b      	strb	r3, [r7, #9]
        static_cast<uint8_t>(arguments >> 8),
 8000758:	883b      	ldrh	r3, [r7, #0]
 800075a:	0a1b      	lsrs	r3, r3, #8
 800075c:	b29b      	uxth	r3, r3
    };
 800075e:	b2db      	uxtb	r3, r3
 8000760:	72bb      	strb	r3, [r7, #10]
 8000762:	883b      	ldrh	r3, [r7, #0]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	72fb      	strb	r3, [r7, #11]
        calculateCrc(reinterpret_cast<uint8_t *>(&arguments), 2)
 8000768:	463b      	mov	r3, r7
 800076a:	2202      	movs	r2, #2
 800076c:	4619      	mov	r1, r3
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f811 	bl	8000796 <_ZN5SCD3012calculateCrcEPhh>
 8000774:	4603      	mov	r3, r0
    };
 8000776:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(_hi2c, SCD30_I2C_ADDRESS << 1, buf, 5, HAL_MAX_DELAY);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6818      	ldr	r0, [r3, #0]
 800077c:	f107 0208 	add.w	r2, r7, #8
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2305      	movs	r3, #5
 8000788:	21c2      	movs	r1, #194	@ 0xc2
 800078a:	f002 ff35 	bl	80035f8 <HAL_I2C_Master_Transmit>
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <_ZN5SCD3012calculateCrcEPhh>:
    writeCommand(address);
    HAL_I2C_Master_Receive(_hi2c, SCD30_I2C_ADDRESS << 1, buf, 2, HAL_MAX_DELAY);
    return (buf[0] << 8) | buf[1];
}

uint8_t SCD30::calculateCrc(uint8_t *data, uint8_t len) {
 8000796:	b480      	push	{r7}
 8000798:	b087      	sub	sp, #28
 800079a:	af00      	add	r7, sp, #0
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	4613      	mov	r3, r2
 80007a2:	71fb      	strb	r3, [r7, #7]
    uint8_t crc = 0xFF;
 80007a4:	23ff      	movs	r3, #255	@ 0xff
 80007a6:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < len; i++) {
 80007a8:	2300      	movs	r3, #0
 80007aa:	75bb      	strb	r3, [r7, #22]
 80007ac:	e022      	b.n	80007f4 <_ZN5SCD3012calculateCrcEPhh+0x5e>
        crc ^= data[i];
 80007ae:	7dbb      	ldrb	r3, [r7, #22]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	4413      	add	r3, r2
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	7dfb      	ldrb	r3, [r7, #23]
 80007b8:	4053      	eors	r3, r2
 80007ba:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) {
 80007bc:	2300      	movs	r3, #0
 80007be:	757b      	strb	r3, [r7, #21]
 80007c0:	e012      	b.n	80007e8 <_ZN5SCD3012calculateCrcEPhh+0x52>
            crc = (crc & 0x80) ? (crc << 1) ^ SCD30_POLYNOMIAL : (crc << 1);
 80007c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	da07      	bge.n	80007da <_ZN5SCD3012calculateCrcEPhh+0x44>
 80007ca:	7dfb      	ldrb	r3, [r7, #23]
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	e002      	b.n	80007e0 <_ZN5SCD3012calculateCrcEPhh+0x4a>
 80007da:	7dfb      	ldrb	r3, [r7, #23]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) {
 80007e2:	7d7b      	ldrb	r3, [r7, #21]
 80007e4:	3301      	adds	r3, #1
 80007e6:	757b      	strb	r3, [r7, #21]
 80007e8:	7d7b      	ldrb	r3, [r7, #21]
 80007ea:	2b07      	cmp	r3, #7
 80007ec:	d9e9      	bls.n	80007c2 <_ZN5SCD3012calculateCrcEPhh+0x2c>
    for (uint8_t i = 0; i < len; i++) {
 80007ee:	7dbb      	ldrb	r3, [r7, #22]
 80007f0:	3301      	adds	r3, #1
 80007f2:	75bb      	strb	r3, [r7, #22]
 80007f4:	7dba      	ldrb	r2, [r7, #22]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d3d8      	bcc.n	80007ae <_ZN5SCD3012calculateCrcEPhh+0x18>
        }
    }
    return crc;
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	371c      	adds	r7, #28
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <_Z11measure_PMsPh>:
	sprintf(buffer, "003%.4f\r\n", sensorData[0]);
	HAL_UART_Transmit(&huart5, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	memset(buffer, 0, sizeof(buffer));
}

void measure_PMs(uint8_t *data){
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	char txBuffer[32];

	if (data[0] == 0x42 && data[1] == 0x4D){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b42      	cmp	r3, #66	@ 0x42
 800081a:	d131      	bne.n	8000880 <_Z11measure_PMsPh+0x74>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3301      	adds	r3, #1
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b4d      	cmp	r3, #77	@ 0x4d
 8000824:	d12c      	bne.n	8000880 <_Z11measure_PMsPh+0x74>
	  	pm[0] = (data[10] << 8) | data[11];
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	330a      	adds	r3, #10
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	320b      	adds	r2, #11
 8000832:	7812      	ldrb	r2, [r2, #0]
 8000834:	4313      	orrs	r3, r2
 8000836:	ee07 3a90 	vmov	s15, r3
 800083a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800083e:	4b44      	ldr	r3, [pc, #272]	@ (8000950 <_Z11measure_PMsPh+0x144>)
 8000840:	edc3 7a00 	vstr	s15, [r3]
		pm[1] = (data[12] << 8) | data[13];
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	330c      	adds	r3, #12
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	320d      	adds	r2, #13
 8000850:	7812      	ldrb	r2, [r2, #0]
 8000852:	4313      	orrs	r3, r2
 8000854:	ee07 3a90 	vmov	s15, r3
 8000858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800085c:	4b3c      	ldr	r3, [pc, #240]	@ (8000950 <_Z11measure_PMsPh+0x144>)
 800085e:	edc3 7a01 	vstr	s15, [r3, #4]
		pm[2] = (data[14] << 8) | data[15];
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	330e      	adds	r3, #14
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	320f      	adds	r2, #15
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	4313      	orrs	r3, r2
 8000872:	ee07 3a90 	vmov	s15, r3
 8000876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800087a:	4b35      	ldr	r3, [pc, #212]	@ (8000950 <_Z11measure_PMsPh+0x144>)
 800087c:	edc3 7a02 	vstr	s15, [r3, #8]
	}

	sprintf(txBuffer, "004%.4f\r\n", pm[0]);
 8000880:	4b33      	ldr	r3, [pc, #204]	@ (8000950 <_Z11measure_PMsPh+0x144>)
 8000882:	edd3 7a00 	vldr	s15, [r3]
 8000886:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800088a:	f107 0008 	add.w	r0, r7, #8
 800088e:	ec53 2b17 	vmov	r2, r3, d7
 8000892:	4930      	ldr	r1, [pc, #192]	@ (8000954 <_Z11measure_PMsPh+0x148>)
 8000894:	f007 f942 	bl	8007b1c <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*) txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fd1f 	bl	80002e0 <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	f107 0108 	add.w	r1, r7, #8
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	482a      	ldr	r0, [pc, #168]	@ (8000958 <_Z11measure_PMsPh+0x14c>)
 80008b0:	f004 fe3c 	bl	800552c <HAL_UART_Transmit>
	memset(txBuffer, 0, sizeof(txBuffer));
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	2220      	movs	r2, #32
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f007 f990 	bl	8007be2 <memset>

	sprintf(txBuffer, "005%.4f\r\n", pm[1]);
 80008c2:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <_Z11measure_PMsPh+0x144>)
 80008c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80008c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008cc:	f107 0008 	add.w	r0, r7, #8
 80008d0:	ec53 2b17 	vmov	r2, r3, d7
 80008d4:	4921      	ldr	r1, [pc, #132]	@ (800095c <_Z11measure_PMsPh+0x150>)
 80008d6:	f007 f921 	bl	8007b1c <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*) txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fcfe 	bl	80002e0 <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	f107 0108 	add.w	r1, r7, #8
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	4819      	ldr	r0, [pc, #100]	@ (8000958 <_Z11measure_PMsPh+0x14c>)
 80008f2:	f004 fe1b 	bl	800552c <HAL_UART_Transmit>
	memset(txBuffer, 0, sizeof(txBuffer));
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2220      	movs	r2, #32
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f007 f96f 	bl	8007be2 <memset>

	sprintf(txBuffer, "006%.4f\r\n", pm[2]);
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <_Z11measure_PMsPh+0x144>)
 8000906:	edd3 7a02 	vldr	s15, [r3, #8]
 800090a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800090e:	f107 0008 	add.w	r0, r7, #8
 8000912:	ec53 2b17 	vmov	r2, r3, d7
 8000916:	4912      	ldr	r1, [pc, #72]	@ (8000960 <_Z11measure_PMsPh+0x154>)
 8000918:	f007 f900 	bl	8007b1c <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*) txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fcdd 	bl	80002e0 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29a      	uxth	r2, r3
 800092a:	f107 0108 	add.w	r1, r7, #8
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	4809      	ldr	r0, [pc, #36]	@ (8000958 <_Z11measure_PMsPh+0x14c>)
 8000934:	f004 fdfa 	bl	800552c <HAL_UART_Transmit>
	memset(txBuffer, 0, sizeof(txBuffer));
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	2220      	movs	r2, #32
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f007 f94e 	bl	8007be2 <memset>
}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	@ 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000db4 	.word	0x20000db4
 8000954:	08009ce8 	.word	0x08009ce8
 8000958:	2000053c 	.word	0x2000053c
 800095c:	08009cf4 	.word	0x08009cf4
 8000960:	08009d00 	.word	0x08009d00

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000968:	f001 f8f3 	bl	8001b52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096c:	f000 f840 	bl	80009f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f000 faee 	bl	8000f50 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000974:	f000 face 	bl	8000f14 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8000978:	f000 fa66 	bl	8000e48 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 800097c:	f000 fa98 	bl	8000eb0 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_UART5_Init();
 8000980:	f000 f9fa 	bl	8000d78 <_ZL13MX_UART5_Initv>
  MX_ADC1_Init();
 8000984:	f000 f8b4 	bl	8000af0 <_ZL12MX_ADC1_Initv>
  MX_UART7_Init();
 8000988:	f000 fa2a 	bl	8000de0 <_ZL13MX_UART7_Initv>
  MX_I2C1_Init();
 800098c:	f000 f972 	bl	8000c74 <_ZL12MX_I2C1_Initv>
  MX_ETH_Init();
 8000990:	f000 f91e 	bl	8000bd0 <_ZL11MX_ETH_Initv>
  MX_UART4_Init();
 8000994:	f000 f9bc 	bl	8000d10 <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */
  oxygenSensor.begin(ADDRESS_3);
 8000998:	2173      	movs	r1, #115	@ 0x73
 800099a:	4810      	ldr	r0, [pc, #64]	@ (80009dc <main+0x78>)
 800099c:	f7ff fe47 	bl	800062e <_ZN20DFRobot_OxygenSensor5beginEh>
    if (scd30.begin()) {
 80009a0:	480f      	ldr	r0, [pc, #60]	@ (80009e0 <main+0x7c>)
 80009a2:	f7ff fe76 	bl	8000692 <_ZN5SCD305beginEv>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <main+0x56>
        scd30.setMeasurementInterval(2);
 80009ac:	2102      	movs	r1, #2
 80009ae:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <main+0x7c>)
 80009b0:	f7ff fea4 	bl	80006fc <_ZN5SCD3022setMeasurementIntervalEt>
        scd30.startPeriodicMeasurement();
 80009b4:	480a      	ldr	r0, [pc, #40]	@ (80009e0 <main+0x7c>)
 80009b6:	f7ff feb2 	bl	800071e <_ZN5SCD3024startPeriodicMeasurementEv>
    }

    HAL_UART_Receive_IT(&huart4, rxBuffer, PMS_FRAME_LENGTH);
 80009ba:	2220      	movs	r2, #32
 80009bc:	4909      	ldr	r1, [pc, #36]	@ (80009e4 <main+0x80>)
 80009be:	480a      	ldr	r0, [pc, #40]	@ (80009e8 <main+0x84>)
 80009c0:	f004 fe3d 	bl	800563e <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i++;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <main+0x88>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a08      	ldr	r2, [pc, #32]	@ (80009ec <main+0x88>)
 80009cc:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d2:	f001 f91b 	bl	8001c0c <HAL_Delay>
	  i++;
 80009d6:	bf00      	nop
 80009d8:	e7f4      	b.n	80009c4 <main+0x60>
 80009da:	bf00      	nop
 80009dc:	20000c14 	.word	0x20000c14
 80009e0:	20000db0 	.word	0x20000db0
 80009e4:	20000dc0 	.word	0x20000dc0
 80009e8:	200004b4 	.word	0x200004b4
 80009ec:	20000de0 	.word	0x20000de0

080009f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	@ 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2234      	movs	r2, #52	@ 0x34
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f007 f8ef 	bl	8007be2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a14:	f003 fbe0 	bl	80041d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	4b33      	ldr	r3, [pc, #204]	@ (8000ae8 <_Z18SystemClock_Configv+0xf8>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	4a32      	ldr	r2, [pc, #200]	@ (8000ae8 <_Z18SystemClock_Configv+0xf8>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a24:	4b30      	ldr	r3, [pc, #192]	@ (8000ae8 <_Z18SystemClock_Configv+0xf8>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a30:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <_Z18SystemClock_Configv+0xfc>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a38:	4a2c      	ldr	r2, [pc, #176]	@ (8000aec <_Z18SystemClock_Configv+0xfc>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b2a      	ldr	r3, [pc, #168]	@ (8000aec <_Z18SystemClock_Configv+0xfc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a50:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a64:	2360      	movs	r3, #96	@ 0x60
 8000a66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fc0d 	bl	8004298 <HAL_RCC_OscConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf14      	ite	ne
 8000a84:	2301      	movne	r3, #1
 8000a86:	2300      	moveq	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000a8e:	f000 fb29 	bl	80010e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a92:	f003 fbb1 	bl	80041f8 <HAL_PWREx_EnableOverDrive>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf14      	ite	ne
 8000a9c:	2301      	movne	r3, #1
 8000a9e:	2300      	moveq	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000aa6:	f000 fb1d 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	230f      	movs	r3, #15
 8000aac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 fe94 	bl	80047f4 <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bf14      	ite	ne
 8000ad2:	2301      	movne	r3, #1
 8000ad4:	2300      	moveq	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <_Z18SystemClock_Configv+0xf0>
  {
    Error_Handler();
 8000adc:	f000 fb02 	bl	80010e4 <Error_Handler>
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3750      	adds	r7, #80	@ 0x50
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40007000 	.word	0x40007000

08000af0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	463b      	mov	r3, r7
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b02:	4b30      	ldr	r3, [pc, #192]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b04:	4a30      	ldr	r2, [pc, #192]	@ (8000bc8 <_ZL12MX_ADC1_Initv+0xd8>)
 8000b06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b08:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b0a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b10:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b16:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b1c:	4b29      	ldr	r3, [pc, #164]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b22:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b2a:	4b26      	ldr	r3, [pc, #152]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b30:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b32:	4a26      	ldr	r2, [pc, #152]	@ (8000bcc <_ZL12MX_ADC1_Initv+0xdc>)
 8000b34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b36:	4b23      	ldr	r3, [pc, #140]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000b3c:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b3e:	2202      	movs	r2, #2
 8000b40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b42:	4b20      	ldr	r3, [pc, #128]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b50:	481c      	ldr	r0, [pc, #112]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b52:	f001 f87f 	bl	8001c54 <HAL_ADC_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bf14      	ite	ne
 8000b5c:	2301      	movne	r3, #1
 8000b5e:	2300      	moveq	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8000b66:	f000 fabd 	bl	80010e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000b72:	2307      	movs	r3, #7
 8000b74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b76:	463b      	mov	r3, r7
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4812      	ldr	r0, [pc, #72]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000b7c:	f001 f8ae 	bl	8001cdc <HAL_ADC_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000b90:	f000 faa8 	bl	80010e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b94:	2305      	movs	r3, #5
 8000b96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4808      	ldr	r0, [pc, #32]	@ (8000bc4 <_ZL12MX_ADC1_Initv+0xd4>)
 8000ba2:	f001 f89b 	bl	8001cdc <HAL_ADC_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	bf14      	ite	ne
 8000bac:	2301      	movne	r3, #1
 8000bae:	2300      	moveq	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <_ZL12MX_ADC1_Initv+0xca>
  {
    Error_Handler();
 8000bb6:	f000 fa95 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000368 	.word	0x20000368
 8000bc8:	40012000 	.word	0x40012000
 8000bcc:	0f000001 	.word	0x0f000001

08000bd0 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <_ZL11MX_ETH_Initv+0x8c>)
 8000bd6:	4a22      	ldr	r2, [pc, #136]	@ (8000c60 <_ZL11MX_ETH_Initv+0x90>)
 8000bd8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bda:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <_ZL11MX_ETH_Initv+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000be0:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <_ZL11MX_ETH_Initv+0x94>)
 8000be2:	2280      	movs	r2, #128	@ 0x80
 8000be4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <_ZL11MX_ETH_Initv+0x94>)
 8000be8:	22e1      	movs	r2, #225	@ 0xe1
 8000bea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <_ZL11MX_ETH_Initv+0x94>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <_ZL11MX_ETH_Initv+0x94>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c64 <_ZL11MX_ETH_Initv+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bfe:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <_ZL11MX_ETH_Initv+0x8c>)
 8000c00:	4a18      	ldr	r2, [pc, #96]	@ (8000c64 <_ZL11MX_ETH_Initv+0x94>)
 8000c02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c04:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <_ZL11MX_ETH_Initv+0x8c>)
 8000c06:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c0a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <_ZL11MX_ETH_Initv+0x8c>)
 8000c0e:	4a16      	ldr	r2, [pc, #88]	@ (8000c68 <_ZL11MX_ETH_Initv+0x98>)
 8000c10:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c12:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <_ZL11MX_ETH_Initv+0x8c>)
 8000c14:	4a15      	ldr	r2, [pc, #84]	@ (8000c6c <_ZL11MX_ETH_Initv+0x9c>)
 8000c16:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c18:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <_ZL11MX_ETH_Initv+0x8c>)
 8000c1a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000c1e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c20:	480e      	ldr	r0, [pc, #56]	@ (8000c5c <_ZL11MX_ETH_Initv+0x8c>)
 8000c22:	f001 ff39 	bl	8002a98 <HAL_ETH_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	bf14      	ite	ne
 8000c2c:	2301      	movne	r3, #1
 8000c2e:	2300      	moveq	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <_ZL11MX_ETH_Initv+0x6a>
  {
    Error_Handler();
 8000c36:	f000 fa55 	bl	80010e4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c3a:	2238      	movs	r2, #56	@ 0x38
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <_ZL11MX_ETH_Initv+0xa0>)
 8000c40:	f006 ffcf 	bl	8007be2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <_ZL11MX_ETH_Initv+0xa0>)
 8000c46:	2221      	movs	r2, #33	@ 0x21
 8000c48:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <_ZL11MX_ETH_Initv+0xa0>)
 8000c4c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000c50:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c52:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <_ZL11MX_ETH_Initv+0xa0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200003b0 	.word	0x200003b0
 8000c60:	40028000 	.word	0x40028000
 8000c64:	20000de4 	.word	0x20000de4
 8000c68:	20000274 	.word	0x20000274
 8000c6c:	200001d4 	.word	0x200001d4
 8000c70:	20000330 	.word	0x20000330

08000c74 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c78:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <_ZL12MX_I2C1_Initv+0x90>)
 8000c7a:	4a23      	ldr	r2, [pc, #140]	@ (8000d08 <_ZL12MX_I2C1_Initv+0x94>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <_ZL12MX_I2C1_Initv+0x90>)
 8000c80:	4a22      	ldr	r2, [pc, #136]	@ (8000d0c <_ZL12MX_I2C1_Initv+0x98>)
 8000c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <_ZL12MX_I2C1_Initv+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <_ZL12MX_I2C1_Initv+0x90>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <_ZL12MX_I2C1_Initv+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <_ZL12MX_I2C1_Initv+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <_ZL12MX_I2C1_Initv+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <_ZL12MX_I2C1_Initv+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <_ZL12MX_I2C1_Initv+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cae:	4815      	ldr	r0, [pc, #84]	@ (8000d04 <_ZL12MX_I2C1_Initv+0x90>)
 8000cb0:	f002 fc06 	bl	80034c0 <HAL_I2C_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bf14      	ite	ne
 8000cba:	2301      	movne	r3, #1
 8000cbc:	2300      	moveq	r3, #0
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000cc4:	f000 fa0e 	bl	80010e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	480e      	ldr	r0, [pc, #56]	@ (8000d04 <_ZL12MX_I2C1_Initv+0x90>)
 8000ccc:	f003 f8b2 	bl	8003e34 <HAL_I2CEx_ConfigAnalogFilter>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000ce0:	f000 fa00 	bl	80010e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4807      	ldr	r0, [pc, #28]	@ (8000d04 <_ZL12MX_I2C1_Initv+0x90>)
 8000ce8:	f003 f8ef 	bl	8003eca <HAL_I2CEx_ConfigDigitalFilter>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf14      	ite	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	2300      	moveq	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000cfc:	f000 f9f2 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000460 	.word	0x20000460
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	20303e5d 	.word	0x20303e5d

08000d10 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d14:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <_ZL13MX_UART4_Initv+0x60>)
 8000d16:	4a17      	ldr	r2, [pc, #92]	@ (8000d74 <_ZL13MX_UART4_Initv+0x64>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <_ZL13MX_UART4_Initv+0x60>)
 8000d1c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d20:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <_ZL13MX_UART4_Initv+0x60>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <_ZL13MX_UART4_Initv+0x60>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <_ZL13MX_UART4_Initv+0x60>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <_ZL13MX_UART4_Initv+0x60>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <_ZL13MX_UART4_Initv+0x60>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <_ZL13MX_UART4_Initv+0x60>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <_ZL13MX_UART4_Initv+0x60>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <_ZL13MX_UART4_Initv+0x60>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d52:	4807      	ldr	r0, [pc, #28]	@ (8000d70 <_ZL13MX_UART4_Initv+0x60>)
 8000d54:	f004 fb9c 	bl	8005490 <HAL_UART_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bf14      	ite	ne
 8000d5e:	2301      	movne	r3, #1
 8000d60:	2300      	moveq	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8000d68:	f000 f9bc 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200004b4 	.word	0x200004b4
 8000d74:	40004c00 	.word	0x40004c00

08000d78 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <_ZL13MX_UART5_Initv+0x60>)
 8000d7e:	4a17      	ldr	r2, [pc, #92]	@ (8000ddc <_ZL13MX_UART5_Initv+0x64>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <_ZL13MX_UART5_Initv+0x60>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <_ZL13MX_UART5_Initv+0x60>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <_ZL13MX_UART5_Initv+0x60>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <_ZL13MX_UART5_Initv+0x60>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <_ZL13MX_UART5_Initv+0x60>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <_ZL13MX_UART5_Initv+0x60>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <_ZL13MX_UART5_Initv+0x60>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <_ZL13MX_UART5_Initv+0x60>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <_ZL13MX_UART5_Initv+0x60>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000dba:	4807      	ldr	r0, [pc, #28]	@ (8000dd8 <_ZL13MX_UART5_Initv+0x60>)
 8000dbc:	f004 fb68 	bl	8005490 <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	bf14      	ite	ne
 8000dc6:	2301      	movne	r3, #1
 8000dc8:	2300      	moveq	r3, #0
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <_ZL13MX_UART5_Initv+0x5c>
  {
    Error_Handler();
 8000dd0:	f000 f988 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2000053c 	.word	0x2000053c
 8000ddc:	40005000 	.word	0x40005000

08000de0 <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <_ZL13MX_UART7_Initv+0x60>)
 8000de6:	4a17      	ldr	r2, [pc, #92]	@ (8000e44 <_ZL13MX_UART7_Initv+0x64>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <_ZL13MX_UART7_Initv+0x60>)
 8000dec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000df0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <_ZL13MX_UART7_Initv+0x60>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <_ZL13MX_UART7_Initv+0x60>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <_ZL13MX_UART7_Initv+0x60>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <_ZL13MX_UART7_Initv+0x60>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e40 <_ZL13MX_UART7_Initv+0x60>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <_ZL13MX_UART7_Initv+0x60>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <_ZL13MX_UART7_Initv+0x60>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <_ZL13MX_UART7_Initv+0x60>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e22:	4807      	ldr	r0, [pc, #28]	@ (8000e40 <_ZL13MX_UART7_Initv+0x60>)
 8000e24:	f004 fb34 	bl	8005490 <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	bf14      	ite	ne
 8000e2e:	2301      	movne	r3, #1
 8000e30:	2300      	moveq	r3, #0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <_ZL13MX_UART7_Initv+0x5c>
  {
    Error_Handler();
 8000e38:	f000 f954 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200005c4 	.word	0x200005c4
 8000e44:	40007800 	.word	0x40007800

08000e48 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e4e:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <_ZL19MX_USART3_UART_Initv+0x64>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e8a:	4807      	ldr	r0, [pc, #28]	@ (8000ea8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000e8c:	f004 fb00 	bl	8005490 <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bf14      	ite	ne
 8000e96:	2301      	movne	r3, #1
 8000e98:	2300      	moveq	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8000ea0:	f000 f920 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000064c 	.word	0x2000064c
 8000eac:	40004800 	.word	0x40004800

08000eb0 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000eb6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000eba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000ebe:	2206      	movs	r2, #6
 8000ec0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ef2:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000ef4:	f003 f835 	bl	8003f62 <HAL_PCD_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf14      	ite	ne
 8000efe:	2301      	movne	r3, #1
 8000f00:	2300      	moveq	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8000f08:	f000 f8ec 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000734 	.word	0x20000734

08000f14 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <_ZL11MX_DMA_Initv+0x38>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <_ZL11MX_DMA_Initv+0x38>)
 8000f20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <_ZL11MX_DMA_Initv+0x38>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	200d      	movs	r0, #13
 8000f38:	f001 f9fb 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f3c:	200d      	movs	r0, #13
 8000f3e:	f001 fa14 	bl	800236a <HAL_NVIC_EnableIRQ>

}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800

08000f50 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	@ 0x30
 8000f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b4d      	ldr	r3, [pc, #308]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b4a      	ldr	r3, [pc, #296]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7e:	4b47      	ldr	r3, [pc, #284]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a46      	ldr	r2, [pc, #280]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b44      	ldr	r3, [pc, #272]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0320 	and.w	r3, r3, #32
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f96:	4b41      	ldr	r3, [pc, #260]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a40      	ldr	r2, [pc, #256]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b3b      	ldr	r3, [pc, #236]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a3a      	ldr	r2, [pc, #232]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b38      	ldr	r3, [pc, #224]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b35      	ldr	r3, [pc, #212]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a34      	ldr	r2, [pc, #208]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b32      	ldr	r3, [pc, #200]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	4b2f      	ldr	r3, [pc, #188]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b2c      	ldr	r3, [pc, #176]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff6:	4b29      	ldr	r3, [pc, #164]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a28      	ldr	r2, [pc, #160]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b26      	ldr	r3, [pc, #152]	@ (800109c <_ZL12MX_GPIO_Initv+0x14c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001014:	4822      	ldr	r0, [pc, #136]	@ (80010a0 <_ZL12MX_GPIO_Initv+0x150>)
 8001016:	f002 fa39 	bl	800348c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2140      	movs	r1, #64	@ 0x40
 800101e:	4821      	ldr	r0, [pc, #132]	@ (80010a4 <_ZL12MX_GPIO_Initv+0x154>)
 8001020:	f002 fa34 	bl	800348c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001024:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800102a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	481b      	ldr	r0, [pc, #108]	@ (80010a8 <_ZL12MX_GPIO_Initv+0x158>)
 800103c:	f002 f87a 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001040:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	4811      	ldr	r0, [pc, #68]	@ (80010a0 <_ZL12MX_GPIO_Initv+0x150>)
 800105a:	f002 f86b 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800105e:	2340      	movs	r3, #64	@ 0x40
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	480b      	ldr	r0, [pc, #44]	@ (80010a4 <_ZL12MX_GPIO_Initv+0x154>)
 8001076:	f002 f85d 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800107a:	2380      	movs	r3, #128	@ 0x80
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <_ZL12MX_GPIO_Initv+0x154>)
 800108e:	f002 f851 	bl	8003134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001092:	bf00      	nop
 8001094:	3730      	adds	r7, #48	@ 0x30
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40021800 	.word	0x40021800
 80010a8:	40020800 	.word	0x40020800

080010ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_UART_RxCpltCallback+0x2c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d107      	bne.n	80010ce <HAL_UART_RxCpltCallback+0x22>
		measure_PMs(rxBuffer);
 80010be:	4807      	ldr	r0, [pc, #28]	@ (80010dc <HAL_UART_RxCpltCallback+0x30>)
 80010c0:	f7ff fba4 	bl	800080c <_Z11measure_PMsPh>
		HAL_UART_Receive_IT(&huart4, rxBuffer, PMS_FRAME_LENGTH);
 80010c4:	2220      	movs	r2, #32
 80010c6:	4905      	ldr	r1, [pc, #20]	@ (80010dc <HAL_UART_RxCpltCallback+0x30>)
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <HAL_UART_RxCpltCallback+0x34>)
 80010ca:	f004 fab8 	bl	800563e <HAL_UART_Receive_IT>
	}
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40004c00 	.word	0x40004c00
 80010dc:	20000dc0 	.word	0x20000dc0
 80010e0:	200004b4 	.word	0x200004b4

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <Error_Handler+0x8>

080010f0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d10c      	bne.n	800111a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001106:	4293      	cmp	r3, r2
 8001108:	d107      	bne.n	800111a <_Z41__static_initialization_and_destruction_0ii+0x2a>
DFRobot_OxygenSensor oxygenSensor(&hi2c1);
 800110a:	490b      	ldr	r1, [pc, #44]	@ (8001138 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800110c:	480b      	ldr	r0, [pc, #44]	@ (800113c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800110e:	f7ff fa67 	bl	80005e0 <_ZN20DFRobot_OxygenSensorC1EP19__I2C_HandleTypeDef>
SCD30 scd30(&hi2c1);
 8001112:	4909      	ldr	r1, [pc, #36]	@ (8001138 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001114:	480a      	ldr	r0, [pc, #40]	@ (8001140 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001116:	f7ff faad 	bl	8000674 <_ZN5SCD30C1EP19__I2C_HandleTypeDef>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d107      	bne.n	8001130 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001126:	4293      	cmp	r3, r2
 8001128:	d102      	bne.n	8001130 <_Z41__static_initialization_and_destruction_0ii+0x40>
DFRobot_OxygenSensor oxygenSensor(&hi2c1);
 800112a:	4804      	ldr	r0, [pc, #16]	@ (800113c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800112c:	f7ff fa71 	bl	8000612 <_ZN20DFRobot_OxygenSensorD1Ev>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000460 	.word	0x20000460
 800113c:	20000c14 	.word	0x20000c14
 8001140:	20000db0 	.word	0x20000db0

08001144 <_GLOBAL__sub_I_DMARxDscrTab>:
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
 8001148:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff ffcf 	bl	80010f0 <_Z41__static_initialization_and_destruction_0ii>
 8001152:	bd80      	pop	{r7, pc}

08001154 <_GLOBAL__sub_D_DMARxDscrTab>:
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
 8001158:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff ffc7 	bl	80010f0 <_Z41__static_initialization_and_destruction_0ii>
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <HAL_MspInit+0x44>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	4a0e      	ldr	r2, [pc, #56]	@ (80011a8 <HAL_MspInit+0x44>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001174:	6413      	str	r3, [r2, #64]	@ 0x40
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <HAL_MspInit+0x44>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <HAL_MspInit+0x44>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <HAL_MspInit+0x44>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118c:	6453      	str	r3, [r2, #68]	@ 0x44
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_MspInit+0x44>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <HAL_ADC_MspInit+0x74>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d123      	bne.n	8001216 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_ADC_MspInit+0x78>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a14      	ldr	r2, [pc, #80]	@ (8001224 <HAL_ADC_MspInit+0x78>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_ADC_MspInit+0x78>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <HAL_ADC_MspInit+0x78>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001224 <HAL_ADC_MspInit+0x78>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <HAL_ADC_MspInit+0x78>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011fe:	2330      	movs	r3, #48	@ 0x30
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	2303      	movs	r3, #3
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <HAL_ADC_MspInit+0x7c>)
 8001212:	f001 ff8f 	bl	8003134 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	@ 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40012000 	.word	0x40012000
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000

0800122c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	@ 0x38
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a4e      	ldr	r2, [pc, #312]	@ (8001384 <HAL_ETH_MspInit+0x158>)
 800124a:	4293      	cmp	r3, r2
 800124c:	f040 8096 	bne.w	800137c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001250:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001254:	4a4c      	ldr	r2, [pc, #304]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 8001256:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800125a:	6313      	str	r3, [r2, #48]	@ 0x30
 800125c:	4b4a      	ldr	r3, [pc, #296]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001264:	623b      	str	r3, [r7, #32]
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	4b47      	ldr	r3, [pc, #284]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126c:	4a46      	ldr	r2, [pc, #280]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 800126e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001272:	6313      	str	r3, [r2, #48]	@ 0x30
 8001274:	4b44      	ldr	r3, [pc, #272]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001278:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001284:	4a40      	ldr	r2, [pc, #256]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 8001286:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800128a:	6313      	str	r3, [r2, #48]	@ 0x30
 800128c:	4b3e      	ldr	r3, [pc, #248]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129c:	4a3a      	ldr	r2, [pc, #232]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a4:	4b38      	ldr	r3, [pc, #224]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b35      	ldr	r3, [pc, #212]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b4:	4a34      	ldr	r2, [pc, #208]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80012bc:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e0:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	4a28      	ldr	r2, [pc, #160]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 80012e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ec:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <HAL_ETH_MspInit+0x15c>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012f8:	2332      	movs	r3, #50	@ 0x32
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001308:	230b      	movs	r3, #11
 800130a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	481e      	ldr	r0, [pc, #120]	@ (800138c <HAL_ETH_MspInit+0x160>)
 8001314:	f001 ff0e 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001318:	2386      	movs	r3, #134	@ 0x86
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001328:	230b      	movs	r3, #11
 800132a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	4817      	ldr	r0, [pc, #92]	@ (8001390 <HAL_ETH_MspInit+0x164>)
 8001334:	f001 fefe 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001338:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800134a:	230b      	movs	r3, #11
 800134c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001352:	4619      	mov	r1, r3
 8001354:	480f      	ldr	r0, [pc, #60]	@ (8001394 <HAL_ETH_MspInit+0x168>)
 8001356:	f001 feed 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800135a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800136c:	230b      	movs	r3, #11
 800136e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	4808      	ldr	r0, [pc, #32]	@ (8001398 <HAL_ETH_MspInit+0x16c>)
 8001378:	f001 fedc 	bl	8003134 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800137c:	bf00      	nop
 800137e:	3738      	adds	r7, #56	@ 0x38
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40028000 	.word	0x40028000
 8001388:	40023800 	.word	0x40023800
 800138c:	40020800 	.word	0x40020800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020400 	.word	0x40020400
 8001398:	40021800 	.word	0x40021800

0800139c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0ae      	sub	sp, #184	@ 0xb8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2290      	movs	r2, #144	@ 0x90
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f006 fc10 	bl	8007be2 <memset>
  if(hi2c->Instance==I2C1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a22      	ldr	r2, [pc, #136]	@ (8001450 <HAL_I2C_MspInit+0xb4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d13c      	bne.n	8001446 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fc30 	bl	8004c40 <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013e6:	f7ff fe7d 	bl	80010e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <HAL_I2C_MspInit+0xb8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a19      	ldr	r2, [pc, #100]	@ (8001454 <HAL_I2C_MspInit+0xb8>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <HAL_I2C_MspInit+0xb8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001402:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140a:	2312      	movs	r3, #18
 800140c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800141c:	2304      	movs	r3, #4
 800141e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001422:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001426:	4619      	mov	r1, r3
 8001428:	480b      	ldr	r0, [pc, #44]	@ (8001458 <HAL_I2C_MspInit+0xbc>)
 800142a:	f001 fe83 	bl	8003134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <HAL_I2C_MspInit+0xb8>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	4a08      	ldr	r2, [pc, #32]	@ (8001454 <HAL_I2C_MspInit+0xb8>)
 8001434:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001438:	6413      	str	r3, [r2, #64]	@ 0x40
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_I2C_MspInit+0xb8>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001446:	bf00      	nop
 8001448:	37b8      	adds	r7, #184	@ 0xb8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40005400 	.word	0x40005400
 8001454:	40023800 	.word	0x40023800
 8001458:	40020400 	.word	0x40020400

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0b6      	sub	sp, #216	@ 0xd8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001474:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001478:	2290      	movs	r2, #144	@ 0x90
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f006 fbb0 	bl	8007be2 <memset>
  if(huart->Instance==UART4)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4aa2      	ldr	r2, [pc, #648]	@ (8001710 <HAL_UART_MspInit+0x2b4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	f040 8097 	bne.w	80015bc <HAL_UART_MspInit+0x160>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800148e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001492:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 fbce 	bl	8004c40 <HAL_RCCEx_PeriphCLKConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_UART_MspInit+0x52>
    {
      Error_Handler();
 80014aa:	f7ff fe1b 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014ae:	4b99      	ldr	r3, [pc, #612]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a98      	ldr	r2, [pc, #608]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80014b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	4b96      	ldr	r3, [pc, #600]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80014c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	4b93      	ldr	r3, [pc, #588]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a92      	ldr	r2, [pc, #584]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b90      	ldr	r3, [pc, #576]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	4b8d      	ldr	r3, [pc, #564]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a8c      	ldr	r2, [pc, #560]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b8a      	ldr	r3, [pc, #552]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800150e:	2308      	movs	r3, #8
 8001510:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001518:	4619      	mov	r1, r3
 800151a:	487f      	ldr	r0, [pc, #508]	@ (8001718 <HAL_UART_MspInit+0x2bc>)
 800151c:	f001 fe0a 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001520:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001524:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800153a:	2308      	movs	r3, #8
 800153c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001540:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001544:	4619      	mov	r1, r3
 8001546:	4875      	ldr	r0, [pc, #468]	@ (800171c <HAL_UART_MspInit+0x2c0>)
 8001548:	f001 fdf4 	bl	8003134 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800154c:	4b74      	ldr	r3, [pc, #464]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 800154e:	4a75      	ldr	r2, [pc, #468]	@ (8001724 <HAL_UART_MspInit+0x2c8>)
 8001550:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001552:	4b73      	ldr	r3, [pc, #460]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 8001554:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001558:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800155a:	4b71      	ldr	r3, [pc, #452]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001560:	4b6f      	ldr	r3, [pc, #444]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001566:	4b6e      	ldr	r3, [pc, #440]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 8001568:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800156c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800156e:	4b6c      	ldr	r3, [pc, #432]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001574:	4b6a      	ldr	r3, [pc, #424]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800157a:	4b69      	ldr	r3, [pc, #420]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001580:	4b67      	ldr	r3, [pc, #412]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 8001582:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001586:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001588:	4b65      	ldr	r3, [pc, #404]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800158e:	4864      	ldr	r0, [pc, #400]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 8001590:	f000 ff06 	bl	80023a0 <HAL_DMA_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 800159a:	f7ff fda3 	bl	80010e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a5f      	ldr	r2, [pc, #380]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 80015a2:	675a      	str	r2, [r3, #116]	@ 0x74
 80015a4:	4a5e      	ldr	r2, [pc, #376]	@ (8001720 <HAL_UART_MspInit+0x2c4>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2034      	movs	r0, #52	@ 0x34
 80015b0:	f000 febf 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015b4:	2034      	movs	r0, #52	@ 0x34
 80015b6:	f000 fed8 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015ba:	e100      	b.n	80017be <HAL_UART_MspInit+0x362>
  else if(huart->Instance==UART5)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a59      	ldr	r2, [pc, #356]	@ (8001728 <HAL_UART_MspInit+0x2cc>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d160      	bne.n	8001688 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80015c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ca:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015d6:	4618      	mov	r0, r3
 80015d8:	f003 fb32 	bl	8004c40 <HAL_RCCEx_PeriphCLKConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_UART_MspInit+0x18a>
      Error_Handler();
 80015e2:	f7ff fd7f 	bl	80010e4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80015e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80015ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f2:	4b48      	ldr	r3, [pc, #288]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	4b45      	ldr	r3, [pc, #276]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a44      	ldr	r2, [pc, #272]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b42      	ldr	r3, [pc, #264]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	623b      	str	r3, [r7, #32]
 8001614:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b3f      	ldr	r3, [pc, #252]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a3e      	ldr	r2, [pc, #248]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b3c      	ldr	r3, [pc, #240]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800162e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001632:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001648:	2308      	movs	r3, #8
 800164a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001652:	4619      	mov	r1, r3
 8001654:	4835      	ldr	r0, [pc, #212]	@ (800172c <HAL_UART_MspInit+0x2d0>)
 8001656:	f001 fd6d 	bl	8003134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800165a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001674:	2308      	movs	r3, #8
 8001676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800167e:	4619      	mov	r1, r3
 8001680:	4826      	ldr	r0, [pc, #152]	@ (800171c <HAL_UART_MspInit+0x2c0>)
 8001682:	f001 fd57 	bl	8003134 <HAL_GPIO_Init>
}
 8001686:	e09a      	b.n	80017be <HAL_UART_MspInit+0x362>
  else if(huart->Instance==UART7)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a28      	ldr	r2, [pc, #160]	@ (8001730 <HAL_UART_MspInit+0x2d4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d152      	bne.n	8001738 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001696:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 facc 	bl	8004c40 <HAL_RCCEx_PeriphCLKConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_UART_MspInit+0x256>
      Error_Handler();
 80016ae:	f7ff fd19 	bl	80010e4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80016b2:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	4a17      	ldr	r2, [pc, #92]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80016b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80016bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a11      	ldr	r2, [pc, #68]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <HAL_UART_MspInit+0x2b8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016e2:	23c0      	movs	r3, #192	@ 0xc0
 80016e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80016fa:	2308      	movs	r3, #8
 80016fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001700:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001704:	4619      	mov	r1, r3
 8001706:	480b      	ldr	r0, [pc, #44]	@ (8001734 <HAL_UART_MspInit+0x2d8>)
 8001708:	f001 fd14 	bl	8003134 <HAL_GPIO_Init>
}
 800170c:	e057      	b.n	80017be <HAL_UART_MspInit+0x362>
 800170e:	bf00      	nop
 8001710:	40004c00 	.word	0x40004c00
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020800 	.word	0x40020800
 8001720:	200006d4 	.word	0x200006d4
 8001724:	40026040 	.word	0x40026040
 8001728:	40005000 	.word	0x40005000
 800172c:	40020400 	.word	0x40020400
 8001730:	40007800 	.word	0x40007800
 8001734:	40021400 	.word	0x40021400
  else if(huart->Instance==USART3)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a22      	ldr	r2, [pc, #136]	@ (80017c8 <HAL_UART_MspInit+0x36c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d13d      	bne.n	80017be <HAL_UART_MspInit+0x362>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001742:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001746:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fa74 	bl	8004c40 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_UART_MspInit+0x306>
      Error_Handler();
 800175e:	f7ff fcc1 	bl	80010e4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001762:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <HAL_UART_MspInit+0x370>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	4a19      	ldr	r2, [pc, #100]	@ (80017cc <HAL_UART_MspInit+0x370>)
 8001768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800176c:	6413      	str	r3, [r2, #64]	@ 0x40
 800176e:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <HAL_UART_MspInit+0x370>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <HAL_UART_MspInit+0x370>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a13      	ldr	r2, [pc, #76]	@ (80017cc <HAL_UART_MspInit+0x370>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <HAL_UART_MspInit+0x370>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001792:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001796:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017ac:	2307      	movs	r3, #7
 80017ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <HAL_UART_MspInit+0x374>)
 80017ba:	f001 fcbb 	bl	8003134 <HAL_GPIO_Init>
}
 80017be:	bf00      	nop
 80017c0:	37d8      	adds	r7, #216	@ 0xd8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40004800 	.word	0x40004800
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020c00 	.word	0x40020c00

080017d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0ae      	sub	sp, #184	@ 0xb8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2290      	movs	r2, #144	@ 0x90
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f006 f9f4 	bl	8007be2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001802:	d159      	bne.n	80018b8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001804:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001808:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fa13 	bl	8004c40 <HAL_RCCEx_PeriphCLKConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001820:	f7ff fc60 	bl	80010e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	4b26      	ldr	r3, [pc, #152]	@ (80018c0 <HAL_PCD_MspInit+0xec>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001828:	4a25      	ldr	r2, [pc, #148]	@ (80018c0 <HAL_PCD_MspInit+0xec>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001830:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <HAL_PCD_MspInit+0xec>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800183c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001840:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001856:	230a      	movs	r3, #10
 8001858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001860:	4619      	mov	r1, r3
 8001862:	4818      	ldr	r0, [pc, #96]	@ (80018c4 <HAL_PCD_MspInit+0xf0>)
 8001864:	f001 fc66 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001868:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800186c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001880:	4619      	mov	r1, r3
 8001882:	4810      	ldr	r0, [pc, #64]	@ (80018c4 <HAL_PCD_MspInit+0xf0>)
 8001884:	f001 fc56 	bl	8003134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001888:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <HAL_PCD_MspInit+0xec>)
 800188a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800188c:	4a0c      	ldr	r2, [pc, #48]	@ (80018c0 <HAL_PCD_MspInit+0xec>)
 800188e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001892:	6353      	str	r3, [r2, #52]	@ 0x34
 8001894:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <HAL_PCD_MspInit+0xec>)
 8001896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <HAL_PCD_MspInit+0xec>)
 80018a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a4:	4a06      	ldr	r2, [pc, #24]	@ (80018c0 <HAL_PCD_MspInit+0xec>)
 80018a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ac:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <HAL_PCD_MspInit+0xec>)
 80018ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80018b8:	bf00      	nop
 80018ba:	37b8      	adds	r7, #184	@ 0xb8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <NMI_Handler+0x4>

080018d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <HardFault_Handler+0x4>

080018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <MemManage_Handler+0x4>

080018e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <BusFault_Handler+0x4>

080018e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <UsageFault_Handler+0x4>

080018f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191e:	f000 f955 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <DMA1_Stream2_IRQHandler+0x10>)
 800192e:	f000 fe77 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200006d4 	.word	0x200006d4

0800193c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <UART4_IRQHandler+0x10>)
 8001942:	f003 fec1 	bl	80056c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200004b4 	.word	0x200004b4

08001950 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return 1;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_kill>:

int _kill(int pid, int sig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800196a:	f006 f98d 	bl	8007c88 <__errno>
 800196e:	4603      	mov	r3, r0
 8001970:	2216      	movs	r2, #22
 8001972:	601a      	str	r2, [r3, #0]
  return -1;
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_exit>:

void _exit (int status)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffe7 	bl	8001960 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001992:	bf00      	nop
 8001994:	e7fd      	b.n	8001992 <_exit+0x12>

08001996 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e00a      	b.n	80019be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019a8:	f3af 8000 	nop.w
 80019ac:	4601      	mov	r1, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	60ba      	str	r2, [r7, #8]
 80019b4:	b2ca      	uxtb	r2, r1
 80019b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dbf0      	blt.n	80019a8 <_read+0x12>
  }

  return len;
 80019c6:	687b      	ldr	r3, [r7, #4]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e009      	b.n	80019f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	60ba      	str	r2, [r7, #8]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3301      	adds	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	dbf1      	blt.n	80019e2 <_write+0x12>
  }
  return len;
 80019fe:	687b      	ldr	r3, [r7, #4]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_close>:

int _close(int file)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a30:	605a      	str	r2, [r3, #4]
  return 0;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_isatty>:

int _isatty(int file)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b085      	sub	sp, #20
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f006 f8f2 	bl	8007c88 <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20080000 	.word	0x20080000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	20000dec 	.word	0x20000dec
 8001ad8:	20000f40 	.word	0x20000f40

08001adc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <SystemInit+0x20>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <SystemInit+0x20>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b04:	f7ff ffea 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b08:	480c      	ldr	r0, [pc, #48]	@ (8001b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b0a:	490d      	ldr	r1, [pc, #52]	@ (8001b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b20:	4c0a      	ldr	r4, [pc, #40]	@ (8001b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f006 f8b1 	bl	8007c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7fe ff17 	bl	8000964 <main>
  bx  lr    
 8001b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b38:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b44:	0800a0b8 	.word	0x0800a0b8
  ldr r2, =_sbss
 8001b48:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8001b4c:	20000f40 	.word	0x20000f40

08001b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC_IRQHandler>

08001b52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b56:	2003      	movs	r0, #3
 8001b58:	f000 fbe0 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f000 f805 	bl	8001b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b62:	f7ff faff 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_InitTick+0x54>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <HAL_InitTick+0x58>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fbfb 	bl	8002386 <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00e      	b.n	8001bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b0f      	cmp	r3, #15
 8001b9e:	d80a      	bhi.n	8001bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f000 fbc3 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bac:	4a06      	ldr	r2, [pc, #24]	@ (8001bc8 <HAL_InitTick+0x5c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000004 	.word	0x20000004

08001bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_IncTick+0x20>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_IncTick+0x24>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a04      	ldr	r2, [pc, #16]	@ (8001bf0 <HAL_IncTick+0x24>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	20000df0 	.word	0x20000df0

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000df0 	.word	0x20000df0

08001c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff ffee 	bl	8001bf4 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d005      	beq.n	8001c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c26:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <HAL_Delay+0x44>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c32:	bf00      	nop
 8001c34:	f7ff ffde 	bl	8001bf4 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d8f7      	bhi.n	8001c34 <HAL_Delay+0x28>
  {
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000008 	.word	0x20000008

08001c54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e031      	b.n	8001cce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fa9a 	bl	80011ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d116      	bne.n	8001cc0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <HAL_ADC_Init+0x84>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	f043 0202 	orr.w	r2, r3, #2
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f970 	bl	8001f88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f023 0303 	bic.w	r3, r3, #3
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cbe:	e001      	b.n	8001cc4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	ffffeefd 	.word	0xffffeefd

08001cdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1c>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e136      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x28a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	d93a      	bls.n	8001d7e <HAL_ADC_ConfigChannel+0xa2>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d10:	d035      	beq.n	8001d7e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68d9      	ldr	r1, [r3, #12]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	3b1e      	subs	r3, #30
 8001d28:	2207      	movs	r2, #7
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	400a      	ands	r2, r1
 8001d36:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a8d      	ldr	r2, [pc, #564]	@ (8001f74 <HAL_ADC_ConfigChannel+0x298>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10a      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68d9      	ldr	r1, [r3, #12]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	061a      	lsls	r2, r3, #24
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d56:	e035      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68d9      	ldr	r1, [r3, #12]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4403      	add	r3, r0
 8001d70:	3b1e      	subs	r3, #30
 8001d72:	409a      	lsls	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d7c:	e022      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6919      	ldr	r1, [r3, #16]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	2207      	movs	r2, #7
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	400a      	ands	r2, r1
 8001da0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6919      	ldr	r1, [r3, #16]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	4603      	mov	r3, r0
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4403      	add	r3, r0
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b06      	cmp	r3, #6
 8001dca:	d824      	bhi.n	8001e16 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b05      	subs	r3, #5
 8001dde:	221f      	movs	r2, #31
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43da      	mvns	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	400a      	ands	r2, r1
 8001dec:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	3b05      	subs	r3, #5
 8001e08:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e14:	e04c      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d824      	bhi.n	8001e68 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b23      	subs	r3, #35	@ 0x23
 8001e30:	221f      	movs	r2, #31
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	3b23      	subs	r3, #35	@ 0x23
 8001e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e66:	e023      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	3b41      	subs	r3, #65	@ 0x41
 8001e7a:	221f      	movs	r2, #31
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43da      	mvns	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	400a      	ands	r2, r1
 8001e88:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b41      	subs	r3, #65	@ 0x41
 8001ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a30      	ldr	r2, [pc, #192]	@ (8001f78 <HAL_ADC_ConfigChannel+0x29c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10a      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x1f4>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ec2:	d105      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001eca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ece:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a28      	ldr	r2, [pc, #160]	@ (8001f78 <HAL_ADC_ConfigChannel+0x29c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10f      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x21e>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b12      	cmp	r3, #18
 8001ee0:	d10b      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001ee2:	4b26      	ldr	r3, [pc, #152]	@ (8001f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4a25      	ldr	r2, [pc, #148]	@ (8001f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ee8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001eec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001eee:	4b23      	ldr	r3, [pc, #140]	@ (8001f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4a22      	ldr	r2, [pc, #136]	@ (8001f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ef4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ef8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1e      	ldr	r2, [pc, #120]	@ (8001f78 <HAL_ADC_ConfigChannel+0x29c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d12b      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x280>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <HAL_ADC_ConfigChannel+0x298>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d003      	beq.n	8001f16 <HAL_ADC_ConfigChannel+0x23a>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b11      	cmp	r3, #17
 8001f14:	d122      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001f16:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001f1c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001f20:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4a15      	ldr	r2, [pc, #84]	@ (8001f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8001f28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f2c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a10      	ldr	r2, [pc, #64]	@ (8001f74 <HAL_ADC_ConfigChannel+0x298>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d111      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_ADC_ConfigChannel+0x2a4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a11      	ldr	r2, [pc, #68]	@ (8001f84 <HAL_ADC_ConfigChannel+0x2a8>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	0c9a      	lsrs	r2, r3, #18
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f4e:	e002      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f9      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	10000012 	.word	0x10000012
 8001f78:	40012000 	.word	0x40012000
 8001f7c:	40012300 	.word	0x40012300
 8001f80:	20000000 	.word	0x20000000
 8001f84:	431bde83 	.word	0x431bde83

08001f88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f90:	4b78      	ldr	r3, [pc, #480]	@ (8002174 <ADC_Init+0x1ec>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a77      	ldr	r2, [pc, #476]	@ (8002174 <ADC_Init+0x1ec>)
 8001f96:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001f9a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f9c:	4b75      	ldr	r3, [pc, #468]	@ (8002174 <ADC_Init+0x1ec>)
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4973      	ldr	r1, [pc, #460]	@ (8002174 <ADC_Init+0x1ec>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	021a      	lsls	r2, r3, #8
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ffe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6899      	ldr	r1, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002016:	4a58      	ldr	r2, [pc, #352]	@ (8002178 <ADC_Init+0x1f0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d022      	beq.n	8002062 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800202a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6899      	ldr	r1, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800204c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6899      	ldr	r1, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	e00f      	b.n	8002082 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002070:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002080:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0202 	bic.w	r2, r2, #2
 8002090:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	005a      	lsls	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01b      	beq.n	80020e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80020ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6859      	ldr	r1, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	3b01      	subs	r3, #1
 80020dc:	035a      	lsls	r2, r3, #13
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	e007      	b.n	80020f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002106:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	3b01      	subs	r3, #1
 8002114:	051a      	lsls	r2, r3, #20
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800212c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6899      	ldr	r1, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800213a:	025a      	lsls	r2, r3, #9
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002152:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6899      	ldr	r1, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	029a      	lsls	r2, r3, #10
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	609a      	str	r2, [r3, #8]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40012300 	.word	0x40012300
 8002178:	0f000001 	.word	0x0f000001

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <__NVIC_SetPriorityGrouping+0x40>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <__NVIC_SetPriorityGrouping+0x40>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00
 80021c0:	05fa0000 	.word	0x05fa0000

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4907      	ldr	r1, [pc, #28]	@ (8002218 <__NVIC_EnableIRQ+0x38>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	@ (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	@ (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	@ 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	@ 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff8e 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff29 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff3e 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff8e 	bl	8002270 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff31 	bl	80021e0 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff fc22 	bl	8001bf4 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e099      	b.n	80024f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023dc:	e00f      	b.n	80023fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023de:	f7ff fc09 	bl	8001bf4 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d908      	bls.n	80023fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2203      	movs	r2, #3
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e078      	b.n	80024f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1e8      	bne.n	80023de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	4b38      	ldr	r3, [pc, #224]	@ (80024f8 <HAL_DMA_Init+0x158>)
 8002418:	4013      	ands	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800242a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	2b04      	cmp	r3, #4
 8002456:	d107      	bne.n	8002468 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	4313      	orrs	r3, r2
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f023 0307 	bic.w	r3, r3, #7
 800247e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	2b04      	cmp	r3, #4
 8002490:	d117      	bne.n	80024c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00e      	beq.n	80024c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fa7b 	bl	80029a0 <DMA_CheckFifoParam>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2240      	movs	r2, #64	@ 0x40
 80024b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024be:	2301      	movs	r3, #1
 80024c0:	e016      	b.n	80024f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fa32 	bl	8002934 <DMA_CalcBaseAndBitshift>
 80024d0:	4603      	mov	r3, r0
 80024d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	223f      	movs	r2, #63	@ 0x3f
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	e010803f 	.word	0xe010803f

080024fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800250a:	f7ff fb73 	bl	8001bf4 <HAL_GetTick>
 800250e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d008      	beq.n	800252e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2280      	movs	r2, #128	@ 0x80
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e052      	b.n	80025d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0216 	bic.w	r2, r2, #22
 800253c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800254c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <HAL_DMA_Abort+0x62>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0208 	bic.w	r2, r2, #8
 800256c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800257e:	e013      	b.n	80025a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002580:	f7ff fb38 	bl	8001bf4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b05      	cmp	r3, #5
 800258c:	d90c      	bls.n	80025a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2203      	movs	r2, #3
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e015      	b.n	80025d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1e4      	bne.n	8002580 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ba:	223f      	movs	r2, #63	@ 0x3f
 80025bc:	409a      	lsls	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d004      	beq.n	80025fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2280      	movs	r2, #128	@ 0x80
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00c      	b.n	8002614 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2205      	movs	r2, #5
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800262c:	4b8e      	ldr	r3, [pc, #568]	@ (8002868 <HAL_DMA_IRQHandler+0x248>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a8e      	ldr	r2, [pc, #568]	@ (800286c <HAL_DMA_IRQHandler+0x24c>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0a9b      	lsrs	r3, r3, #10
 8002638:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	2208      	movs	r2, #8
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01a      	beq.n	800268c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	2208      	movs	r2, #8
 800267a:	409a      	lsls	r2, r3
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002690:	2201      	movs	r2, #1
 8002692:	409a      	lsls	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d012      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ae:	2201      	movs	r2, #1
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	f043 0202 	orr.w	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c6:	2204      	movs	r2, #4
 80026c8:	409a      	lsls	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d012      	beq.n	80026f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	2204      	movs	r2, #4
 80026e6:	409a      	lsls	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	2210      	movs	r2, #16
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d043      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d03c      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271a:	2210      	movs	r2, #16
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d018      	beq.n	8002762 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d024      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
 800274e:	e01f      	b.n	8002790 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01b      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
 8002760:	e016      	b.n	8002790 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d107      	bne.n	8002780 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0208 	bic.w	r2, r2, #8
 800277e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	2220      	movs	r2, #32
 8002796:	409a      	lsls	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 808f 	beq.w	80028c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8087 	beq.w	80028c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b6:	2220      	movs	r2, #32
 80027b8:	409a      	lsls	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d136      	bne.n	8002838 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0216 	bic.w	r2, r2, #22
 80027d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <HAL_DMA_IRQHandler+0x1da>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0208 	bic.w	r2, r2, #8
 8002808:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280e:	223f      	movs	r2, #63	@ 0x3f
 8002810:	409a      	lsls	r2, r3
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282a:	2b00      	cmp	r3, #0
 800282c:	d07e      	beq.n	800292c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
        }
        return;
 8002836:	e079      	b.n	800292c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d01d      	beq.n	8002882 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10d      	bne.n	8002870 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	2b00      	cmp	r3, #0
 800285a:	d031      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
 8002864:	e02c      	b.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
 8002866:	bf00      	nop
 8002868:	20000000 	.word	0x20000000
 800286c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d023      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
 8002880:	e01e      	b.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10f      	bne.n	80028b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0210 	bic.w	r2, r2, #16
 800289e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d032      	beq.n	800292e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d022      	beq.n	800291a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2205      	movs	r2, #5
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	3301      	adds	r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d307      	bcc.n	8002908 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f2      	bne.n	80028ec <HAL_DMA_IRQHandler+0x2cc>
 8002906:	e000      	b.n	800290a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002908:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	e000      	b.n	800292e <HAL_DMA_IRQHandler+0x30e>
        return;
 800292c:	bf00      	nop
    }
  }
}
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3b10      	subs	r3, #16
 8002944:	4a13      	ldr	r2, [pc, #76]	@ (8002994 <DMA_CalcBaseAndBitshift+0x60>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800294e:	4a12      	ldr	r2, [pc, #72]	@ (8002998 <DMA_CalcBaseAndBitshift+0x64>)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d908      	bls.n	8002974 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <DMA_CalcBaseAndBitshift+0x68>)
 800296a:	4013      	ands	r3, r2
 800296c:	1d1a      	adds	r2, r3, #4
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	659a      	str	r2, [r3, #88]	@ 0x58
 8002972:	e006      	b.n	8002982 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <DMA_CalcBaseAndBitshift+0x68>)
 800297c:	4013      	ands	r3, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	aaaaaaab 	.word	0xaaaaaaab
 8002998:	08009d24 	.word	0x08009d24
 800299c:	fffffc00 	.word	0xfffffc00

080029a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11f      	bne.n	80029fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d856      	bhi.n	8002a6e <DMA_CheckFifoParam+0xce>
 80029c0:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <DMA_CheckFifoParam+0x28>)
 80029c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c6:	bf00      	nop
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029eb 	.word	0x080029eb
 80029d0:	080029d9 	.word	0x080029d9
 80029d4:	08002a6f 	.word	0x08002a6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d046      	beq.n	8002a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e043      	b.n	8002a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029f2:	d140      	bne.n	8002a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f8:	e03d      	b.n	8002a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a02:	d121      	bne.n	8002a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d837      	bhi.n	8002a7a <DMA_CheckFifoParam+0xda>
 8002a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a10 <DMA_CheckFifoParam+0x70>)
 8002a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002a27 	.word	0x08002a27
 8002a18:	08002a21 	.word	0x08002a21
 8002a1c:	08002a39 	.word	0x08002a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e030      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d025      	beq.n	8002a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a36:	e022      	b.n	8002a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a40:	d11f      	bne.n	8002a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a46:	e01c      	b.n	8002a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d903      	bls.n	8002a56 <DMA_CheckFifoParam+0xb6>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d003      	beq.n	8002a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a54:	e018      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5a:	e015      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00e      	beq.n	8002a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6c:	e00b      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e00a      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
 8002a74:	e008      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a76:	bf00      	nop
 8002a78:	e006      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e004      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a86:	bf00      	nop
    }
  } 
  
  return status; 
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop

08002a98 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e086      	b.n	8002bb8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d106      	bne.n	8002ac2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2223      	movs	r2, #35	@ 0x23
 8002ab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7fe fbb5 	bl	800122c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8002bc0 <HAL_ETH_Init+0x128>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	4a3e      	ldr	r2, [pc, #248]	@ (8002bc0 <HAL_ETH_Init+0x128>)
 8002ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ace:	4b3c      	ldr	r3, [pc, #240]	@ (8002bc0 <HAL_ETH_Init+0x128>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ada:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc4 <HAL_ETH_Init+0x12c>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a39      	ldr	r2, [pc, #228]	@ (8002bc4 <HAL_ETH_Init+0x12c>)
 8002ae0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002ae4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002ae6:	4b37      	ldr	r3, [pc, #220]	@ (8002bc4 <HAL_ETH_Init+0x12c>)
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4935      	ldr	r1, [pc, #212]	@ (8002bc4 <HAL_ETH_Init+0x12c>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002af4:	4b33      	ldr	r3, [pc, #204]	@ (8002bc4 <HAL_ETH_Init+0x12c>)
 8002af6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b10:	f7ff f870 	bl	8001bf4 <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b16:	e011      	b.n	8002b3c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b18:	f7ff f86c 	bl	8001bf4 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b26:	d909      	bls.n	8002b3c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	22e0      	movs	r2, #224	@ 0xe0
 8002b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e03d      	b.n	8002bb8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e4      	bne.n	8002b18 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f97a 	bl	8002e48 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fa25 	bl	8002fa4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fa7b 	bl	8003056 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	461a      	mov	r2, r3
 8002b66:	2100      	movs	r1, #0
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f9e3 	bl	8002f34 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <HAL_ETH_Init+0x130>)
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002ba2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40013800 	.word	0x40013800
 8002bc8:	00020060 	.word	0x00020060

08002bcc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4b53      	ldr	r3, [pc, #332]	@ (8002d30 <ETH_SetMACConfig+0x164>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	7b9b      	ldrb	r3, [r3, #14]
 8002bea:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	7c12      	ldrb	r2, [r2, #16]
 8002bf0:	2a00      	cmp	r2, #0
 8002bf2:	d102      	bne.n	8002bfa <ETH_SetMACConfig+0x2e>
 8002bf4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002bf8:	e000      	b.n	8002bfc <ETH_SetMACConfig+0x30>
 8002bfa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002bfc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	7c52      	ldrb	r2, [r2, #17]
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d102      	bne.n	8002c0c <ETH_SetMACConfig+0x40>
 8002c06:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002c0a:	e000      	b.n	8002c0e <ETH_SetMACConfig+0x42>
 8002c0c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c0e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	7fdb      	ldrb	r3, [r3, #31]
 8002c1a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002c1c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	7f92      	ldrb	r2, [r2, #30]
 8002c28:	2a00      	cmp	r2, #0
 8002c2a:	d102      	bne.n	8002c32 <ETH_SetMACConfig+0x66>
 8002c2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c30:	e000      	b.n	8002c34 <ETH_SetMACConfig+0x68>
 8002c32:	2200      	movs	r2, #0
                        macconf->Speed |
 8002c34:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	7f1b      	ldrb	r3, [r3, #28]
 8002c3a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c3c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c42:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	791b      	ldrb	r3, [r3, #4]
 8002c48:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002c4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c52:	2a00      	cmp	r2, #0
 8002c54:	d102      	bne.n	8002c5c <ETH_SetMACConfig+0x90>
 8002c56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c5a:	e000      	b.n	8002c5e <ETH_SetMACConfig+0x92>
 8002c5c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	7bdb      	ldrb	r3, [r3, #15]
 8002c64:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c66:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c74:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002c76:	4313      	orrs	r3, r2
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f7fe ffbc 	bl	8001c0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002caa:	4013      	ands	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	d101      	bne.n	8002cc2 <ETH_SetMACConfig+0xf6>
 8002cbe:	2280      	movs	r2, #128	@ 0x80
 8002cc0:	e000      	b.n	8002cc4 <ETH_SetMACConfig+0xf8>
 8002cc2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cc4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002cca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002cd2:	2a01      	cmp	r2, #1
 8002cd4:	d101      	bne.n	8002cda <ETH_SetMACConfig+0x10e>
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	e000      	b.n	8002cdc <ETH_SetMACConfig+0x110>
 8002cda:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002cdc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002ce4:	2a01      	cmp	r2, #1
 8002ce6:	d101      	bne.n	8002cec <ETH_SetMACConfig+0x120>
 8002ce8:	2204      	movs	r2, #4
 8002cea:	e000      	b.n	8002cee <ETH_SetMACConfig+0x122>
 8002cec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002cee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002cf6:	2a01      	cmp	r2, #1
 8002cf8:	d101      	bne.n	8002cfe <ETH_SetMACConfig+0x132>
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	e000      	b.n	8002d00 <ETH_SetMACConfig+0x134>
 8002cfe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d00:	4313      	orrs	r3, r2
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f7fe ff77 	bl	8001c0c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	619a      	str	r2, [r3, #24]
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	fd20810f 	.word	0xfd20810f

08002d34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e44 <ETH_SetDMAConfig+0x110>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	7b1b      	ldrb	r3, [r3, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <ETH_SetDMAConfig+0x2c>
 8002d5a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d5e:	e000      	b.n	8002d62 <ETH_SetDMAConfig+0x2e>
 8002d60:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	7b5b      	ldrb	r3, [r3, #13]
 8002d66:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d68:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	7f52      	ldrb	r2, [r2, #29]
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	d102      	bne.n	8002d78 <ETH_SetDMAConfig+0x44>
 8002d72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002d76:	e000      	b.n	8002d7a <ETH_SetDMAConfig+0x46>
 8002d78:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d7a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	7b9b      	ldrb	r3, [r3, #14]
 8002d80:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d82:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d88:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	7f1b      	ldrb	r3, [r3, #28]
 8002d8e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002d90:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	7f9b      	ldrb	r3, [r3, #30]
 8002d96:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d98:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002da6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002da8:	4313      	orrs	r3, r2
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002db8:	461a      	mov	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f7fe ff1e 	bl	8001c0c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	791b      	ldrb	r3, [r3, #4]
 8002de2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002de8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002dee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002df4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dfc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002dfe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e06:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e0c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e1a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f7fe feef 	bl	8001c0c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6013      	str	r3, [r2, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	f8de3f23 	.word	0xf8de3f23

08002e48 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b0a6      	sub	sp, #152	@ 0x98
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002eb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002eb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ec2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fe7f 	bl	8002bcc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002edc:	2301      	movs	r3, #1
 8002ede:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002efe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f02:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002f04:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f08:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f0e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	4619      	mov	r1, r3
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff05 	bl	8002d34 <ETH_SetDMAConfig>
}
 8002f2a:	bf00      	nop
 8002f2c:	3798      	adds	r7, #152	@ 0x98
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3305      	adds	r3, #5
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	3204      	adds	r2, #4
 8002f4c:	7812      	ldrb	r2, [r2, #0]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <ETH_MACAddressConfig+0x68>)
 8002f56:	4413      	add	r3, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3303      	adds	r3, #3
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	061a      	lsls	r2, r3, #24
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3302      	adds	r3, #2
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3301      	adds	r3, #1
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	7812      	ldrb	r2, [r2, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <ETH_MACAddressConfig+0x6c>)
 8002f86:	4413      	add	r3, r2
 8002f88:	461a      	mov	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	6013      	str	r3, [r2, #0]
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40028040 	.word	0x40028040
 8002fa0:	40028044 	.word	0x40028044

08002fa4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e03e      	b.n	8003030 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68d9      	ldr	r1, [r3, #12]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	3206      	adds	r2, #6
 8002fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d80c      	bhi.n	8003014 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68d9      	ldr	r1, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	440b      	add	r3, r1
 800300c:	461a      	mov	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	e004      	b.n	800301e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	461a      	mov	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3301      	adds	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d9bd      	bls.n	8002fb2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003048:	611a      	str	r2, [r3, #16]
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003056:	b480      	push	{r7}
 8003058:	b085      	sub	sp, #20
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	e048      	b.n	80030f6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6919      	ldr	r1, [r3, #16]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2200      	movs	r2, #0
 8003080:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2200      	movs	r2, #0
 800308c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2200      	movs	r2, #0
 8003092:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2200      	movs	r2, #0
 8003098:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80030a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	3212      	adds	r2, #18
 80030c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d80c      	bhi.n	80030e6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6919      	ldr	r1, [r3, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	440b      	add	r3, r1
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	e004      	b.n	80030f0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3301      	adds	r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d9b3      	bls.n	8003064 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003126:	60da      	str	r2, [r3, #12]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	@ 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	e175      	b.n	8003440 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	429a      	cmp	r2, r3
 800316e:	f040 8164 	bne.w	800343a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d005      	beq.n	800318a <HAL_GPIO_Init+0x56>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d130      	bne.n	80031ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	2203      	movs	r2, #3
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c0:	2201      	movs	r2, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 0201 	and.w	r2, r3, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d017      	beq.n	8003228 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d123      	bne.n	800327c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	08da      	lsrs	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3208      	adds	r2, #8
 800323c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	220f      	movs	r2, #15
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	08da      	lsrs	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3208      	adds	r2, #8
 8003276:	69b9      	ldr	r1, [r7, #24]
 8003278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0203 	and.w	r2, r3, #3
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80be 	beq.w	800343a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032be:	4b66      	ldr	r3, [pc, #408]	@ (8003458 <HAL_GPIO_Init+0x324>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	4a65      	ldr	r2, [pc, #404]	@ (8003458 <HAL_GPIO_Init+0x324>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ca:	4b63      	ldr	r3, [pc, #396]	@ (8003458 <HAL_GPIO_Init+0x324>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032d6:	4a61      	ldr	r2, [pc, #388]	@ (800345c <HAL_GPIO_Init+0x328>)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a58      	ldr	r2, [pc, #352]	@ (8003460 <HAL_GPIO_Init+0x32c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d037      	beq.n	8003372 <HAL_GPIO_Init+0x23e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a57      	ldr	r2, [pc, #348]	@ (8003464 <HAL_GPIO_Init+0x330>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d031      	beq.n	800336e <HAL_GPIO_Init+0x23a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a56      	ldr	r2, [pc, #344]	@ (8003468 <HAL_GPIO_Init+0x334>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02b      	beq.n	800336a <HAL_GPIO_Init+0x236>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a55      	ldr	r2, [pc, #340]	@ (800346c <HAL_GPIO_Init+0x338>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d025      	beq.n	8003366 <HAL_GPIO_Init+0x232>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a54      	ldr	r2, [pc, #336]	@ (8003470 <HAL_GPIO_Init+0x33c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01f      	beq.n	8003362 <HAL_GPIO_Init+0x22e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a53      	ldr	r2, [pc, #332]	@ (8003474 <HAL_GPIO_Init+0x340>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d019      	beq.n	800335e <HAL_GPIO_Init+0x22a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a52      	ldr	r2, [pc, #328]	@ (8003478 <HAL_GPIO_Init+0x344>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_GPIO_Init+0x226>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a51      	ldr	r2, [pc, #324]	@ (800347c <HAL_GPIO_Init+0x348>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00d      	beq.n	8003356 <HAL_GPIO_Init+0x222>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a50      	ldr	r2, [pc, #320]	@ (8003480 <HAL_GPIO_Init+0x34c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <HAL_GPIO_Init+0x21e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4f      	ldr	r2, [pc, #316]	@ (8003484 <HAL_GPIO_Init+0x350>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_GPIO_Init+0x21a>
 800334a:	2309      	movs	r3, #9
 800334c:	e012      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800334e:	230a      	movs	r3, #10
 8003350:	e010      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003352:	2308      	movs	r3, #8
 8003354:	e00e      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003356:	2307      	movs	r3, #7
 8003358:	e00c      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800335a:	2306      	movs	r3, #6
 800335c:	e00a      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800335e:	2305      	movs	r3, #5
 8003360:	e008      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003362:	2304      	movs	r3, #4
 8003364:	e006      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003366:	2303      	movs	r3, #3
 8003368:	e004      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800336a:	2302      	movs	r3, #2
 800336c:	e002      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003372:	2300      	movs	r3, #0
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	f002 0203 	and.w	r2, r2, #3
 800337a:	0092      	lsls	r2, r2, #2
 800337c:	4093      	lsls	r3, r2
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003384:	4935      	ldr	r1, [pc, #212]	@ (800345c <HAL_GPIO_Init+0x328>)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003392:	4b3d      	ldr	r3, [pc, #244]	@ (8003488 <HAL_GPIO_Init+0x354>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033b6:	4a34      	ldr	r2, [pc, #208]	@ (8003488 <HAL_GPIO_Init+0x354>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033bc:	4b32      	ldr	r3, [pc, #200]	@ (8003488 <HAL_GPIO_Init+0x354>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e0:	4a29      	ldr	r2, [pc, #164]	@ (8003488 <HAL_GPIO_Init+0x354>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033e6:	4b28      	ldr	r3, [pc, #160]	@ (8003488 <HAL_GPIO_Init+0x354>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800340a:	4a1f      	ldr	r2, [pc, #124]	@ (8003488 <HAL_GPIO_Init+0x354>)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003410:	4b1d      	ldr	r3, [pc, #116]	@ (8003488 <HAL_GPIO_Init+0x354>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003434:	4a14      	ldr	r2, [pc, #80]	@ (8003488 <HAL_GPIO_Init+0x354>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3301      	adds	r3, #1
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	f67f ae86 	bls.w	8003154 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	3724      	adds	r7, #36	@ 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	40013800 	.word	0x40013800
 8003460:	40020000 	.word	0x40020000
 8003464:	40020400 	.word	0x40020400
 8003468:	40020800 	.word	0x40020800
 800346c:	40020c00 	.word	0x40020c00
 8003470:	40021000 	.word	0x40021000
 8003474:	40021400 	.word	0x40021400
 8003478:	40021800 	.word	0x40021800
 800347c:	40021c00 	.word	0x40021c00
 8003480:	40022000 	.word	0x40022000
 8003484:	40022400 	.word	0x40022400
 8003488:	40013c00 	.word	0x40013c00

0800348c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	807b      	strh	r3, [r7, #2]
 8003498:	4613      	mov	r3, r2
 800349a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800349c:	787b      	ldrb	r3, [r7, #1]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034a2:	887a      	ldrh	r2, [r7, #2]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034a8:	e003      	b.n	80034b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034aa:	887b      	ldrh	r3, [r7, #2]
 80034ac:	041a      	lsls	r2, r3, #16
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	619a      	str	r2, [r3, #24]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e08b      	b.n	80035ea <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd ff58 	bl	800139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2224      	movs	r2, #36	@ 0x24
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003510:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003520:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d107      	bne.n	800353a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	e006      	b.n	8003548 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003546:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d108      	bne.n	8003562 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	e007      	b.n	8003572 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003570:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b1d      	ldr	r3, [pc, #116]	@ (80035f4 <HAL_I2C_Init+0x134>)
 800357e:	430b      	orrs	r3, r1
 8003580:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003590:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69d9      	ldr	r1, [r3, #28]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1a      	ldr	r2, [r3, #32]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	02008000 	.word	0x02008000

080035f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	461a      	mov	r2, r3
 8003604:	460b      	mov	r3, r1
 8003606:	817b      	strh	r3, [r7, #10]
 8003608:	4613      	mov	r3, r2
 800360a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b20      	cmp	r3, #32
 8003616:	f040 80fd 	bne.w	8003814 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_I2C_Master_Transmit+0x30>
 8003624:	2302      	movs	r3, #2
 8003626:	e0f6      	b.n	8003816 <HAL_I2C_Master_Transmit+0x21e>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003630:	f7fe fae0 	bl	8001bf4 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	2319      	movs	r3, #25
 800363c:	2201      	movs	r2, #1
 800363e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fa00 	bl	8003a48 <I2C_WaitOnFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0e1      	b.n	8003816 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2221      	movs	r2, #33	@ 0x21
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2210      	movs	r2, #16
 800365e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	893a      	ldrh	r2, [r7, #8]
 8003672:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	2bff      	cmp	r3, #255	@ 0xff
 8003682:	d906      	bls.n	8003692 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	22ff      	movs	r2, #255	@ 0xff
 8003688:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800368a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e007      	b.n	80036a2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800369c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036a0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d024      	beq.n	80036f4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	781a      	ldrb	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	8979      	ldrh	r1, [r7, #10]
 80036e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003820 <HAL_I2C_Master_Transmit+0x228>)
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fb6f 	bl	8003dd0 <I2C_TransferConfig>
 80036f2:	e066      	b.n	80037c2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	8979      	ldrh	r1, [r7, #10]
 80036fc:	4b48      	ldr	r3, [pc, #288]	@ (8003820 <HAL_I2C_Master_Transmit+0x228>)
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fb64 	bl	8003dd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003708:	e05b      	b.n	80037c2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	6a39      	ldr	r1, [r7, #32]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 f9f3 	bl	8003afa <I2C_WaitOnTXISFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e07b      	b.n	8003816 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d034      	beq.n	80037c2 <HAL_I2C_Master_Transmit+0x1ca>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375c:	2b00      	cmp	r3, #0
 800375e:	d130      	bne.n	80037c2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	2200      	movs	r2, #0
 8003768:	2180      	movs	r1, #128	@ 0x80
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f96c 	bl	8003a48 <I2C_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e04d      	b.n	8003816 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	2bff      	cmp	r3, #255	@ 0xff
 8003782:	d90e      	bls.n	80037a2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	22ff      	movs	r2, #255	@ 0xff
 8003788:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378e:	b2da      	uxtb	r2, r3
 8003790:	8979      	ldrh	r1, [r7, #10]
 8003792:	2300      	movs	r3, #0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fb18 	bl	8003dd0 <I2C_TransferConfig>
 80037a0:	e00f      	b.n	80037c2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	8979      	ldrh	r1, [r7, #10]
 80037b4:	2300      	movs	r3, #0
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fb07 	bl	8003dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d19e      	bne.n	800370a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	6a39      	ldr	r1, [r7, #32]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f9d9 	bl	8003b88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e01a      	b.n	8003816 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2220      	movs	r2, #32
 80037e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <HAL_I2C_Master_Transmit+0x22c>)
 80037f4:	400b      	ands	r3, r1
 80037f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e000      	b.n	8003816 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	80002000 	.word	0x80002000
 8003824:	fe00e800 	.word	0xfe00e800

08003828 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	@ 0x28
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	460b      	mov	r3, r1
 8003836:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b20      	cmp	r3, #32
 8003846:	f040 80d2 	bne.w	80039ee <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003858:	d101      	bne.n	800385e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800385a:	2302      	movs	r3, #2
 800385c:	e0c8      	b.n	80039f0 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_I2C_IsDeviceReady+0x44>
 8003868:	2302      	movs	r3, #2
 800386a:	e0c1      	b.n	80039f0 <HAL_I2C_IsDeviceReady+0x1c8>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2224      	movs	r2, #36	@ 0x24
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d105      	bne.n	8003896 <HAL_I2C_IsDeviceReady+0x6e>
 800388a:	897b      	ldrh	r3, [r7, #10]
 800388c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003890:	4b59      	ldr	r3, [pc, #356]	@ (80039f8 <HAL_I2C_IsDeviceReady+0x1d0>)
 8003892:	4313      	orrs	r3, r2
 8003894:	e004      	b.n	80038a0 <HAL_I2C_IsDeviceReady+0x78>
 8003896:	897b      	ldrh	r3, [r7, #10]
 8003898:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800389c:	4b57      	ldr	r3, [pc, #348]	@ (80039fc <HAL_I2C_IsDeviceReady+0x1d4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80038a6:	f7fe f9a5 	bl	8001bf4 <HAL_GetTick>
 80038aa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80038d8:	e034      	b.n	8003944 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d01a      	beq.n	8003918 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038e2:	f7fe f987 	bl	8001bf4 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <HAL_I2C_IsDeviceReady+0xd0>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10f      	bne.n	8003918 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e06b      	b.n	80039f0 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b20      	cmp	r3, #32
 8003924:	bf0c      	ite	eq
 8003926:	2301      	moveq	r3, #1
 8003928:	2300      	movne	r3, #0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b10      	cmp	r3, #16
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003944:	7ffb      	ldrb	r3, [r7, #31]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <HAL_I2C_IsDeviceReady+0x128>
 800394a:	7fbb      	ldrb	r3, [r7, #30]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0c4      	beq.n	80038da <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b10      	cmp	r3, #16
 800395c:	d01a      	beq.n	8003994 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2200      	movs	r2, #0
 8003966:	2120      	movs	r1, #32
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f86d 	bl	8003a48 <I2C_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e03b      	b.n	80039f0 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2220      	movs	r2, #32
 800397e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e02d      	b.n	80039f0 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2200      	movs	r2, #0
 800399c:	2120      	movs	r1, #32
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f852 	bl	8003a48 <I2C_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e020      	b.n	80039f0 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2210      	movs	r2, #16
 80039b4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2220      	movs	r2, #32
 80039bc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	3301      	adds	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	f63f af5a 	bhi.w	8003882 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f043 0220 	orr.w	r2, r3, #32
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	02002000 	.word	0x02002000
 80039fc:	02002800 	.word	0x02002800

08003a00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d103      	bne.n	8003a1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d007      	beq.n	8003a3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	619a      	str	r2, [r3, #24]
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a58:	e03b      	b.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	6839      	ldr	r1, [r7, #0]
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f8d6 	bl	8003c10 <I2C_IsErrorOccurred>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e041      	b.n	8003af2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d02d      	beq.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fe f8bd 	bl	8001bf4 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d122      	bne.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4013      	ands	r3, r2
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d113      	bne.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aae:	f043 0220 	orr.w	r2, r3, #32
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e00f      	b.n	8003af2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4013      	ands	r3, r2
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	bf0c      	ite	eq
 8003ae2:	2301      	moveq	r3, #1
 8003ae4:	2300      	movne	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d0b4      	beq.n	8003a5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b06:	e033      	b.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f87f 	bl	8003c10 <I2C_IsErrorOccurred>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e031      	b.n	8003b80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b22:	d025      	beq.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b24:	f7fe f866 	bl	8001bf4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11a      	bne.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d013      	beq.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e007      	b.n	8003b80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d1c4      	bne.n	8003b08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b94:	e02f      	b.n	8003bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f838 	bl	8003c10 <I2C_IsErrorOccurred>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e02d      	b.n	8003c06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003baa:	f7fe f823 	bl	8001bf4 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d302      	bcc.n	8003bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d11a      	bne.n	8003bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d013      	beq.n	8003bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e007      	b.n	8003c06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d1c8      	bne.n	8003b96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	@ 0x28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d068      	beq.n	8003d0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2210      	movs	r2, #16
 8003c42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c44:	e049      	b.n	8003cda <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d045      	beq.n	8003cda <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fd ffd1 	bl	8001bf4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <I2C_IsErrorOccurred+0x54>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d13a      	bne.n	8003cda <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c86:	d121      	bne.n	8003ccc <I2C_IsErrorOccurred+0xbc>
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c8e:	d01d      	beq.n	8003ccc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d01a      	beq.n	8003ccc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ca4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ca6:	f7fd ffa5 	bl	8001bf4 <HAL_GetTick>
 8003caa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cac:	e00e      	b.n	8003ccc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cae:	f7fd ffa1 	bl	8001bf4 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b19      	cmp	r3, #25
 8003cba:	d907      	bls.n	8003ccc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	f043 0320 	orr.w	r3, r3, #32
 8003cc2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003cca:	e006      	b.n	8003cda <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d1e9      	bne.n	8003cae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d003      	beq.n	8003cf0 <I2C_IsErrorOccurred+0xe0>
 8003ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0aa      	beq.n	8003c46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f043 0304 	orr.w	r3, r3, #4
 8003d06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00b      	beq.n	8003d5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f043 0308 	orr.w	r3, r3, #8
 8003d48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	f043 0302 	orr.w	r3, r3, #2
 8003d6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01c      	beq.n	8003dbe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7ff fe3b 	bl	8003a00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6859      	ldr	r1, [r3, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4b0d      	ldr	r3, [pc, #52]	@ (8003dcc <I2C_IsErrorOccurred+0x1bc>)
 8003d96:	400b      	ands	r3, r1
 8003d98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3728      	adds	r7, #40	@ 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	fe00e800 	.word	0xfe00e800

08003dd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	607b      	str	r3, [r7, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	817b      	strh	r3, [r7, #10]
 8003dde:	4613      	mov	r3, r2
 8003de0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003de2:	897b      	ldrh	r3, [r7, #10]
 8003de4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003de8:	7a7b      	ldrb	r3, [r7, #9]
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003df0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dfe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	0d5b      	lsrs	r3, r3, #21
 8003e0a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e0e:	4b08      	ldr	r3, [pc, #32]	@ (8003e30 <I2C_TransferConfig+0x60>)
 8003e10:	430b      	orrs	r3, r1
 8003e12:	43db      	mvns	r3, r3
 8003e14:	ea02 0103 	and.w	r1, r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	03ff63ff 	.word	0x03ff63ff

08003e34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d138      	bne.n	8003ebc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e032      	b.n	8003ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2224      	movs	r2, #36	@ 0x24
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6819      	ldr	r1, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d139      	bne.n	8003f54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e033      	b.n	8003f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2224      	movs	r2, #36	@ 0x24
 8003efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0201 	bic.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e000      	b.n	8003f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f54:	2302      	movs	r3, #2
  }
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af02      	add	r7, sp, #8
 8003f68:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e108      	b.n	8004186 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fd fc20 	bl	80017d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2203      	movs	r2, #3
 8003f98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fa2:	d102      	bne.n	8003faa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f002 fe24 	bl	8006bfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	7c1a      	ldrb	r2, [r3, #16]
 8003fbc:	f88d 2000 	strb.w	r2, [sp]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fc4:	f002 fdc0 	bl	8006b48 <USB_CoreInit>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e0d5      	b.n	8004186 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f002 fe1c 	bl	8006c1e <USB_SetCurrentMode>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0c6      	b.n	8004186 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	e04a      	b.n	8004094 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3315      	adds	r3, #21
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004012:	7bfa      	ldrb	r2, [r7, #15]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	3314      	adds	r3, #20
 8004022:	7bfa      	ldrb	r2, [r7, #15]
 8004024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004026:	7bfa      	ldrb	r2, [r7, #15]
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	b298      	uxth	r0, r3
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	332e      	adds	r3, #46	@ 0x2e
 800403a:	4602      	mov	r2, r0
 800403c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800403e:	7bfa      	ldrb	r2, [r7, #15]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	3318      	adds	r3, #24
 800404e:	2200      	movs	r2, #0
 8004050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	331c      	adds	r3, #28
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3320      	adds	r3, #32
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	3324      	adds	r3, #36	@ 0x24
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	3301      	adds	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	791b      	ldrb	r3, [r3, #4]
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	429a      	cmp	r2, r3
 800409c:	d3af      	bcc.n	8003ffe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]
 80040a2:	e044      	b.n	800412e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040a4:	7bfa      	ldrb	r2, [r7, #15]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040ba:	7bfa      	ldrb	r2, [r7, #15]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040e6:	7bfa      	ldrb	r2, [r7, #15]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004112:	7bfa      	ldrb	r2, [r7, #15]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	3301      	adds	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	791b      	ldrb	r3, [r3, #4]
 8004132:	7bfa      	ldrb	r2, [r7, #15]
 8004134:	429a      	cmp	r2, r3
 8004136:	d3b5      	bcc.n	80040a4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	7c1a      	ldrb	r2, [r3, #16]
 8004140:	f88d 2000 	strb.w	r2, [sp]
 8004144:	3304      	adds	r3, #4
 8004146:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004148:	f002 fdb6 	bl	8006cb8 <USB_DevInit>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2202      	movs	r2, #2
 8004156:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e013      	b.n	8004186 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	7b1b      	ldrb	r3, [r3, #12]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d102      	bne.n	800417a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f80b 	bl	8004190 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f002 ff71 	bl	8007066 <USB_DevDisconnect>

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041be:	4b05      	ldr	r3, [pc, #20]	@ (80041d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	10000003 	.word	0x10000003

080041d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041dc:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a04      	ldr	r2, [pc, #16]	@ (80041f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40007000 	.word	0x40007000

080041f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	4b23      	ldr	r3, [pc, #140]	@ (8004290 <HAL_PWREx_EnableOverDrive+0x98>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	4a22      	ldr	r2, [pc, #136]	@ (8004290 <HAL_PWREx_EnableOverDrive+0x98>)
 8004208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420c:	6413      	str	r3, [r2, #64]	@ 0x40
 800420e:	4b20      	ldr	r3, [pc, #128]	@ (8004290 <HAL_PWREx_EnableOverDrive+0x98>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800421a:	4b1e      	ldr	r3, [pc, #120]	@ (8004294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1d      	ldr	r2, [pc, #116]	@ (8004294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004224:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004226:	f7fd fce5 	bl	8001bf4 <HAL_GetTick>
 800422a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800422c:	e009      	b.n	8004242 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800422e:	f7fd fce1 	bl	8001bf4 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800423c:	d901      	bls.n	8004242 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e022      	b.n	8004288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004242:	4b14      	ldr	r3, [pc, #80]	@ (8004294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800424a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424e:	d1ee      	bne.n	800422e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004250:	4b10      	ldr	r3, [pc, #64]	@ (8004294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0f      	ldr	r2, [pc, #60]	@ (8004294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800425a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800425c:	f7fd fcca 	bl	8001bf4 <HAL_GetTick>
 8004260:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004262:	e009      	b.n	8004278 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004264:	f7fd fcc6 	bl	8001bf4 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004272:	d901      	bls.n	8004278 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e007      	b.n	8004288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004278:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004284:	d1ee      	bne.n	8004264 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40023800 	.word	0x40023800
 8004294:	40007000 	.word	0x40007000

08004298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042a0:	2300      	movs	r3, #0
 80042a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e29b      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 8087 	beq.w	80043ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042bc:	4b96      	ldr	r3, [pc, #600]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d00c      	beq.n	80042e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c8:	4b93      	ldr	r3, [pc, #588]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d112      	bne.n	80042fa <HAL_RCC_OscConfig+0x62>
 80042d4:	4b90      	ldr	r3, [pc, #576]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042e0:	d10b      	bne.n	80042fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e2:	4b8d      	ldr	r3, [pc, #564]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d06c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x130>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d168      	bne.n	80043c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e275      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004302:	d106      	bne.n	8004312 <HAL_RCC_OscConfig+0x7a>
 8004304:	4b84      	ldr	r3, [pc, #528]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a83      	ldr	r2, [pc, #524]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 800430a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e02e      	b.n	8004370 <HAL_RCC_OscConfig+0xd8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10c      	bne.n	8004334 <HAL_RCC_OscConfig+0x9c>
 800431a:	4b7f      	ldr	r3, [pc, #508]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7e      	ldr	r2, [pc, #504]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b7c      	ldr	r3, [pc, #496]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a7b      	ldr	r2, [pc, #492]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 800432c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e01d      	b.n	8004370 <HAL_RCC_OscConfig+0xd8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0xc0>
 800433e:	4b76      	ldr	r3, [pc, #472]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a75      	ldr	r2, [pc, #468]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b73      	ldr	r3, [pc, #460]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a72      	ldr	r2, [pc, #456]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e00b      	b.n	8004370 <HAL_RCC_OscConfig+0xd8>
 8004358:	4b6f      	ldr	r3, [pc, #444]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6e      	ldr	r2, [pc, #440]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 800435e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b6c      	ldr	r3, [pc, #432]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a6b      	ldr	r2, [pc, #428]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 800436a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800436e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd fc3c 	bl	8001bf4 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004380:	f7fd fc38 	bl	8001bf4 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	@ 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e229      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b61      	ldr	r3, [pc, #388]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0xe8>
 800439e:	e014      	b.n	80043ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fd fc28 	bl	8001bf4 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fd fc24 	bl	8001bf4 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	@ 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e215      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ba:	4b57      	ldr	r3, [pc, #348]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x110>
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d069      	beq.n	80044aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043d6:	4b50      	ldr	r3, [pc, #320]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b4d      	ldr	r3, [pc, #308]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d11c      	bne.n	8004428 <HAL_RCC_OscConfig+0x190>
 80043ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d116      	bne.n	8004428 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fa:	4b47      	ldr	r3, [pc, #284]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x17a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e1e9      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004412:	4b41      	ldr	r3, [pc, #260]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	493d      	ldr	r1, [pc, #244]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004426:	e040      	b.n	80044aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d023      	beq.n	8004478 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004430:	4b39      	ldr	r3, [pc, #228]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a38      	ldr	r2, [pc, #224]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fd fbda 	bl	8001bf4 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004444:	f7fd fbd6 	bl	8001bf4 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e1c7      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004456:	4b30      	ldr	r3, [pc, #192]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004462:	4b2d      	ldr	r3, [pc, #180]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4929      	ldr	r1, [pc, #164]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]
 8004476:	e018      	b.n	80044aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004478:	4b27      	ldr	r3, [pc, #156]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a26      	ldr	r2, [pc, #152]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fd fbb6 	bl	8001bf4 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800448c:	f7fd fbb2 	bl	8001bf4 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e1a3      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449e:	4b1e      	ldr	r3, [pc, #120]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d038      	beq.n	8004528 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d019      	beq.n	80044f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044be:	4b16      	ldr	r3, [pc, #88]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80044c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c2:	4a15      	ldr	r2, [pc, #84]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ca:	f7fd fb93 	bl	8001bf4 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d2:	f7fd fb8f 	bl	8001bf4 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e180      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80044e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x23a>
 80044f0:	e01a      	b.n	8004528 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f2:	4b09      	ldr	r3, [pc, #36]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80044f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f6:	4a08      	ldr	r2, [pc, #32]	@ (8004518 <HAL_RCC_OscConfig+0x280>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fe:	f7fd fb79 	bl	8001bf4 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004504:	e00a      	b.n	800451c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004506:	f7fd fb75 	bl	8001bf4 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d903      	bls.n	800451c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e166      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
 8004518:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800451c:	4b92      	ldr	r3, [pc, #584]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 800451e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1ee      	bne.n	8004506 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80a4 	beq.w	800467e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004536:	4b8c      	ldr	r3, [pc, #560]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10d      	bne.n	800455e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004542:	4b89      	ldr	r3, [pc, #548]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	4a88      	ldr	r2, [pc, #544]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800454c:	6413      	str	r3, [r2, #64]	@ 0x40
 800454e:	4b86      	ldr	r3, [pc, #536]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455a:	2301      	movs	r3, #1
 800455c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800455e:	4b83      	ldr	r3, [pc, #524]	@ (800476c <HAL_RCC_OscConfig+0x4d4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d118      	bne.n	800459c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800456a:	4b80      	ldr	r3, [pc, #512]	@ (800476c <HAL_RCC_OscConfig+0x4d4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a7f      	ldr	r2, [pc, #508]	@ (800476c <HAL_RCC_OscConfig+0x4d4>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004576:	f7fd fb3d 	bl	8001bf4 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457e:	f7fd fb39 	bl	8001bf4 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b64      	cmp	r3, #100	@ 0x64
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e12a      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004590:	4b76      	ldr	r3, [pc, #472]	@ (800476c <HAL_RCC_OscConfig+0x4d4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_OscConfig+0x31a>
 80045a4:	4b70      	ldr	r3, [pc, #448]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a8:	4a6f      	ldr	r2, [pc, #444]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b0:	e02d      	b.n	800460e <HAL_RCC_OscConfig+0x376>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x33c>
 80045ba:	4b6b      	ldr	r3, [pc, #428]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045be:	4a6a      	ldr	r2, [pc, #424]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c6:	4b68      	ldr	r3, [pc, #416]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ca:	4a67      	ldr	r2, [pc, #412]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d2:	e01c      	b.n	800460e <HAL_RCC_OscConfig+0x376>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d10c      	bne.n	80045f6 <HAL_RCC_OscConfig+0x35e>
 80045dc:	4b62      	ldr	r3, [pc, #392]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e0:	4a61      	ldr	r2, [pc, #388]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80045e2:	f043 0304 	orr.w	r3, r3, #4
 80045e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e8:	4b5f      	ldr	r3, [pc, #380]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f4:	e00b      	b.n	800460e <HAL_RCC_OscConfig+0x376>
 80045f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	6713      	str	r3, [r2, #112]	@ 0x70
 8004602:	4b59      	ldr	r3, [pc, #356]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004606:	4a58      	ldr	r2, [pc, #352]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d015      	beq.n	8004642 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004616:	f7fd faed 	bl	8001bf4 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461c:	e00a      	b.n	8004634 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461e:	f7fd fae9 	bl	8001bf4 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e0d8      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	4b4c      	ldr	r3, [pc, #304]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ee      	beq.n	800461e <HAL_RCC_OscConfig+0x386>
 8004640:	e014      	b.n	800466c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004642:	f7fd fad7 	bl	8001bf4 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004648:	e00a      	b.n	8004660 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fd fad3 	bl	8001bf4 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e0c2      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004660:	4b41      	ldr	r3, [pc, #260]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1ee      	bne.n	800464a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d105      	bne.n	800467e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004672:	4b3d      	ldr	r3, [pc, #244]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	4a3c      	ldr	r2, [pc, #240]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004678:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800467c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 80ae 	beq.w	80047e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004688:	4b37      	ldr	r3, [pc, #220]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 030c 	and.w	r3, r3, #12
 8004690:	2b08      	cmp	r3, #8
 8004692:	d06d      	beq.n	8004770 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d14b      	bne.n	8004734 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469c:	4b32      	ldr	r3, [pc, #200]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a31      	ldr	r2, [pc, #196]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80046a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fd faa4 	bl	8001bf4 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b0:	f7fd faa0 	bl	8001bf4 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e091      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c2:	4b29      	ldr	r3, [pc, #164]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	019b      	lsls	r3, r3, #6
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	3b01      	subs	r3, #1
 80046e8:	041b      	lsls	r3, r3, #16
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f0:	061b      	lsls	r3, r3, #24
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f8:	071b      	lsls	r3, r3, #28
 80046fa:	491b      	ldr	r1, [pc, #108]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004700:	4b19      	ldr	r3, [pc, #100]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a18      	ldr	r2, [pc, #96]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800470a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fd fa72 	bl	8001bf4 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004714:	f7fd fa6e 	bl	8001bf4 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e05f      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004726:	4b10      	ldr	r3, [pc, #64]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x47c>
 8004732:	e057      	b.n	80047e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004734:	4b0c      	ldr	r3, [pc, #48]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a0b      	ldr	r2, [pc, #44]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 800473a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800473e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fd fa58 	bl	8001bf4 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004748:	f7fd fa54 	bl	8001bf4 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e045      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475a:	4b03      	ldr	r3, [pc, #12]	@ (8004768 <HAL_RCC_OscConfig+0x4d0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x4b0>
 8004766:	e03d      	b.n	80047e4 <HAL_RCC_OscConfig+0x54c>
 8004768:	40023800 	.word	0x40023800
 800476c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004770:	4b1f      	ldr	r3, [pc, #124]	@ (80047f0 <HAL_RCC_OscConfig+0x558>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d030      	beq.n	80047e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d129      	bne.n	80047e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004796:	429a      	cmp	r2, r3
 8004798:	d122      	bne.n	80047e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047a0:	4013      	ands	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d119      	bne.n	80047e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b6:	085b      	lsrs	r3, r3, #1
 80047b8:	3b01      	subs	r3, #1
 80047ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d10f      	bne.n	80047e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d107      	bne.n	80047e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800

080047f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0d0      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b6a      	ldr	r3, [pc, #424]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d910      	bls.n	800483c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b67      	ldr	r3, [pc, #412]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 020f 	bic.w	r2, r3, #15
 8004822:	4965      	ldr	r1, [pc, #404]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b63      	ldr	r3, [pc, #396]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0b8      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d020      	beq.n	800488a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004854:	4b59      	ldr	r3, [pc, #356]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	4a58      	ldr	r2, [pc, #352]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 800485a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800485e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800486c:	4b53      	ldr	r3, [pc, #332]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4a52      	ldr	r2, [pc, #328]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 8004872:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004876:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004878:	4b50      	ldr	r3, [pc, #320]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	494d      	ldr	r1, [pc, #308]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d040      	beq.n	8004918 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d107      	bne.n	80048ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489e:	4b47      	ldr	r3, [pc, #284]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d115      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e07f      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b6:	4b41      	ldr	r3, [pc, #260]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e073      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c6:	4b3d      	ldr	r3, [pc, #244]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e06b      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048d6:	4b39      	ldr	r3, [pc, #228]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 0203 	bic.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4936      	ldr	r1, [pc, #216]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e8:	f7fd f984 	bl	8001bf4 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f0:	f7fd f980 	bl	8001bf4 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e053      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	4b2d      	ldr	r3, [pc, #180]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 020c 	and.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	429a      	cmp	r2, r3
 8004916:	d1eb      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004918:	4b27      	ldr	r3, [pc, #156]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d210      	bcs.n	8004948 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b24      	ldr	r3, [pc, #144]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 020f 	bic.w	r2, r3, #15
 800492e:	4922      	ldr	r1, [pc, #136]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b20      	ldr	r3, [pc, #128]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e032      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004954:	4b19      	ldr	r3, [pc, #100]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4916      	ldr	r1, [pc, #88]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d009      	beq.n	8004986 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004972:	4b12      	ldr	r3, [pc, #72]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	490e      	ldr	r1, [pc, #56]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004986:	f000 f821 	bl	80049cc <HAL_RCC_GetSysClockFreq>
 800498a:	4602      	mov	r2, r0
 800498c:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	490a      	ldr	r1, [pc, #40]	@ (80049c0 <HAL_RCC_ClockConfig+0x1cc>)
 8004998:	5ccb      	ldrb	r3, [r1, r3]
 800499a:	fa22 f303 	lsr.w	r3, r2, r3
 800499e:	4a09      	ldr	r2, [pc, #36]	@ (80049c4 <HAL_RCC_ClockConfig+0x1d0>)
 80049a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049a2:	4b09      	ldr	r3, [pc, #36]	@ (80049c8 <HAL_RCC_ClockConfig+0x1d4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fd f8e0 	bl	8001b6c <HAL_InitTick>

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40023c00 	.word	0x40023c00
 80049bc:	40023800 	.word	0x40023800
 80049c0:	08009d0c 	.word	0x08009d0c
 80049c4:	20000000 	.word	0x20000000
 80049c8:	20000004 	.word	0x20000004

080049cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d0:	b094      	sub	sp, #80	@ 0x50
 80049d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80049d8:	2300      	movs	r3, #0
 80049da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049dc:	2300      	movs	r3, #0
 80049de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049e4:	4b79      	ldr	r3, [pc, #484]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 030c 	and.w	r3, r3, #12
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d00d      	beq.n	8004a0c <HAL_RCC_GetSysClockFreq+0x40>
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	f200 80e1 	bhi.w	8004bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0x34>
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d003      	beq.n	8004a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80049fe:	e0db      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a00:	4b73      	ldr	r3, [pc, #460]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a04:	e0db      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a06:	4b73      	ldr	r3, [pc, #460]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a0a:	e0d8      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a16:	4b6d      	ldr	r3, [pc, #436]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d063      	beq.n	8004aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a22:	4b6a      	ldr	r3, [pc, #424]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	2200      	movs	r2, #0
 8004a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a36:	2300      	movs	r3, #0
 8004a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a3e:	4622      	mov	r2, r4
 8004a40:	462b      	mov	r3, r5
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f04f 0100 	mov.w	r1, #0
 8004a4a:	0159      	lsls	r1, r3, #5
 8004a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a50:	0150      	lsls	r0, r2, #5
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4621      	mov	r1, r4
 8004a58:	1a51      	subs	r1, r2, r1
 8004a5a:	6139      	str	r1, [r7, #16]
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a70:	4659      	mov	r1, fp
 8004a72:	018b      	lsls	r3, r1, #6
 8004a74:	4651      	mov	r1, sl
 8004a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a7a:	4651      	mov	r1, sl
 8004a7c:	018a      	lsls	r2, r1, #6
 8004a7e:	4651      	mov	r1, sl
 8004a80:	ebb2 0801 	subs.w	r8, r2, r1
 8004a84:	4659      	mov	r1, fp
 8004a86:	eb63 0901 	sbc.w	r9, r3, r1
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a9e:	4690      	mov	r8, r2
 8004aa0:	4699      	mov	r9, r3
 8004aa2:	4623      	mov	r3, r4
 8004aa4:	eb18 0303 	adds.w	r3, r8, r3
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	462b      	mov	r3, r5
 8004aac:	eb49 0303 	adc.w	r3, r9, r3
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004abe:	4629      	mov	r1, r5
 8004ac0:	024b      	lsls	r3, r1, #9
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ac8:	4621      	mov	r1, r4
 8004aca:	024a      	lsls	r2, r1, #9
 8004acc:	4610      	mov	r0, r2
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004adc:	f7fb fc08 	bl	80002f0 <__aeabi_uldivmod>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae8:	e058      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aea:	4b38      	ldr	r3, [pc, #224]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	099b      	lsrs	r3, r3, #6
 8004af0:	2200      	movs	r2, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	4611      	mov	r1, r2
 8004af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004afa:	623b      	str	r3, [r7, #32]
 8004afc:	2300      	movs	r3, #0
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	f04f 0000 	mov.w	r0, #0
 8004b0c:	f04f 0100 	mov.w	r1, #0
 8004b10:	0159      	lsls	r1, r3, #5
 8004b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b16:	0150      	lsls	r0, r2, #5
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b22:	4649      	mov	r1, r9
 8004b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b40:	eb63 050b 	sbc.w	r5, r3, fp
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	00eb      	lsls	r3, r5, #3
 8004b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b52:	00e2      	lsls	r2, r4, #3
 8004b54:	4614      	mov	r4, r2
 8004b56:	461d      	mov	r5, r3
 8004b58:	4643      	mov	r3, r8
 8004b5a:	18e3      	adds	r3, r4, r3
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	464b      	mov	r3, r9
 8004b60:	eb45 0303 	adc.w	r3, r5, r3
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b72:	4629      	mov	r1, r5
 8004b74:	028b      	lsls	r3, r1, #10
 8004b76:	4621      	mov	r1, r4
 8004b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	028a      	lsls	r2, r1, #10
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b86:	2200      	movs	r2, #0
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	61fa      	str	r2, [r7, #28]
 8004b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b90:	f7fb fbae 	bl	80002f0 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4613      	mov	r3, r2
 8004b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	0c1b      	lsrs	r3, r3, #16
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bb6:	e002      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3750      	adds	r7, #80	@ 0x50
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	00f42400 	.word	0x00f42400
 8004bd4:	007a1200 	.word	0x007a1200

08004bd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bdc:	4b03      	ldr	r3, [pc, #12]	@ (8004bec <HAL_RCC_GetHCLKFreq+0x14>)
 8004bde:	681b      	ldr	r3, [r3, #0]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000000 	.word	0x20000000

08004bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bf4:	f7ff fff0 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	0a9b      	lsrs	r3, r3, #10
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4903      	ldr	r1, [pc, #12]	@ (8004c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40023800 	.word	0x40023800
 8004c14:	08009d1c 	.word	0x08009d1c

08004c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c1c:	f7ff ffdc 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	0b5b      	lsrs	r3, r3, #13
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4903      	ldr	r1, [pc, #12]	@ (8004c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	08009d1c 	.word	0x08009d1c

08004c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d012      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c68:	4b69      	ldr	r3, [pc, #420]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	4a68      	ldr	r2, [pc, #416]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c72:	6093      	str	r3, [r2, #8]
 8004c74:	4b66      	ldr	r3, [pc, #408]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c7c:	4964      	ldr	r1, [pc, #400]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d017      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c9a:	4b5d      	ldr	r3, [pc, #372]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ca0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca8:	4959      	ldr	r1, [pc, #356]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cb8:	d101      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d017      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cdc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce4:	494a      	ldr	r1, [pc, #296]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d12:	2301      	movs	r3, #1
 8004d14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 808b 	beq.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d24:	4b3a      	ldr	r3, [pc, #232]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	4a39      	ldr	r2, [pc, #228]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d30:	4b37      	ldr	r3, [pc, #220]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d3c:	4b35      	ldr	r3, [pc, #212]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a34      	ldr	r2, [pc, #208]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d48:	f7fc ff54 	bl	8001bf4 <HAL_GetTick>
 8004d4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d50:	f7fc ff50 	bl	8001bf4 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	@ 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e38f      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d62:	4b2c      	ldr	r3, [pc, #176]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d6e:	4b28      	ldr	r3, [pc, #160]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d035      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d02e      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d8c:	4b20      	ldr	r3, [pc, #128]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d96:	4b1e      	ldr	r3, [pc, #120]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004da2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004dae:	4a18      	ldr	r2, [pc, #96]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004db4:	4b16      	ldr	r3, [pc, #88]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d114      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7fc ff18 	bl	8001bf4 <HAL_GetTick>
 8004dc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc6:	e00a      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc8:	f7fc ff14 	bl	8001bf4 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e351      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dde:	4b0c      	ldr	r3, [pc, #48]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0ee      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004df6:	d111      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e04:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e06:	400b      	ands	r3, r1
 8004e08:	4901      	ldr	r1, [pc, #4]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	608b      	str	r3, [r1, #8]
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40007000 	.word	0x40007000
 8004e18:	0ffffcff 	.word	0x0ffffcff
 8004e1c:	4bac      	ldr	r3, [pc, #688]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4aab      	ldr	r2, [pc, #684]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e22:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e26:	6093      	str	r3, [r2, #8]
 8004e28:	4ba9      	ldr	r3, [pc, #676]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e34:	49a6      	ldr	r1, [pc, #664]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d010      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e46:	4ba2      	ldr	r3, [pc, #648]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e4c:	4aa0      	ldr	r2, [pc, #640]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004e56:	4b9e      	ldr	r3, [pc, #632]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e58:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e60:	499b      	ldr	r1, [pc, #620]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e74:	4b96      	ldr	r3, [pc, #600]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e82:	4993      	ldr	r1, [pc, #588]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e96:	4b8e      	ldr	r3, [pc, #568]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ea4:	498a      	ldr	r1, [pc, #552]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eb8:	4b85      	ldr	r3, [pc, #532]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ec6:	4982      	ldr	r1, [pc, #520]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eda:	4b7d      	ldr	r3, [pc, #500]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee8:	4979      	ldr	r1, [pc, #484]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004efc:	4b74      	ldr	r3, [pc, #464]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f02:	f023 0203 	bic.w	r2, r3, #3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0a:	4971      	ldr	r1, [pc, #452]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f1e:	4b6c      	ldr	r3, [pc, #432]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f24:	f023 020c 	bic.w	r2, r3, #12
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f2c:	4968      	ldr	r1, [pc, #416]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f40:	4b63      	ldr	r3, [pc, #396]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f46:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f4e:	4960      	ldr	r1, [pc, #384]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f62:	4b5b      	ldr	r3, [pc, #364]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f68:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f70:	4957      	ldr	r1, [pc, #348]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f84:	4b52      	ldr	r3, [pc, #328]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f92:	494f      	ldr	r1, [pc, #316]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb4:	4946      	ldr	r1, [pc, #280]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004fc8:	4b41      	ldr	r3, [pc, #260]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd6:	493e      	ldr	r1, [pc, #248]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004fea:	4b39      	ldr	r3, [pc, #228]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff8:	4935      	ldr	r1, [pc, #212]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800500c:	4b30      	ldr	r3, [pc, #192]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005012:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800501a:	492d      	ldr	r1, [pc, #180]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d011      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800502e:	4b28      	ldr	r3, [pc, #160]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005034:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800503c:	4924      	ldr	r1, [pc, #144]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005048:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800504c:	d101      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800504e:	2301      	movs	r3, #1
 8005050:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0308 	and.w	r3, r3, #8
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800505e:	2301      	movs	r3, #1
 8005060:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800506e:	4b18      	ldr	r3, [pc, #96]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005074:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800507c:	4914      	ldr	r1, [pc, #80]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00b      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005090:	4b0f      	ldr	r3, [pc, #60]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005096:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a0:	490b      	ldr	r1, [pc, #44]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00f      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80050b4:	4b06      	ldr	r3, [pc, #24]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050c4:	4902      	ldr	r1, [pc, #8]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050cc:	e002      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80050ce:	bf00      	nop
 80050d0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050e0:	4b8a      	ldr	r3, [pc, #552]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f0:	4986      	ldr	r1, [pc, #536]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00b      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005104:	4b81      	ldr	r3, [pc, #516]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800510a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005114:	497d      	ldr	r1, [pc, #500]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d006      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 80d6 	beq.w	80052dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005130:	4b76      	ldr	r3, [pc, #472]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a75      	ldr	r2, [pc, #468]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005136:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800513a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800513c:	f7fc fd5a 	bl	8001bf4 <HAL_GetTick>
 8005140:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005144:	f7fc fd56 	bl	8001bf4 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	@ 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e195      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005156:	4b6d      	ldr	r3, [pc, #436]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d021      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005172:	2b00      	cmp	r3, #0
 8005174:	d11d      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005176:	4b65      	ldr	r3, [pc, #404]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005184:	4b61      	ldr	r3, [pc, #388]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800518a:	0e1b      	lsrs	r3, r3, #24
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	019a      	lsls	r2, r3, #6
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	041b      	lsls	r3, r3, #16
 800519c:	431a      	orrs	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	061b      	lsls	r3, r3, #24
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	071b      	lsls	r3, r3, #28
 80051aa:	4958      	ldr	r1, [pc, #352]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d004      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d02e      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051dc:	d129      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051de:	4b4b      	ldr	r3, [pc, #300]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051e4:	0c1b      	lsrs	r3, r3, #16
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051ec:	4b47      	ldr	r3, [pc, #284]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051f2:	0f1b      	lsrs	r3, r3, #28
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	019a      	lsls	r2, r3, #6
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	041b      	lsls	r3, r3, #16
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	061b      	lsls	r3, r3, #24
 800520c:	431a      	orrs	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	071b      	lsls	r3, r3, #28
 8005212:	493e      	ldr	r1, [pc, #248]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800521a:	4b3c      	ldr	r3, [pc, #240]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800521c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005220:	f023 021f 	bic.w	r2, r3, #31
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	3b01      	subs	r3, #1
 800522a:	4938      	ldr	r1, [pc, #224]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01d      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800523e:	4b33      	ldr	r3, [pc, #204]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005244:	0e1b      	lsrs	r3, r3, #24
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800524c:	4b2f      	ldr	r3, [pc, #188]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800524e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005252:	0f1b      	lsrs	r3, r3, #28
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	019a      	lsls	r2, r3, #6
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	041b      	lsls	r3, r3, #16
 8005266:	431a      	orrs	r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	061b      	lsls	r3, r3, #24
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	071b      	lsls	r3, r3, #28
 8005272:	4926      	ldr	r1, [pc, #152]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d011      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	019a      	lsls	r2, r3, #6
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	041b      	lsls	r3, r3, #16
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	061b      	lsls	r3, r3, #24
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	071b      	lsls	r3, r3, #28
 80052a2:	491a      	ldr	r1, [pc, #104]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052aa:	4b18      	ldr	r3, [pc, #96]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a17      	ldr	r2, [pc, #92]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b6:	f7fc fc9d 	bl	8001bf4 <HAL_GetTick>
 80052ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052bc:	e008      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052be:	f7fc fc99 	bl	8001bf4 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b64      	cmp	r3, #100	@ 0x64
 80052ca:	d901      	bls.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e0d8      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052d0:	4b0e      	ldr	r3, [pc, #56]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0f0      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	f040 80ce 	bne.w	8005480 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052e4:	4b09      	ldr	r3, [pc, #36]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a08      	ldr	r2, [pc, #32]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f0:	f7fc fc80 	bl	8001bf4 <HAL_GetTick>
 80052f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052f6:	e00b      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052f8:	f7fc fc7c 	bl	8001bf4 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b64      	cmp	r3, #100	@ 0x64
 8005304:	d904      	bls.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0bb      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005310:	4b5e      	ldr	r3, [pc, #376]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800531c:	d0ec      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800533a:	2b00      	cmp	r3, #0
 800533c:	d02e      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	d12a      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005346:	4b51      	ldr	r3, [pc, #324]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005354:	4b4d      	ldr	r3, [pc, #308]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535a:	0f1b      	lsrs	r3, r3, #28
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	019a      	lsls	r2, r3, #6
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	041b      	lsls	r3, r3, #16
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	061b      	lsls	r3, r3, #24
 8005374:	431a      	orrs	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	071b      	lsls	r3, r3, #28
 800537a:	4944      	ldr	r1, [pc, #272]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005382:	4b42      	ldr	r3, [pc, #264]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005388:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005390:	3b01      	subs	r3, #1
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	493d      	ldr	r1, [pc, #244]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d022      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053b0:	d11d      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053b2:	4b36      	ldr	r3, [pc, #216]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b8:	0e1b      	lsrs	r3, r3, #24
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053c0:	4b32      	ldr	r3, [pc, #200]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c6:	0f1b      	lsrs	r3, r3, #28
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	019a      	lsls	r2, r3, #6
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	041b      	lsls	r3, r3, #16
 80053da:	431a      	orrs	r2, r3
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	061b      	lsls	r3, r3, #24
 80053e0:	431a      	orrs	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	071b      	lsls	r3, r3, #28
 80053e6:	4929      	ldr	r1, [pc, #164]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d028      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053fa:	4b24      	ldr	r3, [pc, #144]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005400:	0e1b      	lsrs	r3, r3, #24
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005408:	4b20      	ldr	r3, [pc, #128]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540e:	0c1b      	lsrs	r3, r3, #16
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	019a      	lsls	r2, r3, #6
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	041b      	lsls	r3, r3, #16
 8005420:	431a      	orrs	r2, r3
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	071b      	lsls	r3, r3, #28
 800542e:	4917      	ldr	r1, [pc, #92]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005436:	4b15      	ldr	r3, [pc, #84]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800543c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005444:	4911      	ldr	r1, [pc, #68]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800544c:	4b0f      	ldr	r3, [pc, #60]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0e      	ldr	r2, [pc, #56]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005458:	f7fc fbcc 	bl	8001bf4 <HAL_GetTick>
 800545c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005460:	f7fc fbc8 	bl	8001bf4 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b64      	cmp	r3, #100	@ 0x64
 800546c:	d901      	bls.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e007      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005472:	4b06      	ldr	r3, [pc, #24]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800547a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800547e:	d1ef      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40023800 	.word	0x40023800

08005490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e040      	b.n	8005524 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fb ffd2 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2224      	movs	r2, #36	@ 0x24
 80054bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fe6c 	bl	80061b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fc05 	bl	8005cec <UART_SetConfig>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e01b      	b.n	8005524 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800550a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 feeb 	bl	80062f8 <UART_CheckIdleState>
 8005522:	4603      	mov	r3, r0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	@ 0x28
 8005530:	af02      	add	r7, sp, #8
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005540:	2b20      	cmp	r3, #32
 8005542:	d177      	bne.n	8005634 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_UART_Transmit+0x24>
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e070      	b.n	8005636 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2221      	movs	r2, #33	@ 0x21
 8005560:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005562:	f7fc fb47 	bl	8001bf4 <HAL_GetTick>
 8005566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	88fa      	ldrh	r2, [r7, #6]
 800556c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	88fa      	ldrh	r2, [r7, #6]
 8005574:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005580:	d108      	bne.n	8005594 <HAL_UART_Transmit+0x68>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d104      	bne.n	8005594 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800558a:	2300      	movs	r3, #0
 800558c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	e003      	b.n	800559c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005598:	2300      	movs	r3, #0
 800559a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800559c:	e02f      	b.n	80055fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2200      	movs	r2, #0
 80055a6:	2180      	movs	r1, #128	@ 0x80
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 ff4d 	bl	8006448 <UART_WaitOnFlagUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d004      	beq.n	80055be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e03b      	b.n	8005636 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10b      	bne.n	80055dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	3302      	adds	r3, #2
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	e007      	b.n	80055ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	781a      	ldrb	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	3301      	adds	r3, #1
 80055ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1c9      	bne.n	800559e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2200      	movs	r2, #0
 8005612:	2140      	movs	r1, #64	@ 0x40
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 ff17 	bl	8006448 <UART_WaitOnFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e005      	b.n	8005636 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	e000      	b.n	8005636 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005634:	2302      	movs	r3, #2
  }
}
 8005636:	4618      	mov	r0, r3
 8005638:	3720      	adds	r7, #32
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b08a      	sub	sp, #40	@ 0x28
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	4613      	mov	r3, r2
 800564a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005652:	2b20      	cmp	r3, #32
 8005654:	d132      	bne.n	80056bc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_UART_Receive_IT+0x24>
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e02b      	b.n	80056be <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d018      	beq.n	80056ac <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	613b      	str	r3, [r7, #16]
   return(result);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800568e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	623b      	str	r3, [r7, #32]
 800569a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	69f9      	ldr	r1, [r7, #28]
 800569e:	6a3a      	ldr	r2, [r7, #32]
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e6      	bne.n	800567a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	461a      	mov	r2, r3
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 ff36 	bl	8006524 <UART_Start_Receive_IT>
 80056b8:	4603      	mov	r3, r0
 80056ba:	e000      	b.n	80056be <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80056bc:	2302      	movs	r3, #2
  }
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3728      	adds	r7, #40	@ 0x28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b0ba      	sub	sp, #232	@ 0xe8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80056f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80056f6:	4013      	ands	r3, r2
 80056f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80056fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d115      	bne.n	8005730 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00f      	beq.n	8005730 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d009      	beq.n	8005730 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 82ac 	beq.w	8005c7e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4798      	blx	r3
      }
      return;
 800572e:	e2a6      	b.n	8005c7e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 8117 	beq.w	8005968 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800573a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005746:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800574a:	4b85      	ldr	r3, [pc, #532]	@ (8005960 <HAL_UART_IRQHandler+0x298>)
 800574c:	4013      	ands	r3, r2
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 810a 	beq.w	8005968 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d011      	beq.n	8005784 <HAL_UART_IRQHandler+0xbc>
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2201      	movs	r2, #1
 8005772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800577a:	f043 0201 	orr.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d011      	beq.n	80057b4 <HAL_UART_IRQHandler+0xec>
 8005790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00b      	beq.n	80057b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2202      	movs	r2, #2
 80057a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057aa:	f043 0204 	orr.w	r2, r3, #4
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d011      	beq.n	80057e4 <HAL_UART_IRQHandler+0x11c>
 80057c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00b      	beq.n	80057e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2204      	movs	r2, #4
 80057d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057da:	f043 0202 	orr.w	r2, r3, #2
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d017      	beq.n	8005820 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d105      	bne.n	8005808 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80057fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005800:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00b      	beq.n	8005820 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2208      	movs	r2, #8
 800580e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005816:	f043 0208 	orr.w	r2, r3, #8
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005828:	2b00      	cmp	r3, #0
 800582a:	d012      	beq.n	8005852 <HAL_UART_IRQHandler+0x18a>
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005830:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00c      	beq.n	8005852 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005840:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005848:	f043 0220 	orr.w	r2, r3, #32
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8212 	beq.w	8005c82 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800585e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00d      	beq.n	8005886 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800586a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800588c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589a:	2b40      	cmp	r3, #64	@ 0x40
 800589c:	d005      	beq.n	80058aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800589e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d04f      	beq.n	800594a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 ff00 	bl	80066b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ba:	2b40      	cmp	r3, #64	@ 0x40
 80058bc:	d141      	bne.n	8005942 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3308      	adds	r3, #8
 80058c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3308      	adds	r3, #8
 80058e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1d9      	bne.n	80058be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590e:	2b00      	cmp	r3, #0
 8005910:	d013      	beq.n	800593a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005916:	4a13      	ldr	r2, [pc, #76]	@ (8005964 <HAL_UART_IRQHandler+0x29c>)
 8005918:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800591e:	4618      	mov	r0, r3
 8005920:	f7fc fe5c 	bl	80025dc <HAL_DMA_Abort_IT>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d017      	beq.n	800595a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800592e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005934:	4610      	mov	r0, r2
 8005936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	e00f      	b.n	800595a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f9b6 	bl	8005cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	e00b      	b.n	800595a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f9b2 	bl	8005cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005948:	e007      	b.n	800595a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f9ae 	bl	8005cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005958:	e193      	b.n	8005c82 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595a:	bf00      	nop
    return;
 800595c:	e191      	b.n	8005c82 <HAL_UART_IRQHandler+0x5ba>
 800595e:	bf00      	nop
 8005960:	04000120 	.word	0x04000120
 8005964:	08006779 	.word	0x08006779

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800596c:	2b01      	cmp	r3, #1
 800596e:	f040 814c 	bne.w	8005c0a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005976:	f003 0310 	and.w	r3, r3, #16
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8145 	beq.w	8005c0a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 813e 	beq.w	8005c0a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2210      	movs	r2, #16
 8005994:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a0:	2b40      	cmp	r3, #64	@ 0x40
 80059a2:	f040 80b6 	bne.w	8005b12 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8165 	beq.w	8005c86 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059c6:	429a      	cmp	r2, r3
 80059c8:	f080 815d 	bcs.w	8005c86 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059e0:	f000 8086 	beq.w	8005af0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a12:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1da      	bne.n	80059e4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3308      	adds	r3, #8
 8005a34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a38:	e853 3f00 	ldrex	r3, [r3]
 8005a3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e1      	bne.n	8005a2e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ac0:	f023 0310 	bic.w	r3, r3, #16
 8005ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ad2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ad4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ad8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e4      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fc fd06 	bl	80024fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f8d8 	bl	8005cc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b10:	e0b9      	b.n	8005c86 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80ab 	beq.w	8005c8a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80a6 	beq.w	8005c8a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e4      	bne.n	8005b3e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3308      	adds	r3, #8
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	e853 3f00 	ldrex	r3, [r3]
 8005b82:	623b      	str	r3, [r7, #32]
   return(result);
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3308      	adds	r3, #8
 8005b94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b98:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e3      	bne.n	8005b74 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f023 0310 	bic.w	r3, r3, #16
 8005bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005be2:	61fb      	str	r3, [r7, #28]
 8005be4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	69b9      	ldr	r1, [r7, #24]
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	617b      	str	r3, [r7, #20]
   return(result);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e4      	bne.n	8005bc0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c00:	4619      	mov	r1, r3
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f85c 	bl	8005cc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c08:	e03f      	b.n	8005c8a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00e      	beq.n	8005c34 <HAL_UART_IRQHandler+0x56c>
 8005c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d008      	beq.n	8005c34 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f853 	bl	8005cd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c32:	e02d      	b.n	8005c90 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00e      	beq.n	8005c5e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01c      	beq.n	8005c8e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
    }
    return;
 8005c5c:	e017      	b.n	8005c8e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d012      	beq.n	8005c90 <HAL_UART_IRQHandler+0x5c8>
 8005c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00c      	beq.n	8005c90 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fd94 	bl	80067a4 <UART_EndTransmit_IT>
    return;
 8005c7c:	e008      	b.n	8005c90 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005c7e:	bf00      	nop
 8005c80:	e006      	b.n	8005c90 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005c82:	bf00      	nop
 8005c84:	e004      	b.n	8005c90 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005c86:	bf00      	nop
 8005c88:	e002      	b.n	8005c90 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005c8a:	bf00      	nop
 8005c8c:	e000      	b.n	8005c90 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005c8e:	bf00      	nop
  }

}
 8005c90:	37e8      	adds	r7, #232	@ 0xe8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop

08005c98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	4ba6      	ldr	r3, [pc, #664]	@ (8005fb0 <UART_SetConfig+0x2c4>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6812      	ldr	r2, [r2, #0]
 8005d1e:	6979      	ldr	r1, [r7, #20]
 8005d20:	430b      	orrs	r3, r1
 8005d22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a94      	ldr	r2, [pc, #592]	@ (8005fb4 <UART_SetConfig+0x2c8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d120      	bne.n	8005daa <UART_SetConfig+0xbe>
 8005d68:	4b93      	ldr	r3, [pc, #588]	@ (8005fb8 <UART_SetConfig+0x2cc>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d816      	bhi.n	8005da4 <UART_SetConfig+0xb8>
 8005d76:	a201      	add	r2, pc, #4	@ (adr r2, 8005d7c <UART_SetConfig+0x90>)
 8005d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7c:	08005d8d 	.word	0x08005d8d
 8005d80:	08005d99 	.word	0x08005d99
 8005d84:	08005d93 	.word	0x08005d93
 8005d88:	08005d9f 	.word	0x08005d9f
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	77fb      	strb	r3, [r7, #31]
 8005d90:	e150      	b.n	8006034 <UART_SetConfig+0x348>
 8005d92:	2302      	movs	r3, #2
 8005d94:	77fb      	strb	r3, [r7, #31]
 8005d96:	e14d      	b.n	8006034 <UART_SetConfig+0x348>
 8005d98:	2304      	movs	r3, #4
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	e14a      	b.n	8006034 <UART_SetConfig+0x348>
 8005d9e:	2308      	movs	r3, #8
 8005da0:	77fb      	strb	r3, [r7, #31]
 8005da2:	e147      	b.n	8006034 <UART_SetConfig+0x348>
 8005da4:	2310      	movs	r3, #16
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e144      	b.n	8006034 <UART_SetConfig+0x348>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a83      	ldr	r2, [pc, #524]	@ (8005fbc <UART_SetConfig+0x2d0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d132      	bne.n	8005e1a <UART_SetConfig+0x12e>
 8005db4:	4b80      	ldr	r3, [pc, #512]	@ (8005fb8 <UART_SetConfig+0x2cc>)
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b0c      	cmp	r3, #12
 8005dc0:	d828      	bhi.n	8005e14 <UART_SetConfig+0x128>
 8005dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc8 <UART_SetConfig+0xdc>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005dfd 	.word	0x08005dfd
 8005dcc:	08005e15 	.word	0x08005e15
 8005dd0:	08005e15 	.word	0x08005e15
 8005dd4:	08005e15 	.word	0x08005e15
 8005dd8:	08005e09 	.word	0x08005e09
 8005ddc:	08005e15 	.word	0x08005e15
 8005de0:	08005e15 	.word	0x08005e15
 8005de4:	08005e15 	.word	0x08005e15
 8005de8:	08005e03 	.word	0x08005e03
 8005dec:	08005e15 	.word	0x08005e15
 8005df0:	08005e15 	.word	0x08005e15
 8005df4:	08005e15 	.word	0x08005e15
 8005df8:	08005e0f 	.word	0x08005e0f
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e118      	b.n	8006034 <UART_SetConfig+0x348>
 8005e02:	2302      	movs	r3, #2
 8005e04:	77fb      	strb	r3, [r7, #31]
 8005e06:	e115      	b.n	8006034 <UART_SetConfig+0x348>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	77fb      	strb	r3, [r7, #31]
 8005e0c:	e112      	b.n	8006034 <UART_SetConfig+0x348>
 8005e0e:	2308      	movs	r3, #8
 8005e10:	77fb      	strb	r3, [r7, #31]
 8005e12:	e10f      	b.n	8006034 <UART_SetConfig+0x348>
 8005e14:	2310      	movs	r3, #16
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e10c      	b.n	8006034 <UART_SetConfig+0x348>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a68      	ldr	r2, [pc, #416]	@ (8005fc0 <UART_SetConfig+0x2d4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d120      	bne.n	8005e66 <UART_SetConfig+0x17a>
 8005e24:	4b64      	ldr	r3, [pc, #400]	@ (8005fb8 <UART_SetConfig+0x2cc>)
 8005e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e2e:	2b30      	cmp	r3, #48	@ 0x30
 8005e30:	d013      	beq.n	8005e5a <UART_SetConfig+0x16e>
 8005e32:	2b30      	cmp	r3, #48	@ 0x30
 8005e34:	d814      	bhi.n	8005e60 <UART_SetConfig+0x174>
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d009      	beq.n	8005e4e <UART_SetConfig+0x162>
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d810      	bhi.n	8005e60 <UART_SetConfig+0x174>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <UART_SetConfig+0x15c>
 8005e42:	2b10      	cmp	r3, #16
 8005e44:	d006      	beq.n	8005e54 <UART_SetConfig+0x168>
 8005e46:	e00b      	b.n	8005e60 <UART_SetConfig+0x174>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e0f2      	b.n	8006034 <UART_SetConfig+0x348>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	77fb      	strb	r3, [r7, #31]
 8005e52:	e0ef      	b.n	8006034 <UART_SetConfig+0x348>
 8005e54:	2304      	movs	r3, #4
 8005e56:	77fb      	strb	r3, [r7, #31]
 8005e58:	e0ec      	b.n	8006034 <UART_SetConfig+0x348>
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	77fb      	strb	r3, [r7, #31]
 8005e5e:	e0e9      	b.n	8006034 <UART_SetConfig+0x348>
 8005e60:	2310      	movs	r3, #16
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	e0e6      	b.n	8006034 <UART_SetConfig+0x348>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a56      	ldr	r2, [pc, #344]	@ (8005fc4 <UART_SetConfig+0x2d8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d120      	bne.n	8005eb2 <UART_SetConfig+0x1c6>
 8005e70:	4b51      	ldr	r3, [pc, #324]	@ (8005fb8 <UART_SetConfig+0x2cc>)
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e7c:	d013      	beq.n	8005ea6 <UART_SetConfig+0x1ba>
 8005e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e80:	d814      	bhi.n	8005eac <UART_SetConfig+0x1c0>
 8005e82:	2b80      	cmp	r3, #128	@ 0x80
 8005e84:	d009      	beq.n	8005e9a <UART_SetConfig+0x1ae>
 8005e86:	2b80      	cmp	r3, #128	@ 0x80
 8005e88:	d810      	bhi.n	8005eac <UART_SetConfig+0x1c0>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <UART_SetConfig+0x1a8>
 8005e8e:	2b40      	cmp	r3, #64	@ 0x40
 8005e90:	d006      	beq.n	8005ea0 <UART_SetConfig+0x1b4>
 8005e92:	e00b      	b.n	8005eac <UART_SetConfig+0x1c0>
 8005e94:	2300      	movs	r3, #0
 8005e96:	77fb      	strb	r3, [r7, #31]
 8005e98:	e0cc      	b.n	8006034 <UART_SetConfig+0x348>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	77fb      	strb	r3, [r7, #31]
 8005e9e:	e0c9      	b.n	8006034 <UART_SetConfig+0x348>
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	77fb      	strb	r3, [r7, #31]
 8005ea4:	e0c6      	b.n	8006034 <UART_SetConfig+0x348>
 8005ea6:	2308      	movs	r3, #8
 8005ea8:	77fb      	strb	r3, [r7, #31]
 8005eaa:	e0c3      	b.n	8006034 <UART_SetConfig+0x348>
 8005eac:	2310      	movs	r3, #16
 8005eae:	77fb      	strb	r3, [r7, #31]
 8005eb0:	e0c0      	b.n	8006034 <UART_SetConfig+0x348>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a44      	ldr	r2, [pc, #272]	@ (8005fc8 <UART_SetConfig+0x2dc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d125      	bne.n	8005f08 <UART_SetConfig+0x21c>
 8005ebc:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb8 <UART_SetConfig+0x2cc>)
 8005ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eca:	d017      	beq.n	8005efc <UART_SetConfig+0x210>
 8005ecc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed0:	d817      	bhi.n	8005f02 <UART_SetConfig+0x216>
 8005ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed6:	d00b      	beq.n	8005ef0 <UART_SetConfig+0x204>
 8005ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005edc:	d811      	bhi.n	8005f02 <UART_SetConfig+0x216>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <UART_SetConfig+0x1fe>
 8005ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ee6:	d006      	beq.n	8005ef6 <UART_SetConfig+0x20a>
 8005ee8:	e00b      	b.n	8005f02 <UART_SetConfig+0x216>
 8005eea:	2300      	movs	r3, #0
 8005eec:	77fb      	strb	r3, [r7, #31]
 8005eee:	e0a1      	b.n	8006034 <UART_SetConfig+0x348>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	77fb      	strb	r3, [r7, #31]
 8005ef4:	e09e      	b.n	8006034 <UART_SetConfig+0x348>
 8005ef6:	2304      	movs	r3, #4
 8005ef8:	77fb      	strb	r3, [r7, #31]
 8005efa:	e09b      	b.n	8006034 <UART_SetConfig+0x348>
 8005efc:	2308      	movs	r3, #8
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e098      	b.n	8006034 <UART_SetConfig+0x348>
 8005f02:	2310      	movs	r3, #16
 8005f04:	77fb      	strb	r3, [r7, #31]
 8005f06:	e095      	b.n	8006034 <UART_SetConfig+0x348>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a2f      	ldr	r2, [pc, #188]	@ (8005fcc <UART_SetConfig+0x2e0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d125      	bne.n	8005f5e <UART_SetConfig+0x272>
 8005f12:	4b29      	ldr	r3, [pc, #164]	@ (8005fb8 <UART_SetConfig+0x2cc>)
 8005f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f20:	d017      	beq.n	8005f52 <UART_SetConfig+0x266>
 8005f22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f26:	d817      	bhi.n	8005f58 <UART_SetConfig+0x26c>
 8005f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f2c:	d00b      	beq.n	8005f46 <UART_SetConfig+0x25a>
 8005f2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f32:	d811      	bhi.n	8005f58 <UART_SetConfig+0x26c>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <UART_SetConfig+0x254>
 8005f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3c:	d006      	beq.n	8005f4c <UART_SetConfig+0x260>
 8005f3e:	e00b      	b.n	8005f58 <UART_SetConfig+0x26c>
 8005f40:	2301      	movs	r3, #1
 8005f42:	77fb      	strb	r3, [r7, #31]
 8005f44:	e076      	b.n	8006034 <UART_SetConfig+0x348>
 8005f46:	2302      	movs	r3, #2
 8005f48:	77fb      	strb	r3, [r7, #31]
 8005f4a:	e073      	b.n	8006034 <UART_SetConfig+0x348>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e070      	b.n	8006034 <UART_SetConfig+0x348>
 8005f52:	2308      	movs	r3, #8
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	e06d      	b.n	8006034 <UART_SetConfig+0x348>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e06a      	b.n	8006034 <UART_SetConfig+0x348>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd0 <UART_SetConfig+0x2e4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d138      	bne.n	8005fda <UART_SetConfig+0x2ee>
 8005f68:	4b13      	ldr	r3, [pc, #76]	@ (8005fb8 <UART_SetConfig+0x2cc>)
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f6e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005f72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f76:	d017      	beq.n	8005fa8 <UART_SetConfig+0x2bc>
 8005f78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f7c:	d82a      	bhi.n	8005fd4 <UART_SetConfig+0x2e8>
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f82:	d00b      	beq.n	8005f9c <UART_SetConfig+0x2b0>
 8005f84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f88:	d824      	bhi.n	8005fd4 <UART_SetConfig+0x2e8>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <UART_SetConfig+0x2aa>
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f92:	d006      	beq.n	8005fa2 <UART_SetConfig+0x2b6>
 8005f94:	e01e      	b.n	8005fd4 <UART_SetConfig+0x2e8>
 8005f96:	2300      	movs	r3, #0
 8005f98:	77fb      	strb	r3, [r7, #31]
 8005f9a:	e04b      	b.n	8006034 <UART_SetConfig+0x348>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	77fb      	strb	r3, [r7, #31]
 8005fa0:	e048      	b.n	8006034 <UART_SetConfig+0x348>
 8005fa2:	2304      	movs	r3, #4
 8005fa4:	77fb      	strb	r3, [r7, #31]
 8005fa6:	e045      	b.n	8006034 <UART_SetConfig+0x348>
 8005fa8:	2308      	movs	r3, #8
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e042      	b.n	8006034 <UART_SetConfig+0x348>
 8005fae:	bf00      	nop
 8005fb0:	efff69f3 	.word	0xefff69f3
 8005fb4:	40011000 	.word	0x40011000
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	40004400 	.word	0x40004400
 8005fc0:	40004800 	.word	0x40004800
 8005fc4:	40004c00 	.word	0x40004c00
 8005fc8:	40005000 	.word	0x40005000
 8005fcc:	40011400 	.word	0x40011400
 8005fd0:	40007800 	.word	0x40007800
 8005fd4:	2310      	movs	r3, #16
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	e02c      	b.n	8006034 <UART_SetConfig+0x348>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a72      	ldr	r2, [pc, #456]	@ (80061a8 <UART_SetConfig+0x4bc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d125      	bne.n	8006030 <UART_SetConfig+0x344>
 8005fe4:	4b71      	ldr	r3, [pc, #452]	@ (80061ac <UART_SetConfig+0x4c0>)
 8005fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005fee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ff2:	d017      	beq.n	8006024 <UART_SetConfig+0x338>
 8005ff4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ff8:	d817      	bhi.n	800602a <UART_SetConfig+0x33e>
 8005ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ffe:	d00b      	beq.n	8006018 <UART_SetConfig+0x32c>
 8006000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006004:	d811      	bhi.n	800602a <UART_SetConfig+0x33e>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <UART_SetConfig+0x326>
 800600a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800600e:	d006      	beq.n	800601e <UART_SetConfig+0x332>
 8006010:	e00b      	b.n	800602a <UART_SetConfig+0x33e>
 8006012:	2300      	movs	r3, #0
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e00d      	b.n	8006034 <UART_SetConfig+0x348>
 8006018:	2302      	movs	r3, #2
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e00a      	b.n	8006034 <UART_SetConfig+0x348>
 800601e:	2304      	movs	r3, #4
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e007      	b.n	8006034 <UART_SetConfig+0x348>
 8006024:	2308      	movs	r3, #8
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e004      	b.n	8006034 <UART_SetConfig+0x348>
 800602a:	2310      	movs	r3, #16
 800602c:	77fb      	strb	r3, [r7, #31]
 800602e:	e001      	b.n	8006034 <UART_SetConfig+0x348>
 8006030:	2310      	movs	r3, #16
 8006032:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800603c:	d15b      	bne.n	80060f6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800603e:	7ffb      	ldrb	r3, [r7, #31]
 8006040:	2b08      	cmp	r3, #8
 8006042:	d828      	bhi.n	8006096 <UART_SetConfig+0x3aa>
 8006044:	a201      	add	r2, pc, #4	@ (adr r2, 800604c <UART_SetConfig+0x360>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	08006071 	.word	0x08006071
 8006050:	08006079 	.word	0x08006079
 8006054:	08006081 	.word	0x08006081
 8006058:	08006097 	.word	0x08006097
 800605c:	08006087 	.word	0x08006087
 8006060:	08006097 	.word	0x08006097
 8006064:	08006097 	.word	0x08006097
 8006068:	08006097 	.word	0x08006097
 800606c:	0800608f 	.word	0x0800608f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006070:	f7fe fdbe 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 8006074:	61b8      	str	r0, [r7, #24]
        break;
 8006076:	e013      	b.n	80060a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006078:	f7fe fdce 	bl	8004c18 <HAL_RCC_GetPCLK2Freq>
 800607c:	61b8      	str	r0, [r7, #24]
        break;
 800607e:	e00f      	b.n	80060a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006080:	4b4b      	ldr	r3, [pc, #300]	@ (80061b0 <UART_SetConfig+0x4c4>)
 8006082:	61bb      	str	r3, [r7, #24]
        break;
 8006084:	e00c      	b.n	80060a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006086:	f7fe fca1 	bl	80049cc <HAL_RCC_GetSysClockFreq>
 800608a:	61b8      	str	r0, [r7, #24]
        break;
 800608c:	e008      	b.n	80060a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800608e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006092:	61bb      	str	r3, [r7, #24]
        break;
 8006094:	e004      	b.n	80060a0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	77bb      	strb	r3, [r7, #30]
        break;
 800609e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d074      	beq.n	8006190 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	005a      	lsls	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	085b      	lsrs	r3, r3, #1
 80060b0:	441a      	add	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	2b0f      	cmp	r3, #15
 80060c0:	d916      	bls.n	80060f0 <UART_SetConfig+0x404>
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c8:	d212      	bcs.n	80060f0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f023 030f 	bic.w	r3, r3, #15
 80060d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	b29a      	uxth	r2, r3
 80060e0:	89fb      	ldrh	r3, [r7, #14]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	89fa      	ldrh	r2, [r7, #14]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	e04f      	b.n	8006190 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	77bb      	strb	r3, [r7, #30]
 80060f4:	e04c      	b.n	8006190 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060f6:	7ffb      	ldrb	r3, [r7, #31]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d828      	bhi.n	800614e <UART_SetConfig+0x462>
 80060fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006104 <UART_SetConfig+0x418>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006129 	.word	0x08006129
 8006108:	08006131 	.word	0x08006131
 800610c:	08006139 	.word	0x08006139
 8006110:	0800614f 	.word	0x0800614f
 8006114:	0800613f 	.word	0x0800613f
 8006118:	0800614f 	.word	0x0800614f
 800611c:	0800614f 	.word	0x0800614f
 8006120:	0800614f 	.word	0x0800614f
 8006124:	08006147 	.word	0x08006147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006128:	f7fe fd62 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 800612c:	61b8      	str	r0, [r7, #24]
        break;
 800612e:	e013      	b.n	8006158 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006130:	f7fe fd72 	bl	8004c18 <HAL_RCC_GetPCLK2Freq>
 8006134:	61b8      	str	r0, [r7, #24]
        break;
 8006136:	e00f      	b.n	8006158 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006138:	4b1d      	ldr	r3, [pc, #116]	@ (80061b0 <UART_SetConfig+0x4c4>)
 800613a:	61bb      	str	r3, [r7, #24]
        break;
 800613c:	e00c      	b.n	8006158 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800613e:	f7fe fc45 	bl	80049cc <HAL_RCC_GetSysClockFreq>
 8006142:	61b8      	str	r0, [r7, #24]
        break;
 8006144:	e008      	b.n	8006158 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800614a:	61bb      	str	r3, [r7, #24]
        break;
 800614c:	e004      	b.n	8006158 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	77bb      	strb	r3, [r7, #30]
        break;
 8006156:	bf00      	nop
    }

    if (pclk != 0U)
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d018      	beq.n	8006190 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	085a      	lsrs	r2, r3, #1
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	441a      	add	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006170:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b0f      	cmp	r3, #15
 8006176:	d909      	bls.n	800618c <UART_SetConfig+0x4a0>
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800617e:	d205      	bcs.n	800618c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	b29a      	uxth	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	e001      	b.n	8006190 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800619c:	7fbb      	ldrb	r3, [r7, #30]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40007c00 	.word	0x40007c00
 80061ac:	40023800 	.word	0x40023800
 80061b0:	00f42400 	.word	0x00f42400

080061b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00a      	beq.n	80061de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01a      	beq.n	80062ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062b2:	d10a      	bne.n	80062ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	605a      	str	r2, [r3, #4]
  }
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b098      	sub	sp, #96	@ 0x60
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006308:	f7fb fc74 	bl	8001bf4 <HAL_GetTick>
 800630c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b08      	cmp	r3, #8
 800631a:	d12e      	bne.n	800637a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800631c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006324:	2200      	movs	r2, #0
 8006326:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f88c 	bl	8006448 <UART_WaitOnFlagUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d021      	beq.n	800637a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800634a:	653b      	str	r3, [r7, #80]	@ 0x50
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	461a      	mov	r2, r3
 8006352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006354:	647b      	str	r3, [r7, #68]	@ 0x44
 8006356:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800635a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e6      	bne.n	8006336 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e062      	b.n	8006440 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d149      	bne.n	800641c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006388:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006390:	2200      	movs	r2, #0
 8006392:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f856 	bl	8006448 <UART_WaitOnFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d03c      	beq.n	800641c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	623b      	str	r3, [r7, #32]
   return(result);
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80063c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e6      	bne.n	80063a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3308      	adds	r3, #8
 80063da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063f4:	61fa      	str	r2, [r7, #28]
 80063f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	69b9      	ldr	r1, [r7, #24]
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	617b      	str	r3, [r7, #20]
   return(result);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e5      	bne.n	80063d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e011      	b.n	8006440 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3758      	adds	r7, #88	@ 0x58
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	4613      	mov	r3, r2
 8006456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006458:	e04f      	b.n	80064fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006460:	d04b      	beq.n	80064fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006462:	f7fb fbc7 	bl	8001bf4 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	429a      	cmp	r2, r3
 8006470:	d302      	bcc.n	8006478 <UART_WaitOnFlagUntilTimeout+0x30>
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e04e      	b.n	800651a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d037      	beq.n	80064fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b80      	cmp	r3, #128	@ 0x80
 800648e:	d034      	beq.n	80064fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b40      	cmp	r3, #64	@ 0x40
 8006494:	d031      	beq.n	80064fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d110      	bne.n	80064c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2208      	movs	r2, #8
 80064aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f8ff 	bl	80066b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2208      	movs	r2, #8
 80064b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e029      	b.n	800651a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064d4:	d111      	bne.n	80064fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f8e5 	bl	80066b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e00f      	b.n	800651a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69da      	ldr	r2, [r3, #28]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4013      	ands	r3, r2
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	429a      	cmp	r2, r3
 8006508:	bf0c      	ite	eq
 800650a:	2301      	moveq	r3, #1
 800650c:	2300      	movne	r3, #0
 800650e:	b2db      	uxtb	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	429a      	cmp	r2, r3
 8006516:	d0a0      	beq.n	800645a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
	...

08006524 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006524:	b480      	push	{r7}
 8006526:	b097      	sub	sp, #92	@ 0x5c
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	88fa      	ldrh	r2, [r7, #6]
 8006544:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006556:	d10e      	bne.n	8006576 <UART_Start_Receive_IT+0x52>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d105      	bne.n	800656c <UART_Start_Receive_IT+0x48>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006566:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800656a:	e02d      	b.n	80065c8 <UART_Start_Receive_IT+0xa4>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	22ff      	movs	r2, #255	@ 0xff
 8006570:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006574:	e028      	b.n	80065c8 <UART_Start_Receive_IT+0xa4>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10d      	bne.n	800659a <UART_Start_Receive_IT+0x76>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <UART_Start_Receive_IT+0x6c>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	22ff      	movs	r2, #255	@ 0xff
 800658a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800658e:	e01b      	b.n	80065c8 <UART_Start_Receive_IT+0xa4>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	227f      	movs	r2, #127	@ 0x7f
 8006594:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006598:	e016      	b.n	80065c8 <UART_Start_Receive_IT+0xa4>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065a2:	d10d      	bne.n	80065c0 <UART_Start_Receive_IT+0x9c>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d104      	bne.n	80065b6 <UART_Start_Receive_IT+0x92>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	227f      	movs	r2, #127	@ 0x7f
 80065b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065b4:	e008      	b.n	80065c8 <UART_Start_Receive_IT+0xa4>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	223f      	movs	r2, #63	@ 0x3f
 80065ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065be:	e003      	b.n	80065c8 <UART_Start_Receive_IT+0xa4>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2222      	movs	r2, #34	@ 0x22
 80065d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3308      	adds	r3, #8
 80065de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ea:	f043 0301 	orr.w	r3, r3, #1
 80065ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80065fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e5      	bne.n	80065d8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006614:	d107      	bne.n	8006626 <UART_Start_Receive_IT+0x102>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d103      	bne.n	8006626 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4a21      	ldr	r2, [pc, #132]	@ (80066a8 <UART_Start_Receive_IT+0x184>)
 8006622:	669a      	str	r2, [r3, #104]	@ 0x68
 8006624:	e002      	b.n	800662c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4a20      	ldr	r2, [pc, #128]	@ (80066ac <UART_Start_Receive_IT+0x188>)
 800662a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d019      	beq.n	8006668 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006652:	637b      	str	r3, [r7, #52]	@ 0x34
 8006654:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e6      	bne.n	8006634 <UART_Start_Receive_IT+0x110>
 8006666:	e018      	b.n	800669a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	613b      	str	r3, [r7, #16]
   return(result);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f043 0320 	orr.w	r3, r3, #32
 800667c:	653b      	str	r3, [r7, #80]	@ 0x50
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006686:	623b      	str	r3, [r7, #32]
 8006688:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	69f9      	ldr	r1, [r7, #28]
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	61bb      	str	r3, [r7, #24]
   return(result);
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e6      	bne.n	8006668 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	375c      	adds	r7, #92	@ 0x5c
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	080069a1 	.word	0x080069a1
 80066ac:	080067f9 	.word	0x080067f9

080066b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b095      	sub	sp, #84	@ 0x54
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80066d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e6      	bne.n	80066b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3308      	adds	r3, #8
 8006708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800670a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800670c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e5      	bne.n	80066ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006722:	2b01      	cmp	r3, #1
 8006724:	d118      	bne.n	8006758 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	60bb      	str	r3, [r7, #8]
   return(result);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f023 0310 	bic.w	r3, r3, #16
 800673a:	647b      	str	r3, [r7, #68]	@ 0x44
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	6979      	ldr	r1, [r7, #20]
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	613b      	str	r3, [r7, #16]
   return(result);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e6      	bne.n	8006726 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800676c:	bf00      	nop
 800676e:	3754      	adds	r7, #84	@ 0x54
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006784:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff fa88 	bl	8005cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	61bb      	str	r3, [r7, #24]
 80067cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6979      	ldr	r1, [r7, #20]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	613b      	str	r3, [r7, #16]
   return(result);
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e6      	bne.n	80067ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff fa54 	bl	8005c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067f0:	bf00      	nop
 80067f2:	3720      	adds	r7, #32
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b09c      	sub	sp, #112	@ 0x70
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006806:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006810:	2b22      	cmp	r3, #34	@ 0x22
 8006812:	f040 80b9 	bne.w	8006988 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006820:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006824:	b2d9      	uxtb	r1, r3
 8006826:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800682a:	b2da      	uxtb	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006830:	400a      	ands	r2, r1
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	f040 809c 	bne.w	8006998 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800686e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800687e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006880:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006884:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800688c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e6      	bne.n	8006860 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3308      	adds	r3, #8
 8006898:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3308      	adds	r3, #8
 80068b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80068b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80068b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e5      	bne.n	8006892 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d018      	beq.n	800691a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	623b      	str	r3, [r7, #32]
   return(result);
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006906:	633b      	str	r3, [r7, #48]	@ 0x30
 8006908:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800690c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e6      	bne.n	80068e8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800691e:	2b01      	cmp	r3, #1
 8006920:	d12e      	bne.n	8006980 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	60fb      	str	r3, [r7, #12]
   return(result);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f023 0310 	bic.w	r3, r3, #16
 800693c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	69b9      	ldr	r1, [r7, #24]
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	617b      	str	r3, [r7, #20]
   return(result);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b10      	cmp	r3, #16
 8006966:	d103      	bne.n	8006970 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2210      	movs	r2, #16
 800696e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff f9a1 	bl	8005cc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800697e:	e00b      	b.n	8006998 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7fa fb93 	bl	80010ac <HAL_UART_RxCpltCallback>
}
 8006986:	e007      	b.n	8006998 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0208 	orr.w	r2, r2, #8
 8006996:	619a      	str	r2, [r3, #24]
}
 8006998:	bf00      	nop
 800699a:	3770      	adds	r7, #112	@ 0x70
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b09c      	sub	sp, #112	@ 0x70
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069b8:	2b22      	cmp	r3, #34	@ 0x22
 80069ba:	f040 80b9 	bne.w	8006b30 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80069ce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80069d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80069d6:	4013      	ands	r3, r2
 80069d8:	b29a      	uxth	r2, r3
 80069da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e2:	1c9a      	adds	r2, r3, #2
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f040 809c 	bne.w	8006b40 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a26:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a28:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e6      	bne.n	8006a08 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e5      	bne.n	8006a3a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d018      	beq.n	8006ac2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ab0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e6      	bne.n	8006a90 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d12e      	bne.n	8006b28 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	e853 3f00 	ldrex	r3, [r3]
 8006adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f023 0310 	bic.w	r3, r3, #16
 8006ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6979      	ldr	r1, [r7, #20]
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	613b      	str	r3, [r7, #16]
   return(result);
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e6      	bne.n	8006ad0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b10      	cmp	r3, #16
 8006b0e:	d103      	bne.n	8006b18 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2210      	movs	r2, #16
 8006b16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff f8cd 	bl	8005cc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b26:	e00b      	b.n	8006b40 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7fa fabf 	bl	80010ac <HAL_UART_RxCpltCallback>
}
 8006b2e:	e007      	b.n	8006b40 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0208 	orr.w	r2, r2, #8
 8006b3e:	619a      	str	r2, [r3, #24]
}
 8006b40:	bf00      	nop
 8006b42:	3770      	adds	r7, #112	@ 0x70
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b48:	b084      	sub	sp, #16
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	f107 001c 	add.w	r0, r7, #28
 8006b56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d121      	bne.n	8006ba6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	4b21      	ldr	r3, [pc, #132]	@ (8006bf8 <USB_CoreInit+0xb0>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d105      	bne.n	8006b9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa92 	bl	80070c4 <USB_CoreReset>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	73fb      	strb	r3, [r7, #15]
 8006ba4:	e010      	b.n	8006bc8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa86 	bl	80070c4 <USB_CoreReset>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006bc8:	7fbb      	ldrb	r3, [r7, #30]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d10b      	bne.n	8006be6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f043 0206 	orr.w	r2, r3, #6
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f043 0220 	orr.w	r2, r3, #32
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bf2:	b004      	add	sp, #16
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	ffbdffbf 	.word	0xffbdffbf

08006bfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f023 0201 	bic.w	r2, r3, #1
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	460b      	mov	r3, r1
 8006c28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c3a:	78fb      	ldrb	r3, [r7, #3]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d115      	bne.n	8006c6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c4c:	200a      	movs	r0, #10
 8006c4e:	f7fa ffdd 	bl	8001c0c <HAL_Delay>
      ms += 10U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	330a      	adds	r3, #10
 8006c56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa25 	bl	80070a8 <USB_GetMode>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d01e      	beq.n	8006ca2 <USB_SetCurrentMode+0x84>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c68:	d9f0      	bls.n	8006c4c <USB_SetCurrentMode+0x2e>
 8006c6a:	e01a      	b.n	8006ca2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d115      	bne.n	8006c9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c7e:	200a      	movs	r0, #10
 8006c80:	f7fa ffc4 	bl	8001c0c <HAL_Delay>
      ms += 10U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	330a      	adds	r3, #10
 8006c88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa0c 	bl	80070a8 <USB_GetMode>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <USB_SetCurrentMode+0x84>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c9a:	d9f0      	bls.n	8006c7e <USB_SetCurrentMode+0x60>
 8006c9c:	e001      	b.n	8006ca2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e005      	b.n	8006cae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ca6:	d101      	bne.n	8006cac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cb8:	b084      	sub	sp, #16
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b086      	sub	sp, #24
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	e009      	b.n	8006cec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	3340      	adds	r3, #64	@ 0x40
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b0e      	cmp	r3, #14
 8006cf0:	d9f2      	bls.n	8006cd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006cf2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d11c      	bne.n	8006d34 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d08:	f043 0302 	orr.w	r3, r3, #2
 8006d0c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	e005      	b.n	8006d40 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d46:	461a      	mov	r2, r3
 8006d48:	2300      	movs	r3, #0
 8006d4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d10d      	bne.n	8006d70 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f968 	bl	8007034 <USB_SetDevSpeed>
 8006d64:	e008      	b.n	8006d78 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d66:	2101      	movs	r1, #1
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f963 	bl	8007034 <USB_SetDevSpeed>
 8006d6e:	e003      	b.n	8006d78 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d70:	2103      	movs	r1, #3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f95e 	bl	8007034 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d78:	2110      	movs	r1, #16
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f8fa 	bl	8006f74 <USB_FlushTxFifo>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f924 	bl	8006fd8 <USB_FlushRxFifo>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006da0:	461a      	mov	r2, r3
 8006da2:	2300      	movs	r3, #0
 8006da4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dac:	461a      	mov	r2, r3
 8006dae:	2300      	movs	r3, #0
 8006db0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db8:	461a      	mov	r2, r3
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	e043      	b.n	8006e4c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dda:	d118      	bne.n	8006e0e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dee:	461a      	mov	r2, r3
 8006df0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	e013      	b.n	8006e20 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e04:	461a      	mov	r2, r3
 8006e06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	e008      	b.n	8006e20 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	2300      	movs	r3, #0
 8006e30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e50:	461a      	mov	r2, r3
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d3b5      	bcc.n	8006dc4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	e043      	b.n	8006ee6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e74:	d118      	bne.n	8006ea8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	e013      	b.n	8006eba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e008      	b.n	8006eba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	2300      	movs	r3, #0
 8006eca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ede:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006eea:	461a      	mov	r2, r3
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d3b5      	bcc.n	8006e5e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006f12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d105      	bne.n	8006f28 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	f043 0210 	orr.w	r2, r3, #16
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699a      	ldr	r2, [r3, #24]
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f6c <USB_DevInit+0x2b4>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d005      	beq.n	8006f48 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	f043 0208 	orr.w	r2, r3, #8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d105      	bne.n	8006f5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699a      	ldr	r2, [r3, #24]
 8006f54:	4b06      	ldr	r3, [pc, #24]	@ (8006f70 <USB_DevInit+0x2b8>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f68:	b004      	add	sp, #16
 8006f6a:	4770      	bx	lr
 8006f6c:	803c3800 	.word	0x803c3800
 8006f70:	40000004 	.word	0x40000004

08006f74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f8e:	d901      	bls.n	8006f94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e01b      	b.n	8006fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	daf2      	bge.n	8006f82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	019b      	lsls	r3, r3, #6
 8006fa4:	f043 0220 	orr.w	r2, r3, #32
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fb8:	d901      	bls.n	8006fbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e006      	b.n	8006fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d0f0      	beq.n	8006fac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ff0:	d901      	bls.n	8006ff6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e018      	b.n	8007028 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	daf2      	bge.n	8006fe4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2210      	movs	r2, #16
 8007006:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3301      	adds	r3, #1
 800700c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007014:	d901      	bls.n	800701a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e006      	b.n	8007028 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f003 0310 	and.w	r3, r3, #16
 8007022:	2b10      	cmp	r3, #16
 8007024:	d0f0      	beq.n	8007008 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	78fb      	ldrb	r3, [r7, #3]
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007054:	4313      	orrs	r3, r2
 8007056:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007066:	b480      	push	{r7}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007080:	f023 0303 	bic.w	r3, r3, #3
 8007084:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007094:	f043 0302 	orr.w	r3, r3, #2
 8007098:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	f003 0301 	and.w	r3, r3, #1
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3301      	adds	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070dc:	d901      	bls.n	80070e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e01b      	b.n	800711a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	daf2      	bge.n	80070d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f043 0201 	orr.w	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3301      	adds	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007106:	d901      	bls.n	800710c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e006      	b.n	800711a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b01      	cmp	r3, #1
 8007116:	d0f0      	beq.n	80070fa <USB_CoreReset+0x36>

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <__cvt>:
 8007126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007128:	ed2d 8b02 	vpush	{d8}
 800712c:	eeb0 8b40 	vmov.f64	d8, d0
 8007130:	b085      	sub	sp, #20
 8007132:	4617      	mov	r7, r2
 8007134:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007136:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007138:	ee18 2a90 	vmov	r2, s17
 800713c:	f025 0520 	bic.w	r5, r5, #32
 8007140:	2a00      	cmp	r2, #0
 8007142:	bfb6      	itet	lt
 8007144:	222d      	movlt	r2, #45	@ 0x2d
 8007146:	2200      	movge	r2, #0
 8007148:	eeb1 8b40 	vneglt.f64	d8, d0
 800714c:	2d46      	cmp	r5, #70	@ 0x46
 800714e:	460c      	mov	r4, r1
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	d004      	beq.n	800715e <__cvt+0x38>
 8007154:	2d45      	cmp	r5, #69	@ 0x45
 8007156:	d100      	bne.n	800715a <__cvt+0x34>
 8007158:	3401      	adds	r4, #1
 800715a:	2102      	movs	r1, #2
 800715c:	e000      	b.n	8007160 <__cvt+0x3a>
 800715e:	2103      	movs	r1, #3
 8007160:	ab03      	add	r3, sp, #12
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	ab02      	add	r3, sp, #8
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	4622      	mov	r2, r4
 800716a:	4633      	mov	r3, r6
 800716c:	eeb0 0b48 	vmov.f64	d0, d8
 8007170:	f000 fe42 	bl	8007df8 <_dtoa_r>
 8007174:	2d47      	cmp	r5, #71	@ 0x47
 8007176:	d114      	bne.n	80071a2 <__cvt+0x7c>
 8007178:	07fb      	lsls	r3, r7, #31
 800717a:	d50a      	bpl.n	8007192 <__cvt+0x6c>
 800717c:	1902      	adds	r2, r0, r4
 800717e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007186:	bf08      	it	eq
 8007188:	9203      	streq	r2, [sp, #12]
 800718a:	2130      	movs	r1, #48	@ 0x30
 800718c:	9b03      	ldr	r3, [sp, #12]
 800718e:	4293      	cmp	r3, r2
 8007190:	d319      	bcc.n	80071c6 <__cvt+0xa0>
 8007192:	9b03      	ldr	r3, [sp, #12]
 8007194:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007196:	1a1b      	subs	r3, r3, r0
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	b005      	add	sp, #20
 800719c:	ecbd 8b02 	vpop	{d8}
 80071a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a2:	2d46      	cmp	r5, #70	@ 0x46
 80071a4:	eb00 0204 	add.w	r2, r0, r4
 80071a8:	d1e9      	bne.n	800717e <__cvt+0x58>
 80071aa:	7803      	ldrb	r3, [r0, #0]
 80071ac:	2b30      	cmp	r3, #48	@ 0x30
 80071ae:	d107      	bne.n	80071c0 <__cvt+0x9a>
 80071b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80071b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b8:	bf1c      	itt	ne
 80071ba:	f1c4 0401 	rsbne	r4, r4, #1
 80071be:	6034      	strne	r4, [r6, #0]
 80071c0:	6833      	ldr	r3, [r6, #0]
 80071c2:	441a      	add	r2, r3
 80071c4:	e7db      	b.n	800717e <__cvt+0x58>
 80071c6:	1c5c      	adds	r4, r3, #1
 80071c8:	9403      	str	r4, [sp, #12]
 80071ca:	7019      	strb	r1, [r3, #0]
 80071cc:	e7de      	b.n	800718c <__cvt+0x66>

080071ce <__exponent>:
 80071ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071d0:	2900      	cmp	r1, #0
 80071d2:	bfba      	itte	lt
 80071d4:	4249      	neglt	r1, r1
 80071d6:	232d      	movlt	r3, #45	@ 0x2d
 80071d8:	232b      	movge	r3, #43	@ 0x2b
 80071da:	2909      	cmp	r1, #9
 80071dc:	7002      	strb	r2, [r0, #0]
 80071de:	7043      	strb	r3, [r0, #1]
 80071e0:	dd29      	ble.n	8007236 <__exponent+0x68>
 80071e2:	f10d 0307 	add.w	r3, sp, #7
 80071e6:	461d      	mov	r5, r3
 80071e8:	270a      	movs	r7, #10
 80071ea:	461a      	mov	r2, r3
 80071ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80071f0:	fb07 1416 	mls	r4, r7, r6, r1
 80071f4:	3430      	adds	r4, #48	@ 0x30
 80071f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80071fa:	460c      	mov	r4, r1
 80071fc:	2c63      	cmp	r4, #99	@ 0x63
 80071fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8007202:	4631      	mov	r1, r6
 8007204:	dcf1      	bgt.n	80071ea <__exponent+0x1c>
 8007206:	3130      	adds	r1, #48	@ 0x30
 8007208:	1e94      	subs	r4, r2, #2
 800720a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800720e:	1c41      	adds	r1, r0, #1
 8007210:	4623      	mov	r3, r4
 8007212:	42ab      	cmp	r3, r5
 8007214:	d30a      	bcc.n	800722c <__exponent+0x5e>
 8007216:	f10d 0309 	add.w	r3, sp, #9
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	42ac      	cmp	r4, r5
 800721e:	bf88      	it	hi
 8007220:	2300      	movhi	r3, #0
 8007222:	3302      	adds	r3, #2
 8007224:	4403      	add	r3, r0
 8007226:	1a18      	subs	r0, r3, r0
 8007228:	b003      	add	sp, #12
 800722a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800722c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007230:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007234:	e7ed      	b.n	8007212 <__exponent+0x44>
 8007236:	2330      	movs	r3, #48	@ 0x30
 8007238:	3130      	adds	r1, #48	@ 0x30
 800723a:	7083      	strb	r3, [r0, #2]
 800723c:	70c1      	strb	r1, [r0, #3]
 800723e:	1d03      	adds	r3, r0, #4
 8007240:	e7f1      	b.n	8007226 <__exponent+0x58>
 8007242:	0000      	movs	r0, r0
 8007244:	0000      	movs	r0, r0
	...

08007248 <_printf_float>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	b08d      	sub	sp, #52	@ 0x34
 800724e:	460c      	mov	r4, r1
 8007250:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007254:	4616      	mov	r6, r2
 8007256:	461f      	mov	r7, r3
 8007258:	4605      	mov	r5, r0
 800725a:	f000 fccb 	bl	8007bf4 <_localeconv_r>
 800725e:	f8d0 b000 	ldr.w	fp, [r0]
 8007262:	4658      	mov	r0, fp
 8007264:	f7f9 f83c 	bl	80002e0 <strlen>
 8007268:	2300      	movs	r3, #0
 800726a:	930a      	str	r3, [sp, #40]	@ 0x28
 800726c:	f8d8 3000 	ldr.w	r3, [r8]
 8007270:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007274:	6822      	ldr	r2, [r4, #0]
 8007276:	9005      	str	r0, [sp, #20]
 8007278:	3307      	adds	r3, #7
 800727a:	f023 0307 	bic.w	r3, r3, #7
 800727e:	f103 0108 	add.w	r1, r3, #8
 8007282:	f8c8 1000 	str.w	r1, [r8]
 8007286:	ed93 0b00 	vldr	d0, [r3]
 800728a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80074e8 <_printf_float+0x2a0>
 800728e:	eeb0 7bc0 	vabs.f64	d7, d0
 8007292:	eeb4 7b46 	vcmp.f64	d7, d6
 8007296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800729a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800729e:	dd24      	ble.n	80072ea <_printf_float+0xa2>
 80072a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80072a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a8:	d502      	bpl.n	80072b0 <_printf_float+0x68>
 80072aa:	232d      	movs	r3, #45	@ 0x2d
 80072ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072b0:	498f      	ldr	r1, [pc, #572]	@ (80074f0 <_printf_float+0x2a8>)
 80072b2:	4b90      	ldr	r3, [pc, #576]	@ (80074f4 <_printf_float+0x2ac>)
 80072b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80072b8:	bf94      	ite	ls
 80072ba:	4688      	movls	r8, r1
 80072bc:	4698      	movhi	r8, r3
 80072be:	f022 0204 	bic.w	r2, r2, #4
 80072c2:	2303      	movs	r3, #3
 80072c4:	6123      	str	r3, [r4, #16]
 80072c6:	6022      	str	r2, [r4, #0]
 80072c8:	f04f 0a00 	mov.w	sl, #0
 80072cc:	9700      	str	r7, [sp, #0]
 80072ce:	4633      	mov	r3, r6
 80072d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80072d2:	4621      	mov	r1, r4
 80072d4:	4628      	mov	r0, r5
 80072d6:	f000 f9d1 	bl	800767c <_printf_common>
 80072da:	3001      	adds	r0, #1
 80072dc:	f040 8089 	bne.w	80073f2 <_printf_float+0x1aa>
 80072e0:	f04f 30ff 	mov.w	r0, #4294967295
 80072e4:	b00d      	add	sp, #52	@ 0x34
 80072e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80072ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f2:	d709      	bvc.n	8007308 <_printf_float+0xc0>
 80072f4:	ee10 3a90 	vmov	r3, s1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bfbc      	itt	lt
 80072fc:	232d      	movlt	r3, #45	@ 0x2d
 80072fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007302:	497d      	ldr	r1, [pc, #500]	@ (80074f8 <_printf_float+0x2b0>)
 8007304:	4b7d      	ldr	r3, [pc, #500]	@ (80074fc <_printf_float+0x2b4>)
 8007306:	e7d5      	b.n	80072b4 <_printf_float+0x6c>
 8007308:	6863      	ldr	r3, [r4, #4]
 800730a:	1c59      	adds	r1, r3, #1
 800730c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007310:	d139      	bne.n	8007386 <_printf_float+0x13e>
 8007312:	2306      	movs	r3, #6
 8007314:	6063      	str	r3, [r4, #4]
 8007316:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800731a:	2300      	movs	r3, #0
 800731c:	6022      	str	r2, [r4, #0]
 800731e:	9303      	str	r3, [sp, #12]
 8007320:	ab0a      	add	r3, sp, #40	@ 0x28
 8007322:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007326:	ab09      	add	r3, sp, #36	@ 0x24
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	6861      	ldr	r1, [r4, #4]
 800732c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007330:	4628      	mov	r0, r5
 8007332:	f7ff fef8 	bl	8007126 <__cvt>
 8007336:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800733a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800733c:	4680      	mov	r8, r0
 800733e:	d129      	bne.n	8007394 <_printf_float+0x14c>
 8007340:	1cc8      	adds	r0, r1, #3
 8007342:	db02      	blt.n	800734a <_printf_float+0x102>
 8007344:	6863      	ldr	r3, [r4, #4]
 8007346:	4299      	cmp	r1, r3
 8007348:	dd41      	ble.n	80073ce <_printf_float+0x186>
 800734a:	f1a9 0902 	sub.w	r9, r9, #2
 800734e:	fa5f f989 	uxtb.w	r9, r9
 8007352:	3901      	subs	r1, #1
 8007354:	464a      	mov	r2, r9
 8007356:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800735a:	9109      	str	r1, [sp, #36]	@ 0x24
 800735c:	f7ff ff37 	bl	80071ce <__exponent>
 8007360:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007362:	1813      	adds	r3, r2, r0
 8007364:	2a01      	cmp	r2, #1
 8007366:	4682      	mov	sl, r0
 8007368:	6123      	str	r3, [r4, #16]
 800736a:	dc02      	bgt.n	8007372 <_printf_float+0x12a>
 800736c:	6822      	ldr	r2, [r4, #0]
 800736e:	07d2      	lsls	r2, r2, #31
 8007370:	d501      	bpl.n	8007376 <_printf_float+0x12e>
 8007372:	3301      	adds	r3, #1
 8007374:	6123      	str	r3, [r4, #16]
 8007376:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0a6      	beq.n	80072cc <_printf_float+0x84>
 800737e:	232d      	movs	r3, #45	@ 0x2d
 8007380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007384:	e7a2      	b.n	80072cc <_printf_float+0x84>
 8007386:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800738a:	d1c4      	bne.n	8007316 <_printf_float+0xce>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1c2      	bne.n	8007316 <_printf_float+0xce>
 8007390:	2301      	movs	r3, #1
 8007392:	e7bf      	b.n	8007314 <_printf_float+0xcc>
 8007394:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007398:	d9db      	bls.n	8007352 <_printf_float+0x10a>
 800739a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800739e:	d118      	bne.n	80073d2 <_printf_float+0x18a>
 80073a0:	2900      	cmp	r1, #0
 80073a2:	6863      	ldr	r3, [r4, #4]
 80073a4:	dd0b      	ble.n	80073be <_printf_float+0x176>
 80073a6:	6121      	str	r1, [r4, #16]
 80073a8:	b913      	cbnz	r3, 80073b0 <_printf_float+0x168>
 80073aa:	6822      	ldr	r2, [r4, #0]
 80073ac:	07d0      	lsls	r0, r2, #31
 80073ae:	d502      	bpl.n	80073b6 <_printf_float+0x16e>
 80073b0:	3301      	adds	r3, #1
 80073b2:	440b      	add	r3, r1
 80073b4:	6123      	str	r3, [r4, #16]
 80073b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80073b8:	f04f 0a00 	mov.w	sl, #0
 80073bc:	e7db      	b.n	8007376 <_printf_float+0x12e>
 80073be:	b913      	cbnz	r3, 80073c6 <_printf_float+0x17e>
 80073c0:	6822      	ldr	r2, [r4, #0]
 80073c2:	07d2      	lsls	r2, r2, #31
 80073c4:	d501      	bpl.n	80073ca <_printf_float+0x182>
 80073c6:	3302      	adds	r3, #2
 80073c8:	e7f4      	b.n	80073b4 <_printf_float+0x16c>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e7f2      	b.n	80073b4 <_printf_float+0x16c>
 80073ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80073d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073d4:	4299      	cmp	r1, r3
 80073d6:	db05      	blt.n	80073e4 <_printf_float+0x19c>
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	6121      	str	r1, [r4, #16]
 80073dc:	07d8      	lsls	r0, r3, #31
 80073de:	d5ea      	bpl.n	80073b6 <_printf_float+0x16e>
 80073e0:	1c4b      	adds	r3, r1, #1
 80073e2:	e7e7      	b.n	80073b4 <_printf_float+0x16c>
 80073e4:	2900      	cmp	r1, #0
 80073e6:	bfd4      	ite	le
 80073e8:	f1c1 0202 	rsble	r2, r1, #2
 80073ec:	2201      	movgt	r2, #1
 80073ee:	4413      	add	r3, r2
 80073f0:	e7e0      	b.n	80073b4 <_printf_float+0x16c>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	055a      	lsls	r2, r3, #21
 80073f6:	d407      	bmi.n	8007408 <_printf_float+0x1c0>
 80073f8:	6923      	ldr	r3, [r4, #16]
 80073fa:	4642      	mov	r2, r8
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	d12a      	bne.n	800745c <_printf_float+0x214>
 8007406:	e76b      	b.n	80072e0 <_printf_float+0x98>
 8007408:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800740c:	f240 80e0 	bls.w	80075d0 <_printf_float+0x388>
 8007410:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007414:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741c:	d133      	bne.n	8007486 <_printf_float+0x23e>
 800741e:	4a38      	ldr	r2, [pc, #224]	@ (8007500 <_printf_float+0x2b8>)
 8007420:	2301      	movs	r3, #1
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	47b8      	blx	r7
 8007428:	3001      	adds	r0, #1
 800742a:	f43f af59 	beq.w	80072e0 <_printf_float+0x98>
 800742e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007432:	4543      	cmp	r3, r8
 8007434:	db02      	blt.n	800743c <_printf_float+0x1f4>
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	07d8      	lsls	r0, r3, #31
 800743a:	d50f      	bpl.n	800745c <_printf_float+0x214>
 800743c:	9b05      	ldr	r3, [sp, #20]
 800743e:	465a      	mov	r2, fp
 8007440:	4631      	mov	r1, r6
 8007442:	4628      	mov	r0, r5
 8007444:	47b8      	blx	r7
 8007446:	3001      	adds	r0, #1
 8007448:	f43f af4a 	beq.w	80072e0 <_printf_float+0x98>
 800744c:	f04f 0900 	mov.w	r9, #0
 8007450:	f108 38ff 	add.w	r8, r8, #4294967295
 8007454:	f104 0a1a 	add.w	sl, r4, #26
 8007458:	45c8      	cmp	r8, r9
 800745a:	dc09      	bgt.n	8007470 <_printf_float+0x228>
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	079b      	lsls	r3, r3, #30
 8007460:	f100 8107 	bmi.w	8007672 <_printf_float+0x42a>
 8007464:	68e0      	ldr	r0, [r4, #12]
 8007466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007468:	4298      	cmp	r0, r3
 800746a:	bfb8      	it	lt
 800746c:	4618      	movlt	r0, r3
 800746e:	e739      	b.n	80072e4 <_printf_float+0x9c>
 8007470:	2301      	movs	r3, #1
 8007472:	4652      	mov	r2, sl
 8007474:	4631      	mov	r1, r6
 8007476:	4628      	mov	r0, r5
 8007478:	47b8      	blx	r7
 800747a:	3001      	adds	r0, #1
 800747c:	f43f af30 	beq.w	80072e0 <_printf_float+0x98>
 8007480:	f109 0901 	add.w	r9, r9, #1
 8007484:	e7e8      	b.n	8007458 <_printf_float+0x210>
 8007486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	dc3b      	bgt.n	8007504 <_printf_float+0x2bc>
 800748c:	4a1c      	ldr	r2, [pc, #112]	@ (8007500 <_printf_float+0x2b8>)
 800748e:	2301      	movs	r3, #1
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	47b8      	blx	r7
 8007496:	3001      	adds	r0, #1
 8007498:	f43f af22 	beq.w	80072e0 <_printf_float+0x98>
 800749c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80074a0:	ea59 0303 	orrs.w	r3, r9, r3
 80074a4:	d102      	bne.n	80074ac <_printf_float+0x264>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	07d9      	lsls	r1, r3, #31
 80074aa:	d5d7      	bpl.n	800745c <_printf_float+0x214>
 80074ac:	9b05      	ldr	r3, [sp, #20]
 80074ae:	465a      	mov	r2, fp
 80074b0:	4631      	mov	r1, r6
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f af12 	beq.w	80072e0 <_printf_float+0x98>
 80074bc:	f04f 0a00 	mov.w	sl, #0
 80074c0:	f104 0b1a 	add.w	fp, r4, #26
 80074c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c6:	425b      	negs	r3, r3
 80074c8:	4553      	cmp	r3, sl
 80074ca:	dc01      	bgt.n	80074d0 <_printf_float+0x288>
 80074cc:	464b      	mov	r3, r9
 80074ce:	e794      	b.n	80073fa <_printf_float+0x1b2>
 80074d0:	2301      	movs	r3, #1
 80074d2:	465a      	mov	r2, fp
 80074d4:	4631      	mov	r1, r6
 80074d6:	4628      	mov	r0, r5
 80074d8:	47b8      	blx	r7
 80074da:	3001      	adds	r0, #1
 80074dc:	f43f af00 	beq.w	80072e0 <_printf_float+0x98>
 80074e0:	f10a 0a01 	add.w	sl, sl, #1
 80074e4:	e7ee      	b.n	80074c4 <_printf_float+0x27c>
 80074e6:	bf00      	nop
 80074e8:	ffffffff 	.word	0xffffffff
 80074ec:	7fefffff 	.word	0x7fefffff
 80074f0:	08009d2c 	.word	0x08009d2c
 80074f4:	08009d30 	.word	0x08009d30
 80074f8:	08009d34 	.word	0x08009d34
 80074fc:	08009d38 	.word	0x08009d38
 8007500:	08009d3c 	.word	0x08009d3c
 8007504:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007506:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800750a:	4553      	cmp	r3, sl
 800750c:	bfa8      	it	ge
 800750e:	4653      	movge	r3, sl
 8007510:	2b00      	cmp	r3, #0
 8007512:	4699      	mov	r9, r3
 8007514:	dc37      	bgt.n	8007586 <_printf_float+0x33e>
 8007516:	2300      	movs	r3, #0
 8007518:	9307      	str	r3, [sp, #28]
 800751a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800751e:	f104 021a 	add.w	r2, r4, #26
 8007522:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007524:	9907      	ldr	r1, [sp, #28]
 8007526:	9306      	str	r3, [sp, #24]
 8007528:	eba3 0309 	sub.w	r3, r3, r9
 800752c:	428b      	cmp	r3, r1
 800752e:	dc31      	bgt.n	8007594 <_printf_float+0x34c>
 8007530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007532:	459a      	cmp	sl, r3
 8007534:	dc3b      	bgt.n	80075ae <_printf_float+0x366>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	07da      	lsls	r2, r3, #31
 800753a:	d438      	bmi.n	80075ae <_printf_float+0x366>
 800753c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800753e:	ebaa 0903 	sub.w	r9, sl, r3
 8007542:	9b06      	ldr	r3, [sp, #24]
 8007544:	ebaa 0303 	sub.w	r3, sl, r3
 8007548:	4599      	cmp	r9, r3
 800754a:	bfa8      	it	ge
 800754c:	4699      	movge	r9, r3
 800754e:	f1b9 0f00 	cmp.w	r9, #0
 8007552:	dc34      	bgt.n	80075be <_printf_float+0x376>
 8007554:	f04f 0800 	mov.w	r8, #0
 8007558:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800755c:	f104 0b1a 	add.w	fp, r4, #26
 8007560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007562:	ebaa 0303 	sub.w	r3, sl, r3
 8007566:	eba3 0309 	sub.w	r3, r3, r9
 800756a:	4543      	cmp	r3, r8
 800756c:	f77f af76 	ble.w	800745c <_printf_float+0x214>
 8007570:	2301      	movs	r3, #1
 8007572:	465a      	mov	r2, fp
 8007574:	4631      	mov	r1, r6
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	f43f aeb0 	beq.w	80072e0 <_printf_float+0x98>
 8007580:	f108 0801 	add.w	r8, r8, #1
 8007584:	e7ec      	b.n	8007560 <_printf_float+0x318>
 8007586:	4642      	mov	r2, r8
 8007588:	4631      	mov	r1, r6
 800758a:	4628      	mov	r0, r5
 800758c:	47b8      	blx	r7
 800758e:	3001      	adds	r0, #1
 8007590:	d1c1      	bne.n	8007516 <_printf_float+0x2ce>
 8007592:	e6a5      	b.n	80072e0 <_printf_float+0x98>
 8007594:	2301      	movs	r3, #1
 8007596:	4631      	mov	r1, r6
 8007598:	4628      	mov	r0, r5
 800759a:	9206      	str	r2, [sp, #24]
 800759c:	47b8      	blx	r7
 800759e:	3001      	adds	r0, #1
 80075a0:	f43f ae9e 	beq.w	80072e0 <_printf_float+0x98>
 80075a4:	9b07      	ldr	r3, [sp, #28]
 80075a6:	9a06      	ldr	r2, [sp, #24]
 80075a8:	3301      	adds	r3, #1
 80075aa:	9307      	str	r3, [sp, #28]
 80075ac:	e7b9      	b.n	8007522 <_printf_float+0x2da>
 80075ae:	9b05      	ldr	r3, [sp, #20]
 80075b0:	465a      	mov	r2, fp
 80075b2:	4631      	mov	r1, r6
 80075b4:	4628      	mov	r0, r5
 80075b6:	47b8      	blx	r7
 80075b8:	3001      	adds	r0, #1
 80075ba:	d1bf      	bne.n	800753c <_printf_float+0x2f4>
 80075bc:	e690      	b.n	80072e0 <_printf_float+0x98>
 80075be:	9a06      	ldr	r2, [sp, #24]
 80075c0:	464b      	mov	r3, r9
 80075c2:	4442      	add	r2, r8
 80075c4:	4631      	mov	r1, r6
 80075c6:	4628      	mov	r0, r5
 80075c8:	47b8      	blx	r7
 80075ca:	3001      	adds	r0, #1
 80075cc:	d1c2      	bne.n	8007554 <_printf_float+0x30c>
 80075ce:	e687      	b.n	80072e0 <_printf_float+0x98>
 80075d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80075d4:	f1b9 0f01 	cmp.w	r9, #1
 80075d8:	dc01      	bgt.n	80075de <_printf_float+0x396>
 80075da:	07db      	lsls	r3, r3, #31
 80075dc:	d536      	bpl.n	800764c <_printf_float+0x404>
 80075de:	2301      	movs	r3, #1
 80075e0:	4642      	mov	r2, r8
 80075e2:	4631      	mov	r1, r6
 80075e4:	4628      	mov	r0, r5
 80075e6:	47b8      	blx	r7
 80075e8:	3001      	adds	r0, #1
 80075ea:	f43f ae79 	beq.w	80072e0 <_printf_float+0x98>
 80075ee:	9b05      	ldr	r3, [sp, #20]
 80075f0:	465a      	mov	r2, fp
 80075f2:	4631      	mov	r1, r6
 80075f4:	4628      	mov	r0, r5
 80075f6:	47b8      	blx	r7
 80075f8:	3001      	adds	r0, #1
 80075fa:	f43f ae71 	beq.w	80072e0 <_printf_float+0x98>
 80075fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007602:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800760a:	f109 39ff 	add.w	r9, r9, #4294967295
 800760e:	d018      	beq.n	8007642 <_printf_float+0x3fa>
 8007610:	464b      	mov	r3, r9
 8007612:	f108 0201 	add.w	r2, r8, #1
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	47b8      	blx	r7
 800761c:	3001      	adds	r0, #1
 800761e:	d10c      	bne.n	800763a <_printf_float+0x3f2>
 8007620:	e65e      	b.n	80072e0 <_printf_float+0x98>
 8007622:	2301      	movs	r3, #1
 8007624:	465a      	mov	r2, fp
 8007626:	4631      	mov	r1, r6
 8007628:	4628      	mov	r0, r5
 800762a:	47b8      	blx	r7
 800762c:	3001      	adds	r0, #1
 800762e:	f43f ae57 	beq.w	80072e0 <_printf_float+0x98>
 8007632:	f108 0801 	add.w	r8, r8, #1
 8007636:	45c8      	cmp	r8, r9
 8007638:	dbf3      	blt.n	8007622 <_printf_float+0x3da>
 800763a:	4653      	mov	r3, sl
 800763c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007640:	e6dc      	b.n	80073fc <_printf_float+0x1b4>
 8007642:	f04f 0800 	mov.w	r8, #0
 8007646:	f104 0b1a 	add.w	fp, r4, #26
 800764a:	e7f4      	b.n	8007636 <_printf_float+0x3ee>
 800764c:	2301      	movs	r3, #1
 800764e:	4642      	mov	r2, r8
 8007650:	e7e1      	b.n	8007616 <_printf_float+0x3ce>
 8007652:	2301      	movs	r3, #1
 8007654:	464a      	mov	r2, r9
 8007656:	4631      	mov	r1, r6
 8007658:	4628      	mov	r0, r5
 800765a:	47b8      	blx	r7
 800765c:	3001      	adds	r0, #1
 800765e:	f43f ae3f 	beq.w	80072e0 <_printf_float+0x98>
 8007662:	f108 0801 	add.w	r8, r8, #1
 8007666:	68e3      	ldr	r3, [r4, #12]
 8007668:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800766a:	1a5b      	subs	r3, r3, r1
 800766c:	4543      	cmp	r3, r8
 800766e:	dcf0      	bgt.n	8007652 <_printf_float+0x40a>
 8007670:	e6f8      	b.n	8007464 <_printf_float+0x21c>
 8007672:	f04f 0800 	mov.w	r8, #0
 8007676:	f104 0919 	add.w	r9, r4, #25
 800767a:	e7f4      	b.n	8007666 <_printf_float+0x41e>

0800767c <_printf_common>:
 800767c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007680:	4616      	mov	r6, r2
 8007682:	4698      	mov	r8, r3
 8007684:	688a      	ldr	r2, [r1, #8]
 8007686:	690b      	ldr	r3, [r1, #16]
 8007688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800768c:	4293      	cmp	r3, r2
 800768e:	bfb8      	it	lt
 8007690:	4613      	movlt	r3, r2
 8007692:	6033      	str	r3, [r6, #0]
 8007694:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007698:	4607      	mov	r7, r0
 800769a:	460c      	mov	r4, r1
 800769c:	b10a      	cbz	r2, 80076a2 <_printf_common+0x26>
 800769e:	3301      	adds	r3, #1
 80076a0:	6033      	str	r3, [r6, #0]
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	0699      	lsls	r1, r3, #26
 80076a6:	bf42      	ittt	mi
 80076a8:	6833      	ldrmi	r3, [r6, #0]
 80076aa:	3302      	addmi	r3, #2
 80076ac:	6033      	strmi	r3, [r6, #0]
 80076ae:	6825      	ldr	r5, [r4, #0]
 80076b0:	f015 0506 	ands.w	r5, r5, #6
 80076b4:	d106      	bne.n	80076c4 <_printf_common+0x48>
 80076b6:	f104 0a19 	add.w	sl, r4, #25
 80076ba:	68e3      	ldr	r3, [r4, #12]
 80076bc:	6832      	ldr	r2, [r6, #0]
 80076be:	1a9b      	subs	r3, r3, r2
 80076c0:	42ab      	cmp	r3, r5
 80076c2:	dc26      	bgt.n	8007712 <_printf_common+0x96>
 80076c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076c8:	6822      	ldr	r2, [r4, #0]
 80076ca:	3b00      	subs	r3, #0
 80076cc:	bf18      	it	ne
 80076ce:	2301      	movne	r3, #1
 80076d0:	0692      	lsls	r2, r2, #26
 80076d2:	d42b      	bmi.n	800772c <_printf_common+0xb0>
 80076d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076d8:	4641      	mov	r1, r8
 80076da:	4638      	mov	r0, r7
 80076dc:	47c8      	blx	r9
 80076de:	3001      	adds	r0, #1
 80076e0:	d01e      	beq.n	8007720 <_printf_common+0xa4>
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	6922      	ldr	r2, [r4, #16]
 80076e6:	f003 0306 	and.w	r3, r3, #6
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	bf02      	ittt	eq
 80076ee:	68e5      	ldreq	r5, [r4, #12]
 80076f0:	6833      	ldreq	r3, [r6, #0]
 80076f2:	1aed      	subeq	r5, r5, r3
 80076f4:	68a3      	ldr	r3, [r4, #8]
 80076f6:	bf0c      	ite	eq
 80076f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076fc:	2500      	movne	r5, #0
 80076fe:	4293      	cmp	r3, r2
 8007700:	bfc4      	itt	gt
 8007702:	1a9b      	subgt	r3, r3, r2
 8007704:	18ed      	addgt	r5, r5, r3
 8007706:	2600      	movs	r6, #0
 8007708:	341a      	adds	r4, #26
 800770a:	42b5      	cmp	r5, r6
 800770c:	d11a      	bne.n	8007744 <_printf_common+0xc8>
 800770e:	2000      	movs	r0, #0
 8007710:	e008      	b.n	8007724 <_printf_common+0xa8>
 8007712:	2301      	movs	r3, #1
 8007714:	4652      	mov	r2, sl
 8007716:	4641      	mov	r1, r8
 8007718:	4638      	mov	r0, r7
 800771a:	47c8      	blx	r9
 800771c:	3001      	adds	r0, #1
 800771e:	d103      	bne.n	8007728 <_printf_common+0xac>
 8007720:	f04f 30ff 	mov.w	r0, #4294967295
 8007724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007728:	3501      	adds	r5, #1
 800772a:	e7c6      	b.n	80076ba <_printf_common+0x3e>
 800772c:	18e1      	adds	r1, r4, r3
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	2030      	movs	r0, #48	@ 0x30
 8007732:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007736:	4422      	add	r2, r4
 8007738:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800773c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007740:	3302      	adds	r3, #2
 8007742:	e7c7      	b.n	80076d4 <_printf_common+0x58>
 8007744:	2301      	movs	r3, #1
 8007746:	4622      	mov	r2, r4
 8007748:	4641      	mov	r1, r8
 800774a:	4638      	mov	r0, r7
 800774c:	47c8      	blx	r9
 800774e:	3001      	adds	r0, #1
 8007750:	d0e6      	beq.n	8007720 <_printf_common+0xa4>
 8007752:	3601      	adds	r6, #1
 8007754:	e7d9      	b.n	800770a <_printf_common+0x8e>
	...

08007758 <_printf_i>:
 8007758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800775c:	7e0f      	ldrb	r7, [r1, #24]
 800775e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007760:	2f78      	cmp	r7, #120	@ 0x78
 8007762:	4691      	mov	r9, r2
 8007764:	4680      	mov	r8, r0
 8007766:	460c      	mov	r4, r1
 8007768:	469a      	mov	sl, r3
 800776a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800776e:	d807      	bhi.n	8007780 <_printf_i+0x28>
 8007770:	2f62      	cmp	r7, #98	@ 0x62
 8007772:	d80a      	bhi.n	800778a <_printf_i+0x32>
 8007774:	2f00      	cmp	r7, #0
 8007776:	f000 80d2 	beq.w	800791e <_printf_i+0x1c6>
 800777a:	2f58      	cmp	r7, #88	@ 0x58
 800777c:	f000 80b9 	beq.w	80078f2 <_printf_i+0x19a>
 8007780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007784:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007788:	e03a      	b.n	8007800 <_printf_i+0xa8>
 800778a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800778e:	2b15      	cmp	r3, #21
 8007790:	d8f6      	bhi.n	8007780 <_printf_i+0x28>
 8007792:	a101      	add	r1, pc, #4	@ (adr r1, 8007798 <_printf_i+0x40>)
 8007794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007798:	080077f1 	.word	0x080077f1
 800779c:	08007805 	.word	0x08007805
 80077a0:	08007781 	.word	0x08007781
 80077a4:	08007781 	.word	0x08007781
 80077a8:	08007781 	.word	0x08007781
 80077ac:	08007781 	.word	0x08007781
 80077b0:	08007805 	.word	0x08007805
 80077b4:	08007781 	.word	0x08007781
 80077b8:	08007781 	.word	0x08007781
 80077bc:	08007781 	.word	0x08007781
 80077c0:	08007781 	.word	0x08007781
 80077c4:	08007905 	.word	0x08007905
 80077c8:	0800782f 	.word	0x0800782f
 80077cc:	080078bf 	.word	0x080078bf
 80077d0:	08007781 	.word	0x08007781
 80077d4:	08007781 	.word	0x08007781
 80077d8:	08007927 	.word	0x08007927
 80077dc:	08007781 	.word	0x08007781
 80077e0:	0800782f 	.word	0x0800782f
 80077e4:	08007781 	.word	0x08007781
 80077e8:	08007781 	.word	0x08007781
 80077ec:	080078c7 	.word	0x080078c7
 80077f0:	6833      	ldr	r3, [r6, #0]
 80077f2:	1d1a      	adds	r2, r3, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6032      	str	r2, [r6, #0]
 80077f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007800:	2301      	movs	r3, #1
 8007802:	e09d      	b.n	8007940 <_printf_i+0x1e8>
 8007804:	6833      	ldr	r3, [r6, #0]
 8007806:	6820      	ldr	r0, [r4, #0]
 8007808:	1d19      	adds	r1, r3, #4
 800780a:	6031      	str	r1, [r6, #0]
 800780c:	0606      	lsls	r6, r0, #24
 800780e:	d501      	bpl.n	8007814 <_printf_i+0xbc>
 8007810:	681d      	ldr	r5, [r3, #0]
 8007812:	e003      	b.n	800781c <_printf_i+0xc4>
 8007814:	0645      	lsls	r5, r0, #25
 8007816:	d5fb      	bpl.n	8007810 <_printf_i+0xb8>
 8007818:	f9b3 5000 	ldrsh.w	r5, [r3]
 800781c:	2d00      	cmp	r5, #0
 800781e:	da03      	bge.n	8007828 <_printf_i+0xd0>
 8007820:	232d      	movs	r3, #45	@ 0x2d
 8007822:	426d      	negs	r5, r5
 8007824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007828:	4859      	ldr	r0, [pc, #356]	@ (8007990 <_printf_i+0x238>)
 800782a:	230a      	movs	r3, #10
 800782c:	e011      	b.n	8007852 <_printf_i+0xfa>
 800782e:	6821      	ldr	r1, [r4, #0]
 8007830:	6833      	ldr	r3, [r6, #0]
 8007832:	0608      	lsls	r0, r1, #24
 8007834:	f853 5b04 	ldr.w	r5, [r3], #4
 8007838:	d402      	bmi.n	8007840 <_printf_i+0xe8>
 800783a:	0649      	lsls	r1, r1, #25
 800783c:	bf48      	it	mi
 800783e:	b2ad      	uxthmi	r5, r5
 8007840:	2f6f      	cmp	r7, #111	@ 0x6f
 8007842:	4853      	ldr	r0, [pc, #332]	@ (8007990 <_printf_i+0x238>)
 8007844:	6033      	str	r3, [r6, #0]
 8007846:	bf14      	ite	ne
 8007848:	230a      	movne	r3, #10
 800784a:	2308      	moveq	r3, #8
 800784c:	2100      	movs	r1, #0
 800784e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007852:	6866      	ldr	r6, [r4, #4]
 8007854:	60a6      	str	r6, [r4, #8]
 8007856:	2e00      	cmp	r6, #0
 8007858:	bfa2      	ittt	ge
 800785a:	6821      	ldrge	r1, [r4, #0]
 800785c:	f021 0104 	bicge.w	r1, r1, #4
 8007860:	6021      	strge	r1, [r4, #0]
 8007862:	b90d      	cbnz	r5, 8007868 <_printf_i+0x110>
 8007864:	2e00      	cmp	r6, #0
 8007866:	d04b      	beq.n	8007900 <_printf_i+0x1a8>
 8007868:	4616      	mov	r6, r2
 800786a:	fbb5 f1f3 	udiv	r1, r5, r3
 800786e:	fb03 5711 	mls	r7, r3, r1, r5
 8007872:	5dc7      	ldrb	r7, [r0, r7]
 8007874:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007878:	462f      	mov	r7, r5
 800787a:	42bb      	cmp	r3, r7
 800787c:	460d      	mov	r5, r1
 800787e:	d9f4      	bls.n	800786a <_printf_i+0x112>
 8007880:	2b08      	cmp	r3, #8
 8007882:	d10b      	bne.n	800789c <_printf_i+0x144>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	07df      	lsls	r7, r3, #31
 8007888:	d508      	bpl.n	800789c <_printf_i+0x144>
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	6861      	ldr	r1, [r4, #4]
 800788e:	4299      	cmp	r1, r3
 8007890:	bfde      	ittt	le
 8007892:	2330      	movle	r3, #48	@ 0x30
 8007894:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007898:	f106 36ff 	addle.w	r6, r6, #4294967295
 800789c:	1b92      	subs	r2, r2, r6
 800789e:	6122      	str	r2, [r4, #16]
 80078a0:	f8cd a000 	str.w	sl, [sp]
 80078a4:	464b      	mov	r3, r9
 80078a6:	aa03      	add	r2, sp, #12
 80078a8:	4621      	mov	r1, r4
 80078aa:	4640      	mov	r0, r8
 80078ac:	f7ff fee6 	bl	800767c <_printf_common>
 80078b0:	3001      	adds	r0, #1
 80078b2:	d14a      	bne.n	800794a <_printf_i+0x1f2>
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	b004      	add	sp, #16
 80078ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	f043 0320 	orr.w	r3, r3, #32
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	4833      	ldr	r0, [pc, #204]	@ (8007994 <_printf_i+0x23c>)
 80078c8:	2778      	movs	r7, #120	@ 0x78
 80078ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	6831      	ldr	r1, [r6, #0]
 80078d2:	061f      	lsls	r7, r3, #24
 80078d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80078d8:	d402      	bmi.n	80078e0 <_printf_i+0x188>
 80078da:	065f      	lsls	r7, r3, #25
 80078dc:	bf48      	it	mi
 80078de:	b2ad      	uxthmi	r5, r5
 80078e0:	6031      	str	r1, [r6, #0]
 80078e2:	07d9      	lsls	r1, r3, #31
 80078e4:	bf44      	itt	mi
 80078e6:	f043 0320 	orrmi.w	r3, r3, #32
 80078ea:	6023      	strmi	r3, [r4, #0]
 80078ec:	b11d      	cbz	r5, 80078f6 <_printf_i+0x19e>
 80078ee:	2310      	movs	r3, #16
 80078f0:	e7ac      	b.n	800784c <_printf_i+0xf4>
 80078f2:	4827      	ldr	r0, [pc, #156]	@ (8007990 <_printf_i+0x238>)
 80078f4:	e7e9      	b.n	80078ca <_printf_i+0x172>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	f023 0320 	bic.w	r3, r3, #32
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	e7f6      	b.n	80078ee <_printf_i+0x196>
 8007900:	4616      	mov	r6, r2
 8007902:	e7bd      	b.n	8007880 <_printf_i+0x128>
 8007904:	6833      	ldr	r3, [r6, #0]
 8007906:	6825      	ldr	r5, [r4, #0]
 8007908:	6961      	ldr	r1, [r4, #20]
 800790a:	1d18      	adds	r0, r3, #4
 800790c:	6030      	str	r0, [r6, #0]
 800790e:	062e      	lsls	r6, r5, #24
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	d501      	bpl.n	8007918 <_printf_i+0x1c0>
 8007914:	6019      	str	r1, [r3, #0]
 8007916:	e002      	b.n	800791e <_printf_i+0x1c6>
 8007918:	0668      	lsls	r0, r5, #25
 800791a:	d5fb      	bpl.n	8007914 <_printf_i+0x1bc>
 800791c:	8019      	strh	r1, [r3, #0]
 800791e:	2300      	movs	r3, #0
 8007920:	6123      	str	r3, [r4, #16]
 8007922:	4616      	mov	r6, r2
 8007924:	e7bc      	b.n	80078a0 <_printf_i+0x148>
 8007926:	6833      	ldr	r3, [r6, #0]
 8007928:	1d1a      	adds	r2, r3, #4
 800792a:	6032      	str	r2, [r6, #0]
 800792c:	681e      	ldr	r6, [r3, #0]
 800792e:	6862      	ldr	r2, [r4, #4]
 8007930:	2100      	movs	r1, #0
 8007932:	4630      	mov	r0, r6
 8007934:	f7f8 fc84 	bl	8000240 <memchr>
 8007938:	b108      	cbz	r0, 800793e <_printf_i+0x1e6>
 800793a:	1b80      	subs	r0, r0, r6
 800793c:	6060      	str	r0, [r4, #4]
 800793e:	6863      	ldr	r3, [r4, #4]
 8007940:	6123      	str	r3, [r4, #16]
 8007942:	2300      	movs	r3, #0
 8007944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007948:	e7aa      	b.n	80078a0 <_printf_i+0x148>
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	4632      	mov	r2, r6
 800794e:	4649      	mov	r1, r9
 8007950:	4640      	mov	r0, r8
 8007952:	47d0      	blx	sl
 8007954:	3001      	adds	r0, #1
 8007956:	d0ad      	beq.n	80078b4 <_printf_i+0x15c>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	079b      	lsls	r3, r3, #30
 800795c:	d413      	bmi.n	8007986 <_printf_i+0x22e>
 800795e:	68e0      	ldr	r0, [r4, #12]
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	4298      	cmp	r0, r3
 8007964:	bfb8      	it	lt
 8007966:	4618      	movlt	r0, r3
 8007968:	e7a6      	b.n	80078b8 <_printf_i+0x160>
 800796a:	2301      	movs	r3, #1
 800796c:	4632      	mov	r2, r6
 800796e:	4649      	mov	r1, r9
 8007970:	4640      	mov	r0, r8
 8007972:	47d0      	blx	sl
 8007974:	3001      	adds	r0, #1
 8007976:	d09d      	beq.n	80078b4 <_printf_i+0x15c>
 8007978:	3501      	adds	r5, #1
 800797a:	68e3      	ldr	r3, [r4, #12]
 800797c:	9903      	ldr	r1, [sp, #12]
 800797e:	1a5b      	subs	r3, r3, r1
 8007980:	42ab      	cmp	r3, r5
 8007982:	dcf2      	bgt.n	800796a <_printf_i+0x212>
 8007984:	e7eb      	b.n	800795e <_printf_i+0x206>
 8007986:	2500      	movs	r5, #0
 8007988:	f104 0619 	add.w	r6, r4, #25
 800798c:	e7f5      	b.n	800797a <_printf_i+0x222>
 800798e:	bf00      	nop
 8007990:	08009d3e 	.word	0x08009d3e
 8007994:	08009d4f 	.word	0x08009d4f

08007998 <std>:
 8007998:	2300      	movs	r3, #0
 800799a:	b510      	push	{r4, lr}
 800799c:	4604      	mov	r4, r0
 800799e:	e9c0 3300 	strd	r3, r3, [r0]
 80079a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079a6:	6083      	str	r3, [r0, #8]
 80079a8:	8181      	strh	r1, [r0, #12]
 80079aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80079ac:	81c2      	strh	r2, [r0, #14]
 80079ae:	6183      	str	r3, [r0, #24]
 80079b0:	4619      	mov	r1, r3
 80079b2:	2208      	movs	r2, #8
 80079b4:	305c      	adds	r0, #92	@ 0x5c
 80079b6:	f000 f914 	bl	8007be2 <memset>
 80079ba:	4b0d      	ldr	r3, [pc, #52]	@ (80079f0 <std+0x58>)
 80079bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80079be:	4b0d      	ldr	r3, [pc, #52]	@ (80079f4 <std+0x5c>)
 80079c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079c2:	4b0d      	ldr	r3, [pc, #52]	@ (80079f8 <std+0x60>)
 80079c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079c6:	4b0d      	ldr	r3, [pc, #52]	@ (80079fc <std+0x64>)
 80079c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80079ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007a00 <std+0x68>)
 80079cc:	6224      	str	r4, [r4, #32]
 80079ce:	429c      	cmp	r4, r3
 80079d0:	d006      	beq.n	80079e0 <std+0x48>
 80079d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079d6:	4294      	cmp	r4, r2
 80079d8:	d002      	beq.n	80079e0 <std+0x48>
 80079da:	33d0      	adds	r3, #208	@ 0xd0
 80079dc:	429c      	cmp	r4, r3
 80079de:	d105      	bne.n	80079ec <std+0x54>
 80079e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e8:	f000 b978 	b.w	8007cdc <__retarget_lock_init_recursive>
 80079ec:	bd10      	pop	{r4, pc}
 80079ee:	bf00      	nop
 80079f0:	08007b5d 	.word	0x08007b5d
 80079f4:	08007b7f 	.word	0x08007b7f
 80079f8:	08007bb7 	.word	0x08007bb7
 80079fc:	08007bdb 	.word	0x08007bdb
 8007a00:	20000df4 	.word	0x20000df4

08007a04 <stdio_exit_handler>:
 8007a04:	4a02      	ldr	r2, [pc, #8]	@ (8007a10 <stdio_exit_handler+0xc>)
 8007a06:	4903      	ldr	r1, [pc, #12]	@ (8007a14 <stdio_exit_handler+0x10>)
 8007a08:	4803      	ldr	r0, [pc, #12]	@ (8007a18 <stdio_exit_handler+0x14>)
 8007a0a:	f000 b869 	b.w	8007ae0 <_fwalk_sglue>
 8007a0e:	bf00      	nop
 8007a10:	2000000c 	.word	0x2000000c
 8007a14:	08009561 	.word	0x08009561
 8007a18:	2000001c 	.word	0x2000001c

08007a1c <cleanup_stdio>:
 8007a1c:	6841      	ldr	r1, [r0, #4]
 8007a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a50 <cleanup_stdio+0x34>)
 8007a20:	4299      	cmp	r1, r3
 8007a22:	b510      	push	{r4, lr}
 8007a24:	4604      	mov	r4, r0
 8007a26:	d001      	beq.n	8007a2c <cleanup_stdio+0x10>
 8007a28:	f001 fd9a 	bl	8009560 <_fflush_r>
 8007a2c:	68a1      	ldr	r1, [r4, #8]
 8007a2e:	4b09      	ldr	r3, [pc, #36]	@ (8007a54 <cleanup_stdio+0x38>)
 8007a30:	4299      	cmp	r1, r3
 8007a32:	d002      	beq.n	8007a3a <cleanup_stdio+0x1e>
 8007a34:	4620      	mov	r0, r4
 8007a36:	f001 fd93 	bl	8009560 <_fflush_r>
 8007a3a:	68e1      	ldr	r1, [r4, #12]
 8007a3c:	4b06      	ldr	r3, [pc, #24]	@ (8007a58 <cleanup_stdio+0x3c>)
 8007a3e:	4299      	cmp	r1, r3
 8007a40:	d004      	beq.n	8007a4c <cleanup_stdio+0x30>
 8007a42:	4620      	mov	r0, r4
 8007a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a48:	f001 bd8a 	b.w	8009560 <_fflush_r>
 8007a4c:	bd10      	pop	{r4, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000df4 	.word	0x20000df4
 8007a54:	20000e5c 	.word	0x20000e5c
 8007a58:	20000ec4 	.word	0x20000ec4

08007a5c <global_stdio_init.part.0>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a8c <global_stdio_init.part.0+0x30>)
 8007a60:	4c0b      	ldr	r4, [pc, #44]	@ (8007a90 <global_stdio_init.part.0+0x34>)
 8007a62:	4a0c      	ldr	r2, [pc, #48]	@ (8007a94 <global_stdio_init.part.0+0x38>)
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	4620      	mov	r0, r4
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2104      	movs	r1, #4
 8007a6c:	f7ff ff94 	bl	8007998 <std>
 8007a70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a74:	2201      	movs	r2, #1
 8007a76:	2109      	movs	r1, #9
 8007a78:	f7ff ff8e 	bl	8007998 <std>
 8007a7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a80:	2202      	movs	r2, #2
 8007a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a86:	2112      	movs	r1, #18
 8007a88:	f7ff bf86 	b.w	8007998 <std>
 8007a8c:	20000f2c 	.word	0x20000f2c
 8007a90:	20000df4 	.word	0x20000df4
 8007a94:	08007a05 	.word	0x08007a05

08007a98 <__sfp_lock_acquire>:
 8007a98:	4801      	ldr	r0, [pc, #4]	@ (8007aa0 <__sfp_lock_acquire+0x8>)
 8007a9a:	f000 b920 	b.w	8007cde <__retarget_lock_acquire_recursive>
 8007a9e:	bf00      	nop
 8007aa0:	20000f35 	.word	0x20000f35

08007aa4 <__sfp_lock_release>:
 8007aa4:	4801      	ldr	r0, [pc, #4]	@ (8007aac <__sfp_lock_release+0x8>)
 8007aa6:	f000 b91b 	b.w	8007ce0 <__retarget_lock_release_recursive>
 8007aaa:	bf00      	nop
 8007aac:	20000f35 	.word	0x20000f35

08007ab0 <__sinit>:
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	f7ff fff0 	bl	8007a98 <__sfp_lock_acquire>
 8007ab8:	6a23      	ldr	r3, [r4, #32]
 8007aba:	b11b      	cbz	r3, 8007ac4 <__sinit+0x14>
 8007abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac0:	f7ff bff0 	b.w	8007aa4 <__sfp_lock_release>
 8007ac4:	4b04      	ldr	r3, [pc, #16]	@ (8007ad8 <__sinit+0x28>)
 8007ac6:	6223      	str	r3, [r4, #32]
 8007ac8:	4b04      	ldr	r3, [pc, #16]	@ (8007adc <__sinit+0x2c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1f5      	bne.n	8007abc <__sinit+0xc>
 8007ad0:	f7ff ffc4 	bl	8007a5c <global_stdio_init.part.0>
 8007ad4:	e7f2      	b.n	8007abc <__sinit+0xc>
 8007ad6:	bf00      	nop
 8007ad8:	08007a1d 	.word	0x08007a1d
 8007adc:	20000f2c 	.word	0x20000f2c

08007ae0 <_fwalk_sglue>:
 8007ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	4688      	mov	r8, r1
 8007ae8:	4614      	mov	r4, r2
 8007aea:	2600      	movs	r6, #0
 8007aec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007af0:	f1b9 0901 	subs.w	r9, r9, #1
 8007af4:	d505      	bpl.n	8007b02 <_fwalk_sglue+0x22>
 8007af6:	6824      	ldr	r4, [r4, #0]
 8007af8:	2c00      	cmp	r4, #0
 8007afa:	d1f7      	bne.n	8007aec <_fwalk_sglue+0xc>
 8007afc:	4630      	mov	r0, r6
 8007afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b02:	89ab      	ldrh	r3, [r5, #12]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d907      	bls.n	8007b18 <_fwalk_sglue+0x38>
 8007b08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	d003      	beq.n	8007b18 <_fwalk_sglue+0x38>
 8007b10:	4629      	mov	r1, r5
 8007b12:	4638      	mov	r0, r7
 8007b14:	47c0      	blx	r8
 8007b16:	4306      	orrs	r6, r0
 8007b18:	3568      	adds	r5, #104	@ 0x68
 8007b1a:	e7e9      	b.n	8007af0 <_fwalk_sglue+0x10>

08007b1c <siprintf>:
 8007b1c:	b40e      	push	{r1, r2, r3}
 8007b1e:	b500      	push	{lr}
 8007b20:	b09c      	sub	sp, #112	@ 0x70
 8007b22:	ab1d      	add	r3, sp, #116	@ 0x74
 8007b24:	9002      	str	r0, [sp, #8]
 8007b26:	9006      	str	r0, [sp, #24]
 8007b28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b2c:	4809      	ldr	r0, [pc, #36]	@ (8007b54 <siprintf+0x38>)
 8007b2e:	9107      	str	r1, [sp, #28]
 8007b30:	9104      	str	r1, [sp, #16]
 8007b32:	4909      	ldr	r1, [pc, #36]	@ (8007b58 <siprintf+0x3c>)
 8007b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b38:	9105      	str	r1, [sp, #20]
 8007b3a:	6800      	ldr	r0, [r0, #0]
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	a902      	add	r1, sp, #8
 8007b40:	f001 fb8e 	bl	8009260 <_svfiprintf_r>
 8007b44:	9b02      	ldr	r3, [sp, #8]
 8007b46:	2200      	movs	r2, #0
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	b01c      	add	sp, #112	@ 0x70
 8007b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b50:	b003      	add	sp, #12
 8007b52:	4770      	bx	lr
 8007b54:	20000018 	.word	0x20000018
 8007b58:	ffff0208 	.word	0xffff0208

08007b5c <__sread>:
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	460c      	mov	r4, r1
 8007b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b64:	f000 f86c 	bl	8007c40 <_read_r>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	bfab      	itete	ge
 8007b6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b6e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b70:	181b      	addge	r3, r3, r0
 8007b72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b76:	bfac      	ite	ge
 8007b78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b7a:	81a3      	strhlt	r3, [r4, #12]
 8007b7c:	bd10      	pop	{r4, pc}

08007b7e <__swrite>:
 8007b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b82:	461f      	mov	r7, r3
 8007b84:	898b      	ldrh	r3, [r1, #12]
 8007b86:	05db      	lsls	r3, r3, #23
 8007b88:	4605      	mov	r5, r0
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	4616      	mov	r6, r2
 8007b8e:	d505      	bpl.n	8007b9c <__swrite+0x1e>
 8007b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b94:	2302      	movs	r3, #2
 8007b96:	2200      	movs	r2, #0
 8007b98:	f000 f840 	bl	8007c1c <_lseek_r>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ba2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	4632      	mov	r2, r6
 8007baa:	463b      	mov	r3, r7
 8007bac:	4628      	mov	r0, r5
 8007bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb2:	f000 b857 	b.w	8007c64 <_write_r>

08007bb6 <__sseek>:
 8007bb6:	b510      	push	{r4, lr}
 8007bb8:	460c      	mov	r4, r1
 8007bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bbe:	f000 f82d 	bl	8007c1c <_lseek_r>
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	bf15      	itete	ne
 8007bc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bd2:	81a3      	strheq	r3, [r4, #12]
 8007bd4:	bf18      	it	ne
 8007bd6:	81a3      	strhne	r3, [r4, #12]
 8007bd8:	bd10      	pop	{r4, pc}

08007bda <__sclose>:
 8007bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bde:	f000 b80d 	b.w	8007bfc <_close_r>

08007be2 <memset>:
 8007be2:	4402      	add	r2, r0
 8007be4:	4603      	mov	r3, r0
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d100      	bne.n	8007bec <memset+0xa>
 8007bea:	4770      	bx	lr
 8007bec:	f803 1b01 	strb.w	r1, [r3], #1
 8007bf0:	e7f9      	b.n	8007be6 <memset+0x4>
	...

08007bf4 <_localeconv_r>:
 8007bf4:	4800      	ldr	r0, [pc, #0]	@ (8007bf8 <_localeconv_r+0x4>)
 8007bf6:	4770      	bx	lr
 8007bf8:	20000158 	.word	0x20000158

08007bfc <_close_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4d06      	ldr	r5, [pc, #24]	@ (8007c18 <_close_r+0x1c>)
 8007c00:	2300      	movs	r3, #0
 8007c02:	4604      	mov	r4, r0
 8007c04:	4608      	mov	r0, r1
 8007c06:	602b      	str	r3, [r5, #0]
 8007c08:	f7f9 fefe 	bl	8001a08 <_close>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_close_r+0x1a>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_close_r+0x1a>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	20000f30 	.word	0x20000f30

08007c1c <_lseek_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4d07      	ldr	r5, [pc, #28]	@ (8007c3c <_lseek_r+0x20>)
 8007c20:	4604      	mov	r4, r0
 8007c22:	4608      	mov	r0, r1
 8007c24:	4611      	mov	r1, r2
 8007c26:	2200      	movs	r2, #0
 8007c28:	602a      	str	r2, [r5, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f7f9 ff13 	bl	8001a56 <_lseek>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d102      	bne.n	8007c3a <_lseek_r+0x1e>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	b103      	cbz	r3, 8007c3a <_lseek_r+0x1e>
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	20000f30 	.word	0x20000f30

08007c40 <_read_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d07      	ldr	r5, [pc, #28]	@ (8007c60 <_read_r+0x20>)
 8007c44:	4604      	mov	r4, r0
 8007c46:	4608      	mov	r0, r1
 8007c48:	4611      	mov	r1, r2
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	602a      	str	r2, [r5, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f7f9 fea1 	bl	8001996 <_read>
 8007c54:	1c43      	adds	r3, r0, #1
 8007c56:	d102      	bne.n	8007c5e <_read_r+0x1e>
 8007c58:	682b      	ldr	r3, [r5, #0]
 8007c5a:	b103      	cbz	r3, 8007c5e <_read_r+0x1e>
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	bd38      	pop	{r3, r4, r5, pc}
 8007c60:	20000f30 	.word	0x20000f30

08007c64 <_write_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d07      	ldr	r5, [pc, #28]	@ (8007c84 <_write_r+0x20>)
 8007c68:	4604      	mov	r4, r0
 8007c6a:	4608      	mov	r0, r1
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	2200      	movs	r2, #0
 8007c70:	602a      	str	r2, [r5, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	f7f9 feac 	bl	80019d0 <_write>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d102      	bne.n	8007c82 <_write_r+0x1e>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b103      	cbz	r3, 8007c82 <_write_r+0x1e>
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	20000f30 	.word	0x20000f30

08007c88 <__errno>:
 8007c88:	4b01      	ldr	r3, [pc, #4]	@ (8007c90 <__errno+0x8>)
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20000018 	.word	0x20000018

08007c94 <__libc_init_array>:
 8007c94:	b570      	push	{r4, r5, r6, lr}
 8007c96:	4d0d      	ldr	r5, [pc, #52]	@ (8007ccc <__libc_init_array+0x38>)
 8007c98:	4c0d      	ldr	r4, [pc, #52]	@ (8007cd0 <__libc_init_array+0x3c>)
 8007c9a:	1b64      	subs	r4, r4, r5
 8007c9c:	10a4      	asrs	r4, r4, #2
 8007c9e:	2600      	movs	r6, #0
 8007ca0:	42a6      	cmp	r6, r4
 8007ca2:	d109      	bne.n	8007cb8 <__libc_init_array+0x24>
 8007ca4:	4d0b      	ldr	r5, [pc, #44]	@ (8007cd4 <__libc_init_array+0x40>)
 8007ca6:	4c0c      	ldr	r4, [pc, #48]	@ (8007cd8 <__libc_init_array+0x44>)
 8007ca8:	f001 fff8 	bl	8009c9c <_init>
 8007cac:	1b64      	subs	r4, r4, r5
 8007cae:	10a4      	asrs	r4, r4, #2
 8007cb0:	2600      	movs	r6, #0
 8007cb2:	42a6      	cmp	r6, r4
 8007cb4:	d105      	bne.n	8007cc2 <__libc_init_array+0x2e>
 8007cb6:	bd70      	pop	{r4, r5, r6, pc}
 8007cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cbc:	4798      	blx	r3
 8007cbe:	3601      	adds	r6, #1
 8007cc0:	e7ee      	b.n	8007ca0 <__libc_init_array+0xc>
 8007cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc6:	4798      	blx	r3
 8007cc8:	3601      	adds	r6, #1
 8007cca:	e7f2      	b.n	8007cb2 <__libc_init_array+0x1e>
 8007ccc:	0800a0a8 	.word	0x0800a0a8
 8007cd0:	0800a0a8 	.word	0x0800a0a8
 8007cd4:	0800a0a8 	.word	0x0800a0a8
 8007cd8:	0800a0b0 	.word	0x0800a0b0

08007cdc <__retarget_lock_init_recursive>:
 8007cdc:	4770      	bx	lr

08007cde <__retarget_lock_acquire_recursive>:
 8007cde:	4770      	bx	lr

08007ce0 <__retarget_lock_release_recursive>:
 8007ce0:	4770      	bx	lr

08007ce2 <quorem>:
 8007ce2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce6:	6903      	ldr	r3, [r0, #16]
 8007ce8:	690c      	ldr	r4, [r1, #16]
 8007cea:	42a3      	cmp	r3, r4
 8007cec:	4607      	mov	r7, r0
 8007cee:	db7e      	blt.n	8007dee <quorem+0x10c>
 8007cf0:	3c01      	subs	r4, #1
 8007cf2:	f101 0814 	add.w	r8, r1, #20
 8007cf6:	00a3      	lsls	r3, r4, #2
 8007cf8:	f100 0514 	add.w	r5, r0, #20
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d14:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d18:	d32e      	bcc.n	8007d78 <quorem+0x96>
 8007d1a:	f04f 0a00 	mov.w	sl, #0
 8007d1e:	46c4      	mov	ip, r8
 8007d20:	46ae      	mov	lr, r5
 8007d22:	46d3      	mov	fp, sl
 8007d24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d28:	b298      	uxth	r0, r3
 8007d2a:	fb06 a000 	mla	r0, r6, r0, sl
 8007d2e:	0c02      	lsrs	r2, r0, #16
 8007d30:	0c1b      	lsrs	r3, r3, #16
 8007d32:	fb06 2303 	mla	r3, r6, r3, r2
 8007d36:	f8de 2000 	ldr.w	r2, [lr]
 8007d3a:	b280      	uxth	r0, r0
 8007d3c:	b292      	uxth	r2, r2
 8007d3e:	1a12      	subs	r2, r2, r0
 8007d40:	445a      	add	r2, fp
 8007d42:	f8de 0000 	ldr.w	r0, [lr]
 8007d46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d50:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d54:	b292      	uxth	r2, r2
 8007d56:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d5a:	45e1      	cmp	r9, ip
 8007d5c:	f84e 2b04 	str.w	r2, [lr], #4
 8007d60:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d64:	d2de      	bcs.n	8007d24 <quorem+0x42>
 8007d66:	9b00      	ldr	r3, [sp, #0]
 8007d68:	58eb      	ldr	r3, [r5, r3]
 8007d6a:	b92b      	cbnz	r3, 8007d78 <quorem+0x96>
 8007d6c:	9b01      	ldr	r3, [sp, #4]
 8007d6e:	3b04      	subs	r3, #4
 8007d70:	429d      	cmp	r5, r3
 8007d72:	461a      	mov	r2, r3
 8007d74:	d32f      	bcc.n	8007dd6 <quorem+0xf4>
 8007d76:	613c      	str	r4, [r7, #16]
 8007d78:	4638      	mov	r0, r7
 8007d7a:	f001 f90d 	bl	8008f98 <__mcmp>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	db25      	blt.n	8007dce <quorem+0xec>
 8007d82:	4629      	mov	r1, r5
 8007d84:	2000      	movs	r0, #0
 8007d86:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d8a:	f8d1 c000 	ldr.w	ip, [r1]
 8007d8e:	fa1f fe82 	uxth.w	lr, r2
 8007d92:	fa1f f38c 	uxth.w	r3, ip
 8007d96:	eba3 030e 	sub.w	r3, r3, lr
 8007d9a:	4403      	add	r3, r0
 8007d9c:	0c12      	lsrs	r2, r2, #16
 8007d9e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007da2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dac:	45c1      	cmp	r9, r8
 8007dae:	f841 3b04 	str.w	r3, [r1], #4
 8007db2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007db6:	d2e6      	bcs.n	8007d86 <quorem+0xa4>
 8007db8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dc0:	b922      	cbnz	r2, 8007dcc <quorem+0xea>
 8007dc2:	3b04      	subs	r3, #4
 8007dc4:	429d      	cmp	r5, r3
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	d30b      	bcc.n	8007de2 <quorem+0x100>
 8007dca:	613c      	str	r4, [r7, #16]
 8007dcc:	3601      	adds	r6, #1
 8007dce:	4630      	mov	r0, r6
 8007dd0:	b003      	add	sp, #12
 8007dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd6:	6812      	ldr	r2, [r2, #0]
 8007dd8:	3b04      	subs	r3, #4
 8007dda:	2a00      	cmp	r2, #0
 8007ddc:	d1cb      	bne.n	8007d76 <quorem+0x94>
 8007dde:	3c01      	subs	r4, #1
 8007de0:	e7c6      	b.n	8007d70 <quorem+0x8e>
 8007de2:	6812      	ldr	r2, [r2, #0]
 8007de4:	3b04      	subs	r3, #4
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	d1ef      	bne.n	8007dca <quorem+0xe8>
 8007dea:	3c01      	subs	r4, #1
 8007dec:	e7ea      	b.n	8007dc4 <quorem+0xe2>
 8007dee:	2000      	movs	r0, #0
 8007df0:	e7ee      	b.n	8007dd0 <quorem+0xee>
 8007df2:	0000      	movs	r0, r0
 8007df4:	0000      	movs	r0, r0
	...

08007df8 <_dtoa_r>:
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	ed2d 8b02 	vpush	{d8}
 8007e00:	69c7      	ldr	r7, [r0, #28]
 8007e02:	b091      	sub	sp, #68	@ 0x44
 8007e04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e08:	ec55 4b10 	vmov	r4, r5, d0
 8007e0c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007e0e:	9107      	str	r1, [sp, #28]
 8007e10:	4681      	mov	r9, r0
 8007e12:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e14:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e16:	b97f      	cbnz	r7, 8007e38 <_dtoa_r+0x40>
 8007e18:	2010      	movs	r0, #16
 8007e1a:	f000 fd8d 	bl	8008938 <malloc>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	f8c9 001c 	str.w	r0, [r9, #28]
 8007e24:	b920      	cbnz	r0, 8007e30 <_dtoa_r+0x38>
 8007e26:	4ba0      	ldr	r3, [pc, #640]	@ (80080a8 <_dtoa_r+0x2b0>)
 8007e28:	21ef      	movs	r1, #239	@ 0xef
 8007e2a:	48a0      	ldr	r0, [pc, #640]	@ (80080ac <_dtoa_r+0x2b4>)
 8007e2c:	f001 fbf8 	bl	8009620 <__assert_func>
 8007e30:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e34:	6007      	str	r7, [r0, #0]
 8007e36:	60c7      	str	r7, [r0, #12]
 8007e38:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e3c:	6819      	ldr	r1, [r3, #0]
 8007e3e:	b159      	cbz	r1, 8007e58 <_dtoa_r+0x60>
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	604a      	str	r2, [r1, #4]
 8007e44:	2301      	movs	r3, #1
 8007e46:	4093      	lsls	r3, r2
 8007e48:	608b      	str	r3, [r1, #8]
 8007e4a:	4648      	mov	r0, r9
 8007e4c:	f000 fe6a 	bl	8008b24 <_Bfree>
 8007e50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e54:	2200      	movs	r2, #0
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	1e2b      	subs	r3, r5, #0
 8007e5a:	bfbb      	ittet	lt
 8007e5c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e60:	9303      	strlt	r3, [sp, #12]
 8007e62:	2300      	movge	r3, #0
 8007e64:	2201      	movlt	r2, #1
 8007e66:	bfac      	ite	ge
 8007e68:	6033      	strge	r3, [r6, #0]
 8007e6a:	6032      	strlt	r2, [r6, #0]
 8007e6c:	4b90      	ldr	r3, [pc, #576]	@ (80080b0 <_dtoa_r+0x2b8>)
 8007e6e:	9e03      	ldr	r6, [sp, #12]
 8007e70:	43b3      	bics	r3, r6
 8007e72:	d110      	bne.n	8007e96 <_dtoa_r+0x9e>
 8007e74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e76:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007e80:	4323      	orrs	r3, r4
 8007e82:	f000 84de 	beq.w	8008842 <_dtoa_r+0xa4a>
 8007e86:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e88:	4f8a      	ldr	r7, [pc, #552]	@ (80080b4 <_dtoa_r+0x2bc>)
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 84e0 	beq.w	8008850 <_dtoa_r+0xa58>
 8007e90:	1cfb      	adds	r3, r7, #3
 8007e92:	f000 bcdb 	b.w	800884c <_dtoa_r+0xa54>
 8007e96:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007e9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea2:	d10a      	bne.n	8007eba <_dtoa_r+0xc2>
 8007ea4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007eac:	b113      	cbz	r3, 8007eb4 <_dtoa_r+0xbc>
 8007eae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007eb0:	4b81      	ldr	r3, [pc, #516]	@ (80080b8 <_dtoa_r+0x2c0>)
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	4f81      	ldr	r7, [pc, #516]	@ (80080bc <_dtoa_r+0x2c4>)
 8007eb6:	f000 bccb 	b.w	8008850 <_dtoa_r+0xa58>
 8007eba:	aa0e      	add	r2, sp, #56	@ 0x38
 8007ebc:	a90f      	add	r1, sp, #60	@ 0x3c
 8007ebe:	4648      	mov	r0, r9
 8007ec0:	eeb0 0b48 	vmov.f64	d0, d8
 8007ec4:	f001 f918 	bl	80090f8 <__d2b>
 8007ec8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007ecc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ece:	9001      	str	r0, [sp, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d045      	beq.n	8007f60 <_dtoa_r+0x168>
 8007ed4:	eeb0 7b48 	vmov.f64	d7, d8
 8007ed8:	ee18 1a90 	vmov	r1, s17
 8007edc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007ee0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007ee4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007ee8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007eec:	2500      	movs	r5, #0
 8007eee:	ee07 1a90 	vmov	s15, r1
 8007ef2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007ef6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008090 <_dtoa_r+0x298>
 8007efa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007efe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008098 <_dtoa_r+0x2a0>
 8007f02:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007f06:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80080a0 <_dtoa_r+0x2a8>
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007f12:	eeb0 7b46 	vmov.f64	d7, d6
 8007f16:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007f1a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007f1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f26:	ee16 8a90 	vmov	r8, s13
 8007f2a:	d508      	bpl.n	8007f3e <_dtoa_r+0x146>
 8007f2c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007f30:	eeb4 6b47 	vcmp.f64	d6, d7
 8007f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f38:	bf18      	it	ne
 8007f3a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007f3e:	f1b8 0f16 	cmp.w	r8, #22
 8007f42:	d82b      	bhi.n	8007f9c <_dtoa_r+0x1a4>
 8007f44:	495e      	ldr	r1, [pc, #376]	@ (80080c0 <_dtoa_r+0x2c8>)
 8007f46:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007f4a:	ed91 7b00 	vldr	d7, [r1]
 8007f4e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f56:	d501      	bpl.n	8007f5c <_dtoa_r+0x164>
 8007f58:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	e01e      	b.n	8007f9e <_dtoa_r+0x1a6>
 8007f60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f62:	4413      	add	r3, r2
 8007f64:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007f68:	2920      	cmp	r1, #32
 8007f6a:	bfc1      	itttt	gt
 8007f6c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007f70:	408e      	lslgt	r6, r1
 8007f72:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007f76:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007f7a:	bfd6      	itet	le
 8007f7c:	f1c1 0120 	rsble	r1, r1, #32
 8007f80:	4331      	orrgt	r1, r6
 8007f82:	fa04 f101 	lslle.w	r1, r4, r1
 8007f86:	ee07 1a90 	vmov	s15, r1
 8007f8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	ee17 1a90 	vmov	r1, s15
 8007f94:	2501      	movs	r5, #1
 8007f96:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007f9a:	e7a8      	b.n	8007eee <_dtoa_r+0xf6>
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	1e53      	subs	r3, r2, #1
 8007fa2:	9306      	str	r3, [sp, #24]
 8007fa4:	bf45      	ittet	mi
 8007fa6:	f1c2 0301 	rsbmi	r3, r2, #1
 8007faa:	9305      	strmi	r3, [sp, #20]
 8007fac:	2300      	movpl	r3, #0
 8007fae:	2300      	movmi	r3, #0
 8007fb0:	bf4c      	ite	mi
 8007fb2:	9306      	strmi	r3, [sp, #24]
 8007fb4:	9305      	strpl	r3, [sp, #20]
 8007fb6:	f1b8 0f00 	cmp.w	r8, #0
 8007fba:	910c      	str	r1, [sp, #48]	@ 0x30
 8007fbc:	db18      	blt.n	8007ff0 <_dtoa_r+0x1f8>
 8007fbe:	9b06      	ldr	r3, [sp, #24]
 8007fc0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007fc4:	4443      	add	r3, r8
 8007fc6:	9306      	str	r3, [sp, #24]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	9a07      	ldr	r2, [sp, #28]
 8007fcc:	2a09      	cmp	r2, #9
 8007fce:	d849      	bhi.n	8008064 <_dtoa_r+0x26c>
 8007fd0:	2a05      	cmp	r2, #5
 8007fd2:	bfc4      	itt	gt
 8007fd4:	3a04      	subgt	r2, #4
 8007fd6:	9207      	strgt	r2, [sp, #28]
 8007fd8:	9a07      	ldr	r2, [sp, #28]
 8007fda:	f1a2 0202 	sub.w	r2, r2, #2
 8007fde:	bfcc      	ite	gt
 8007fe0:	2400      	movgt	r4, #0
 8007fe2:	2401      	movle	r4, #1
 8007fe4:	2a03      	cmp	r2, #3
 8007fe6:	d848      	bhi.n	800807a <_dtoa_r+0x282>
 8007fe8:	e8df f002 	tbb	[pc, r2]
 8007fec:	3a2c2e0b 	.word	0x3a2c2e0b
 8007ff0:	9b05      	ldr	r3, [sp, #20]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	eba3 0308 	sub.w	r3, r3, r8
 8007ff8:	9305      	str	r3, [sp, #20]
 8007ffa:	920a      	str	r2, [sp, #40]	@ 0x28
 8007ffc:	f1c8 0300 	rsb	r3, r8, #0
 8008000:	e7e3      	b.n	8007fca <_dtoa_r+0x1d2>
 8008002:	2200      	movs	r2, #0
 8008004:	9208      	str	r2, [sp, #32]
 8008006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008008:	2a00      	cmp	r2, #0
 800800a:	dc39      	bgt.n	8008080 <_dtoa_r+0x288>
 800800c:	f04f 0b01 	mov.w	fp, #1
 8008010:	46da      	mov	sl, fp
 8008012:	465a      	mov	r2, fp
 8008014:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8008018:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800801c:	2100      	movs	r1, #0
 800801e:	2004      	movs	r0, #4
 8008020:	f100 0614 	add.w	r6, r0, #20
 8008024:	4296      	cmp	r6, r2
 8008026:	d930      	bls.n	800808a <_dtoa_r+0x292>
 8008028:	6079      	str	r1, [r7, #4]
 800802a:	4648      	mov	r0, r9
 800802c:	9304      	str	r3, [sp, #16]
 800802e:	f000 fd39 	bl	8008aa4 <_Balloc>
 8008032:	9b04      	ldr	r3, [sp, #16]
 8008034:	4607      	mov	r7, r0
 8008036:	2800      	cmp	r0, #0
 8008038:	d146      	bne.n	80080c8 <_dtoa_r+0x2d0>
 800803a:	4b22      	ldr	r3, [pc, #136]	@ (80080c4 <_dtoa_r+0x2cc>)
 800803c:	4602      	mov	r2, r0
 800803e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008042:	e6f2      	b.n	8007e2a <_dtoa_r+0x32>
 8008044:	2201      	movs	r2, #1
 8008046:	e7dd      	b.n	8008004 <_dtoa_r+0x20c>
 8008048:	2200      	movs	r2, #0
 800804a:	9208      	str	r2, [sp, #32]
 800804c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800804e:	eb08 0b02 	add.w	fp, r8, r2
 8008052:	f10b 0a01 	add.w	sl, fp, #1
 8008056:	4652      	mov	r2, sl
 8008058:	2a01      	cmp	r2, #1
 800805a:	bfb8      	it	lt
 800805c:	2201      	movlt	r2, #1
 800805e:	e7db      	b.n	8008018 <_dtoa_r+0x220>
 8008060:	2201      	movs	r2, #1
 8008062:	e7f2      	b.n	800804a <_dtoa_r+0x252>
 8008064:	2401      	movs	r4, #1
 8008066:	2200      	movs	r2, #0
 8008068:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800806c:	f04f 3bff 	mov.w	fp, #4294967295
 8008070:	2100      	movs	r1, #0
 8008072:	46da      	mov	sl, fp
 8008074:	2212      	movs	r2, #18
 8008076:	9109      	str	r1, [sp, #36]	@ 0x24
 8008078:	e7ce      	b.n	8008018 <_dtoa_r+0x220>
 800807a:	2201      	movs	r2, #1
 800807c:	9208      	str	r2, [sp, #32]
 800807e:	e7f5      	b.n	800806c <_dtoa_r+0x274>
 8008080:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8008084:	46da      	mov	sl, fp
 8008086:	465a      	mov	r2, fp
 8008088:	e7c6      	b.n	8008018 <_dtoa_r+0x220>
 800808a:	3101      	adds	r1, #1
 800808c:	0040      	lsls	r0, r0, #1
 800808e:	e7c7      	b.n	8008020 <_dtoa_r+0x228>
 8008090:	636f4361 	.word	0x636f4361
 8008094:	3fd287a7 	.word	0x3fd287a7
 8008098:	8b60c8b3 	.word	0x8b60c8b3
 800809c:	3fc68a28 	.word	0x3fc68a28
 80080a0:	509f79fb 	.word	0x509f79fb
 80080a4:	3fd34413 	.word	0x3fd34413
 80080a8:	08009d6d 	.word	0x08009d6d
 80080ac:	08009d84 	.word	0x08009d84
 80080b0:	7ff00000 	.word	0x7ff00000
 80080b4:	08009d69 	.word	0x08009d69
 80080b8:	08009d3d 	.word	0x08009d3d
 80080bc:	08009d3c 	.word	0x08009d3c
 80080c0:	08009e80 	.word	0x08009e80
 80080c4:	08009ddc 	.word	0x08009ddc
 80080c8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80080cc:	f1ba 0f0e 	cmp.w	sl, #14
 80080d0:	6010      	str	r0, [r2, #0]
 80080d2:	d86f      	bhi.n	80081b4 <_dtoa_r+0x3bc>
 80080d4:	2c00      	cmp	r4, #0
 80080d6:	d06d      	beq.n	80081b4 <_dtoa_r+0x3bc>
 80080d8:	f1b8 0f00 	cmp.w	r8, #0
 80080dc:	f340 80c2 	ble.w	8008264 <_dtoa_r+0x46c>
 80080e0:	4aca      	ldr	r2, [pc, #808]	@ (800840c <_dtoa_r+0x614>)
 80080e2:	f008 010f 	and.w	r1, r8, #15
 80080e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80080ea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80080ee:	ed92 7b00 	vldr	d7, [r2]
 80080f2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80080f6:	f000 80a9 	beq.w	800824c <_dtoa_r+0x454>
 80080fa:	4ac5      	ldr	r2, [pc, #788]	@ (8008410 <_dtoa_r+0x618>)
 80080fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8008100:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008104:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008108:	f001 010f 	and.w	r1, r1, #15
 800810c:	2203      	movs	r2, #3
 800810e:	48c0      	ldr	r0, [pc, #768]	@ (8008410 <_dtoa_r+0x618>)
 8008110:	2900      	cmp	r1, #0
 8008112:	f040 809d 	bne.w	8008250 <_dtoa_r+0x458>
 8008116:	ed9d 6b02 	vldr	d6, [sp, #8]
 800811a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800811e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008122:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008124:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008128:	2900      	cmp	r1, #0
 800812a:	f000 80c1 	beq.w	80082b0 <_dtoa_r+0x4b8>
 800812e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008132:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800813a:	f140 80b9 	bpl.w	80082b0 <_dtoa_r+0x4b8>
 800813e:	f1ba 0f00 	cmp.w	sl, #0
 8008142:	f000 80b5 	beq.w	80082b0 <_dtoa_r+0x4b8>
 8008146:	f1bb 0f00 	cmp.w	fp, #0
 800814a:	dd31      	ble.n	80081b0 <_dtoa_r+0x3b8>
 800814c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008150:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008154:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008158:	f108 31ff 	add.w	r1, r8, #4294967295
 800815c:	9104      	str	r1, [sp, #16]
 800815e:	3201      	adds	r2, #1
 8008160:	465c      	mov	r4, fp
 8008162:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008166:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800816a:	ee07 2a90 	vmov	s15, r2
 800816e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008172:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008176:	ee15 2a90 	vmov	r2, s11
 800817a:	ec51 0b15 	vmov	r0, r1, d5
 800817e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8008182:	2c00      	cmp	r4, #0
 8008184:	f040 8098 	bne.w	80082b8 <_dtoa_r+0x4c0>
 8008188:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800818c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008190:	ec41 0b17 	vmov	d7, r0, r1
 8008194:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800819c:	f300 8261 	bgt.w	8008662 <_dtoa_r+0x86a>
 80081a0:	eeb1 7b47 	vneg.f64	d7, d7
 80081a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ac:	f100 80f5 	bmi.w	800839a <_dtoa_r+0x5a2>
 80081b0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80081b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	f2c0 812c 	blt.w	8008414 <_dtoa_r+0x61c>
 80081bc:	f1b8 0f0e 	cmp.w	r8, #14
 80081c0:	f300 8128 	bgt.w	8008414 <_dtoa_r+0x61c>
 80081c4:	4b91      	ldr	r3, [pc, #580]	@ (800840c <_dtoa_r+0x614>)
 80081c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80081ca:	ed93 6b00 	vldr	d6, [r3]
 80081ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	da03      	bge.n	80081dc <_dtoa_r+0x3e4>
 80081d4:	f1ba 0f00 	cmp.w	sl, #0
 80081d8:	f340 80d2 	ble.w	8008380 <_dtoa_r+0x588>
 80081dc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80081e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081e4:	463e      	mov	r6, r7
 80081e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80081ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80081ee:	ee15 3a10 	vmov	r3, s10
 80081f2:	3330      	adds	r3, #48	@ 0x30
 80081f4:	f806 3b01 	strb.w	r3, [r6], #1
 80081f8:	1bf3      	subs	r3, r6, r7
 80081fa:	459a      	cmp	sl, r3
 80081fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008200:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008204:	f040 80f8 	bne.w	80083f8 <_dtoa_r+0x600>
 8008208:	ee37 7b07 	vadd.f64	d7, d7, d7
 800820c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008214:	f300 80dd 	bgt.w	80083d2 <_dtoa_r+0x5da>
 8008218:	eeb4 7b46 	vcmp.f64	d7, d6
 800821c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008220:	d104      	bne.n	800822c <_dtoa_r+0x434>
 8008222:	ee15 3a10 	vmov	r3, s10
 8008226:	07db      	lsls	r3, r3, #31
 8008228:	f100 80d3 	bmi.w	80083d2 <_dtoa_r+0x5da>
 800822c:	9901      	ldr	r1, [sp, #4]
 800822e:	4648      	mov	r0, r9
 8008230:	f000 fc78 	bl	8008b24 <_Bfree>
 8008234:	2300      	movs	r3, #0
 8008236:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008238:	7033      	strb	r3, [r6, #0]
 800823a:	f108 0301 	add.w	r3, r8, #1
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 8304 	beq.w	8008850 <_dtoa_r+0xa58>
 8008248:	601e      	str	r6, [r3, #0]
 800824a:	e301      	b.n	8008850 <_dtoa_r+0xa58>
 800824c:	2202      	movs	r2, #2
 800824e:	e75e      	b.n	800810e <_dtoa_r+0x316>
 8008250:	07cc      	lsls	r4, r1, #31
 8008252:	d504      	bpl.n	800825e <_dtoa_r+0x466>
 8008254:	ed90 6b00 	vldr	d6, [r0]
 8008258:	3201      	adds	r2, #1
 800825a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800825e:	1049      	asrs	r1, r1, #1
 8008260:	3008      	adds	r0, #8
 8008262:	e755      	b.n	8008110 <_dtoa_r+0x318>
 8008264:	d022      	beq.n	80082ac <_dtoa_r+0x4b4>
 8008266:	f1c8 0100 	rsb	r1, r8, #0
 800826a:	4a68      	ldr	r2, [pc, #416]	@ (800840c <_dtoa_r+0x614>)
 800826c:	f001 000f 	and.w	r0, r1, #15
 8008270:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008274:	ed92 7b00 	vldr	d7, [r2]
 8008278:	ee28 7b07 	vmul.f64	d7, d8, d7
 800827c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008280:	4863      	ldr	r0, [pc, #396]	@ (8008410 <_dtoa_r+0x618>)
 8008282:	1109      	asrs	r1, r1, #4
 8008284:	2400      	movs	r4, #0
 8008286:	2202      	movs	r2, #2
 8008288:	b929      	cbnz	r1, 8008296 <_dtoa_r+0x49e>
 800828a:	2c00      	cmp	r4, #0
 800828c:	f43f af49 	beq.w	8008122 <_dtoa_r+0x32a>
 8008290:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008294:	e745      	b.n	8008122 <_dtoa_r+0x32a>
 8008296:	07ce      	lsls	r6, r1, #31
 8008298:	d505      	bpl.n	80082a6 <_dtoa_r+0x4ae>
 800829a:	ed90 6b00 	vldr	d6, [r0]
 800829e:	3201      	adds	r2, #1
 80082a0:	2401      	movs	r4, #1
 80082a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082a6:	1049      	asrs	r1, r1, #1
 80082a8:	3008      	adds	r0, #8
 80082aa:	e7ed      	b.n	8008288 <_dtoa_r+0x490>
 80082ac:	2202      	movs	r2, #2
 80082ae:	e738      	b.n	8008122 <_dtoa_r+0x32a>
 80082b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80082b4:	4654      	mov	r4, sl
 80082b6:	e754      	b.n	8008162 <_dtoa_r+0x36a>
 80082b8:	4a54      	ldr	r2, [pc, #336]	@ (800840c <_dtoa_r+0x614>)
 80082ba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80082be:	ed12 4b02 	vldr	d4, [r2, #-8]
 80082c2:	9a08      	ldr	r2, [sp, #32]
 80082c4:	ec41 0b17 	vmov	d7, r0, r1
 80082c8:	443c      	add	r4, r7
 80082ca:	b34a      	cbz	r2, 8008320 <_dtoa_r+0x528>
 80082cc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80082d0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80082d4:	463e      	mov	r6, r7
 80082d6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80082da:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80082de:	ee35 7b47 	vsub.f64	d7, d5, d7
 80082e2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80082e6:	ee14 2a90 	vmov	r2, s9
 80082ea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80082ee:	3230      	adds	r2, #48	@ 0x30
 80082f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80082f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80082f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fc:	f806 2b01 	strb.w	r2, [r6], #1
 8008300:	d438      	bmi.n	8008374 <_dtoa_r+0x57c>
 8008302:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008306:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830e:	d462      	bmi.n	80083d6 <_dtoa_r+0x5de>
 8008310:	42a6      	cmp	r6, r4
 8008312:	f43f af4d 	beq.w	80081b0 <_dtoa_r+0x3b8>
 8008316:	ee27 7b03 	vmul.f64	d7, d7, d3
 800831a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800831e:	e7e0      	b.n	80082e2 <_dtoa_r+0x4ea>
 8008320:	4621      	mov	r1, r4
 8008322:	463e      	mov	r6, r7
 8008324:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008328:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800832c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008330:	ee14 2a90 	vmov	r2, s9
 8008334:	3230      	adds	r2, #48	@ 0x30
 8008336:	f806 2b01 	strb.w	r2, [r6], #1
 800833a:	42a6      	cmp	r6, r4
 800833c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008340:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008344:	d119      	bne.n	800837a <_dtoa_r+0x582>
 8008346:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800834a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800834e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008356:	dc3e      	bgt.n	80083d6 <_dtoa_r+0x5de>
 8008358:	ee35 5b47 	vsub.f64	d5, d5, d7
 800835c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008364:	f57f af24 	bpl.w	80081b0 <_dtoa_r+0x3b8>
 8008368:	460e      	mov	r6, r1
 800836a:	3901      	subs	r1, #1
 800836c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008370:	2b30      	cmp	r3, #48	@ 0x30
 8008372:	d0f9      	beq.n	8008368 <_dtoa_r+0x570>
 8008374:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008378:	e758      	b.n	800822c <_dtoa_r+0x434>
 800837a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800837e:	e7d5      	b.n	800832c <_dtoa_r+0x534>
 8008380:	d10b      	bne.n	800839a <_dtoa_r+0x5a2>
 8008382:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008386:	ee26 6b07 	vmul.f64	d6, d6, d7
 800838a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800838e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008396:	f2c0 8161 	blt.w	800865c <_dtoa_r+0x864>
 800839a:	2400      	movs	r4, #0
 800839c:	4625      	mov	r5, r4
 800839e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083a0:	43db      	mvns	r3, r3
 80083a2:	9304      	str	r3, [sp, #16]
 80083a4:	463e      	mov	r6, r7
 80083a6:	f04f 0800 	mov.w	r8, #0
 80083aa:	4621      	mov	r1, r4
 80083ac:	4648      	mov	r0, r9
 80083ae:	f000 fbb9 	bl	8008b24 <_Bfree>
 80083b2:	2d00      	cmp	r5, #0
 80083b4:	d0de      	beq.n	8008374 <_dtoa_r+0x57c>
 80083b6:	f1b8 0f00 	cmp.w	r8, #0
 80083ba:	d005      	beq.n	80083c8 <_dtoa_r+0x5d0>
 80083bc:	45a8      	cmp	r8, r5
 80083be:	d003      	beq.n	80083c8 <_dtoa_r+0x5d0>
 80083c0:	4641      	mov	r1, r8
 80083c2:	4648      	mov	r0, r9
 80083c4:	f000 fbae 	bl	8008b24 <_Bfree>
 80083c8:	4629      	mov	r1, r5
 80083ca:	4648      	mov	r0, r9
 80083cc:	f000 fbaa 	bl	8008b24 <_Bfree>
 80083d0:	e7d0      	b.n	8008374 <_dtoa_r+0x57c>
 80083d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80083d6:	4633      	mov	r3, r6
 80083d8:	461e      	mov	r6, r3
 80083da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083de:	2a39      	cmp	r2, #57	@ 0x39
 80083e0:	d106      	bne.n	80083f0 <_dtoa_r+0x5f8>
 80083e2:	429f      	cmp	r7, r3
 80083e4:	d1f8      	bne.n	80083d8 <_dtoa_r+0x5e0>
 80083e6:	9a04      	ldr	r2, [sp, #16]
 80083e8:	3201      	adds	r2, #1
 80083ea:	9204      	str	r2, [sp, #16]
 80083ec:	2230      	movs	r2, #48	@ 0x30
 80083ee:	703a      	strb	r2, [r7, #0]
 80083f0:	781a      	ldrb	r2, [r3, #0]
 80083f2:	3201      	adds	r2, #1
 80083f4:	701a      	strb	r2, [r3, #0]
 80083f6:	e7bd      	b.n	8008374 <_dtoa_r+0x57c>
 80083f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80083fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008404:	f47f aeef 	bne.w	80081e6 <_dtoa_r+0x3ee>
 8008408:	e710      	b.n	800822c <_dtoa_r+0x434>
 800840a:	bf00      	nop
 800840c:	08009e80 	.word	0x08009e80
 8008410:	08009e58 	.word	0x08009e58
 8008414:	9908      	ldr	r1, [sp, #32]
 8008416:	2900      	cmp	r1, #0
 8008418:	f000 80e3 	beq.w	80085e2 <_dtoa_r+0x7ea>
 800841c:	9907      	ldr	r1, [sp, #28]
 800841e:	2901      	cmp	r1, #1
 8008420:	f300 80c8 	bgt.w	80085b4 <_dtoa_r+0x7bc>
 8008424:	2d00      	cmp	r5, #0
 8008426:	f000 80c1 	beq.w	80085ac <_dtoa_r+0x7b4>
 800842a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800842e:	9e05      	ldr	r6, [sp, #20]
 8008430:	461c      	mov	r4, r3
 8008432:	9304      	str	r3, [sp, #16]
 8008434:	9b05      	ldr	r3, [sp, #20]
 8008436:	4413      	add	r3, r2
 8008438:	9305      	str	r3, [sp, #20]
 800843a:	9b06      	ldr	r3, [sp, #24]
 800843c:	2101      	movs	r1, #1
 800843e:	4413      	add	r3, r2
 8008440:	4648      	mov	r0, r9
 8008442:	9306      	str	r3, [sp, #24]
 8008444:	f000 fc22 	bl	8008c8c <__i2b>
 8008448:	9b04      	ldr	r3, [sp, #16]
 800844a:	4605      	mov	r5, r0
 800844c:	b166      	cbz	r6, 8008468 <_dtoa_r+0x670>
 800844e:	9a06      	ldr	r2, [sp, #24]
 8008450:	2a00      	cmp	r2, #0
 8008452:	dd09      	ble.n	8008468 <_dtoa_r+0x670>
 8008454:	42b2      	cmp	r2, r6
 8008456:	9905      	ldr	r1, [sp, #20]
 8008458:	bfa8      	it	ge
 800845a:	4632      	movge	r2, r6
 800845c:	1a89      	subs	r1, r1, r2
 800845e:	9105      	str	r1, [sp, #20]
 8008460:	9906      	ldr	r1, [sp, #24]
 8008462:	1ab6      	subs	r6, r6, r2
 8008464:	1a8a      	subs	r2, r1, r2
 8008466:	9206      	str	r2, [sp, #24]
 8008468:	b1fb      	cbz	r3, 80084aa <_dtoa_r+0x6b2>
 800846a:	9a08      	ldr	r2, [sp, #32]
 800846c:	2a00      	cmp	r2, #0
 800846e:	f000 80bc 	beq.w	80085ea <_dtoa_r+0x7f2>
 8008472:	b19c      	cbz	r4, 800849c <_dtoa_r+0x6a4>
 8008474:	4629      	mov	r1, r5
 8008476:	4622      	mov	r2, r4
 8008478:	4648      	mov	r0, r9
 800847a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800847c:	f000 fcc6 	bl	8008e0c <__pow5mult>
 8008480:	9a01      	ldr	r2, [sp, #4]
 8008482:	4601      	mov	r1, r0
 8008484:	4605      	mov	r5, r0
 8008486:	4648      	mov	r0, r9
 8008488:	f000 fc16 	bl	8008cb8 <__multiply>
 800848c:	9901      	ldr	r1, [sp, #4]
 800848e:	9004      	str	r0, [sp, #16]
 8008490:	4648      	mov	r0, r9
 8008492:	f000 fb47 	bl	8008b24 <_Bfree>
 8008496:	9a04      	ldr	r2, [sp, #16]
 8008498:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800849a:	9201      	str	r2, [sp, #4]
 800849c:	1b1a      	subs	r2, r3, r4
 800849e:	d004      	beq.n	80084aa <_dtoa_r+0x6b2>
 80084a0:	9901      	ldr	r1, [sp, #4]
 80084a2:	4648      	mov	r0, r9
 80084a4:	f000 fcb2 	bl	8008e0c <__pow5mult>
 80084a8:	9001      	str	r0, [sp, #4]
 80084aa:	2101      	movs	r1, #1
 80084ac:	4648      	mov	r0, r9
 80084ae:	f000 fbed 	bl	8008c8c <__i2b>
 80084b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084b4:	4604      	mov	r4, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f000 81d0 	beq.w	800885c <_dtoa_r+0xa64>
 80084bc:	461a      	mov	r2, r3
 80084be:	4601      	mov	r1, r0
 80084c0:	4648      	mov	r0, r9
 80084c2:	f000 fca3 	bl	8008e0c <__pow5mult>
 80084c6:	9b07      	ldr	r3, [sp, #28]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	4604      	mov	r4, r0
 80084cc:	f300 8095 	bgt.w	80085fa <_dtoa_r+0x802>
 80084d0:	9b02      	ldr	r3, [sp, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f040 808b 	bne.w	80085ee <_dtoa_r+0x7f6>
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80084de:	2a00      	cmp	r2, #0
 80084e0:	f040 8087 	bne.w	80085f2 <_dtoa_r+0x7fa>
 80084e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80084e8:	0d12      	lsrs	r2, r2, #20
 80084ea:	0512      	lsls	r2, r2, #20
 80084ec:	2a00      	cmp	r2, #0
 80084ee:	f000 8082 	beq.w	80085f6 <_dtoa_r+0x7fe>
 80084f2:	9b05      	ldr	r3, [sp, #20]
 80084f4:	3301      	adds	r3, #1
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	9b06      	ldr	r3, [sp, #24]
 80084fa:	3301      	adds	r3, #1
 80084fc:	9306      	str	r3, [sp, #24]
 80084fe:	2301      	movs	r3, #1
 8008500:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 81af 	beq.w	8008868 <_dtoa_r+0xa70>
 800850a:	6922      	ldr	r2, [r4, #16]
 800850c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008510:	6910      	ldr	r0, [r2, #16]
 8008512:	f000 fb6f 	bl	8008bf4 <__hi0bits>
 8008516:	f1c0 0020 	rsb	r0, r0, #32
 800851a:	9b06      	ldr	r3, [sp, #24]
 800851c:	4418      	add	r0, r3
 800851e:	f010 001f 	ands.w	r0, r0, #31
 8008522:	d076      	beq.n	8008612 <_dtoa_r+0x81a>
 8008524:	f1c0 0220 	rsb	r2, r0, #32
 8008528:	2a04      	cmp	r2, #4
 800852a:	dd69      	ble.n	8008600 <_dtoa_r+0x808>
 800852c:	9b05      	ldr	r3, [sp, #20]
 800852e:	f1c0 001c 	rsb	r0, r0, #28
 8008532:	4403      	add	r3, r0
 8008534:	9305      	str	r3, [sp, #20]
 8008536:	9b06      	ldr	r3, [sp, #24]
 8008538:	4406      	add	r6, r0
 800853a:	4403      	add	r3, r0
 800853c:	9306      	str	r3, [sp, #24]
 800853e:	9b05      	ldr	r3, [sp, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	dd05      	ble.n	8008550 <_dtoa_r+0x758>
 8008544:	9901      	ldr	r1, [sp, #4]
 8008546:	461a      	mov	r2, r3
 8008548:	4648      	mov	r0, r9
 800854a:	f000 fcb9 	bl	8008ec0 <__lshift>
 800854e:	9001      	str	r0, [sp, #4]
 8008550:	9b06      	ldr	r3, [sp, #24]
 8008552:	2b00      	cmp	r3, #0
 8008554:	dd05      	ble.n	8008562 <_dtoa_r+0x76a>
 8008556:	4621      	mov	r1, r4
 8008558:	461a      	mov	r2, r3
 800855a:	4648      	mov	r0, r9
 800855c:	f000 fcb0 	bl	8008ec0 <__lshift>
 8008560:	4604      	mov	r4, r0
 8008562:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008564:	2b00      	cmp	r3, #0
 8008566:	d056      	beq.n	8008616 <_dtoa_r+0x81e>
 8008568:	9801      	ldr	r0, [sp, #4]
 800856a:	4621      	mov	r1, r4
 800856c:	f000 fd14 	bl	8008f98 <__mcmp>
 8008570:	2800      	cmp	r0, #0
 8008572:	da50      	bge.n	8008616 <_dtoa_r+0x81e>
 8008574:	f108 33ff 	add.w	r3, r8, #4294967295
 8008578:	9304      	str	r3, [sp, #16]
 800857a:	9901      	ldr	r1, [sp, #4]
 800857c:	2300      	movs	r3, #0
 800857e:	220a      	movs	r2, #10
 8008580:	4648      	mov	r0, r9
 8008582:	f000 faf1 	bl	8008b68 <__multadd>
 8008586:	9b08      	ldr	r3, [sp, #32]
 8008588:	9001      	str	r0, [sp, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 816e 	beq.w	800886c <_dtoa_r+0xa74>
 8008590:	4629      	mov	r1, r5
 8008592:	2300      	movs	r3, #0
 8008594:	220a      	movs	r2, #10
 8008596:	4648      	mov	r0, r9
 8008598:	f000 fae6 	bl	8008b68 <__multadd>
 800859c:	f1bb 0f00 	cmp.w	fp, #0
 80085a0:	4605      	mov	r5, r0
 80085a2:	dc64      	bgt.n	800866e <_dtoa_r+0x876>
 80085a4:	9b07      	ldr	r3, [sp, #28]
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	dc3e      	bgt.n	8008628 <_dtoa_r+0x830>
 80085aa:	e060      	b.n	800866e <_dtoa_r+0x876>
 80085ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80085b2:	e73c      	b.n	800842e <_dtoa_r+0x636>
 80085b4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80085b8:	42a3      	cmp	r3, r4
 80085ba:	bfbf      	itttt	lt
 80085bc:	1ae2      	sublt	r2, r4, r3
 80085be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80085c0:	189b      	addlt	r3, r3, r2
 80085c2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80085c4:	bfae      	itee	ge
 80085c6:	1b1c      	subge	r4, r3, r4
 80085c8:	4623      	movlt	r3, r4
 80085ca:	2400      	movlt	r4, #0
 80085cc:	f1ba 0f00 	cmp.w	sl, #0
 80085d0:	bfb5      	itete	lt
 80085d2:	9a05      	ldrlt	r2, [sp, #20]
 80085d4:	9e05      	ldrge	r6, [sp, #20]
 80085d6:	eba2 060a 	sublt.w	r6, r2, sl
 80085da:	4652      	movge	r2, sl
 80085dc:	bfb8      	it	lt
 80085de:	2200      	movlt	r2, #0
 80085e0:	e727      	b.n	8008432 <_dtoa_r+0x63a>
 80085e2:	9e05      	ldr	r6, [sp, #20]
 80085e4:	9d08      	ldr	r5, [sp, #32]
 80085e6:	461c      	mov	r4, r3
 80085e8:	e730      	b.n	800844c <_dtoa_r+0x654>
 80085ea:	461a      	mov	r2, r3
 80085ec:	e758      	b.n	80084a0 <_dtoa_r+0x6a8>
 80085ee:	2300      	movs	r3, #0
 80085f0:	e786      	b.n	8008500 <_dtoa_r+0x708>
 80085f2:	9b02      	ldr	r3, [sp, #8]
 80085f4:	e784      	b.n	8008500 <_dtoa_r+0x708>
 80085f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80085f8:	e783      	b.n	8008502 <_dtoa_r+0x70a>
 80085fa:	2300      	movs	r3, #0
 80085fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085fe:	e784      	b.n	800850a <_dtoa_r+0x712>
 8008600:	d09d      	beq.n	800853e <_dtoa_r+0x746>
 8008602:	9b05      	ldr	r3, [sp, #20]
 8008604:	321c      	adds	r2, #28
 8008606:	4413      	add	r3, r2
 8008608:	9305      	str	r3, [sp, #20]
 800860a:	9b06      	ldr	r3, [sp, #24]
 800860c:	4416      	add	r6, r2
 800860e:	4413      	add	r3, r2
 8008610:	e794      	b.n	800853c <_dtoa_r+0x744>
 8008612:	4602      	mov	r2, r0
 8008614:	e7f5      	b.n	8008602 <_dtoa_r+0x80a>
 8008616:	f1ba 0f00 	cmp.w	sl, #0
 800861a:	f8cd 8010 	str.w	r8, [sp, #16]
 800861e:	46d3      	mov	fp, sl
 8008620:	dc21      	bgt.n	8008666 <_dtoa_r+0x86e>
 8008622:	9b07      	ldr	r3, [sp, #28]
 8008624:	2b02      	cmp	r3, #2
 8008626:	dd1e      	ble.n	8008666 <_dtoa_r+0x86e>
 8008628:	f1bb 0f00 	cmp.w	fp, #0
 800862c:	f47f aeb7 	bne.w	800839e <_dtoa_r+0x5a6>
 8008630:	4621      	mov	r1, r4
 8008632:	465b      	mov	r3, fp
 8008634:	2205      	movs	r2, #5
 8008636:	4648      	mov	r0, r9
 8008638:	f000 fa96 	bl	8008b68 <__multadd>
 800863c:	4601      	mov	r1, r0
 800863e:	4604      	mov	r4, r0
 8008640:	9801      	ldr	r0, [sp, #4]
 8008642:	f000 fca9 	bl	8008f98 <__mcmp>
 8008646:	2800      	cmp	r0, #0
 8008648:	f77f aea9 	ble.w	800839e <_dtoa_r+0x5a6>
 800864c:	463e      	mov	r6, r7
 800864e:	2331      	movs	r3, #49	@ 0x31
 8008650:	f806 3b01 	strb.w	r3, [r6], #1
 8008654:	9b04      	ldr	r3, [sp, #16]
 8008656:	3301      	adds	r3, #1
 8008658:	9304      	str	r3, [sp, #16]
 800865a:	e6a4      	b.n	80083a6 <_dtoa_r+0x5ae>
 800865c:	f8cd 8010 	str.w	r8, [sp, #16]
 8008660:	4654      	mov	r4, sl
 8008662:	4625      	mov	r5, r4
 8008664:	e7f2      	b.n	800864c <_dtoa_r+0x854>
 8008666:	9b08      	ldr	r3, [sp, #32]
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8103 	beq.w	8008874 <_dtoa_r+0xa7c>
 800866e:	2e00      	cmp	r6, #0
 8008670:	dd05      	ble.n	800867e <_dtoa_r+0x886>
 8008672:	4629      	mov	r1, r5
 8008674:	4632      	mov	r2, r6
 8008676:	4648      	mov	r0, r9
 8008678:	f000 fc22 	bl	8008ec0 <__lshift>
 800867c:	4605      	mov	r5, r0
 800867e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d058      	beq.n	8008736 <_dtoa_r+0x93e>
 8008684:	6869      	ldr	r1, [r5, #4]
 8008686:	4648      	mov	r0, r9
 8008688:	f000 fa0c 	bl	8008aa4 <_Balloc>
 800868c:	4606      	mov	r6, r0
 800868e:	b928      	cbnz	r0, 800869c <_dtoa_r+0x8a4>
 8008690:	4b82      	ldr	r3, [pc, #520]	@ (800889c <_dtoa_r+0xaa4>)
 8008692:	4602      	mov	r2, r0
 8008694:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008698:	f7ff bbc7 	b.w	8007e2a <_dtoa_r+0x32>
 800869c:	692a      	ldr	r2, [r5, #16]
 800869e:	3202      	adds	r2, #2
 80086a0:	0092      	lsls	r2, r2, #2
 80086a2:	f105 010c 	add.w	r1, r5, #12
 80086a6:	300c      	adds	r0, #12
 80086a8:	f000 ffac 	bl	8009604 <memcpy>
 80086ac:	2201      	movs	r2, #1
 80086ae:	4631      	mov	r1, r6
 80086b0:	4648      	mov	r0, r9
 80086b2:	f000 fc05 	bl	8008ec0 <__lshift>
 80086b6:	1c7b      	adds	r3, r7, #1
 80086b8:	9305      	str	r3, [sp, #20]
 80086ba:	eb07 030b 	add.w	r3, r7, fp
 80086be:	9309      	str	r3, [sp, #36]	@ 0x24
 80086c0:	9b02      	ldr	r3, [sp, #8]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	46a8      	mov	r8, r5
 80086c8:	9308      	str	r3, [sp, #32]
 80086ca:	4605      	mov	r5, r0
 80086cc:	9b05      	ldr	r3, [sp, #20]
 80086ce:	9801      	ldr	r0, [sp, #4]
 80086d0:	4621      	mov	r1, r4
 80086d2:	f103 3bff 	add.w	fp, r3, #4294967295
 80086d6:	f7ff fb04 	bl	8007ce2 <quorem>
 80086da:	4641      	mov	r1, r8
 80086dc:	9002      	str	r0, [sp, #8]
 80086de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80086e2:	9801      	ldr	r0, [sp, #4]
 80086e4:	f000 fc58 	bl	8008f98 <__mcmp>
 80086e8:	462a      	mov	r2, r5
 80086ea:	9006      	str	r0, [sp, #24]
 80086ec:	4621      	mov	r1, r4
 80086ee:	4648      	mov	r0, r9
 80086f0:	f000 fc6e 	bl	8008fd0 <__mdiff>
 80086f4:	68c2      	ldr	r2, [r0, #12]
 80086f6:	4606      	mov	r6, r0
 80086f8:	b9fa      	cbnz	r2, 800873a <_dtoa_r+0x942>
 80086fa:	4601      	mov	r1, r0
 80086fc:	9801      	ldr	r0, [sp, #4]
 80086fe:	f000 fc4b 	bl	8008f98 <__mcmp>
 8008702:	4602      	mov	r2, r0
 8008704:	4631      	mov	r1, r6
 8008706:	4648      	mov	r0, r9
 8008708:	920a      	str	r2, [sp, #40]	@ 0x28
 800870a:	f000 fa0b 	bl	8008b24 <_Bfree>
 800870e:	9b07      	ldr	r3, [sp, #28]
 8008710:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008712:	9e05      	ldr	r6, [sp, #20]
 8008714:	ea43 0102 	orr.w	r1, r3, r2
 8008718:	9b08      	ldr	r3, [sp, #32]
 800871a:	4319      	orrs	r1, r3
 800871c:	d10f      	bne.n	800873e <_dtoa_r+0x946>
 800871e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008722:	d028      	beq.n	8008776 <_dtoa_r+0x97e>
 8008724:	9b06      	ldr	r3, [sp, #24]
 8008726:	2b00      	cmp	r3, #0
 8008728:	dd02      	ble.n	8008730 <_dtoa_r+0x938>
 800872a:	9b02      	ldr	r3, [sp, #8]
 800872c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008730:	f88b a000 	strb.w	sl, [fp]
 8008734:	e639      	b.n	80083aa <_dtoa_r+0x5b2>
 8008736:	4628      	mov	r0, r5
 8008738:	e7bd      	b.n	80086b6 <_dtoa_r+0x8be>
 800873a:	2201      	movs	r2, #1
 800873c:	e7e2      	b.n	8008704 <_dtoa_r+0x90c>
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	2b00      	cmp	r3, #0
 8008742:	db04      	blt.n	800874e <_dtoa_r+0x956>
 8008744:	9907      	ldr	r1, [sp, #28]
 8008746:	430b      	orrs	r3, r1
 8008748:	9908      	ldr	r1, [sp, #32]
 800874a:	430b      	orrs	r3, r1
 800874c:	d120      	bne.n	8008790 <_dtoa_r+0x998>
 800874e:	2a00      	cmp	r2, #0
 8008750:	ddee      	ble.n	8008730 <_dtoa_r+0x938>
 8008752:	9901      	ldr	r1, [sp, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	4648      	mov	r0, r9
 8008758:	f000 fbb2 	bl	8008ec0 <__lshift>
 800875c:	4621      	mov	r1, r4
 800875e:	9001      	str	r0, [sp, #4]
 8008760:	f000 fc1a 	bl	8008f98 <__mcmp>
 8008764:	2800      	cmp	r0, #0
 8008766:	dc03      	bgt.n	8008770 <_dtoa_r+0x978>
 8008768:	d1e2      	bne.n	8008730 <_dtoa_r+0x938>
 800876a:	f01a 0f01 	tst.w	sl, #1
 800876e:	d0df      	beq.n	8008730 <_dtoa_r+0x938>
 8008770:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008774:	d1d9      	bne.n	800872a <_dtoa_r+0x932>
 8008776:	2339      	movs	r3, #57	@ 0x39
 8008778:	f88b 3000 	strb.w	r3, [fp]
 800877c:	4633      	mov	r3, r6
 800877e:	461e      	mov	r6, r3
 8008780:	3b01      	subs	r3, #1
 8008782:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008786:	2a39      	cmp	r2, #57	@ 0x39
 8008788:	d053      	beq.n	8008832 <_dtoa_r+0xa3a>
 800878a:	3201      	adds	r2, #1
 800878c:	701a      	strb	r2, [r3, #0]
 800878e:	e60c      	b.n	80083aa <_dtoa_r+0x5b2>
 8008790:	2a00      	cmp	r2, #0
 8008792:	dd07      	ble.n	80087a4 <_dtoa_r+0x9ac>
 8008794:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008798:	d0ed      	beq.n	8008776 <_dtoa_r+0x97e>
 800879a:	f10a 0301 	add.w	r3, sl, #1
 800879e:	f88b 3000 	strb.w	r3, [fp]
 80087a2:	e602      	b.n	80083aa <_dtoa_r+0x5b2>
 80087a4:	9b05      	ldr	r3, [sp, #20]
 80087a6:	9a05      	ldr	r2, [sp, #20]
 80087a8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80087ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d029      	beq.n	8008806 <_dtoa_r+0xa0e>
 80087b2:	9901      	ldr	r1, [sp, #4]
 80087b4:	2300      	movs	r3, #0
 80087b6:	220a      	movs	r2, #10
 80087b8:	4648      	mov	r0, r9
 80087ba:	f000 f9d5 	bl	8008b68 <__multadd>
 80087be:	45a8      	cmp	r8, r5
 80087c0:	9001      	str	r0, [sp, #4]
 80087c2:	f04f 0300 	mov.w	r3, #0
 80087c6:	f04f 020a 	mov.w	r2, #10
 80087ca:	4641      	mov	r1, r8
 80087cc:	4648      	mov	r0, r9
 80087ce:	d107      	bne.n	80087e0 <_dtoa_r+0x9e8>
 80087d0:	f000 f9ca 	bl	8008b68 <__multadd>
 80087d4:	4680      	mov	r8, r0
 80087d6:	4605      	mov	r5, r0
 80087d8:	9b05      	ldr	r3, [sp, #20]
 80087da:	3301      	adds	r3, #1
 80087dc:	9305      	str	r3, [sp, #20]
 80087de:	e775      	b.n	80086cc <_dtoa_r+0x8d4>
 80087e0:	f000 f9c2 	bl	8008b68 <__multadd>
 80087e4:	4629      	mov	r1, r5
 80087e6:	4680      	mov	r8, r0
 80087e8:	2300      	movs	r3, #0
 80087ea:	220a      	movs	r2, #10
 80087ec:	4648      	mov	r0, r9
 80087ee:	f000 f9bb 	bl	8008b68 <__multadd>
 80087f2:	4605      	mov	r5, r0
 80087f4:	e7f0      	b.n	80087d8 <_dtoa_r+0x9e0>
 80087f6:	f1bb 0f00 	cmp.w	fp, #0
 80087fa:	bfcc      	ite	gt
 80087fc:	465e      	movgt	r6, fp
 80087fe:	2601      	movle	r6, #1
 8008800:	443e      	add	r6, r7
 8008802:	f04f 0800 	mov.w	r8, #0
 8008806:	9901      	ldr	r1, [sp, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	4648      	mov	r0, r9
 800880c:	f000 fb58 	bl	8008ec0 <__lshift>
 8008810:	4621      	mov	r1, r4
 8008812:	9001      	str	r0, [sp, #4]
 8008814:	f000 fbc0 	bl	8008f98 <__mcmp>
 8008818:	2800      	cmp	r0, #0
 800881a:	dcaf      	bgt.n	800877c <_dtoa_r+0x984>
 800881c:	d102      	bne.n	8008824 <_dtoa_r+0xa2c>
 800881e:	f01a 0f01 	tst.w	sl, #1
 8008822:	d1ab      	bne.n	800877c <_dtoa_r+0x984>
 8008824:	4633      	mov	r3, r6
 8008826:	461e      	mov	r6, r3
 8008828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800882c:	2a30      	cmp	r2, #48	@ 0x30
 800882e:	d0fa      	beq.n	8008826 <_dtoa_r+0xa2e>
 8008830:	e5bb      	b.n	80083aa <_dtoa_r+0x5b2>
 8008832:	429f      	cmp	r7, r3
 8008834:	d1a3      	bne.n	800877e <_dtoa_r+0x986>
 8008836:	9b04      	ldr	r3, [sp, #16]
 8008838:	3301      	adds	r3, #1
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	2331      	movs	r3, #49	@ 0x31
 800883e:	703b      	strb	r3, [r7, #0]
 8008840:	e5b3      	b.n	80083aa <_dtoa_r+0x5b2>
 8008842:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008844:	4f16      	ldr	r7, [pc, #88]	@ (80088a0 <_dtoa_r+0xaa8>)
 8008846:	b11b      	cbz	r3, 8008850 <_dtoa_r+0xa58>
 8008848:	f107 0308 	add.w	r3, r7, #8
 800884c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	4638      	mov	r0, r7
 8008852:	b011      	add	sp, #68	@ 0x44
 8008854:	ecbd 8b02 	vpop	{d8}
 8008858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885c:	9b07      	ldr	r3, [sp, #28]
 800885e:	2b01      	cmp	r3, #1
 8008860:	f77f ae36 	ble.w	80084d0 <_dtoa_r+0x6d8>
 8008864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008866:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008868:	2001      	movs	r0, #1
 800886a:	e656      	b.n	800851a <_dtoa_r+0x722>
 800886c:	f1bb 0f00 	cmp.w	fp, #0
 8008870:	f77f aed7 	ble.w	8008622 <_dtoa_r+0x82a>
 8008874:	463e      	mov	r6, r7
 8008876:	9801      	ldr	r0, [sp, #4]
 8008878:	4621      	mov	r1, r4
 800887a:	f7ff fa32 	bl	8007ce2 <quorem>
 800887e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008882:	f806 ab01 	strb.w	sl, [r6], #1
 8008886:	1bf2      	subs	r2, r6, r7
 8008888:	4593      	cmp	fp, r2
 800888a:	ddb4      	ble.n	80087f6 <_dtoa_r+0x9fe>
 800888c:	9901      	ldr	r1, [sp, #4]
 800888e:	2300      	movs	r3, #0
 8008890:	220a      	movs	r2, #10
 8008892:	4648      	mov	r0, r9
 8008894:	f000 f968 	bl	8008b68 <__multadd>
 8008898:	9001      	str	r0, [sp, #4]
 800889a:	e7ec      	b.n	8008876 <_dtoa_r+0xa7e>
 800889c:	08009ddc 	.word	0x08009ddc
 80088a0:	08009d60 	.word	0x08009d60

080088a4 <_free_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4605      	mov	r5, r0
 80088a8:	2900      	cmp	r1, #0
 80088aa:	d041      	beq.n	8008930 <_free_r+0x8c>
 80088ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088b0:	1f0c      	subs	r4, r1, #4
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bfb8      	it	lt
 80088b6:	18e4      	addlt	r4, r4, r3
 80088b8:	f000 f8e8 	bl	8008a8c <__malloc_lock>
 80088bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008934 <_free_r+0x90>)
 80088be:	6813      	ldr	r3, [r2, #0]
 80088c0:	b933      	cbnz	r3, 80088d0 <_free_r+0x2c>
 80088c2:	6063      	str	r3, [r4, #4]
 80088c4:	6014      	str	r4, [r2, #0]
 80088c6:	4628      	mov	r0, r5
 80088c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088cc:	f000 b8e4 	b.w	8008a98 <__malloc_unlock>
 80088d0:	42a3      	cmp	r3, r4
 80088d2:	d908      	bls.n	80088e6 <_free_r+0x42>
 80088d4:	6820      	ldr	r0, [r4, #0]
 80088d6:	1821      	adds	r1, r4, r0
 80088d8:	428b      	cmp	r3, r1
 80088da:	bf01      	itttt	eq
 80088dc:	6819      	ldreq	r1, [r3, #0]
 80088de:	685b      	ldreq	r3, [r3, #4]
 80088e0:	1809      	addeq	r1, r1, r0
 80088e2:	6021      	streq	r1, [r4, #0]
 80088e4:	e7ed      	b.n	80088c2 <_free_r+0x1e>
 80088e6:	461a      	mov	r2, r3
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	b10b      	cbz	r3, 80088f0 <_free_r+0x4c>
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	d9fa      	bls.n	80088e6 <_free_r+0x42>
 80088f0:	6811      	ldr	r1, [r2, #0]
 80088f2:	1850      	adds	r0, r2, r1
 80088f4:	42a0      	cmp	r0, r4
 80088f6:	d10b      	bne.n	8008910 <_free_r+0x6c>
 80088f8:	6820      	ldr	r0, [r4, #0]
 80088fa:	4401      	add	r1, r0
 80088fc:	1850      	adds	r0, r2, r1
 80088fe:	4283      	cmp	r3, r0
 8008900:	6011      	str	r1, [r2, #0]
 8008902:	d1e0      	bne.n	80088c6 <_free_r+0x22>
 8008904:	6818      	ldr	r0, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	6053      	str	r3, [r2, #4]
 800890a:	4408      	add	r0, r1
 800890c:	6010      	str	r0, [r2, #0]
 800890e:	e7da      	b.n	80088c6 <_free_r+0x22>
 8008910:	d902      	bls.n	8008918 <_free_r+0x74>
 8008912:	230c      	movs	r3, #12
 8008914:	602b      	str	r3, [r5, #0]
 8008916:	e7d6      	b.n	80088c6 <_free_r+0x22>
 8008918:	6820      	ldr	r0, [r4, #0]
 800891a:	1821      	adds	r1, r4, r0
 800891c:	428b      	cmp	r3, r1
 800891e:	bf04      	itt	eq
 8008920:	6819      	ldreq	r1, [r3, #0]
 8008922:	685b      	ldreq	r3, [r3, #4]
 8008924:	6063      	str	r3, [r4, #4]
 8008926:	bf04      	itt	eq
 8008928:	1809      	addeq	r1, r1, r0
 800892a:	6021      	streq	r1, [r4, #0]
 800892c:	6054      	str	r4, [r2, #4]
 800892e:	e7ca      	b.n	80088c6 <_free_r+0x22>
 8008930:	bd38      	pop	{r3, r4, r5, pc}
 8008932:	bf00      	nop
 8008934:	20000f3c 	.word	0x20000f3c

08008938 <malloc>:
 8008938:	4b02      	ldr	r3, [pc, #8]	@ (8008944 <malloc+0xc>)
 800893a:	4601      	mov	r1, r0
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	f000 b825 	b.w	800898c <_malloc_r>
 8008942:	bf00      	nop
 8008944:	20000018 	.word	0x20000018

08008948 <sbrk_aligned>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	4e0f      	ldr	r6, [pc, #60]	@ (8008988 <sbrk_aligned+0x40>)
 800894c:	460c      	mov	r4, r1
 800894e:	6831      	ldr	r1, [r6, #0]
 8008950:	4605      	mov	r5, r0
 8008952:	b911      	cbnz	r1, 800895a <sbrk_aligned+0x12>
 8008954:	f000 fe46 	bl	80095e4 <_sbrk_r>
 8008958:	6030      	str	r0, [r6, #0]
 800895a:	4621      	mov	r1, r4
 800895c:	4628      	mov	r0, r5
 800895e:	f000 fe41 	bl	80095e4 <_sbrk_r>
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	d103      	bne.n	800896e <sbrk_aligned+0x26>
 8008966:	f04f 34ff 	mov.w	r4, #4294967295
 800896a:	4620      	mov	r0, r4
 800896c:	bd70      	pop	{r4, r5, r6, pc}
 800896e:	1cc4      	adds	r4, r0, #3
 8008970:	f024 0403 	bic.w	r4, r4, #3
 8008974:	42a0      	cmp	r0, r4
 8008976:	d0f8      	beq.n	800896a <sbrk_aligned+0x22>
 8008978:	1a21      	subs	r1, r4, r0
 800897a:	4628      	mov	r0, r5
 800897c:	f000 fe32 	bl	80095e4 <_sbrk_r>
 8008980:	3001      	adds	r0, #1
 8008982:	d1f2      	bne.n	800896a <sbrk_aligned+0x22>
 8008984:	e7ef      	b.n	8008966 <sbrk_aligned+0x1e>
 8008986:	bf00      	nop
 8008988:	20000f38 	.word	0x20000f38

0800898c <_malloc_r>:
 800898c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008990:	1ccd      	adds	r5, r1, #3
 8008992:	f025 0503 	bic.w	r5, r5, #3
 8008996:	3508      	adds	r5, #8
 8008998:	2d0c      	cmp	r5, #12
 800899a:	bf38      	it	cc
 800899c:	250c      	movcc	r5, #12
 800899e:	2d00      	cmp	r5, #0
 80089a0:	4606      	mov	r6, r0
 80089a2:	db01      	blt.n	80089a8 <_malloc_r+0x1c>
 80089a4:	42a9      	cmp	r1, r5
 80089a6:	d904      	bls.n	80089b2 <_malloc_r+0x26>
 80089a8:	230c      	movs	r3, #12
 80089aa:	6033      	str	r3, [r6, #0]
 80089ac:	2000      	movs	r0, #0
 80089ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a88 <_malloc_r+0xfc>
 80089b6:	f000 f869 	bl	8008a8c <__malloc_lock>
 80089ba:	f8d8 3000 	ldr.w	r3, [r8]
 80089be:	461c      	mov	r4, r3
 80089c0:	bb44      	cbnz	r4, 8008a14 <_malloc_r+0x88>
 80089c2:	4629      	mov	r1, r5
 80089c4:	4630      	mov	r0, r6
 80089c6:	f7ff ffbf 	bl	8008948 <sbrk_aligned>
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	4604      	mov	r4, r0
 80089ce:	d158      	bne.n	8008a82 <_malloc_r+0xf6>
 80089d0:	f8d8 4000 	ldr.w	r4, [r8]
 80089d4:	4627      	mov	r7, r4
 80089d6:	2f00      	cmp	r7, #0
 80089d8:	d143      	bne.n	8008a62 <_malloc_r+0xd6>
 80089da:	2c00      	cmp	r4, #0
 80089dc:	d04b      	beq.n	8008a76 <_malloc_r+0xea>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	4639      	mov	r1, r7
 80089e2:	4630      	mov	r0, r6
 80089e4:	eb04 0903 	add.w	r9, r4, r3
 80089e8:	f000 fdfc 	bl	80095e4 <_sbrk_r>
 80089ec:	4581      	cmp	r9, r0
 80089ee:	d142      	bne.n	8008a76 <_malloc_r+0xea>
 80089f0:	6821      	ldr	r1, [r4, #0]
 80089f2:	1a6d      	subs	r5, r5, r1
 80089f4:	4629      	mov	r1, r5
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7ff ffa6 	bl	8008948 <sbrk_aligned>
 80089fc:	3001      	adds	r0, #1
 80089fe:	d03a      	beq.n	8008a76 <_malloc_r+0xea>
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	442b      	add	r3, r5
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	f8d8 3000 	ldr.w	r3, [r8]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	bb62      	cbnz	r2, 8008a68 <_malloc_r+0xdc>
 8008a0e:	f8c8 7000 	str.w	r7, [r8]
 8008a12:	e00f      	b.n	8008a34 <_malloc_r+0xa8>
 8008a14:	6822      	ldr	r2, [r4, #0]
 8008a16:	1b52      	subs	r2, r2, r5
 8008a18:	d420      	bmi.n	8008a5c <_malloc_r+0xd0>
 8008a1a:	2a0b      	cmp	r2, #11
 8008a1c:	d917      	bls.n	8008a4e <_malloc_r+0xc2>
 8008a1e:	1961      	adds	r1, r4, r5
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	6025      	str	r5, [r4, #0]
 8008a24:	bf18      	it	ne
 8008a26:	6059      	strne	r1, [r3, #4]
 8008a28:	6863      	ldr	r3, [r4, #4]
 8008a2a:	bf08      	it	eq
 8008a2c:	f8c8 1000 	streq.w	r1, [r8]
 8008a30:	5162      	str	r2, [r4, r5]
 8008a32:	604b      	str	r3, [r1, #4]
 8008a34:	4630      	mov	r0, r6
 8008a36:	f000 f82f 	bl	8008a98 <__malloc_unlock>
 8008a3a:	f104 000b 	add.w	r0, r4, #11
 8008a3e:	1d23      	adds	r3, r4, #4
 8008a40:	f020 0007 	bic.w	r0, r0, #7
 8008a44:	1ac2      	subs	r2, r0, r3
 8008a46:	bf1c      	itt	ne
 8008a48:	1a1b      	subne	r3, r3, r0
 8008a4a:	50a3      	strne	r3, [r4, r2]
 8008a4c:	e7af      	b.n	80089ae <_malloc_r+0x22>
 8008a4e:	6862      	ldr	r2, [r4, #4]
 8008a50:	42a3      	cmp	r3, r4
 8008a52:	bf0c      	ite	eq
 8008a54:	f8c8 2000 	streq.w	r2, [r8]
 8008a58:	605a      	strne	r2, [r3, #4]
 8008a5a:	e7eb      	b.n	8008a34 <_malloc_r+0xa8>
 8008a5c:	4623      	mov	r3, r4
 8008a5e:	6864      	ldr	r4, [r4, #4]
 8008a60:	e7ae      	b.n	80089c0 <_malloc_r+0x34>
 8008a62:	463c      	mov	r4, r7
 8008a64:	687f      	ldr	r7, [r7, #4]
 8008a66:	e7b6      	b.n	80089d6 <_malloc_r+0x4a>
 8008a68:	461a      	mov	r2, r3
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d1fb      	bne.n	8008a68 <_malloc_r+0xdc>
 8008a70:	2300      	movs	r3, #0
 8008a72:	6053      	str	r3, [r2, #4]
 8008a74:	e7de      	b.n	8008a34 <_malloc_r+0xa8>
 8008a76:	230c      	movs	r3, #12
 8008a78:	6033      	str	r3, [r6, #0]
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f000 f80c 	bl	8008a98 <__malloc_unlock>
 8008a80:	e794      	b.n	80089ac <_malloc_r+0x20>
 8008a82:	6005      	str	r5, [r0, #0]
 8008a84:	e7d6      	b.n	8008a34 <_malloc_r+0xa8>
 8008a86:	bf00      	nop
 8008a88:	20000f3c 	.word	0x20000f3c

08008a8c <__malloc_lock>:
 8008a8c:	4801      	ldr	r0, [pc, #4]	@ (8008a94 <__malloc_lock+0x8>)
 8008a8e:	f7ff b926 	b.w	8007cde <__retarget_lock_acquire_recursive>
 8008a92:	bf00      	nop
 8008a94:	20000f34 	.word	0x20000f34

08008a98 <__malloc_unlock>:
 8008a98:	4801      	ldr	r0, [pc, #4]	@ (8008aa0 <__malloc_unlock+0x8>)
 8008a9a:	f7ff b921 	b.w	8007ce0 <__retarget_lock_release_recursive>
 8008a9e:	bf00      	nop
 8008aa0:	20000f34 	.word	0x20000f34

08008aa4 <_Balloc>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	69c6      	ldr	r6, [r0, #28]
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	460d      	mov	r5, r1
 8008aac:	b976      	cbnz	r6, 8008acc <_Balloc+0x28>
 8008aae:	2010      	movs	r0, #16
 8008ab0:	f7ff ff42 	bl	8008938 <malloc>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	61e0      	str	r0, [r4, #28]
 8008ab8:	b920      	cbnz	r0, 8008ac4 <_Balloc+0x20>
 8008aba:	4b18      	ldr	r3, [pc, #96]	@ (8008b1c <_Balloc+0x78>)
 8008abc:	4818      	ldr	r0, [pc, #96]	@ (8008b20 <_Balloc+0x7c>)
 8008abe:	216b      	movs	r1, #107	@ 0x6b
 8008ac0:	f000 fdae 	bl	8009620 <__assert_func>
 8008ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ac8:	6006      	str	r6, [r0, #0]
 8008aca:	60c6      	str	r6, [r0, #12]
 8008acc:	69e6      	ldr	r6, [r4, #28]
 8008ace:	68f3      	ldr	r3, [r6, #12]
 8008ad0:	b183      	cbz	r3, 8008af4 <_Balloc+0x50>
 8008ad2:	69e3      	ldr	r3, [r4, #28]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ada:	b9b8      	cbnz	r0, 8008b0c <_Balloc+0x68>
 8008adc:	2101      	movs	r1, #1
 8008ade:	fa01 f605 	lsl.w	r6, r1, r5
 8008ae2:	1d72      	adds	r2, r6, #5
 8008ae4:	0092      	lsls	r2, r2, #2
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 fdb8 	bl	800965c <_calloc_r>
 8008aec:	b160      	cbz	r0, 8008b08 <_Balloc+0x64>
 8008aee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008af2:	e00e      	b.n	8008b12 <_Balloc+0x6e>
 8008af4:	2221      	movs	r2, #33	@ 0x21
 8008af6:	2104      	movs	r1, #4
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 fdaf 	bl	800965c <_calloc_r>
 8008afe:	69e3      	ldr	r3, [r4, #28]
 8008b00:	60f0      	str	r0, [r6, #12]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1e4      	bne.n	8008ad2 <_Balloc+0x2e>
 8008b08:	2000      	movs	r0, #0
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	6802      	ldr	r2, [r0, #0]
 8008b0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b12:	2300      	movs	r3, #0
 8008b14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b18:	e7f7      	b.n	8008b0a <_Balloc+0x66>
 8008b1a:	bf00      	nop
 8008b1c:	08009d6d 	.word	0x08009d6d
 8008b20:	08009ded 	.word	0x08009ded

08008b24 <_Bfree>:
 8008b24:	b570      	push	{r4, r5, r6, lr}
 8008b26:	69c6      	ldr	r6, [r0, #28]
 8008b28:	4605      	mov	r5, r0
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	b976      	cbnz	r6, 8008b4c <_Bfree+0x28>
 8008b2e:	2010      	movs	r0, #16
 8008b30:	f7ff ff02 	bl	8008938 <malloc>
 8008b34:	4602      	mov	r2, r0
 8008b36:	61e8      	str	r0, [r5, #28]
 8008b38:	b920      	cbnz	r0, 8008b44 <_Bfree+0x20>
 8008b3a:	4b09      	ldr	r3, [pc, #36]	@ (8008b60 <_Bfree+0x3c>)
 8008b3c:	4809      	ldr	r0, [pc, #36]	@ (8008b64 <_Bfree+0x40>)
 8008b3e:	218f      	movs	r1, #143	@ 0x8f
 8008b40:	f000 fd6e 	bl	8009620 <__assert_func>
 8008b44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b48:	6006      	str	r6, [r0, #0]
 8008b4a:	60c6      	str	r6, [r0, #12]
 8008b4c:	b13c      	cbz	r4, 8008b5e <_Bfree+0x3a>
 8008b4e:	69eb      	ldr	r3, [r5, #28]
 8008b50:	6862      	ldr	r2, [r4, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b58:	6021      	str	r1, [r4, #0]
 8008b5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	08009d6d 	.word	0x08009d6d
 8008b64:	08009ded 	.word	0x08009ded

08008b68 <__multadd>:
 8008b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6c:	690d      	ldr	r5, [r1, #16]
 8008b6e:	4607      	mov	r7, r0
 8008b70:	460c      	mov	r4, r1
 8008b72:	461e      	mov	r6, r3
 8008b74:	f101 0c14 	add.w	ip, r1, #20
 8008b78:	2000      	movs	r0, #0
 8008b7a:	f8dc 3000 	ldr.w	r3, [ip]
 8008b7e:	b299      	uxth	r1, r3
 8008b80:	fb02 6101 	mla	r1, r2, r1, r6
 8008b84:	0c1e      	lsrs	r6, r3, #16
 8008b86:	0c0b      	lsrs	r3, r1, #16
 8008b88:	fb02 3306 	mla	r3, r2, r6, r3
 8008b8c:	b289      	uxth	r1, r1
 8008b8e:	3001      	adds	r0, #1
 8008b90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b94:	4285      	cmp	r5, r0
 8008b96:	f84c 1b04 	str.w	r1, [ip], #4
 8008b9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b9e:	dcec      	bgt.n	8008b7a <__multadd+0x12>
 8008ba0:	b30e      	cbz	r6, 8008be6 <__multadd+0x7e>
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	42ab      	cmp	r3, r5
 8008ba6:	dc19      	bgt.n	8008bdc <__multadd+0x74>
 8008ba8:	6861      	ldr	r1, [r4, #4]
 8008baa:	4638      	mov	r0, r7
 8008bac:	3101      	adds	r1, #1
 8008bae:	f7ff ff79 	bl	8008aa4 <_Balloc>
 8008bb2:	4680      	mov	r8, r0
 8008bb4:	b928      	cbnz	r0, 8008bc2 <__multadd+0x5a>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008bec <__multadd+0x84>)
 8008bba:	480d      	ldr	r0, [pc, #52]	@ (8008bf0 <__multadd+0x88>)
 8008bbc:	21ba      	movs	r1, #186	@ 0xba
 8008bbe:	f000 fd2f 	bl	8009620 <__assert_func>
 8008bc2:	6922      	ldr	r2, [r4, #16]
 8008bc4:	3202      	adds	r2, #2
 8008bc6:	f104 010c 	add.w	r1, r4, #12
 8008bca:	0092      	lsls	r2, r2, #2
 8008bcc:	300c      	adds	r0, #12
 8008bce:	f000 fd19 	bl	8009604 <memcpy>
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f7ff ffa5 	bl	8008b24 <_Bfree>
 8008bda:	4644      	mov	r4, r8
 8008bdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008be0:	3501      	adds	r5, #1
 8008be2:	615e      	str	r6, [r3, #20]
 8008be4:	6125      	str	r5, [r4, #16]
 8008be6:	4620      	mov	r0, r4
 8008be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bec:	08009ddc 	.word	0x08009ddc
 8008bf0:	08009ded 	.word	0x08009ded

08008bf4 <__hi0bits>:
 8008bf4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	bf36      	itet	cc
 8008bfc:	0403      	lslcc	r3, r0, #16
 8008bfe:	2000      	movcs	r0, #0
 8008c00:	2010      	movcc	r0, #16
 8008c02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c06:	bf3c      	itt	cc
 8008c08:	021b      	lslcc	r3, r3, #8
 8008c0a:	3008      	addcc	r0, #8
 8008c0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c10:	bf3c      	itt	cc
 8008c12:	011b      	lslcc	r3, r3, #4
 8008c14:	3004      	addcc	r0, #4
 8008c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c1a:	bf3c      	itt	cc
 8008c1c:	009b      	lslcc	r3, r3, #2
 8008c1e:	3002      	addcc	r0, #2
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	db05      	blt.n	8008c30 <__hi0bits+0x3c>
 8008c24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c28:	f100 0001 	add.w	r0, r0, #1
 8008c2c:	bf08      	it	eq
 8008c2e:	2020      	moveq	r0, #32
 8008c30:	4770      	bx	lr

08008c32 <__lo0bits>:
 8008c32:	6803      	ldr	r3, [r0, #0]
 8008c34:	4602      	mov	r2, r0
 8008c36:	f013 0007 	ands.w	r0, r3, #7
 8008c3a:	d00b      	beq.n	8008c54 <__lo0bits+0x22>
 8008c3c:	07d9      	lsls	r1, r3, #31
 8008c3e:	d421      	bmi.n	8008c84 <__lo0bits+0x52>
 8008c40:	0798      	lsls	r0, r3, #30
 8008c42:	bf49      	itett	mi
 8008c44:	085b      	lsrmi	r3, r3, #1
 8008c46:	089b      	lsrpl	r3, r3, #2
 8008c48:	2001      	movmi	r0, #1
 8008c4a:	6013      	strmi	r3, [r2, #0]
 8008c4c:	bf5c      	itt	pl
 8008c4e:	6013      	strpl	r3, [r2, #0]
 8008c50:	2002      	movpl	r0, #2
 8008c52:	4770      	bx	lr
 8008c54:	b299      	uxth	r1, r3
 8008c56:	b909      	cbnz	r1, 8008c5c <__lo0bits+0x2a>
 8008c58:	0c1b      	lsrs	r3, r3, #16
 8008c5a:	2010      	movs	r0, #16
 8008c5c:	b2d9      	uxtb	r1, r3
 8008c5e:	b909      	cbnz	r1, 8008c64 <__lo0bits+0x32>
 8008c60:	3008      	adds	r0, #8
 8008c62:	0a1b      	lsrs	r3, r3, #8
 8008c64:	0719      	lsls	r1, r3, #28
 8008c66:	bf04      	itt	eq
 8008c68:	091b      	lsreq	r3, r3, #4
 8008c6a:	3004      	addeq	r0, #4
 8008c6c:	0799      	lsls	r1, r3, #30
 8008c6e:	bf04      	itt	eq
 8008c70:	089b      	lsreq	r3, r3, #2
 8008c72:	3002      	addeq	r0, #2
 8008c74:	07d9      	lsls	r1, r3, #31
 8008c76:	d403      	bmi.n	8008c80 <__lo0bits+0x4e>
 8008c78:	085b      	lsrs	r3, r3, #1
 8008c7a:	f100 0001 	add.w	r0, r0, #1
 8008c7e:	d003      	beq.n	8008c88 <__lo0bits+0x56>
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	4770      	bx	lr
 8008c84:	2000      	movs	r0, #0
 8008c86:	4770      	bx	lr
 8008c88:	2020      	movs	r0, #32
 8008c8a:	4770      	bx	lr

08008c8c <__i2b>:
 8008c8c:	b510      	push	{r4, lr}
 8008c8e:	460c      	mov	r4, r1
 8008c90:	2101      	movs	r1, #1
 8008c92:	f7ff ff07 	bl	8008aa4 <_Balloc>
 8008c96:	4602      	mov	r2, r0
 8008c98:	b928      	cbnz	r0, 8008ca6 <__i2b+0x1a>
 8008c9a:	4b05      	ldr	r3, [pc, #20]	@ (8008cb0 <__i2b+0x24>)
 8008c9c:	4805      	ldr	r0, [pc, #20]	@ (8008cb4 <__i2b+0x28>)
 8008c9e:	f240 1145 	movw	r1, #325	@ 0x145
 8008ca2:	f000 fcbd 	bl	8009620 <__assert_func>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	6144      	str	r4, [r0, #20]
 8008caa:	6103      	str	r3, [r0, #16]
 8008cac:	bd10      	pop	{r4, pc}
 8008cae:	bf00      	nop
 8008cb0:	08009ddc 	.word	0x08009ddc
 8008cb4:	08009ded 	.word	0x08009ded

08008cb8 <__multiply>:
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	4614      	mov	r4, r2
 8008cbe:	690a      	ldr	r2, [r1, #16]
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	bfa8      	it	ge
 8008cc6:	4623      	movge	r3, r4
 8008cc8:	460f      	mov	r7, r1
 8008cca:	bfa4      	itt	ge
 8008ccc:	460c      	movge	r4, r1
 8008cce:	461f      	movge	r7, r3
 8008cd0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008cd4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008cd8:	68a3      	ldr	r3, [r4, #8]
 8008cda:	6861      	ldr	r1, [r4, #4]
 8008cdc:	eb0a 0609 	add.w	r6, sl, r9
 8008ce0:	42b3      	cmp	r3, r6
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	bfb8      	it	lt
 8008ce6:	3101      	addlt	r1, #1
 8008ce8:	f7ff fedc 	bl	8008aa4 <_Balloc>
 8008cec:	b930      	cbnz	r0, 8008cfc <__multiply+0x44>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	4b44      	ldr	r3, [pc, #272]	@ (8008e04 <__multiply+0x14c>)
 8008cf2:	4845      	ldr	r0, [pc, #276]	@ (8008e08 <__multiply+0x150>)
 8008cf4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008cf8:	f000 fc92 	bl	8009620 <__assert_func>
 8008cfc:	f100 0514 	add.w	r5, r0, #20
 8008d00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d04:	462b      	mov	r3, r5
 8008d06:	2200      	movs	r2, #0
 8008d08:	4543      	cmp	r3, r8
 8008d0a:	d321      	bcc.n	8008d50 <__multiply+0x98>
 8008d0c:	f107 0114 	add.w	r1, r7, #20
 8008d10:	f104 0214 	add.w	r2, r4, #20
 8008d14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d1c:	9302      	str	r3, [sp, #8]
 8008d1e:	1b13      	subs	r3, r2, r4
 8008d20:	3b15      	subs	r3, #21
 8008d22:	f023 0303 	bic.w	r3, r3, #3
 8008d26:	3304      	adds	r3, #4
 8008d28:	f104 0715 	add.w	r7, r4, #21
 8008d2c:	42ba      	cmp	r2, r7
 8008d2e:	bf38      	it	cc
 8008d30:	2304      	movcc	r3, #4
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	9b02      	ldr	r3, [sp, #8]
 8008d36:	9103      	str	r1, [sp, #12]
 8008d38:	428b      	cmp	r3, r1
 8008d3a:	d80c      	bhi.n	8008d56 <__multiply+0x9e>
 8008d3c:	2e00      	cmp	r6, #0
 8008d3e:	dd03      	ble.n	8008d48 <__multiply+0x90>
 8008d40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d05b      	beq.n	8008e00 <__multiply+0x148>
 8008d48:	6106      	str	r6, [r0, #16]
 8008d4a:	b005      	add	sp, #20
 8008d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d50:	f843 2b04 	str.w	r2, [r3], #4
 8008d54:	e7d8      	b.n	8008d08 <__multiply+0x50>
 8008d56:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d5a:	f1ba 0f00 	cmp.w	sl, #0
 8008d5e:	d024      	beq.n	8008daa <__multiply+0xf2>
 8008d60:	f104 0e14 	add.w	lr, r4, #20
 8008d64:	46a9      	mov	r9, r5
 8008d66:	f04f 0c00 	mov.w	ip, #0
 8008d6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d6e:	f8d9 3000 	ldr.w	r3, [r9]
 8008d72:	fa1f fb87 	uxth.w	fp, r7
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008d80:	f8d9 7000 	ldr.w	r7, [r9]
 8008d84:	4463      	add	r3, ip
 8008d86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d8a:	fb0a c70b 	mla	r7, sl, fp, ip
 8008d8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d98:	4572      	cmp	r2, lr
 8008d9a:	f849 3b04 	str.w	r3, [r9], #4
 8008d9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008da2:	d8e2      	bhi.n	8008d6a <__multiply+0xb2>
 8008da4:	9b01      	ldr	r3, [sp, #4]
 8008da6:	f845 c003 	str.w	ip, [r5, r3]
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008db0:	3104      	adds	r1, #4
 8008db2:	f1b9 0f00 	cmp.w	r9, #0
 8008db6:	d021      	beq.n	8008dfc <__multiply+0x144>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	f104 0c14 	add.w	ip, r4, #20
 8008dbe:	46ae      	mov	lr, r5
 8008dc0:	f04f 0a00 	mov.w	sl, #0
 8008dc4:	f8bc b000 	ldrh.w	fp, [ip]
 8008dc8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008dcc:	fb09 770b 	mla	r7, r9, fp, r7
 8008dd0:	4457      	add	r7, sl
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008dd8:	f84e 3b04 	str.w	r3, [lr], #4
 8008ddc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008de0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008de4:	f8be 3000 	ldrh.w	r3, [lr]
 8008de8:	fb09 330a 	mla	r3, r9, sl, r3
 8008dec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008df0:	4562      	cmp	r2, ip
 8008df2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008df6:	d8e5      	bhi.n	8008dc4 <__multiply+0x10c>
 8008df8:	9f01      	ldr	r7, [sp, #4]
 8008dfa:	51eb      	str	r3, [r5, r7]
 8008dfc:	3504      	adds	r5, #4
 8008dfe:	e799      	b.n	8008d34 <__multiply+0x7c>
 8008e00:	3e01      	subs	r6, #1
 8008e02:	e79b      	b.n	8008d3c <__multiply+0x84>
 8008e04:	08009ddc 	.word	0x08009ddc
 8008e08:	08009ded 	.word	0x08009ded

08008e0c <__pow5mult>:
 8008e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e10:	4615      	mov	r5, r2
 8008e12:	f012 0203 	ands.w	r2, r2, #3
 8008e16:	4607      	mov	r7, r0
 8008e18:	460e      	mov	r6, r1
 8008e1a:	d007      	beq.n	8008e2c <__pow5mult+0x20>
 8008e1c:	4c25      	ldr	r4, [pc, #148]	@ (8008eb4 <__pow5mult+0xa8>)
 8008e1e:	3a01      	subs	r2, #1
 8008e20:	2300      	movs	r3, #0
 8008e22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e26:	f7ff fe9f 	bl	8008b68 <__multadd>
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	10ad      	asrs	r5, r5, #2
 8008e2e:	d03d      	beq.n	8008eac <__pow5mult+0xa0>
 8008e30:	69fc      	ldr	r4, [r7, #28]
 8008e32:	b97c      	cbnz	r4, 8008e54 <__pow5mult+0x48>
 8008e34:	2010      	movs	r0, #16
 8008e36:	f7ff fd7f 	bl	8008938 <malloc>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	61f8      	str	r0, [r7, #28]
 8008e3e:	b928      	cbnz	r0, 8008e4c <__pow5mult+0x40>
 8008e40:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb8 <__pow5mult+0xac>)
 8008e42:	481e      	ldr	r0, [pc, #120]	@ (8008ebc <__pow5mult+0xb0>)
 8008e44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e48:	f000 fbea 	bl	8009620 <__assert_func>
 8008e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e50:	6004      	str	r4, [r0, #0]
 8008e52:	60c4      	str	r4, [r0, #12]
 8008e54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e5c:	b94c      	cbnz	r4, 8008e72 <__pow5mult+0x66>
 8008e5e:	f240 2171 	movw	r1, #625	@ 0x271
 8008e62:	4638      	mov	r0, r7
 8008e64:	f7ff ff12 	bl	8008c8c <__i2b>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e6e:	4604      	mov	r4, r0
 8008e70:	6003      	str	r3, [r0, #0]
 8008e72:	f04f 0900 	mov.w	r9, #0
 8008e76:	07eb      	lsls	r3, r5, #31
 8008e78:	d50a      	bpl.n	8008e90 <__pow5mult+0x84>
 8008e7a:	4631      	mov	r1, r6
 8008e7c:	4622      	mov	r2, r4
 8008e7e:	4638      	mov	r0, r7
 8008e80:	f7ff ff1a 	bl	8008cb8 <__multiply>
 8008e84:	4631      	mov	r1, r6
 8008e86:	4680      	mov	r8, r0
 8008e88:	4638      	mov	r0, r7
 8008e8a:	f7ff fe4b 	bl	8008b24 <_Bfree>
 8008e8e:	4646      	mov	r6, r8
 8008e90:	106d      	asrs	r5, r5, #1
 8008e92:	d00b      	beq.n	8008eac <__pow5mult+0xa0>
 8008e94:	6820      	ldr	r0, [r4, #0]
 8008e96:	b938      	cbnz	r0, 8008ea8 <__pow5mult+0x9c>
 8008e98:	4622      	mov	r2, r4
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	f7ff ff0b 	bl	8008cb8 <__multiply>
 8008ea2:	6020      	str	r0, [r4, #0]
 8008ea4:	f8c0 9000 	str.w	r9, [r0]
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	e7e4      	b.n	8008e76 <__pow5mult+0x6a>
 8008eac:	4630      	mov	r0, r6
 8008eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eb2:	bf00      	nop
 8008eb4:	08009e48 	.word	0x08009e48
 8008eb8:	08009d6d 	.word	0x08009d6d
 8008ebc:	08009ded 	.word	0x08009ded

08008ec0 <__lshift>:
 8008ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	6849      	ldr	r1, [r1, #4]
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	4607      	mov	r7, r0
 8008ed2:	4691      	mov	r9, r2
 8008ed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ed8:	f108 0601 	add.w	r6, r8, #1
 8008edc:	42b3      	cmp	r3, r6
 8008ede:	db0b      	blt.n	8008ef8 <__lshift+0x38>
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7ff fddf 	bl	8008aa4 <_Balloc>
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	b948      	cbnz	r0, 8008efe <__lshift+0x3e>
 8008eea:	4602      	mov	r2, r0
 8008eec:	4b28      	ldr	r3, [pc, #160]	@ (8008f90 <__lshift+0xd0>)
 8008eee:	4829      	ldr	r0, [pc, #164]	@ (8008f94 <__lshift+0xd4>)
 8008ef0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ef4:	f000 fb94 	bl	8009620 <__assert_func>
 8008ef8:	3101      	adds	r1, #1
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	e7ee      	b.n	8008edc <__lshift+0x1c>
 8008efe:	2300      	movs	r3, #0
 8008f00:	f100 0114 	add.w	r1, r0, #20
 8008f04:	f100 0210 	add.w	r2, r0, #16
 8008f08:	4618      	mov	r0, r3
 8008f0a:	4553      	cmp	r3, sl
 8008f0c:	db33      	blt.n	8008f76 <__lshift+0xb6>
 8008f0e:	6920      	ldr	r0, [r4, #16]
 8008f10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f14:	f104 0314 	add.w	r3, r4, #20
 8008f18:	f019 091f 	ands.w	r9, r9, #31
 8008f1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f24:	d02b      	beq.n	8008f7e <__lshift+0xbe>
 8008f26:	f1c9 0e20 	rsb	lr, r9, #32
 8008f2a:	468a      	mov	sl, r1
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	fa00 f009 	lsl.w	r0, r0, r9
 8008f34:	4310      	orrs	r0, r2
 8008f36:	f84a 0b04 	str.w	r0, [sl], #4
 8008f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f3e:	459c      	cmp	ip, r3
 8008f40:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f44:	d8f3      	bhi.n	8008f2e <__lshift+0x6e>
 8008f46:	ebac 0304 	sub.w	r3, ip, r4
 8008f4a:	3b15      	subs	r3, #21
 8008f4c:	f023 0303 	bic.w	r3, r3, #3
 8008f50:	3304      	adds	r3, #4
 8008f52:	f104 0015 	add.w	r0, r4, #21
 8008f56:	4584      	cmp	ip, r0
 8008f58:	bf38      	it	cc
 8008f5a:	2304      	movcc	r3, #4
 8008f5c:	50ca      	str	r2, [r1, r3]
 8008f5e:	b10a      	cbz	r2, 8008f64 <__lshift+0xa4>
 8008f60:	f108 0602 	add.w	r6, r8, #2
 8008f64:	3e01      	subs	r6, #1
 8008f66:	4638      	mov	r0, r7
 8008f68:	612e      	str	r6, [r5, #16]
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	f7ff fdda 	bl	8008b24 <_Bfree>
 8008f70:	4628      	mov	r0, r5
 8008f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f76:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	e7c5      	b.n	8008f0a <__lshift+0x4a>
 8008f7e:	3904      	subs	r1, #4
 8008f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f84:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f88:	459c      	cmp	ip, r3
 8008f8a:	d8f9      	bhi.n	8008f80 <__lshift+0xc0>
 8008f8c:	e7ea      	b.n	8008f64 <__lshift+0xa4>
 8008f8e:	bf00      	nop
 8008f90:	08009ddc 	.word	0x08009ddc
 8008f94:	08009ded 	.word	0x08009ded

08008f98 <__mcmp>:
 8008f98:	690a      	ldr	r2, [r1, #16]
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	6900      	ldr	r0, [r0, #16]
 8008f9e:	1a80      	subs	r0, r0, r2
 8008fa0:	b530      	push	{r4, r5, lr}
 8008fa2:	d10e      	bne.n	8008fc2 <__mcmp+0x2a>
 8008fa4:	3314      	adds	r3, #20
 8008fa6:	3114      	adds	r1, #20
 8008fa8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fb8:	4295      	cmp	r5, r2
 8008fba:	d003      	beq.n	8008fc4 <__mcmp+0x2c>
 8008fbc:	d205      	bcs.n	8008fca <__mcmp+0x32>
 8008fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc2:	bd30      	pop	{r4, r5, pc}
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	d3f3      	bcc.n	8008fb0 <__mcmp+0x18>
 8008fc8:	e7fb      	b.n	8008fc2 <__mcmp+0x2a>
 8008fca:	2001      	movs	r0, #1
 8008fcc:	e7f9      	b.n	8008fc2 <__mcmp+0x2a>
	...

08008fd0 <__mdiff>:
 8008fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	4689      	mov	r9, r1
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4648      	mov	r0, r9
 8008fdc:	4614      	mov	r4, r2
 8008fde:	f7ff ffdb 	bl	8008f98 <__mcmp>
 8008fe2:	1e05      	subs	r5, r0, #0
 8008fe4:	d112      	bne.n	800900c <__mdiff+0x3c>
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7ff fd5b 	bl	8008aa4 <_Balloc>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	b928      	cbnz	r0, 8008ffe <__mdiff+0x2e>
 8008ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80090f0 <__mdiff+0x120>)
 8008ff4:	f240 2137 	movw	r1, #567	@ 0x237
 8008ff8:	483e      	ldr	r0, [pc, #248]	@ (80090f4 <__mdiff+0x124>)
 8008ffa:	f000 fb11 	bl	8009620 <__assert_func>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009004:	4610      	mov	r0, r2
 8009006:	b003      	add	sp, #12
 8009008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900c:	bfbc      	itt	lt
 800900e:	464b      	movlt	r3, r9
 8009010:	46a1      	movlt	r9, r4
 8009012:	4630      	mov	r0, r6
 8009014:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009018:	bfba      	itte	lt
 800901a:	461c      	movlt	r4, r3
 800901c:	2501      	movlt	r5, #1
 800901e:	2500      	movge	r5, #0
 8009020:	f7ff fd40 	bl	8008aa4 <_Balloc>
 8009024:	4602      	mov	r2, r0
 8009026:	b918      	cbnz	r0, 8009030 <__mdiff+0x60>
 8009028:	4b31      	ldr	r3, [pc, #196]	@ (80090f0 <__mdiff+0x120>)
 800902a:	f240 2145 	movw	r1, #581	@ 0x245
 800902e:	e7e3      	b.n	8008ff8 <__mdiff+0x28>
 8009030:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009034:	6926      	ldr	r6, [r4, #16]
 8009036:	60c5      	str	r5, [r0, #12]
 8009038:	f109 0310 	add.w	r3, r9, #16
 800903c:	f109 0514 	add.w	r5, r9, #20
 8009040:	f104 0e14 	add.w	lr, r4, #20
 8009044:	f100 0b14 	add.w	fp, r0, #20
 8009048:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800904c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	46d9      	mov	r9, fp
 8009054:	f04f 0c00 	mov.w	ip, #0
 8009058:	9b01      	ldr	r3, [sp, #4]
 800905a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800905e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	fa1f f38a 	uxth.w	r3, sl
 8009068:	4619      	mov	r1, r3
 800906a:	b283      	uxth	r3, r0
 800906c:	1acb      	subs	r3, r1, r3
 800906e:	0c00      	lsrs	r0, r0, #16
 8009070:	4463      	add	r3, ip
 8009072:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009076:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800907a:	b29b      	uxth	r3, r3
 800907c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009080:	4576      	cmp	r6, lr
 8009082:	f849 3b04 	str.w	r3, [r9], #4
 8009086:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800908a:	d8e5      	bhi.n	8009058 <__mdiff+0x88>
 800908c:	1b33      	subs	r3, r6, r4
 800908e:	3b15      	subs	r3, #21
 8009090:	f023 0303 	bic.w	r3, r3, #3
 8009094:	3415      	adds	r4, #21
 8009096:	3304      	adds	r3, #4
 8009098:	42a6      	cmp	r6, r4
 800909a:	bf38      	it	cc
 800909c:	2304      	movcc	r3, #4
 800909e:	441d      	add	r5, r3
 80090a0:	445b      	add	r3, fp
 80090a2:	461e      	mov	r6, r3
 80090a4:	462c      	mov	r4, r5
 80090a6:	4544      	cmp	r4, r8
 80090a8:	d30e      	bcc.n	80090c8 <__mdiff+0xf8>
 80090aa:	f108 0103 	add.w	r1, r8, #3
 80090ae:	1b49      	subs	r1, r1, r5
 80090b0:	f021 0103 	bic.w	r1, r1, #3
 80090b4:	3d03      	subs	r5, #3
 80090b6:	45a8      	cmp	r8, r5
 80090b8:	bf38      	it	cc
 80090ba:	2100      	movcc	r1, #0
 80090bc:	440b      	add	r3, r1
 80090be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090c2:	b191      	cbz	r1, 80090ea <__mdiff+0x11a>
 80090c4:	6117      	str	r7, [r2, #16]
 80090c6:	e79d      	b.n	8009004 <__mdiff+0x34>
 80090c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80090cc:	46e6      	mov	lr, ip
 80090ce:	0c08      	lsrs	r0, r1, #16
 80090d0:	fa1c fc81 	uxtah	ip, ip, r1
 80090d4:	4471      	add	r1, lr
 80090d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80090da:	b289      	uxth	r1, r1
 80090dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090e0:	f846 1b04 	str.w	r1, [r6], #4
 80090e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090e8:	e7dd      	b.n	80090a6 <__mdiff+0xd6>
 80090ea:	3f01      	subs	r7, #1
 80090ec:	e7e7      	b.n	80090be <__mdiff+0xee>
 80090ee:	bf00      	nop
 80090f0:	08009ddc 	.word	0x08009ddc
 80090f4:	08009ded 	.word	0x08009ded

080090f8 <__d2b>:
 80090f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090fc:	460f      	mov	r7, r1
 80090fe:	2101      	movs	r1, #1
 8009100:	ec59 8b10 	vmov	r8, r9, d0
 8009104:	4616      	mov	r6, r2
 8009106:	f7ff fccd 	bl	8008aa4 <_Balloc>
 800910a:	4604      	mov	r4, r0
 800910c:	b930      	cbnz	r0, 800911c <__d2b+0x24>
 800910e:	4602      	mov	r2, r0
 8009110:	4b23      	ldr	r3, [pc, #140]	@ (80091a0 <__d2b+0xa8>)
 8009112:	4824      	ldr	r0, [pc, #144]	@ (80091a4 <__d2b+0xac>)
 8009114:	f240 310f 	movw	r1, #783	@ 0x30f
 8009118:	f000 fa82 	bl	8009620 <__assert_func>
 800911c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009124:	b10d      	cbz	r5, 800912a <__d2b+0x32>
 8009126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	f1b8 0300 	subs.w	r3, r8, #0
 8009130:	d023      	beq.n	800917a <__d2b+0x82>
 8009132:	4668      	mov	r0, sp
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	f7ff fd7c 	bl	8008c32 <__lo0bits>
 800913a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800913e:	b1d0      	cbz	r0, 8009176 <__d2b+0x7e>
 8009140:	f1c0 0320 	rsb	r3, r0, #32
 8009144:	fa02 f303 	lsl.w	r3, r2, r3
 8009148:	430b      	orrs	r3, r1
 800914a:	40c2      	lsrs	r2, r0
 800914c:	6163      	str	r3, [r4, #20]
 800914e:	9201      	str	r2, [sp, #4]
 8009150:	9b01      	ldr	r3, [sp, #4]
 8009152:	61a3      	str	r3, [r4, #24]
 8009154:	2b00      	cmp	r3, #0
 8009156:	bf0c      	ite	eq
 8009158:	2201      	moveq	r2, #1
 800915a:	2202      	movne	r2, #2
 800915c:	6122      	str	r2, [r4, #16]
 800915e:	b1a5      	cbz	r5, 800918a <__d2b+0x92>
 8009160:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009164:	4405      	add	r5, r0
 8009166:	603d      	str	r5, [r7, #0]
 8009168:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800916c:	6030      	str	r0, [r6, #0]
 800916e:	4620      	mov	r0, r4
 8009170:	b003      	add	sp, #12
 8009172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009176:	6161      	str	r1, [r4, #20]
 8009178:	e7ea      	b.n	8009150 <__d2b+0x58>
 800917a:	a801      	add	r0, sp, #4
 800917c:	f7ff fd59 	bl	8008c32 <__lo0bits>
 8009180:	9b01      	ldr	r3, [sp, #4]
 8009182:	6163      	str	r3, [r4, #20]
 8009184:	3020      	adds	r0, #32
 8009186:	2201      	movs	r2, #1
 8009188:	e7e8      	b.n	800915c <__d2b+0x64>
 800918a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800918e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009192:	6038      	str	r0, [r7, #0]
 8009194:	6918      	ldr	r0, [r3, #16]
 8009196:	f7ff fd2d 	bl	8008bf4 <__hi0bits>
 800919a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800919e:	e7e5      	b.n	800916c <__d2b+0x74>
 80091a0:	08009ddc 	.word	0x08009ddc
 80091a4:	08009ded 	.word	0x08009ded

080091a8 <__ssputs_r>:
 80091a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091ac:	688e      	ldr	r6, [r1, #8]
 80091ae:	461f      	mov	r7, r3
 80091b0:	42be      	cmp	r6, r7
 80091b2:	680b      	ldr	r3, [r1, #0]
 80091b4:	4682      	mov	sl, r0
 80091b6:	460c      	mov	r4, r1
 80091b8:	4690      	mov	r8, r2
 80091ba:	d82d      	bhi.n	8009218 <__ssputs_r+0x70>
 80091bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091c4:	d026      	beq.n	8009214 <__ssputs_r+0x6c>
 80091c6:	6965      	ldr	r5, [r4, #20]
 80091c8:	6909      	ldr	r1, [r1, #16]
 80091ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091ce:	eba3 0901 	sub.w	r9, r3, r1
 80091d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091d6:	1c7b      	adds	r3, r7, #1
 80091d8:	444b      	add	r3, r9
 80091da:	106d      	asrs	r5, r5, #1
 80091dc:	429d      	cmp	r5, r3
 80091de:	bf38      	it	cc
 80091e0:	461d      	movcc	r5, r3
 80091e2:	0553      	lsls	r3, r2, #21
 80091e4:	d527      	bpl.n	8009236 <__ssputs_r+0x8e>
 80091e6:	4629      	mov	r1, r5
 80091e8:	f7ff fbd0 	bl	800898c <_malloc_r>
 80091ec:	4606      	mov	r6, r0
 80091ee:	b360      	cbz	r0, 800924a <__ssputs_r+0xa2>
 80091f0:	6921      	ldr	r1, [r4, #16]
 80091f2:	464a      	mov	r2, r9
 80091f4:	f000 fa06 	bl	8009604 <memcpy>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80091fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009202:	81a3      	strh	r3, [r4, #12]
 8009204:	6126      	str	r6, [r4, #16]
 8009206:	6165      	str	r5, [r4, #20]
 8009208:	444e      	add	r6, r9
 800920a:	eba5 0509 	sub.w	r5, r5, r9
 800920e:	6026      	str	r6, [r4, #0]
 8009210:	60a5      	str	r5, [r4, #8]
 8009212:	463e      	mov	r6, r7
 8009214:	42be      	cmp	r6, r7
 8009216:	d900      	bls.n	800921a <__ssputs_r+0x72>
 8009218:	463e      	mov	r6, r7
 800921a:	6820      	ldr	r0, [r4, #0]
 800921c:	4632      	mov	r2, r6
 800921e:	4641      	mov	r1, r8
 8009220:	f000 f9c6 	bl	80095b0 <memmove>
 8009224:	68a3      	ldr	r3, [r4, #8]
 8009226:	1b9b      	subs	r3, r3, r6
 8009228:	60a3      	str	r3, [r4, #8]
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	4433      	add	r3, r6
 800922e:	6023      	str	r3, [r4, #0]
 8009230:	2000      	movs	r0, #0
 8009232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009236:	462a      	mov	r2, r5
 8009238:	f000 fa36 	bl	80096a8 <_realloc_r>
 800923c:	4606      	mov	r6, r0
 800923e:	2800      	cmp	r0, #0
 8009240:	d1e0      	bne.n	8009204 <__ssputs_r+0x5c>
 8009242:	6921      	ldr	r1, [r4, #16]
 8009244:	4650      	mov	r0, sl
 8009246:	f7ff fb2d 	bl	80088a4 <_free_r>
 800924a:	230c      	movs	r3, #12
 800924c:	f8ca 3000 	str.w	r3, [sl]
 8009250:	89a3      	ldrh	r3, [r4, #12]
 8009252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009256:	81a3      	strh	r3, [r4, #12]
 8009258:	f04f 30ff 	mov.w	r0, #4294967295
 800925c:	e7e9      	b.n	8009232 <__ssputs_r+0x8a>
	...

08009260 <_svfiprintf_r>:
 8009260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	4698      	mov	r8, r3
 8009266:	898b      	ldrh	r3, [r1, #12]
 8009268:	061b      	lsls	r3, r3, #24
 800926a:	b09d      	sub	sp, #116	@ 0x74
 800926c:	4607      	mov	r7, r0
 800926e:	460d      	mov	r5, r1
 8009270:	4614      	mov	r4, r2
 8009272:	d510      	bpl.n	8009296 <_svfiprintf_r+0x36>
 8009274:	690b      	ldr	r3, [r1, #16]
 8009276:	b973      	cbnz	r3, 8009296 <_svfiprintf_r+0x36>
 8009278:	2140      	movs	r1, #64	@ 0x40
 800927a:	f7ff fb87 	bl	800898c <_malloc_r>
 800927e:	6028      	str	r0, [r5, #0]
 8009280:	6128      	str	r0, [r5, #16]
 8009282:	b930      	cbnz	r0, 8009292 <_svfiprintf_r+0x32>
 8009284:	230c      	movs	r3, #12
 8009286:	603b      	str	r3, [r7, #0]
 8009288:	f04f 30ff 	mov.w	r0, #4294967295
 800928c:	b01d      	add	sp, #116	@ 0x74
 800928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009292:	2340      	movs	r3, #64	@ 0x40
 8009294:	616b      	str	r3, [r5, #20]
 8009296:	2300      	movs	r3, #0
 8009298:	9309      	str	r3, [sp, #36]	@ 0x24
 800929a:	2320      	movs	r3, #32
 800929c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80092a4:	2330      	movs	r3, #48	@ 0x30
 80092a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009444 <_svfiprintf_r+0x1e4>
 80092aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092ae:	f04f 0901 	mov.w	r9, #1
 80092b2:	4623      	mov	r3, r4
 80092b4:	469a      	mov	sl, r3
 80092b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ba:	b10a      	cbz	r2, 80092c0 <_svfiprintf_r+0x60>
 80092bc:	2a25      	cmp	r2, #37	@ 0x25
 80092be:	d1f9      	bne.n	80092b4 <_svfiprintf_r+0x54>
 80092c0:	ebba 0b04 	subs.w	fp, sl, r4
 80092c4:	d00b      	beq.n	80092de <_svfiprintf_r+0x7e>
 80092c6:	465b      	mov	r3, fp
 80092c8:	4622      	mov	r2, r4
 80092ca:	4629      	mov	r1, r5
 80092cc:	4638      	mov	r0, r7
 80092ce:	f7ff ff6b 	bl	80091a8 <__ssputs_r>
 80092d2:	3001      	adds	r0, #1
 80092d4:	f000 80a7 	beq.w	8009426 <_svfiprintf_r+0x1c6>
 80092d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092da:	445a      	add	r2, fp
 80092dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80092de:	f89a 3000 	ldrb.w	r3, [sl]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 809f 	beq.w	8009426 <_svfiprintf_r+0x1c6>
 80092e8:	2300      	movs	r3, #0
 80092ea:	f04f 32ff 	mov.w	r2, #4294967295
 80092ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092f2:	f10a 0a01 	add.w	sl, sl, #1
 80092f6:	9304      	str	r3, [sp, #16]
 80092f8:	9307      	str	r3, [sp, #28]
 80092fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8009300:	4654      	mov	r4, sl
 8009302:	2205      	movs	r2, #5
 8009304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009308:	484e      	ldr	r0, [pc, #312]	@ (8009444 <_svfiprintf_r+0x1e4>)
 800930a:	f7f6 ff99 	bl	8000240 <memchr>
 800930e:	9a04      	ldr	r2, [sp, #16]
 8009310:	b9d8      	cbnz	r0, 800934a <_svfiprintf_r+0xea>
 8009312:	06d0      	lsls	r0, r2, #27
 8009314:	bf44      	itt	mi
 8009316:	2320      	movmi	r3, #32
 8009318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800931c:	0711      	lsls	r1, r2, #28
 800931e:	bf44      	itt	mi
 8009320:	232b      	movmi	r3, #43	@ 0x2b
 8009322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009326:	f89a 3000 	ldrb.w	r3, [sl]
 800932a:	2b2a      	cmp	r3, #42	@ 0x2a
 800932c:	d015      	beq.n	800935a <_svfiprintf_r+0xfa>
 800932e:	9a07      	ldr	r2, [sp, #28]
 8009330:	4654      	mov	r4, sl
 8009332:	2000      	movs	r0, #0
 8009334:	f04f 0c0a 	mov.w	ip, #10
 8009338:	4621      	mov	r1, r4
 800933a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800933e:	3b30      	subs	r3, #48	@ 0x30
 8009340:	2b09      	cmp	r3, #9
 8009342:	d94b      	bls.n	80093dc <_svfiprintf_r+0x17c>
 8009344:	b1b0      	cbz	r0, 8009374 <_svfiprintf_r+0x114>
 8009346:	9207      	str	r2, [sp, #28]
 8009348:	e014      	b.n	8009374 <_svfiprintf_r+0x114>
 800934a:	eba0 0308 	sub.w	r3, r0, r8
 800934e:	fa09 f303 	lsl.w	r3, r9, r3
 8009352:	4313      	orrs	r3, r2
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	46a2      	mov	sl, r4
 8009358:	e7d2      	b.n	8009300 <_svfiprintf_r+0xa0>
 800935a:	9b03      	ldr	r3, [sp, #12]
 800935c:	1d19      	adds	r1, r3, #4
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	9103      	str	r1, [sp, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	bfbb      	ittet	lt
 8009366:	425b      	neglt	r3, r3
 8009368:	f042 0202 	orrlt.w	r2, r2, #2
 800936c:	9307      	strge	r3, [sp, #28]
 800936e:	9307      	strlt	r3, [sp, #28]
 8009370:	bfb8      	it	lt
 8009372:	9204      	strlt	r2, [sp, #16]
 8009374:	7823      	ldrb	r3, [r4, #0]
 8009376:	2b2e      	cmp	r3, #46	@ 0x2e
 8009378:	d10a      	bne.n	8009390 <_svfiprintf_r+0x130>
 800937a:	7863      	ldrb	r3, [r4, #1]
 800937c:	2b2a      	cmp	r3, #42	@ 0x2a
 800937e:	d132      	bne.n	80093e6 <_svfiprintf_r+0x186>
 8009380:	9b03      	ldr	r3, [sp, #12]
 8009382:	1d1a      	adds	r2, r3, #4
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	9203      	str	r2, [sp, #12]
 8009388:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800938c:	3402      	adds	r4, #2
 800938e:	9305      	str	r3, [sp, #20]
 8009390:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009454 <_svfiprintf_r+0x1f4>
 8009394:	7821      	ldrb	r1, [r4, #0]
 8009396:	2203      	movs	r2, #3
 8009398:	4650      	mov	r0, sl
 800939a:	f7f6 ff51 	bl	8000240 <memchr>
 800939e:	b138      	cbz	r0, 80093b0 <_svfiprintf_r+0x150>
 80093a0:	9b04      	ldr	r3, [sp, #16]
 80093a2:	eba0 000a 	sub.w	r0, r0, sl
 80093a6:	2240      	movs	r2, #64	@ 0x40
 80093a8:	4082      	lsls	r2, r0
 80093aa:	4313      	orrs	r3, r2
 80093ac:	3401      	adds	r4, #1
 80093ae:	9304      	str	r3, [sp, #16]
 80093b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b4:	4824      	ldr	r0, [pc, #144]	@ (8009448 <_svfiprintf_r+0x1e8>)
 80093b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093ba:	2206      	movs	r2, #6
 80093bc:	f7f6 ff40 	bl	8000240 <memchr>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d036      	beq.n	8009432 <_svfiprintf_r+0x1d2>
 80093c4:	4b21      	ldr	r3, [pc, #132]	@ (800944c <_svfiprintf_r+0x1ec>)
 80093c6:	bb1b      	cbnz	r3, 8009410 <_svfiprintf_r+0x1b0>
 80093c8:	9b03      	ldr	r3, [sp, #12]
 80093ca:	3307      	adds	r3, #7
 80093cc:	f023 0307 	bic.w	r3, r3, #7
 80093d0:	3308      	adds	r3, #8
 80093d2:	9303      	str	r3, [sp, #12]
 80093d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d6:	4433      	add	r3, r6
 80093d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80093da:	e76a      	b.n	80092b2 <_svfiprintf_r+0x52>
 80093dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80093e0:	460c      	mov	r4, r1
 80093e2:	2001      	movs	r0, #1
 80093e4:	e7a8      	b.n	8009338 <_svfiprintf_r+0xd8>
 80093e6:	2300      	movs	r3, #0
 80093e8:	3401      	adds	r4, #1
 80093ea:	9305      	str	r3, [sp, #20]
 80093ec:	4619      	mov	r1, r3
 80093ee:	f04f 0c0a 	mov.w	ip, #10
 80093f2:	4620      	mov	r0, r4
 80093f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093f8:	3a30      	subs	r2, #48	@ 0x30
 80093fa:	2a09      	cmp	r2, #9
 80093fc:	d903      	bls.n	8009406 <_svfiprintf_r+0x1a6>
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d0c6      	beq.n	8009390 <_svfiprintf_r+0x130>
 8009402:	9105      	str	r1, [sp, #20]
 8009404:	e7c4      	b.n	8009390 <_svfiprintf_r+0x130>
 8009406:	fb0c 2101 	mla	r1, ip, r1, r2
 800940a:	4604      	mov	r4, r0
 800940c:	2301      	movs	r3, #1
 800940e:	e7f0      	b.n	80093f2 <_svfiprintf_r+0x192>
 8009410:	ab03      	add	r3, sp, #12
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	462a      	mov	r2, r5
 8009416:	4b0e      	ldr	r3, [pc, #56]	@ (8009450 <_svfiprintf_r+0x1f0>)
 8009418:	a904      	add	r1, sp, #16
 800941a:	4638      	mov	r0, r7
 800941c:	f7fd ff14 	bl	8007248 <_printf_float>
 8009420:	1c42      	adds	r2, r0, #1
 8009422:	4606      	mov	r6, r0
 8009424:	d1d6      	bne.n	80093d4 <_svfiprintf_r+0x174>
 8009426:	89ab      	ldrh	r3, [r5, #12]
 8009428:	065b      	lsls	r3, r3, #25
 800942a:	f53f af2d 	bmi.w	8009288 <_svfiprintf_r+0x28>
 800942e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009430:	e72c      	b.n	800928c <_svfiprintf_r+0x2c>
 8009432:	ab03      	add	r3, sp, #12
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	462a      	mov	r2, r5
 8009438:	4b05      	ldr	r3, [pc, #20]	@ (8009450 <_svfiprintf_r+0x1f0>)
 800943a:	a904      	add	r1, sp, #16
 800943c:	4638      	mov	r0, r7
 800943e:	f7fe f98b 	bl	8007758 <_printf_i>
 8009442:	e7ed      	b.n	8009420 <_svfiprintf_r+0x1c0>
 8009444:	08009f48 	.word	0x08009f48
 8009448:	08009f52 	.word	0x08009f52
 800944c:	08007249 	.word	0x08007249
 8009450:	080091a9 	.word	0x080091a9
 8009454:	08009f4e 	.word	0x08009f4e

08009458 <__sflush_r>:
 8009458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800945c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009460:	0716      	lsls	r6, r2, #28
 8009462:	4605      	mov	r5, r0
 8009464:	460c      	mov	r4, r1
 8009466:	d454      	bmi.n	8009512 <__sflush_r+0xba>
 8009468:	684b      	ldr	r3, [r1, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	dc02      	bgt.n	8009474 <__sflush_r+0x1c>
 800946e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009470:	2b00      	cmp	r3, #0
 8009472:	dd48      	ble.n	8009506 <__sflush_r+0xae>
 8009474:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009476:	2e00      	cmp	r6, #0
 8009478:	d045      	beq.n	8009506 <__sflush_r+0xae>
 800947a:	2300      	movs	r3, #0
 800947c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009480:	682f      	ldr	r7, [r5, #0]
 8009482:	6a21      	ldr	r1, [r4, #32]
 8009484:	602b      	str	r3, [r5, #0]
 8009486:	d030      	beq.n	80094ea <__sflush_r+0x92>
 8009488:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	0759      	lsls	r1, r3, #29
 800948e:	d505      	bpl.n	800949c <__sflush_r+0x44>
 8009490:	6863      	ldr	r3, [r4, #4]
 8009492:	1ad2      	subs	r2, r2, r3
 8009494:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009496:	b10b      	cbz	r3, 800949c <__sflush_r+0x44>
 8009498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800949a:	1ad2      	subs	r2, r2, r3
 800949c:	2300      	movs	r3, #0
 800949e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094a0:	6a21      	ldr	r1, [r4, #32]
 80094a2:	4628      	mov	r0, r5
 80094a4:	47b0      	blx	r6
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	d106      	bne.n	80094ba <__sflush_r+0x62>
 80094ac:	6829      	ldr	r1, [r5, #0]
 80094ae:	291d      	cmp	r1, #29
 80094b0:	d82b      	bhi.n	800950a <__sflush_r+0xb2>
 80094b2:	4a2a      	ldr	r2, [pc, #168]	@ (800955c <__sflush_r+0x104>)
 80094b4:	410a      	asrs	r2, r1
 80094b6:	07d6      	lsls	r6, r2, #31
 80094b8:	d427      	bmi.n	800950a <__sflush_r+0xb2>
 80094ba:	2200      	movs	r2, #0
 80094bc:	6062      	str	r2, [r4, #4]
 80094be:	04d9      	lsls	r1, r3, #19
 80094c0:	6922      	ldr	r2, [r4, #16]
 80094c2:	6022      	str	r2, [r4, #0]
 80094c4:	d504      	bpl.n	80094d0 <__sflush_r+0x78>
 80094c6:	1c42      	adds	r2, r0, #1
 80094c8:	d101      	bne.n	80094ce <__sflush_r+0x76>
 80094ca:	682b      	ldr	r3, [r5, #0]
 80094cc:	b903      	cbnz	r3, 80094d0 <__sflush_r+0x78>
 80094ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80094d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094d2:	602f      	str	r7, [r5, #0]
 80094d4:	b1b9      	cbz	r1, 8009506 <__sflush_r+0xae>
 80094d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094da:	4299      	cmp	r1, r3
 80094dc:	d002      	beq.n	80094e4 <__sflush_r+0x8c>
 80094de:	4628      	mov	r0, r5
 80094e0:	f7ff f9e0 	bl	80088a4 <_free_r>
 80094e4:	2300      	movs	r3, #0
 80094e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80094e8:	e00d      	b.n	8009506 <__sflush_r+0xae>
 80094ea:	2301      	movs	r3, #1
 80094ec:	4628      	mov	r0, r5
 80094ee:	47b0      	blx	r6
 80094f0:	4602      	mov	r2, r0
 80094f2:	1c50      	adds	r0, r2, #1
 80094f4:	d1c9      	bne.n	800948a <__sflush_r+0x32>
 80094f6:	682b      	ldr	r3, [r5, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d0c6      	beq.n	800948a <__sflush_r+0x32>
 80094fc:	2b1d      	cmp	r3, #29
 80094fe:	d001      	beq.n	8009504 <__sflush_r+0xac>
 8009500:	2b16      	cmp	r3, #22
 8009502:	d11e      	bne.n	8009542 <__sflush_r+0xea>
 8009504:	602f      	str	r7, [r5, #0]
 8009506:	2000      	movs	r0, #0
 8009508:	e022      	b.n	8009550 <__sflush_r+0xf8>
 800950a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800950e:	b21b      	sxth	r3, r3
 8009510:	e01b      	b.n	800954a <__sflush_r+0xf2>
 8009512:	690f      	ldr	r7, [r1, #16]
 8009514:	2f00      	cmp	r7, #0
 8009516:	d0f6      	beq.n	8009506 <__sflush_r+0xae>
 8009518:	0793      	lsls	r3, r2, #30
 800951a:	680e      	ldr	r6, [r1, #0]
 800951c:	bf08      	it	eq
 800951e:	694b      	ldreq	r3, [r1, #20]
 8009520:	600f      	str	r7, [r1, #0]
 8009522:	bf18      	it	ne
 8009524:	2300      	movne	r3, #0
 8009526:	eba6 0807 	sub.w	r8, r6, r7
 800952a:	608b      	str	r3, [r1, #8]
 800952c:	f1b8 0f00 	cmp.w	r8, #0
 8009530:	dde9      	ble.n	8009506 <__sflush_r+0xae>
 8009532:	6a21      	ldr	r1, [r4, #32]
 8009534:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009536:	4643      	mov	r3, r8
 8009538:	463a      	mov	r2, r7
 800953a:	4628      	mov	r0, r5
 800953c:	47b0      	blx	r6
 800953e:	2800      	cmp	r0, #0
 8009540:	dc08      	bgt.n	8009554 <__sflush_r+0xfc>
 8009542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800954a:	81a3      	strh	r3, [r4, #12]
 800954c:	f04f 30ff 	mov.w	r0, #4294967295
 8009550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009554:	4407      	add	r7, r0
 8009556:	eba8 0800 	sub.w	r8, r8, r0
 800955a:	e7e7      	b.n	800952c <__sflush_r+0xd4>
 800955c:	dfbffffe 	.word	0xdfbffffe

08009560 <_fflush_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	690b      	ldr	r3, [r1, #16]
 8009564:	4605      	mov	r5, r0
 8009566:	460c      	mov	r4, r1
 8009568:	b913      	cbnz	r3, 8009570 <_fflush_r+0x10>
 800956a:	2500      	movs	r5, #0
 800956c:	4628      	mov	r0, r5
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	b118      	cbz	r0, 800957a <_fflush_r+0x1a>
 8009572:	6a03      	ldr	r3, [r0, #32]
 8009574:	b90b      	cbnz	r3, 800957a <_fflush_r+0x1a>
 8009576:	f7fe fa9b 	bl	8007ab0 <__sinit>
 800957a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d0f3      	beq.n	800956a <_fflush_r+0xa>
 8009582:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009584:	07d0      	lsls	r0, r2, #31
 8009586:	d404      	bmi.n	8009592 <_fflush_r+0x32>
 8009588:	0599      	lsls	r1, r3, #22
 800958a:	d402      	bmi.n	8009592 <_fflush_r+0x32>
 800958c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800958e:	f7fe fba6 	bl	8007cde <__retarget_lock_acquire_recursive>
 8009592:	4628      	mov	r0, r5
 8009594:	4621      	mov	r1, r4
 8009596:	f7ff ff5f 	bl	8009458 <__sflush_r>
 800959a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800959c:	07da      	lsls	r2, r3, #31
 800959e:	4605      	mov	r5, r0
 80095a0:	d4e4      	bmi.n	800956c <_fflush_r+0xc>
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	059b      	lsls	r3, r3, #22
 80095a6:	d4e1      	bmi.n	800956c <_fflush_r+0xc>
 80095a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095aa:	f7fe fb99 	bl	8007ce0 <__retarget_lock_release_recursive>
 80095ae:	e7dd      	b.n	800956c <_fflush_r+0xc>

080095b0 <memmove>:
 80095b0:	4288      	cmp	r0, r1
 80095b2:	b510      	push	{r4, lr}
 80095b4:	eb01 0402 	add.w	r4, r1, r2
 80095b8:	d902      	bls.n	80095c0 <memmove+0x10>
 80095ba:	4284      	cmp	r4, r0
 80095bc:	4623      	mov	r3, r4
 80095be:	d807      	bhi.n	80095d0 <memmove+0x20>
 80095c0:	1e43      	subs	r3, r0, #1
 80095c2:	42a1      	cmp	r1, r4
 80095c4:	d008      	beq.n	80095d8 <memmove+0x28>
 80095c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095ce:	e7f8      	b.n	80095c2 <memmove+0x12>
 80095d0:	4402      	add	r2, r0
 80095d2:	4601      	mov	r1, r0
 80095d4:	428a      	cmp	r2, r1
 80095d6:	d100      	bne.n	80095da <memmove+0x2a>
 80095d8:	bd10      	pop	{r4, pc}
 80095da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095e2:	e7f7      	b.n	80095d4 <memmove+0x24>

080095e4 <_sbrk_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4d06      	ldr	r5, [pc, #24]	@ (8009600 <_sbrk_r+0x1c>)
 80095e8:	2300      	movs	r3, #0
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	602b      	str	r3, [r5, #0]
 80095f0:	f7f8 fa3e 	bl	8001a70 <_sbrk>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_sbrk_r+0x1a>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_sbrk_r+0x1a>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	20000f30 	.word	0x20000f30

08009604 <memcpy>:
 8009604:	440a      	add	r2, r1
 8009606:	4291      	cmp	r1, r2
 8009608:	f100 33ff 	add.w	r3, r0, #4294967295
 800960c:	d100      	bne.n	8009610 <memcpy+0xc>
 800960e:	4770      	bx	lr
 8009610:	b510      	push	{r4, lr}
 8009612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800961a:	4291      	cmp	r1, r2
 800961c:	d1f9      	bne.n	8009612 <memcpy+0xe>
 800961e:	bd10      	pop	{r4, pc}

08009620 <__assert_func>:
 8009620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009622:	4614      	mov	r4, r2
 8009624:	461a      	mov	r2, r3
 8009626:	4b09      	ldr	r3, [pc, #36]	@ (800964c <__assert_func+0x2c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4605      	mov	r5, r0
 800962c:	68d8      	ldr	r0, [r3, #12]
 800962e:	b954      	cbnz	r4, 8009646 <__assert_func+0x26>
 8009630:	4b07      	ldr	r3, [pc, #28]	@ (8009650 <__assert_func+0x30>)
 8009632:	461c      	mov	r4, r3
 8009634:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009638:	9100      	str	r1, [sp, #0]
 800963a:	462b      	mov	r3, r5
 800963c:	4905      	ldr	r1, [pc, #20]	@ (8009654 <__assert_func+0x34>)
 800963e:	f000 f86f 	bl	8009720 <fiprintf>
 8009642:	f000 f87f 	bl	8009744 <abort>
 8009646:	4b04      	ldr	r3, [pc, #16]	@ (8009658 <__assert_func+0x38>)
 8009648:	e7f4      	b.n	8009634 <__assert_func+0x14>
 800964a:	bf00      	nop
 800964c:	20000018 	.word	0x20000018
 8009650:	08009f9e 	.word	0x08009f9e
 8009654:	08009f70 	.word	0x08009f70
 8009658:	08009f63 	.word	0x08009f63

0800965c <_calloc_r>:
 800965c:	b570      	push	{r4, r5, r6, lr}
 800965e:	fba1 5402 	umull	r5, r4, r1, r2
 8009662:	b93c      	cbnz	r4, 8009674 <_calloc_r+0x18>
 8009664:	4629      	mov	r1, r5
 8009666:	f7ff f991 	bl	800898c <_malloc_r>
 800966a:	4606      	mov	r6, r0
 800966c:	b928      	cbnz	r0, 800967a <_calloc_r+0x1e>
 800966e:	2600      	movs	r6, #0
 8009670:	4630      	mov	r0, r6
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	220c      	movs	r2, #12
 8009676:	6002      	str	r2, [r0, #0]
 8009678:	e7f9      	b.n	800966e <_calloc_r+0x12>
 800967a:	462a      	mov	r2, r5
 800967c:	4621      	mov	r1, r4
 800967e:	f7fe fab0 	bl	8007be2 <memset>
 8009682:	e7f5      	b.n	8009670 <_calloc_r+0x14>

08009684 <__ascii_mbtowc>:
 8009684:	b082      	sub	sp, #8
 8009686:	b901      	cbnz	r1, 800968a <__ascii_mbtowc+0x6>
 8009688:	a901      	add	r1, sp, #4
 800968a:	b142      	cbz	r2, 800969e <__ascii_mbtowc+0x1a>
 800968c:	b14b      	cbz	r3, 80096a2 <__ascii_mbtowc+0x1e>
 800968e:	7813      	ldrb	r3, [r2, #0]
 8009690:	600b      	str	r3, [r1, #0]
 8009692:	7812      	ldrb	r2, [r2, #0]
 8009694:	1e10      	subs	r0, r2, #0
 8009696:	bf18      	it	ne
 8009698:	2001      	movne	r0, #1
 800969a:	b002      	add	sp, #8
 800969c:	4770      	bx	lr
 800969e:	4610      	mov	r0, r2
 80096a0:	e7fb      	b.n	800969a <__ascii_mbtowc+0x16>
 80096a2:	f06f 0001 	mvn.w	r0, #1
 80096a6:	e7f8      	b.n	800969a <__ascii_mbtowc+0x16>

080096a8 <_realloc_r>:
 80096a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ac:	4680      	mov	r8, r0
 80096ae:	4615      	mov	r5, r2
 80096b0:	460c      	mov	r4, r1
 80096b2:	b921      	cbnz	r1, 80096be <_realloc_r+0x16>
 80096b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096b8:	4611      	mov	r1, r2
 80096ba:	f7ff b967 	b.w	800898c <_malloc_r>
 80096be:	b92a      	cbnz	r2, 80096cc <_realloc_r+0x24>
 80096c0:	f7ff f8f0 	bl	80088a4 <_free_r>
 80096c4:	2400      	movs	r4, #0
 80096c6:	4620      	mov	r0, r4
 80096c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096cc:	f000 f841 	bl	8009752 <_malloc_usable_size_r>
 80096d0:	4285      	cmp	r5, r0
 80096d2:	4606      	mov	r6, r0
 80096d4:	d802      	bhi.n	80096dc <_realloc_r+0x34>
 80096d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80096da:	d8f4      	bhi.n	80096c6 <_realloc_r+0x1e>
 80096dc:	4629      	mov	r1, r5
 80096de:	4640      	mov	r0, r8
 80096e0:	f7ff f954 	bl	800898c <_malloc_r>
 80096e4:	4607      	mov	r7, r0
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d0ec      	beq.n	80096c4 <_realloc_r+0x1c>
 80096ea:	42b5      	cmp	r5, r6
 80096ec:	462a      	mov	r2, r5
 80096ee:	4621      	mov	r1, r4
 80096f0:	bf28      	it	cs
 80096f2:	4632      	movcs	r2, r6
 80096f4:	f7ff ff86 	bl	8009604 <memcpy>
 80096f8:	4621      	mov	r1, r4
 80096fa:	4640      	mov	r0, r8
 80096fc:	f7ff f8d2 	bl	80088a4 <_free_r>
 8009700:	463c      	mov	r4, r7
 8009702:	e7e0      	b.n	80096c6 <_realloc_r+0x1e>

08009704 <__ascii_wctomb>:
 8009704:	4603      	mov	r3, r0
 8009706:	4608      	mov	r0, r1
 8009708:	b141      	cbz	r1, 800971c <__ascii_wctomb+0x18>
 800970a:	2aff      	cmp	r2, #255	@ 0xff
 800970c:	d904      	bls.n	8009718 <__ascii_wctomb+0x14>
 800970e:	228a      	movs	r2, #138	@ 0x8a
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	f04f 30ff 	mov.w	r0, #4294967295
 8009716:	4770      	bx	lr
 8009718:	700a      	strb	r2, [r1, #0]
 800971a:	2001      	movs	r0, #1
 800971c:	4770      	bx	lr
	...

08009720 <fiprintf>:
 8009720:	b40e      	push	{r1, r2, r3}
 8009722:	b503      	push	{r0, r1, lr}
 8009724:	4601      	mov	r1, r0
 8009726:	ab03      	add	r3, sp, #12
 8009728:	4805      	ldr	r0, [pc, #20]	@ (8009740 <fiprintf+0x20>)
 800972a:	f853 2b04 	ldr.w	r2, [r3], #4
 800972e:	6800      	ldr	r0, [r0, #0]
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	f000 f83f 	bl	80097b4 <_vfiprintf_r>
 8009736:	b002      	add	sp, #8
 8009738:	f85d eb04 	ldr.w	lr, [sp], #4
 800973c:	b003      	add	sp, #12
 800973e:	4770      	bx	lr
 8009740:	20000018 	.word	0x20000018

08009744 <abort>:
 8009744:	b508      	push	{r3, lr}
 8009746:	2006      	movs	r0, #6
 8009748:	f000 fa08 	bl	8009b5c <raise>
 800974c:	2001      	movs	r0, #1
 800974e:	f7f8 f917 	bl	8001980 <_exit>

08009752 <_malloc_usable_size_r>:
 8009752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009756:	1f18      	subs	r0, r3, #4
 8009758:	2b00      	cmp	r3, #0
 800975a:	bfbc      	itt	lt
 800975c:	580b      	ldrlt	r3, [r1, r0]
 800975e:	18c0      	addlt	r0, r0, r3
 8009760:	4770      	bx	lr

08009762 <__sfputc_r>:
 8009762:	6893      	ldr	r3, [r2, #8]
 8009764:	3b01      	subs	r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	b410      	push	{r4}
 800976a:	6093      	str	r3, [r2, #8]
 800976c:	da08      	bge.n	8009780 <__sfputc_r+0x1e>
 800976e:	6994      	ldr	r4, [r2, #24]
 8009770:	42a3      	cmp	r3, r4
 8009772:	db01      	blt.n	8009778 <__sfputc_r+0x16>
 8009774:	290a      	cmp	r1, #10
 8009776:	d103      	bne.n	8009780 <__sfputc_r+0x1e>
 8009778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800977c:	f000 b932 	b.w	80099e4 <__swbuf_r>
 8009780:	6813      	ldr	r3, [r2, #0]
 8009782:	1c58      	adds	r0, r3, #1
 8009784:	6010      	str	r0, [r2, #0]
 8009786:	7019      	strb	r1, [r3, #0]
 8009788:	4608      	mov	r0, r1
 800978a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800978e:	4770      	bx	lr

08009790 <__sfputs_r>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	4606      	mov	r6, r0
 8009794:	460f      	mov	r7, r1
 8009796:	4614      	mov	r4, r2
 8009798:	18d5      	adds	r5, r2, r3
 800979a:	42ac      	cmp	r4, r5
 800979c:	d101      	bne.n	80097a2 <__sfputs_r+0x12>
 800979e:	2000      	movs	r0, #0
 80097a0:	e007      	b.n	80097b2 <__sfputs_r+0x22>
 80097a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a6:	463a      	mov	r2, r7
 80097a8:	4630      	mov	r0, r6
 80097aa:	f7ff ffda 	bl	8009762 <__sfputc_r>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	d1f3      	bne.n	800979a <__sfputs_r+0xa>
 80097b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080097b4 <_vfiprintf_r>:
 80097b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	460d      	mov	r5, r1
 80097ba:	b09d      	sub	sp, #116	@ 0x74
 80097bc:	4614      	mov	r4, r2
 80097be:	4698      	mov	r8, r3
 80097c0:	4606      	mov	r6, r0
 80097c2:	b118      	cbz	r0, 80097cc <_vfiprintf_r+0x18>
 80097c4:	6a03      	ldr	r3, [r0, #32]
 80097c6:	b90b      	cbnz	r3, 80097cc <_vfiprintf_r+0x18>
 80097c8:	f7fe f972 	bl	8007ab0 <__sinit>
 80097cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097ce:	07d9      	lsls	r1, r3, #31
 80097d0:	d405      	bmi.n	80097de <_vfiprintf_r+0x2a>
 80097d2:	89ab      	ldrh	r3, [r5, #12]
 80097d4:	059a      	lsls	r2, r3, #22
 80097d6:	d402      	bmi.n	80097de <_vfiprintf_r+0x2a>
 80097d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097da:	f7fe fa80 	bl	8007cde <__retarget_lock_acquire_recursive>
 80097de:	89ab      	ldrh	r3, [r5, #12]
 80097e0:	071b      	lsls	r3, r3, #28
 80097e2:	d501      	bpl.n	80097e8 <_vfiprintf_r+0x34>
 80097e4:	692b      	ldr	r3, [r5, #16]
 80097e6:	b99b      	cbnz	r3, 8009810 <_vfiprintf_r+0x5c>
 80097e8:	4629      	mov	r1, r5
 80097ea:	4630      	mov	r0, r6
 80097ec:	f000 f938 	bl	8009a60 <__swsetup_r>
 80097f0:	b170      	cbz	r0, 8009810 <_vfiprintf_r+0x5c>
 80097f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097f4:	07dc      	lsls	r4, r3, #31
 80097f6:	d504      	bpl.n	8009802 <_vfiprintf_r+0x4e>
 80097f8:	f04f 30ff 	mov.w	r0, #4294967295
 80097fc:	b01d      	add	sp, #116	@ 0x74
 80097fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009802:	89ab      	ldrh	r3, [r5, #12]
 8009804:	0598      	lsls	r0, r3, #22
 8009806:	d4f7      	bmi.n	80097f8 <_vfiprintf_r+0x44>
 8009808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800980a:	f7fe fa69 	bl	8007ce0 <__retarget_lock_release_recursive>
 800980e:	e7f3      	b.n	80097f8 <_vfiprintf_r+0x44>
 8009810:	2300      	movs	r3, #0
 8009812:	9309      	str	r3, [sp, #36]	@ 0x24
 8009814:	2320      	movs	r3, #32
 8009816:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800981a:	f8cd 800c 	str.w	r8, [sp, #12]
 800981e:	2330      	movs	r3, #48	@ 0x30
 8009820:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80099d0 <_vfiprintf_r+0x21c>
 8009824:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009828:	f04f 0901 	mov.w	r9, #1
 800982c:	4623      	mov	r3, r4
 800982e:	469a      	mov	sl, r3
 8009830:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009834:	b10a      	cbz	r2, 800983a <_vfiprintf_r+0x86>
 8009836:	2a25      	cmp	r2, #37	@ 0x25
 8009838:	d1f9      	bne.n	800982e <_vfiprintf_r+0x7a>
 800983a:	ebba 0b04 	subs.w	fp, sl, r4
 800983e:	d00b      	beq.n	8009858 <_vfiprintf_r+0xa4>
 8009840:	465b      	mov	r3, fp
 8009842:	4622      	mov	r2, r4
 8009844:	4629      	mov	r1, r5
 8009846:	4630      	mov	r0, r6
 8009848:	f7ff ffa2 	bl	8009790 <__sfputs_r>
 800984c:	3001      	adds	r0, #1
 800984e:	f000 80a7 	beq.w	80099a0 <_vfiprintf_r+0x1ec>
 8009852:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009854:	445a      	add	r2, fp
 8009856:	9209      	str	r2, [sp, #36]	@ 0x24
 8009858:	f89a 3000 	ldrb.w	r3, [sl]
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 809f 	beq.w	80099a0 <_vfiprintf_r+0x1ec>
 8009862:	2300      	movs	r3, #0
 8009864:	f04f 32ff 	mov.w	r2, #4294967295
 8009868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800986c:	f10a 0a01 	add.w	sl, sl, #1
 8009870:	9304      	str	r3, [sp, #16]
 8009872:	9307      	str	r3, [sp, #28]
 8009874:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009878:	931a      	str	r3, [sp, #104]	@ 0x68
 800987a:	4654      	mov	r4, sl
 800987c:	2205      	movs	r2, #5
 800987e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009882:	4853      	ldr	r0, [pc, #332]	@ (80099d0 <_vfiprintf_r+0x21c>)
 8009884:	f7f6 fcdc 	bl	8000240 <memchr>
 8009888:	9a04      	ldr	r2, [sp, #16]
 800988a:	b9d8      	cbnz	r0, 80098c4 <_vfiprintf_r+0x110>
 800988c:	06d1      	lsls	r1, r2, #27
 800988e:	bf44      	itt	mi
 8009890:	2320      	movmi	r3, #32
 8009892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009896:	0713      	lsls	r3, r2, #28
 8009898:	bf44      	itt	mi
 800989a:	232b      	movmi	r3, #43	@ 0x2b
 800989c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098a0:	f89a 3000 	ldrb.w	r3, [sl]
 80098a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80098a6:	d015      	beq.n	80098d4 <_vfiprintf_r+0x120>
 80098a8:	9a07      	ldr	r2, [sp, #28]
 80098aa:	4654      	mov	r4, sl
 80098ac:	2000      	movs	r0, #0
 80098ae:	f04f 0c0a 	mov.w	ip, #10
 80098b2:	4621      	mov	r1, r4
 80098b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098b8:	3b30      	subs	r3, #48	@ 0x30
 80098ba:	2b09      	cmp	r3, #9
 80098bc:	d94b      	bls.n	8009956 <_vfiprintf_r+0x1a2>
 80098be:	b1b0      	cbz	r0, 80098ee <_vfiprintf_r+0x13a>
 80098c0:	9207      	str	r2, [sp, #28]
 80098c2:	e014      	b.n	80098ee <_vfiprintf_r+0x13a>
 80098c4:	eba0 0308 	sub.w	r3, r0, r8
 80098c8:	fa09 f303 	lsl.w	r3, r9, r3
 80098cc:	4313      	orrs	r3, r2
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	46a2      	mov	sl, r4
 80098d2:	e7d2      	b.n	800987a <_vfiprintf_r+0xc6>
 80098d4:	9b03      	ldr	r3, [sp, #12]
 80098d6:	1d19      	adds	r1, r3, #4
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	9103      	str	r1, [sp, #12]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	bfbb      	ittet	lt
 80098e0:	425b      	neglt	r3, r3
 80098e2:	f042 0202 	orrlt.w	r2, r2, #2
 80098e6:	9307      	strge	r3, [sp, #28]
 80098e8:	9307      	strlt	r3, [sp, #28]
 80098ea:	bfb8      	it	lt
 80098ec:	9204      	strlt	r2, [sp, #16]
 80098ee:	7823      	ldrb	r3, [r4, #0]
 80098f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80098f2:	d10a      	bne.n	800990a <_vfiprintf_r+0x156>
 80098f4:	7863      	ldrb	r3, [r4, #1]
 80098f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80098f8:	d132      	bne.n	8009960 <_vfiprintf_r+0x1ac>
 80098fa:	9b03      	ldr	r3, [sp, #12]
 80098fc:	1d1a      	adds	r2, r3, #4
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	9203      	str	r2, [sp, #12]
 8009902:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009906:	3402      	adds	r4, #2
 8009908:	9305      	str	r3, [sp, #20]
 800990a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80099e0 <_vfiprintf_r+0x22c>
 800990e:	7821      	ldrb	r1, [r4, #0]
 8009910:	2203      	movs	r2, #3
 8009912:	4650      	mov	r0, sl
 8009914:	f7f6 fc94 	bl	8000240 <memchr>
 8009918:	b138      	cbz	r0, 800992a <_vfiprintf_r+0x176>
 800991a:	9b04      	ldr	r3, [sp, #16]
 800991c:	eba0 000a 	sub.w	r0, r0, sl
 8009920:	2240      	movs	r2, #64	@ 0x40
 8009922:	4082      	lsls	r2, r0
 8009924:	4313      	orrs	r3, r2
 8009926:	3401      	adds	r4, #1
 8009928:	9304      	str	r3, [sp, #16]
 800992a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800992e:	4829      	ldr	r0, [pc, #164]	@ (80099d4 <_vfiprintf_r+0x220>)
 8009930:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009934:	2206      	movs	r2, #6
 8009936:	f7f6 fc83 	bl	8000240 <memchr>
 800993a:	2800      	cmp	r0, #0
 800993c:	d03f      	beq.n	80099be <_vfiprintf_r+0x20a>
 800993e:	4b26      	ldr	r3, [pc, #152]	@ (80099d8 <_vfiprintf_r+0x224>)
 8009940:	bb1b      	cbnz	r3, 800998a <_vfiprintf_r+0x1d6>
 8009942:	9b03      	ldr	r3, [sp, #12]
 8009944:	3307      	adds	r3, #7
 8009946:	f023 0307 	bic.w	r3, r3, #7
 800994a:	3308      	adds	r3, #8
 800994c:	9303      	str	r3, [sp, #12]
 800994e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009950:	443b      	add	r3, r7
 8009952:	9309      	str	r3, [sp, #36]	@ 0x24
 8009954:	e76a      	b.n	800982c <_vfiprintf_r+0x78>
 8009956:	fb0c 3202 	mla	r2, ip, r2, r3
 800995a:	460c      	mov	r4, r1
 800995c:	2001      	movs	r0, #1
 800995e:	e7a8      	b.n	80098b2 <_vfiprintf_r+0xfe>
 8009960:	2300      	movs	r3, #0
 8009962:	3401      	adds	r4, #1
 8009964:	9305      	str	r3, [sp, #20]
 8009966:	4619      	mov	r1, r3
 8009968:	f04f 0c0a 	mov.w	ip, #10
 800996c:	4620      	mov	r0, r4
 800996e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009972:	3a30      	subs	r2, #48	@ 0x30
 8009974:	2a09      	cmp	r2, #9
 8009976:	d903      	bls.n	8009980 <_vfiprintf_r+0x1cc>
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0c6      	beq.n	800990a <_vfiprintf_r+0x156>
 800997c:	9105      	str	r1, [sp, #20]
 800997e:	e7c4      	b.n	800990a <_vfiprintf_r+0x156>
 8009980:	fb0c 2101 	mla	r1, ip, r1, r2
 8009984:	4604      	mov	r4, r0
 8009986:	2301      	movs	r3, #1
 8009988:	e7f0      	b.n	800996c <_vfiprintf_r+0x1b8>
 800998a:	ab03      	add	r3, sp, #12
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	462a      	mov	r2, r5
 8009990:	4b12      	ldr	r3, [pc, #72]	@ (80099dc <_vfiprintf_r+0x228>)
 8009992:	a904      	add	r1, sp, #16
 8009994:	4630      	mov	r0, r6
 8009996:	f7fd fc57 	bl	8007248 <_printf_float>
 800999a:	4607      	mov	r7, r0
 800999c:	1c78      	adds	r0, r7, #1
 800999e:	d1d6      	bne.n	800994e <_vfiprintf_r+0x19a>
 80099a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099a2:	07d9      	lsls	r1, r3, #31
 80099a4:	d405      	bmi.n	80099b2 <_vfiprintf_r+0x1fe>
 80099a6:	89ab      	ldrh	r3, [r5, #12]
 80099a8:	059a      	lsls	r2, r3, #22
 80099aa:	d402      	bmi.n	80099b2 <_vfiprintf_r+0x1fe>
 80099ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099ae:	f7fe f997 	bl	8007ce0 <__retarget_lock_release_recursive>
 80099b2:	89ab      	ldrh	r3, [r5, #12]
 80099b4:	065b      	lsls	r3, r3, #25
 80099b6:	f53f af1f 	bmi.w	80097f8 <_vfiprintf_r+0x44>
 80099ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099bc:	e71e      	b.n	80097fc <_vfiprintf_r+0x48>
 80099be:	ab03      	add	r3, sp, #12
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	462a      	mov	r2, r5
 80099c4:	4b05      	ldr	r3, [pc, #20]	@ (80099dc <_vfiprintf_r+0x228>)
 80099c6:	a904      	add	r1, sp, #16
 80099c8:	4630      	mov	r0, r6
 80099ca:	f7fd fec5 	bl	8007758 <_printf_i>
 80099ce:	e7e4      	b.n	800999a <_vfiprintf_r+0x1e6>
 80099d0:	08009f48 	.word	0x08009f48
 80099d4:	08009f52 	.word	0x08009f52
 80099d8:	08007249 	.word	0x08007249
 80099dc:	08009791 	.word	0x08009791
 80099e0:	08009f4e 	.word	0x08009f4e

080099e4 <__swbuf_r>:
 80099e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e6:	460e      	mov	r6, r1
 80099e8:	4614      	mov	r4, r2
 80099ea:	4605      	mov	r5, r0
 80099ec:	b118      	cbz	r0, 80099f6 <__swbuf_r+0x12>
 80099ee:	6a03      	ldr	r3, [r0, #32]
 80099f0:	b90b      	cbnz	r3, 80099f6 <__swbuf_r+0x12>
 80099f2:	f7fe f85d 	bl	8007ab0 <__sinit>
 80099f6:	69a3      	ldr	r3, [r4, #24]
 80099f8:	60a3      	str	r3, [r4, #8]
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	071a      	lsls	r2, r3, #28
 80099fe:	d501      	bpl.n	8009a04 <__swbuf_r+0x20>
 8009a00:	6923      	ldr	r3, [r4, #16]
 8009a02:	b943      	cbnz	r3, 8009a16 <__swbuf_r+0x32>
 8009a04:	4621      	mov	r1, r4
 8009a06:	4628      	mov	r0, r5
 8009a08:	f000 f82a 	bl	8009a60 <__swsetup_r>
 8009a0c:	b118      	cbz	r0, 8009a16 <__swbuf_r+0x32>
 8009a0e:	f04f 37ff 	mov.w	r7, #4294967295
 8009a12:	4638      	mov	r0, r7
 8009a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	6922      	ldr	r2, [r4, #16]
 8009a1a:	1a98      	subs	r0, r3, r2
 8009a1c:	6963      	ldr	r3, [r4, #20]
 8009a1e:	b2f6      	uxtb	r6, r6
 8009a20:	4283      	cmp	r3, r0
 8009a22:	4637      	mov	r7, r6
 8009a24:	dc05      	bgt.n	8009a32 <__swbuf_r+0x4e>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f7ff fd99 	bl	8009560 <_fflush_r>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d1ed      	bne.n	8009a0e <__swbuf_r+0x2a>
 8009a32:	68a3      	ldr	r3, [r4, #8]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	60a3      	str	r3, [r4, #8]
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	6022      	str	r2, [r4, #0]
 8009a3e:	701e      	strb	r6, [r3, #0]
 8009a40:	6962      	ldr	r2, [r4, #20]
 8009a42:	1c43      	adds	r3, r0, #1
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d004      	beq.n	8009a52 <__swbuf_r+0x6e>
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	07db      	lsls	r3, r3, #31
 8009a4c:	d5e1      	bpl.n	8009a12 <__swbuf_r+0x2e>
 8009a4e:	2e0a      	cmp	r6, #10
 8009a50:	d1df      	bne.n	8009a12 <__swbuf_r+0x2e>
 8009a52:	4621      	mov	r1, r4
 8009a54:	4628      	mov	r0, r5
 8009a56:	f7ff fd83 	bl	8009560 <_fflush_r>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d0d9      	beq.n	8009a12 <__swbuf_r+0x2e>
 8009a5e:	e7d6      	b.n	8009a0e <__swbuf_r+0x2a>

08009a60 <__swsetup_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4b29      	ldr	r3, [pc, #164]	@ (8009b08 <__swsetup_r+0xa8>)
 8009a64:	4605      	mov	r5, r0
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	460c      	mov	r4, r1
 8009a6a:	b118      	cbz	r0, 8009a74 <__swsetup_r+0x14>
 8009a6c:	6a03      	ldr	r3, [r0, #32]
 8009a6e:	b90b      	cbnz	r3, 8009a74 <__swsetup_r+0x14>
 8009a70:	f7fe f81e 	bl	8007ab0 <__sinit>
 8009a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a78:	0719      	lsls	r1, r3, #28
 8009a7a:	d422      	bmi.n	8009ac2 <__swsetup_r+0x62>
 8009a7c:	06da      	lsls	r2, r3, #27
 8009a7e:	d407      	bmi.n	8009a90 <__swsetup_r+0x30>
 8009a80:	2209      	movs	r2, #9
 8009a82:	602a      	str	r2, [r5, #0]
 8009a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8e:	e033      	b.n	8009af8 <__swsetup_r+0x98>
 8009a90:	0758      	lsls	r0, r3, #29
 8009a92:	d512      	bpl.n	8009aba <__swsetup_r+0x5a>
 8009a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a96:	b141      	cbz	r1, 8009aaa <__swsetup_r+0x4a>
 8009a98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a9c:	4299      	cmp	r1, r3
 8009a9e:	d002      	beq.n	8009aa6 <__swsetup_r+0x46>
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f7fe feff 	bl	80088a4 <_free_r>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ab0:	81a3      	strh	r3, [r4, #12]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	6063      	str	r3, [r4, #4]
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	f043 0308 	orr.w	r3, r3, #8
 8009ac0:	81a3      	strh	r3, [r4, #12]
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	b94b      	cbnz	r3, 8009ada <__swsetup_r+0x7a>
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ad0:	d003      	beq.n	8009ada <__swsetup_r+0x7a>
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	f000 f883 	bl	8009be0 <__smakebuf_r>
 8009ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ade:	f013 0201 	ands.w	r2, r3, #1
 8009ae2:	d00a      	beq.n	8009afa <__swsetup_r+0x9a>
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	60a2      	str	r2, [r4, #8]
 8009ae8:	6962      	ldr	r2, [r4, #20]
 8009aea:	4252      	negs	r2, r2
 8009aec:	61a2      	str	r2, [r4, #24]
 8009aee:	6922      	ldr	r2, [r4, #16]
 8009af0:	b942      	cbnz	r2, 8009b04 <__swsetup_r+0xa4>
 8009af2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009af6:	d1c5      	bne.n	8009a84 <__swsetup_r+0x24>
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
 8009afa:	0799      	lsls	r1, r3, #30
 8009afc:	bf58      	it	pl
 8009afe:	6962      	ldrpl	r2, [r4, #20]
 8009b00:	60a2      	str	r2, [r4, #8]
 8009b02:	e7f4      	b.n	8009aee <__swsetup_r+0x8e>
 8009b04:	2000      	movs	r0, #0
 8009b06:	e7f7      	b.n	8009af8 <__swsetup_r+0x98>
 8009b08:	20000018 	.word	0x20000018

08009b0c <_raise_r>:
 8009b0c:	291f      	cmp	r1, #31
 8009b0e:	b538      	push	{r3, r4, r5, lr}
 8009b10:	4605      	mov	r5, r0
 8009b12:	460c      	mov	r4, r1
 8009b14:	d904      	bls.n	8009b20 <_raise_r+0x14>
 8009b16:	2316      	movs	r3, #22
 8009b18:	6003      	str	r3, [r0, #0]
 8009b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1e:	bd38      	pop	{r3, r4, r5, pc}
 8009b20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b22:	b112      	cbz	r2, 8009b2a <_raise_r+0x1e>
 8009b24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b28:	b94b      	cbnz	r3, 8009b3e <_raise_r+0x32>
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f000 f830 	bl	8009b90 <_getpid_r>
 8009b30:	4622      	mov	r2, r4
 8009b32:	4601      	mov	r1, r0
 8009b34:	4628      	mov	r0, r5
 8009b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b3a:	f000 b817 	b.w	8009b6c <_kill_r>
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d00a      	beq.n	8009b58 <_raise_r+0x4c>
 8009b42:	1c59      	adds	r1, r3, #1
 8009b44:	d103      	bne.n	8009b4e <_raise_r+0x42>
 8009b46:	2316      	movs	r3, #22
 8009b48:	6003      	str	r3, [r0, #0]
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	e7e7      	b.n	8009b1e <_raise_r+0x12>
 8009b4e:	2100      	movs	r1, #0
 8009b50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009b54:	4620      	mov	r0, r4
 8009b56:	4798      	blx	r3
 8009b58:	2000      	movs	r0, #0
 8009b5a:	e7e0      	b.n	8009b1e <_raise_r+0x12>

08009b5c <raise>:
 8009b5c:	4b02      	ldr	r3, [pc, #8]	@ (8009b68 <raise+0xc>)
 8009b5e:	4601      	mov	r1, r0
 8009b60:	6818      	ldr	r0, [r3, #0]
 8009b62:	f7ff bfd3 	b.w	8009b0c <_raise_r>
 8009b66:	bf00      	nop
 8009b68:	20000018 	.word	0x20000018

08009b6c <_kill_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4d07      	ldr	r5, [pc, #28]	@ (8009b8c <_kill_r+0x20>)
 8009b70:	2300      	movs	r3, #0
 8009b72:	4604      	mov	r4, r0
 8009b74:	4608      	mov	r0, r1
 8009b76:	4611      	mov	r1, r2
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	f7f7 fef1 	bl	8001960 <_kill>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	d102      	bne.n	8009b88 <_kill_r+0x1c>
 8009b82:	682b      	ldr	r3, [r5, #0]
 8009b84:	b103      	cbz	r3, 8009b88 <_kill_r+0x1c>
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	bd38      	pop	{r3, r4, r5, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20000f30 	.word	0x20000f30

08009b90 <_getpid_r>:
 8009b90:	f7f7 bede 	b.w	8001950 <_getpid>

08009b94 <__swhatbuf_r>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	460c      	mov	r4, r1
 8009b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b9c:	2900      	cmp	r1, #0
 8009b9e:	b096      	sub	sp, #88	@ 0x58
 8009ba0:	4615      	mov	r5, r2
 8009ba2:	461e      	mov	r6, r3
 8009ba4:	da0d      	bge.n	8009bc2 <__swhatbuf_r+0x2e>
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009bac:	f04f 0100 	mov.w	r1, #0
 8009bb0:	bf14      	ite	ne
 8009bb2:	2340      	movne	r3, #64	@ 0x40
 8009bb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009bb8:	2000      	movs	r0, #0
 8009bba:	6031      	str	r1, [r6, #0]
 8009bbc:	602b      	str	r3, [r5, #0]
 8009bbe:	b016      	add	sp, #88	@ 0x58
 8009bc0:	bd70      	pop	{r4, r5, r6, pc}
 8009bc2:	466a      	mov	r2, sp
 8009bc4:	f000 f848 	bl	8009c58 <_fstat_r>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	dbec      	blt.n	8009ba6 <__swhatbuf_r+0x12>
 8009bcc:	9901      	ldr	r1, [sp, #4]
 8009bce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009bd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009bd6:	4259      	negs	r1, r3
 8009bd8:	4159      	adcs	r1, r3
 8009bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bde:	e7eb      	b.n	8009bb8 <__swhatbuf_r+0x24>

08009be0 <__smakebuf_r>:
 8009be0:	898b      	ldrh	r3, [r1, #12]
 8009be2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009be4:	079d      	lsls	r5, r3, #30
 8009be6:	4606      	mov	r6, r0
 8009be8:	460c      	mov	r4, r1
 8009bea:	d507      	bpl.n	8009bfc <__smakebuf_r+0x1c>
 8009bec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	6123      	str	r3, [r4, #16]
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	6163      	str	r3, [r4, #20]
 8009bf8:	b003      	add	sp, #12
 8009bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bfc:	ab01      	add	r3, sp, #4
 8009bfe:	466a      	mov	r2, sp
 8009c00:	f7ff ffc8 	bl	8009b94 <__swhatbuf_r>
 8009c04:	9f00      	ldr	r7, [sp, #0]
 8009c06:	4605      	mov	r5, r0
 8009c08:	4639      	mov	r1, r7
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f7fe febe 	bl	800898c <_malloc_r>
 8009c10:	b948      	cbnz	r0, 8009c26 <__smakebuf_r+0x46>
 8009c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c16:	059a      	lsls	r2, r3, #22
 8009c18:	d4ee      	bmi.n	8009bf8 <__smakebuf_r+0x18>
 8009c1a:	f023 0303 	bic.w	r3, r3, #3
 8009c1e:	f043 0302 	orr.w	r3, r3, #2
 8009c22:	81a3      	strh	r3, [r4, #12]
 8009c24:	e7e2      	b.n	8009bec <__smakebuf_r+0xc>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	6020      	str	r0, [r4, #0]
 8009c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c2e:	81a3      	strh	r3, [r4, #12]
 8009c30:	9b01      	ldr	r3, [sp, #4]
 8009c32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c36:	b15b      	cbz	r3, 8009c50 <__smakebuf_r+0x70>
 8009c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f000 f81d 	bl	8009c7c <_isatty_r>
 8009c42:	b128      	cbz	r0, 8009c50 <__smakebuf_r+0x70>
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	f023 0303 	bic.w	r3, r3, #3
 8009c4a:	f043 0301 	orr.w	r3, r3, #1
 8009c4e:	81a3      	strh	r3, [r4, #12]
 8009c50:	89a3      	ldrh	r3, [r4, #12]
 8009c52:	431d      	orrs	r5, r3
 8009c54:	81a5      	strh	r5, [r4, #12]
 8009c56:	e7cf      	b.n	8009bf8 <__smakebuf_r+0x18>

08009c58 <_fstat_r>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4d07      	ldr	r5, [pc, #28]	@ (8009c78 <_fstat_r+0x20>)
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	4604      	mov	r4, r0
 8009c60:	4608      	mov	r0, r1
 8009c62:	4611      	mov	r1, r2
 8009c64:	602b      	str	r3, [r5, #0]
 8009c66:	f7f7 fedb 	bl	8001a20 <_fstat>
 8009c6a:	1c43      	adds	r3, r0, #1
 8009c6c:	d102      	bne.n	8009c74 <_fstat_r+0x1c>
 8009c6e:	682b      	ldr	r3, [r5, #0]
 8009c70:	b103      	cbz	r3, 8009c74 <_fstat_r+0x1c>
 8009c72:	6023      	str	r3, [r4, #0]
 8009c74:	bd38      	pop	{r3, r4, r5, pc}
 8009c76:	bf00      	nop
 8009c78:	20000f30 	.word	0x20000f30

08009c7c <_isatty_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4d06      	ldr	r5, [pc, #24]	@ (8009c98 <_isatty_r+0x1c>)
 8009c80:	2300      	movs	r3, #0
 8009c82:	4604      	mov	r4, r0
 8009c84:	4608      	mov	r0, r1
 8009c86:	602b      	str	r3, [r5, #0]
 8009c88:	f7f7 feda 	bl	8001a40 <_isatty>
 8009c8c:	1c43      	adds	r3, r0, #1
 8009c8e:	d102      	bne.n	8009c96 <_isatty_r+0x1a>
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	b103      	cbz	r3, 8009c96 <_isatty_r+0x1a>
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	20000f30 	.word	0x20000f30

08009c9c <_init>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	bf00      	nop
 8009ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca2:	bc08      	pop	{r3}
 8009ca4:	469e      	mov	lr, r3
 8009ca6:	4770      	bx	lr

08009ca8 <_fini>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	bf00      	nop
 8009cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cae:	bc08      	pop	{r3}
 8009cb0:	469e      	mov	lr, r3
 8009cb2:	4770      	bx	lr
